
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007424  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407424  00407424  00017424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  0040742c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000308  204009d0  00407dfc  000209d0  2**2
                  ALLOC
  4 .stack        00002000  20400cd8  00408104  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402cd8  0040a104  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001be08  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003e06  00000000  00000000  0003c85f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000063a2  00000000  00000000  00040665  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a38  00000000  00000000  00046a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a80  00000000  00000000  0004743f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b324  00000000  00000000  00047ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010c3d  00000000  00000000  000531e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000906ac  00000000  00000000  00063e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002298  00000000  00000000  000f44cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 2c 40 20 41 17 40 00 3d 17 40 00 3d 17 40 00     .,@ A.@.=.@.=.@.
  400010:	3d 17 40 00 3d 17 40 00 3d 17 40 00 00 00 00 00     =.@.=.@.=.@.....
	...
  40002c:	3d 17 40 00 3d 17 40 00 00 00 00 00 3d 17 40 00     =.@.=.@.....=.@.
  40003c:	3d 17 40 00 3d 17 40 00 3d 17 40 00 3d 17 40 00     =.@.=.@.=.@.=.@.
  40004c:	39 1a 40 00 3d 17 40 00 3d 17 40 00 3d 17 40 00     9.@.=.@.=.@.=.@.
  40005c:	3d 17 40 00 3d 17 40 00 00 00 00 00 a1 12 40 00     =.@.=.@.......@.
  40006c:	b5 12 40 00 c9 12 40 00 3d 17 40 00 3d 17 40 00     ..@...@.=.@.=.@.
  40007c:	3d 17 40 00 dd 12 40 00 f1 12 40 00 3d 17 40 00     =.@...@...@.=.@.
  40008c:	3d 17 40 00 3d 17 40 00 3d 17 40 00 3d 17 40 00     =.@.=.@.=.@.=.@.
  40009c:	d9 19 40 00 01 1a 40 00 3d 17 40 00 3d 17 40 00     ..@...@.=.@.=.@.
  4000ac:	3d 17 40 00 3d 17 40 00 3d 17 40 00 3d 17 40 00     =.@.=.@.=.@.=.@.
  4000bc:	3d 17 40 00 3d 17 40 00 3d 17 40 00 3d 17 40 00     =.@.=.@.=.@.=.@.
  4000cc:	3d 17 40 00 00 00 00 00 3d 17 40 00 00 00 00 00     =.@.....=.@.....
  4000dc:	3d 17 40 00 3d 17 40 00 3d 17 40 00 3d 17 40 00     =.@.=.@.=.@.=.@.
  4000ec:	3d 17 40 00 3d 17 40 00 3d 17 40 00 3d 17 40 00     =.@.=.@.=.@.=.@.
  4000fc:	3d 17 40 00 3d 17 40 00 3d 17 40 00 3d 17 40 00     =.@.=.@.=.@.=.@.
  40010c:	3d 17 40 00 3d 17 40 00 00 00 00 00 00 00 00 00     =.@.=.@.........
  40011c:	00 00 00 00 3d 17 40 00 3d 17 40 00 3d 17 40 00     ....=.@.=.@.=.@.
  40012c:	3d 17 40 00 3d 17 40 00 00 00 00 00 3d 17 40 00     =.@.=.@.....=.@.
  40013c:	3d 17 40 00                                         =.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	0040742c 	.word	0x0040742c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040742c 	.word	0x0040742c
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	0040742c 	.word	0x0040742c
  4001a8:	00000000 	.word	0x00000000

004001ac <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4001ac:	4b03      	ldr	r3, [pc, #12]	; (4001bc <rtt_init+0x10>)
  4001ae:	681b      	ldr	r3, [r3, #0]
  4001b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4001b4:	4319      	orrs	r1, r3
  4001b6:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4001b8:	2000      	movs	r0, #0
  4001ba:	4770      	bx	lr
  4001bc:	204009ec 	.word	0x204009ec

004001c0 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4001c0:	b941      	cbnz	r1, 4001d4 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4001c2:	4a09      	ldr	r2, [pc, #36]	; (4001e8 <rtt_sel_source+0x28>)
  4001c4:	6813      	ldr	r3, [r2, #0]
  4001c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4001ca:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001cc:	6802      	ldr	r2, [r0, #0]
  4001ce:	4313      	orrs	r3, r2
  4001d0:	6003      	str	r3, [r0, #0]
  4001d2:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4001d4:	4a04      	ldr	r2, [pc, #16]	; (4001e8 <rtt_sel_source+0x28>)
  4001d6:	6813      	ldr	r3, [r2, #0]
  4001d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4001dc:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001de:	6802      	ldr	r2, [r0, #0]
  4001e0:	4313      	orrs	r3, r2
  4001e2:	6003      	str	r3, [r0, #0]
  4001e4:	4770      	bx	lr
  4001e6:	bf00      	nop
  4001e8:	204009ec 	.word	0x204009ec

004001ec <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  4001ec:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4001ee:	4b03      	ldr	r3, [pc, #12]	; (4001fc <rtt_enable_interrupt+0x10>)
  4001f0:	681b      	ldr	r3, [r3, #0]
  4001f2:	4319      	orrs	r1, r3
  4001f4:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  4001f6:	6001      	str	r1, [r0, #0]
  4001f8:	4770      	bx	lr
  4001fa:	bf00      	nop
  4001fc:	204009ec 	.word	0x204009ec

00400200 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400200:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  400202:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400206:	4b02      	ldr	r3, [pc, #8]	; (400210 <rtt_disable_interrupt+0x10>)
  400208:	681b      	ldr	r3, [r3, #0]
  40020a:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  40020c:	6001      	str	r1, [r0, #0]
  40020e:	4770      	bx	lr
  400210:	204009ec 	.word	0x204009ec

00400214 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400214:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400216:	6883      	ldr	r3, [r0, #8]
  400218:	429a      	cmp	r2, r3
  40021a:	d003      	beq.n	400224 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  40021c:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40021e:	6883      	ldr	r3, [r0, #8]
  400220:	4293      	cmp	r3, r2
  400222:	d1fb      	bne.n	40021c <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400224:	4618      	mov	r0, r3
  400226:	4770      	bx	lr

00400228 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400228:	68c0      	ldr	r0, [r0, #12]
}
  40022a:	4770      	bx	lr

0040022c <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  40022c:	b570      	push	{r4, r5, r6, lr}
  40022e:	4606      	mov	r6, r0
  400230:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  400232:	6804      	ldr	r4, [r0, #0]
  400234:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400238:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40023c:	4809      	ldr	r0, [pc, #36]	; (400264 <rtt_write_alarm_time+0x38>)
  40023e:	4b0a      	ldr	r3, [pc, #40]	; (400268 <rtt_write_alarm_time+0x3c>)
  400240:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400242:	b92d      	cbnz	r5, 400250 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400244:	f04f 33ff 	mov.w	r3, #4294967295
  400248:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  40024a:	b924      	cbnz	r4, 400256 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  40024c:	2000      	movs	r0, #0
  40024e:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400250:	3d01      	subs	r5, #1
  400252:	6075      	str	r5, [r6, #4]
  400254:	e7f9      	b.n	40024a <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400256:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40025a:	4802      	ldr	r0, [pc, #8]	; (400264 <rtt_write_alarm_time+0x38>)
  40025c:	4b03      	ldr	r3, [pc, #12]	; (40026c <rtt_write_alarm_time+0x40>)
  40025e:	4798      	blx	r3
  400260:	e7f4      	b.n	40024c <rtt_write_alarm_time+0x20>
  400262:	bf00      	nop
  400264:	400e1830 	.word	0x400e1830
  400268:	00400201 	.word	0x00400201
  40026c:	004001ed 	.word	0x004001ed

00400270 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400270:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400272:	4b07      	ldr	r3, [pc, #28]	; (400290 <spi_enable_clock+0x20>)
  400274:	4298      	cmp	r0, r3
  400276:	d003      	beq.n	400280 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  400278:	4b06      	ldr	r3, [pc, #24]	; (400294 <spi_enable_clock+0x24>)
  40027a:	4298      	cmp	r0, r3
  40027c:	d004      	beq.n	400288 <spi_enable_clock+0x18>
  40027e:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400280:	2015      	movs	r0, #21
  400282:	4b05      	ldr	r3, [pc, #20]	; (400298 <spi_enable_clock+0x28>)
  400284:	4798      	blx	r3
  400286:	bd08      	pop	{r3, pc}
  400288:	202a      	movs	r0, #42	; 0x2a
  40028a:	4b03      	ldr	r3, [pc, #12]	; (400298 <spi_enable_clock+0x28>)
  40028c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  40028e:	e7f6      	b.n	40027e <spi_enable_clock+0xe>
  400290:	40008000 	.word	0x40008000
  400294:	40058000 	.word	0x40058000
  400298:	00401425 	.word	0x00401425

0040029c <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40029c:	6843      	ldr	r3, [r0, #4]
  40029e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4002a2:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4002a4:	6843      	ldr	r3, [r0, #4]
  4002a6:	0409      	lsls	r1, r1, #16
  4002a8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4002ac:	4319      	orrs	r1, r3
  4002ae:	6041      	str	r1, [r0, #4]
  4002b0:	4770      	bx	lr

004002b2 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4002b2:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4002b4:	f643 2499 	movw	r4, #15001	; 0x3a99
  4002b8:	6905      	ldr	r5, [r0, #16]
  4002ba:	f015 0f02 	tst.w	r5, #2
  4002be:	d103      	bne.n	4002c8 <spi_write+0x16>
		if (!timeout--) {
  4002c0:	3c01      	subs	r4, #1
  4002c2:	d1f9      	bne.n	4002b8 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4002c4:	2001      	movs	r0, #1
  4002c6:	e00c      	b.n	4002e2 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4002c8:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4002ca:	f014 0f02 	tst.w	r4, #2
  4002ce:	d006      	beq.n	4002de <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4002d0:	0412      	lsls	r2, r2, #16
  4002d2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4002d6:	4311      	orrs	r1, r2
		if (uc_last) {
  4002d8:	b10b      	cbz	r3, 4002de <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4002da:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4002de:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bc30      	pop	{r4, r5}
  4002e4:	4770      	bx	lr

004002e6 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4002e6:	b932      	cbnz	r2, 4002f6 <spi_set_clock_polarity+0x10>
  4002e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4002ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002ee:	f023 0301 	bic.w	r3, r3, #1
  4002f2:	6303      	str	r3, [r0, #48]	; 0x30
  4002f4:	4770      	bx	lr
  4002f6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4002fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002fc:	f043 0301 	orr.w	r3, r3, #1
  400300:	6303      	str	r3, [r0, #48]	; 0x30
  400302:	4770      	bx	lr

00400304 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400304:	b932      	cbnz	r2, 400314 <spi_set_clock_phase+0x10>
  400306:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40030a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40030c:	f023 0302 	bic.w	r3, r3, #2
  400310:	6303      	str	r3, [r0, #48]	; 0x30
  400312:	4770      	bx	lr
  400314:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400318:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40031a:	f043 0302 	orr.w	r3, r3, #2
  40031e:	6303      	str	r3, [r0, #48]	; 0x30
  400320:	4770      	bx	lr

00400322 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400322:	2a04      	cmp	r2, #4
  400324:	d003      	beq.n	40032e <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400326:	b16a      	cbz	r2, 400344 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400328:	2a08      	cmp	r2, #8
  40032a:	d016      	beq.n	40035a <spi_configure_cs_behavior+0x38>
  40032c:	4770      	bx	lr
  40032e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400332:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400334:	f023 0308 	bic.w	r3, r3, #8
  400338:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40033a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40033c:	f043 0304 	orr.w	r3, r3, #4
  400340:	6303      	str	r3, [r0, #48]	; 0x30
  400342:	4770      	bx	lr
  400344:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400348:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40034a:	f023 0308 	bic.w	r3, r3, #8
  40034e:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400350:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400352:	f023 0304 	bic.w	r3, r3, #4
  400356:	6303      	str	r3, [r0, #48]	; 0x30
  400358:	4770      	bx	lr
  40035a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40035e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400360:	f043 0308 	orr.w	r3, r3, #8
  400364:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  400366:	e7e1      	b.n	40032c <spi_configure_cs_behavior+0xa>

00400368 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400368:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40036c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40036e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400372:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400374:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400376:	431a      	orrs	r2, r3
  400378:	630a      	str	r2, [r1, #48]	; 0x30
  40037a:	4770      	bx	lr

0040037c <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40037c:	1e43      	subs	r3, r0, #1
  40037e:	4419      	add	r1, r3
  400380:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400384:	1e43      	subs	r3, r0, #1
  400386:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400388:	bf94      	ite	ls
  40038a:	b200      	sxthls	r0, r0
		return -1;
  40038c:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400390:	4770      	bx	lr

00400392 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  400392:	b17a      	cbz	r2, 4003b4 <spi_set_baudrate_div+0x22>
{
  400394:	b410      	push	{r4}
  400396:	4614      	mov	r4, r2
  400398:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40039c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40039e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4003a2:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4003a4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4003a6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4003aa:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4003ac:	2000      	movs	r0, #0
}
  4003ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003b2:	4770      	bx	lr
        return -1;
  4003b4:	f04f 30ff 	mov.w	r0, #4294967295
  4003b8:	4770      	bx	lr

004003ba <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4003ba:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4003bc:	0189      	lsls	r1, r1, #6
  4003be:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4003c0:	2402      	movs	r4, #2
  4003c2:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4003c4:	f04f 31ff 	mov.w	r1, #4294967295
  4003c8:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4003ca:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4003cc:	605a      	str	r2, [r3, #4]
}
  4003ce:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003d2:	4770      	bx	lr

004003d4 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4003d4:	0189      	lsls	r1, r1, #6
  4003d6:	2305      	movs	r3, #5
  4003d8:	5043      	str	r3, [r0, r1]
  4003da:	4770      	bx	lr

004003dc <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  4003dc:	0189      	lsls	r1, r1, #6
  4003de:	2302      	movs	r3, #2
  4003e0:	5043      	str	r3, [r0, r1]
  4003e2:	4770      	bx	lr

004003e4 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4003e4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4003e8:	61ca      	str	r2, [r1, #28]
  4003ea:	4770      	bx	lr

004003ec <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4003ec:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4003f0:	624a      	str	r2, [r1, #36]	; 0x24
  4003f2:	4770      	bx	lr

004003f4 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4003f4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4003f8:	6a08      	ldr	r0, [r1, #32]
}
  4003fa:	4770      	bx	lr

004003fc <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4003fc:	b4f0      	push	{r4, r5, r6, r7}
  4003fe:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400400:	2402      	movs	r4, #2
  400402:	9401      	str	r4, [sp, #4]
  400404:	2408      	movs	r4, #8
  400406:	9402      	str	r4, [sp, #8]
  400408:	2420      	movs	r4, #32
  40040a:	9403      	str	r4, [sp, #12]
  40040c:	2480      	movs	r4, #128	; 0x80
  40040e:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400410:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400412:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400414:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400416:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40041a:	d814      	bhi.n	400446 <tc_find_mck_divisor+0x4a>
  40041c:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  40041e:	42a0      	cmp	r0, r4
  400420:	d217      	bcs.n	400452 <tc_find_mck_divisor+0x56>
  400422:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400424:	af01      	add	r7, sp, #4
  400426:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40042a:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  40042e:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400430:	4284      	cmp	r4, r0
  400432:	d30a      	bcc.n	40044a <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400434:	4286      	cmp	r6, r0
  400436:	d90d      	bls.n	400454 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400438:	3501      	adds	r5, #1
	for (ul_index = 0;
  40043a:	2d05      	cmp	r5, #5
  40043c:	d1f3      	bne.n	400426 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  40043e:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400440:	b006      	add	sp, #24
  400442:	bcf0      	pop	{r4, r5, r6, r7}
  400444:	4770      	bx	lr
			return 0;
  400446:	2000      	movs	r0, #0
  400448:	e7fa      	b.n	400440 <tc_find_mck_divisor+0x44>
  40044a:	2000      	movs	r0, #0
  40044c:	e7f8      	b.n	400440 <tc_find_mck_divisor+0x44>
	return 1;
  40044e:	2001      	movs	r0, #1
  400450:	e7f6      	b.n	400440 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400452:	2500      	movs	r5, #0
	if (p_uldiv) {
  400454:	b12a      	cbz	r2, 400462 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400456:	a906      	add	r1, sp, #24
  400458:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  40045c:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400460:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400462:	2b00      	cmp	r3, #0
  400464:	d0f3      	beq.n	40044e <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400466:	601d      	str	r5, [r3, #0]
	return 1;
  400468:	2001      	movs	r0, #1
  40046a:	e7e9      	b.n	400440 <tc_find_mck_divisor+0x44>

0040046c <but1_callback>:
    gfx_mono_draw_string(str, 43, 4, &sysfont);
}

void but1_callback(void)
{
    but1_flag = 1;
  40046c:	2201      	movs	r2, #1
  40046e:	4b01      	ldr	r3, [pc, #4]	; (400474 <but1_callback+0x8>)
  400470:	701a      	strb	r2, [r3, #0]
  400472:	4770      	bx	lr
  400474:	204009f0 	.word	0x204009f0

00400478 <but2_callback>:
    but1_flag = val;
}

void but2_callback(void)
{
    but2_flag = 1;
  400478:	2201      	movs	r2, #1
  40047a:	4b01      	ldr	r3, [pc, #4]	; (400480 <but2_callback+0x8>)
  40047c:	701a      	strb	r2, [r3, #0]
  40047e:	4770      	bx	lr
  400480:	204009f1 	.word	0x204009f1

00400484 <but3_callback>:
    but2_flag = val;
}

void but3_callback(void)
{
    but3_flag = 1;
  400484:	2201      	movs	r2, #1
  400486:	4b01      	ldr	r3, [pc, #4]	; (40048c <but3_callback+0x8>)
  400488:	701a      	strb	r2, [r3, #0]
  40048a:	4770      	bx	lr
  40048c:	204009f2 	.word	0x204009f2

00400490 <TC_init>:
{
  400490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400494:	b085      	sub	sp, #20
  400496:	4606      	mov	r6, r0
  400498:	460c      	mov	r4, r1
  40049a:	4617      	mov	r7, r2
  40049c:	4698      	mov	r8, r3
    pmc_enable_periph_clk(ID_TC);
  40049e:	4608      	mov	r0, r1
  4004a0:	4b1c      	ldr	r3, [pc, #112]	; (400514 <TC_init+0x84>)
  4004a2:	4798      	blx	r3
    tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4004a4:	4d1c      	ldr	r5, [pc, #112]	; (400518 <TC_init+0x88>)
  4004a6:	9500      	str	r5, [sp, #0]
  4004a8:	ab02      	add	r3, sp, #8
  4004aa:	aa03      	add	r2, sp, #12
  4004ac:	4629      	mov	r1, r5
  4004ae:	4640      	mov	r0, r8
  4004b0:	f8df 9080 	ldr.w	r9, [pc, #128]	; 400534 <TC_init+0xa4>
  4004b4:	47c8      	blx	r9
    tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  4004b6:	9a02      	ldr	r2, [sp, #8]
  4004b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4004bc:	4639      	mov	r1, r7
  4004be:	4630      	mov	r0, r6
  4004c0:	4b16      	ldr	r3, [pc, #88]	; (40051c <TC_init+0x8c>)
  4004c2:	4798      	blx	r3
    tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  4004c4:	9a03      	ldr	r2, [sp, #12]
  4004c6:	fbb5 f2f2 	udiv	r2, r5, r2
  4004ca:	fbb2 f2f8 	udiv	r2, r2, r8
  4004ce:	4639      	mov	r1, r7
  4004d0:	4630      	mov	r0, r6
  4004d2:	4b13      	ldr	r3, [pc, #76]	; (400520 <TC_init+0x90>)
  4004d4:	4798      	blx	r3
    NVIC_SetPriority(ID_TC, 4);
  4004d6:	b263      	sxtb	r3, r4
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  4004d8:	2b00      	cmp	r3, #0
  4004da:	db13      	blt.n	400504 <TC_init+0x74>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4004dc:	4a11      	ldr	r2, [pc, #68]	; (400524 <TC_init+0x94>)
  4004de:	2180      	movs	r1, #128	; 0x80
  4004e0:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4004e2:	095b      	lsrs	r3, r3, #5
  4004e4:	f004 041f 	and.w	r4, r4, #31
  4004e8:	2201      	movs	r2, #1
  4004ea:	fa02 f404 	lsl.w	r4, r2, r4
  4004ee:	4a0e      	ldr	r2, [pc, #56]	; (400528 <TC_init+0x98>)
  4004f0:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  4004f4:	2210      	movs	r2, #16
  4004f6:	4639      	mov	r1, r7
  4004f8:	4630      	mov	r0, r6
  4004fa:	4b0c      	ldr	r3, [pc, #48]	; (40052c <TC_init+0x9c>)
  4004fc:	4798      	blx	r3
}
  4004fe:	b005      	add	sp, #20
  400500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400504:	f004 010f 	and.w	r1, r4, #15
  400508:	4a09      	ldr	r2, [pc, #36]	; (400530 <TC_init+0xa0>)
  40050a:	440a      	add	r2, r1
  40050c:	2180      	movs	r1, #128	; 0x80
  40050e:	7611      	strb	r1, [r2, #24]
  400510:	e7e7      	b.n	4004e2 <TC_init+0x52>
  400512:	bf00      	nop
  400514:	00401425 	.word	0x00401425
  400518:	11e1a300 	.word	0x11e1a300
  40051c:	004003bb 	.word	0x004003bb
  400520:	004003e5 	.word	0x004003e5
  400524:	e000e400 	.word	0xe000e400
  400528:	e000e100 	.word	0xe000e100
  40052c:	004003ed 	.word	0x004003ed
  400530:	e000ecfc 	.word	0xe000ecfc
  400534:	004003fd 	.word	0x004003fd

00400538 <RTT_init>:
{
  400538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40053c:	ed2d 8b02 	vpush	{d8}
  400540:	b082      	sub	sp, #8
  400542:	ee08 0a10 	vmov	s16, r0
  400546:	4688      	mov	r8, r1
  400548:	4617      	mov	r7, r2
    rtt_sel_source(RTT, false);
  40054a:	4c20      	ldr	r4, [pc, #128]	; (4005cc <RTT_init+0x94>)
  40054c:	2100      	movs	r1, #0
  40054e:	4620      	mov	r0, r4
  400550:	4b1f      	ldr	r3, [pc, #124]	; (4005d0 <RTT_init+0x98>)
  400552:	4798      	blx	r3
    uint16_t pllPreScale = (int)(((float)32768) / freqPrescale);
  400554:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 4005d4 <RTT_init+0x9c>
  400558:	eec7 7a08 	vdiv.f32	s15, s14, s16
  40055c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  400560:	edcd 7a01 	vstr	s15, [sp, #4]
    rtt_init(RTT, pllPreScale);
  400564:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  400568:	4620      	mov	r0, r4
  40056a:	4b1b      	ldr	r3, [pc, #108]	; (4005d8 <RTT_init+0xa0>)
  40056c:	4798      	blx	r3
    if (rttIRQSource & RTT_MR_ALMIEN)
  40056e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  400572:	d116      	bne.n	4005a2 <RTT_init+0x6a>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400574:	4b19      	ldr	r3, [pc, #100]	; (4005dc <RTT_init+0xa4>)
  400576:	2208      	movs	r2, #8
  400578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40057c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400580:	2180      	movs	r1, #128	; 0x80
  400582:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400586:	601a      	str	r2, [r3, #0]
    if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  400588:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  40058c:	d119      	bne.n	4005c2 <RTT_init+0x8a>
        rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  40058e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  400592:	480e      	ldr	r0, [pc, #56]	; (4005cc <RTT_init+0x94>)
  400594:	4b12      	ldr	r3, [pc, #72]	; (4005e0 <RTT_init+0xa8>)
  400596:	4798      	blx	r3
}
  400598:	b002      	add	sp, #8
  40059a:	ecbd 8b02 	vpop	{d8}
  40059e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ul_previous_time = rtt_read_timer_value(RTT);
  4005a2:	4620      	mov	r0, r4
  4005a4:	4b0f      	ldr	r3, [pc, #60]	; (4005e4 <RTT_init+0xac>)
  4005a6:	4798      	blx	r3
  4005a8:	4604      	mov	r4, r0
        while (ul_previous_time == rtt_read_timer_value(RTT))
  4005aa:	4e08      	ldr	r6, [pc, #32]	; (4005cc <RTT_init+0x94>)
  4005ac:	4d0d      	ldr	r5, [pc, #52]	; (4005e4 <RTT_init+0xac>)
  4005ae:	4630      	mov	r0, r6
  4005b0:	47a8      	blx	r5
  4005b2:	4284      	cmp	r4, r0
  4005b4:	d0fb      	beq.n	4005ae <RTT_init+0x76>
        rtt_write_alarm_time(RTT, IrqNPulses + ul_previous_time);
  4005b6:	eb04 0108 	add.w	r1, r4, r8
  4005ba:	4804      	ldr	r0, [pc, #16]	; (4005cc <RTT_init+0x94>)
  4005bc:	4b0a      	ldr	r3, [pc, #40]	; (4005e8 <RTT_init+0xb0>)
  4005be:	4798      	blx	r3
  4005c0:	e7d8      	b.n	400574 <RTT_init+0x3c>
        rtt_enable_interrupt(RTT, rttIRQSource);
  4005c2:	4639      	mov	r1, r7
  4005c4:	4801      	ldr	r0, [pc, #4]	; (4005cc <RTT_init+0x94>)
  4005c6:	4b09      	ldr	r3, [pc, #36]	; (4005ec <RTT_init+0xb4>)
  4005c8:	4798      	blx	r3
  4005ca:	e7e5      	b.n	400598 <RTT_init+0x60>
  4005cc:	400e1830 	.word	0x400e1830
  4005d0:	004001c1 	.word	0x004001c1
  4005d4:	47000000 	.word	0x47000000
  4005d8:	004001ad 	.word	0x004001ad
  4005dc:	e000e100 	.word	0xe000e100
  4005e0:	00400201 	.word	0x00400201
  4005e4:	00400215 	.word	0x00400215
  4005e8:	0040022d 	.word	0x0040022d
  4005ec:	004001ed 	.word	0x004001ed

004005f0 <init>:
{
  4005f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005f4:	b083      	sub	sp, #12
    board_init();
  4005f6:	4b50      	ldr	r3, [pc, #320]	; (400738 <init+0x148>)
  4005f8:	4798      	blx	r3
    sysclk_init();
  4005fa:	4b50      	ldr	r3, [pc, #320]	; (40073c <init+0x14c>)
  4005fc:	4798      	blx	r3
    gfx_mono_ssd1306_init();
  4005fe:	4b50      	ldr	r3, [pc, #320]	; (400740 <init+0x150>)
  400600:	4798      	blx	r3
    WDT->WDT_MR = WDT_MR_WDDIS;
  400602:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400606:	4b4f      	ldr	r3, [pc, #316]	; (400744 <init+0x154>)
  400608:	605a      	str	r2, [r3, #4]
    pmc_enable_periph_clk(ID_PIOA);
  40060a:	200a      	movs	r0, #10
  40060c:	4c4e      	ldr	r4, [pc, #312]	; (400748 <init+0x158>)
  40060e:	47a0      	blx	r4
    pmc_enable_periph_clk(ID_PIOB);
  400610:	200b      	movs	r0, #11
  400612:	47a0      	blx	r4
    pmc_enable_periph_clk(ID_PIOC);
  400614:	200c      	movs	r0, #12
  400616:	47a0      	blx	r4
    pmc_enable_periph_clk(ID_PIOD);
  400618:	2010      	movs	r0, #16
  40061a:	47a0      	blx	r4
    pio_configure(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  40061c:	4c4b      	ldr	r4, [pc, #300]	; (40074c <init+0x15c>)
  40061e:	2309      	movs	r3, #9
  400620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400624:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400628:	4620      	mov	r0, r4
  40062a:	4d49      	ldr	r5, [pc, #292]	; (400750 <init+0x160>)
  40062c:	47a8      	blx	r5
    pio_set_debounce_filter(BUT1_PIO, BUT1_PIO_IDX_MASK, 60);
  40062e:	223c      	movs	r2, #60	; 0x3c
  400630:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400634:	4620      	mov	r0, r4
  400636:	f8df b138 	ldr.w	fp, [pc, #312]	; 400770 <init+0x180>
  40063a:	47d8      	blx	fp
    pio_handler_set(BUT1_PIO,
  40063c:	4b45      	ldr	r3, [pc, #276]	; (400754 <init+0x164>)
  40063e:	9300      	str	r3, [sp, #0]
  400640:	2350      	movs	r3, #80	; 0x50
  400642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400646:	2110      	movs	r1, #16
  400648:	4620      	mov	r0, r4
  40064a:	f8df a128 	ldr.w	sl, [pc, #296]	; 400774 <init+0x184>
  40064e:	47d0      	blx	sl
    pio_enable_interrupt(BUT1_PIO, BUT1_PIO_IDX_MASK);
  400650:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400654:	4620      	mov	r0, r4
  400656:	f8df 9120 	ldr.w	r9, [pc, #288]	; 400778 <init+0x188>
  40065a:	47c8      	blx	r9
    pio_get_interrupt_status(BUT1_PIO);
  40065c:	4620      	mov	r0, r4
  40065e:	f8df 811c 	ldr.w	r8, [pc, #284]	; 40077c <init+0x18c>
  400662:	47c0      	blx	r8
  400664:	4e3c      	ldr	r6, [pc, #240]	; (400758 <init+0x168>)
  400666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  40066a:	6033      	str	r3, [r6, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40066c:	2780      	movs	r7, #128	; 0x80
  40066e:	f886 7310 	strb.w	r7, [r6, #784]	; 0x310
    pio_configure(BUT2_PIO, PIO_INPUT, BUT2_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  400672:	2309      	movs	r3, #9
  400674:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400678:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40067c:	4837      	ldr	r0, [pc, #220]	; (40075c <init+0x16c>)
  40067e:	47a8      	blx	r5
    pio_set_debounce_filter(BUT2_PIO, BUT2_PIO_IDX_MASK, 60);
  400680:	223c      	movs	r2, #60	; 0x3c
  400682:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  400686:	4835      	ldr	r0, [pc, #212]	; (40075c <init+0x16c>)
  400688:	47d8      	blx	fp
    pio_handler_set(BUT2_PIO,
  40068a:	4b35      	ldr	r3, [pc, #212]	; (400760 <init+0x170>)
  40068c:	9300      	str	r3, [sp, #0]
  40068e:	2350      	movs	r3, #80	; 0x50
  400690:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400694:	210c      	movs	r1, #12
  400696:	4831      	ldr	r0, [pc, #196]	; (40075c <init+0x16c>)
  400698:	47d0      	blx	sl
    pio_enable_interrupt(BUT2_PIO, BUT2_PIO_IDX_MASK);
  40069a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40069e:	482f      	ldr	r0, [pc, #188]	; (40075c <init+0x16c>)
  4006a0:	47c8      	blx	r9
    pio_get_interrupt_status(BUT2_PIO);
  4006a2:	482e      	ldr	r0, [pc, #184]	; (40075c <init+0x16c>)
  4006a4:	47c0      	blx	r8
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4006aa:	6033      	str	r3, [r6, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4006ac:	f886 730c 	strb.w	r7, [r6, #780]	; 0x30c
    pio_configure(BUT3_PIO, PIO_INPUT, BUT3_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4006b0:	f5a4 64c0 	sub.w	r4, r4, #1536	; 0x600
  4006b4:	2309      	movs	r3, #9
  4006b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4006ba:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4006be:	4620      	mov	r0, r4
  4006c0:	47a8      	blx	r5
    pio_set_debounce_filter(BUT3_PIO, BUT3_PIO_IDX_MASK, 60);
  4006c2:	223c      	movs	r2, #60	; 0x3c
  4006c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4006c8:	4620      	mov	r0, r4
  4006ca:	47d8      	blx	fp
    pio_handler_set(BUT3_PIO,
  4006cc:	4b25      	ldr	r3, [pc, #148]	; (400764 <init+0x174>)
  4006ce:	9300      	str	r3, [sp, #0]
  4006d0:	2350      	movs	r3, #80	; 0x50
  4006d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4006d6:	210a      	movs	r1, #10
  4006d8:	4620      	mov	r0, r4
  4006da:	47d0      	blx	sl
    pio_enable_interrupt(BUT3_PIO, BUT3_PIO_IDX_MASK);
  4006dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4006e0:	4620      	mov	r0, r4
  4006e2:	47c8      	blx	r9
    pio_get_interrupt_status(BUT3_PIO);
  4006e4:	4620      	mov	r0, r4
  4006e6:	47c0      	blx	r8
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4006e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4006ec:	6033      	str	r3, [r6, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4006ee:	f886 730a 	strb.w	r7, [r6, #778]	; 0x30a
    pio_configure(LED1_PIO, PIO_OUTPUT_0, LED1_PIO_IDX_MASK, PIO_DEFAULT);
  4006f2:	2300      	movs	r3, #0
  4006f4:	2201      	movs	r2, #1
  4006f6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4006fa:	4620      	mov	r0, r4
  4006fc:	47a8      	blx	r5
    pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  4006fe:	2101      	movs	r1, #1
  400700:	4620      	mov	r0, r4
  400702:	4c19      	ldr	r4, [pc, #100]	; (400768 <init+0x178>)
  400704:	47a0      	blx	r4
    pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_PIO_IDX_MASK, PIO_DEFAULT);
  400706:	2300      	movs	r3, #0
  400708:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40070c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400710:	4812      	ldr	r0, [pc, #72]	; (40075c <init+0x16c>)
  400712:	47a8      	blx	r5
    pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  400714:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400718:	4810      	ldr	r0, [pc, #64]	; (40075c <init+0x16c>)
  40071a:	47a0      	blx	r4
    pio_configure(LED3_PIO, PIO_OUTPUT_0, LED3_PIO_IDX_MASK, PIO_DEFAULT);
  40071c:	4e13      	ldr	r6, [pc, #76]	; (40076c <init+0x17c>)
  40071e:	2300      	movs	r3, #0
  400720:	2204      	movs	r2, #4
  400722:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400726:	4630      	mov	r0, r6
  400728:	47a8      	blx	r5
    pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  40072a:	2104      	movs	r1, #4
  40072c:	4630      	mov	r0, r6
  40072e:	47a0      	blx	r4
}
  400730:	b003      	add	sp, #12
  400732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400736:	bf00      	nop
  400738:	00400e99 	.word	0x00400e99
  40073c:	00400e29 	.word	0x00400e29
  400740:	00400b09 	.word	0x00400b09
  400744:	400e1850 	.word	0x400e1850
  400748:	00401425 	.word	0x00401425
  40074c:	400e1400 	.word	0x400e1400
  400750:	00401105 	.word	0x00401105
  400754:	0040046d 	.word	0x0040046d
  400758:	e000e100 	.word	0xe000e100
  40075c:	400e1200 	.word	0x400e1200
  400760:	00400479 	.word	0x00400479
  400764:	00400485 	.word	0x00400485
  400768:	00400ff3 	.word	0x00400ff3
  40076c:	400e1000 	.word	0x400e1000
  400770:	00400fd9 	.word	0x00400fd9
  400774:	00401231 	.word	0x00401231
  400778:	004011d3 	.word	0x004011d3
  40077c:	004011d7 	.word	0x004011d7

00400780 <clear_screen>:
{
  400780:	b510      	push	{r4, lr}
  400782:	b082      	sub	sp, #8
    if (loc == -1)
  400784:	f1b0 3fff 	cmp.w	r0, #4294967295
  400788:	d004      	beq.n	400794 <clear_screen+0x14>
    else if (loc == 0)
  40078a:	b158      	cbz	r0, 4007a4 <clear_screen+0x24>
    else if (loc == 1)
  40078c:	2801      	cmp	r0, #1
  40078e:	d010      	beq.n	4007b2 <clear_screen+0x32>
}
  400790:	b002      	add	sp, #8
  400792:	bd10      	pop	{r4, pc}
        gfx_mono_generic_draw_filled_rect(0, 0, 127, 31, GFX_PIXEL_CLR);
  400794:	2000      	movs	r0, #0
  400796:	9000      	str	r0, [sp, #0]
  400798:	231f      	movs	r3, #31
  40079a:	227f      	movs	r2, #127	; 0x7f
  40079c:	4601      	mov	r1, r0
  40079e:	4c09      	ldr	r4, [pc, #36]	; (4007c4 <clear_screen+0x44>)
  4007a0:	47a0      	blx	r4
  4007a2:	e7f5      	b.n	400790 <clear_screen+0x10>
        gfx_mono_generic_draw_filled_rect(0, 0, 127, 31, GFX_PIXEL_CLR);
  4007a4:	9000      	str	r0, [sp, #0]
  4007a6:	231f      	movs	r3, #31
  4007a8:	227f      	movs	r2, #127	; 0x7f
  4007aa:	4601      	mov	r1, r0
  4007ac:	4c05      	ldr	r4, [pc, #20]	; (4007c4 <clear_screen+0x44>)
  4007ae:	47a0      	blx	r4
  4007b0:	e7ee      	b.n	400790 <clear_screen+0x10>
        gfx_mono_generic_draw_filled_rect(0, 0, 127, 31, GFX_PIXEL_CLR);
  4007b2:	2000      	movs	r0, #0
  4007b4:	9000      	str	r0, [sp, #0]
  4007b6:	231f      	movs	r3, #31
  4007b8:	227f      	movs	r2, #127	; 0x7f
  4007ba:	4601      	mov	r1, r0
  4007bc:	4c01      	ldr	r4, [pc, #4]	; (4007c4 <clear_screen+0x44>)
  4007be:	47a0      	blx	r4
    return;
  4007c0:	e7e6      	b.n	400790 <clear_screen+0x10>
  4007c2:	bf00      	nop
  4007c4:	0040098d 	.word	0x0040098d

004007c8 <draw_time>:
{
  4007c8:	b510      	push	{r4, lr}
  4007ca:	b08a      	sub	sp, #40	; 0x28
  4007cc:	ab02      	add	r3, sp, #8
  4007ce:	e883 0003 	stmia.w	r3, {r0, r1}
    clear_screen(1);
  4007d2:	2001      	movs	r0, #1
  4007d4:	4b0b      	ldr	r3, [pc, #44]	; (400804 <draw_time+0x3c>)
  4007d6:	4798      	blx	r3
    sprintf(str, "%02d:%02d", t.min, t.sec);
  4007d8:	9b03      	ldr	r3, [sp, #12]
  4007da:	9a02      	ldr	r2, [sp, #8]
  4007dc:	490a      	ldr	r1, [pc, #40]	; (400808 <draw_time+0x40>)
  4007de:	a805      	add	r0, sp, #20
  4007e0:	4c0a      	ldr	r4, [pc, #40]	; (40080c <draw_time+0x44>)
  4007e2:	47a0      	blx	r4
    gfx_mono_generic_draw_filled_rect(0, 0, 127, 31, GFX_PIXEL_CLR);
  4007e4:	2000      	movs	r0, #0
  4007e6:	9000      	str	r0, [sp, #0]
  4007e8:	231f      	movs	r3, #31
  4007ea:	227f      	movs	r2, #127	; 0x7f
  4007ec:	4601      	mov	r1, r0
  4007ee:	4c08      	ldr	r4, [pc, #32]	; (400810 <draw_time+0x48>)
  4007f0:	47a0      	blx	r4
    gfx_mono_draw_string(str, 43, 4, &sysfont);
  4007f2:	4b08      	ldr	r3, [pc, #32]	; (400814 <draw_time+0x4c>)
  4007f4:	2204      	movs	r2, #4
  4007f6:	212b      	movs	r1, #43	; 0x2b
  4007f8:	a805      	add	r0, sp, #20
  4007fa:	4c07      	ldr	r4, [pc, #28]	; (400818 <draw_time+0x50>)
  4007fc:	47a0      	blx	r4
}
  4007fe:	b00a      	add	sp, #40	; 0x28
  400800:	bd10      	pop	{r4, pc}
  400802:	bf00      	nop
  400804:	00400781 	.word	0x00400781
  400808:	00406724 	.word	0x00406724
  40080c:	004021f5 	.word	0x004021f5
  400810:	0040098d 	.word	0x0040098d
  400814:	2040000c 	.word	0x2040000c
  400818:	00400a71 	.word	0x00400a71

0040081c <get_but1_flag>:
    return but1_flag;
  40081c:	4b01      	ldr	r3, [pc, #4]	; (400824 <get_but1_flag+0x8>)
  40081e:	7818      	ldrb	r0, [r3, #0]
}
  400820:	4770      	bx	lr
  400822:	bf00      	nop
  400824:	204009f0 	.word	0x204009f0

00400828 <set_but1_flag>:
    but1_flag = val;
  400828:	4b01      	ldr	r3, [pc, #4]	; (400830 <set_but1_flag+0x8>)
  40082a:	7018      	strb	r0, [r3, #0]
}
  40082c:	4770      	bx	lr
  40082e:	bf00      	nop
  400830:	204009f0 	.word	0x204009f0

00400834 <get_but2_flag>:
    return but2_flag;
  400834:	4b01      	ldr	r3, [pc, #4]	; (40083c <get_but2_flag+0x8>)
  400836:	7818      	ldrb	r0, [r3, #0]
}
  400838:	4770      	bx	lr
  40083a:	bf00      	nop
  40083c:	204009f1 	.word	0x204009f1

00400840 <set_but2_flag>:
    but2_flag = val;
  400840:	4b01      	ldr	r3, [pc, #4]	; (400848 <set_but2_flag+0x8>)
  400842:	7018      	strb	r0, [r3, #0]
}
  400844:	4770      	bx	lr
  400846:	bf00      	nop
  400848:	204009f1 	.word	0x204009f1

0040084c <get_but3_flag>:
}
_Bool get_but3_flag(void)
{
    return but3_flag;
  40084c:	4b01      	ldr	r3, [pc, #4]	; (400854 <get_but3_flag+0x8>)
  40084e:	7818      	ldrb	r0, [r3, #0]
}
  400850:	4770      	bx	lr
  400852:	bf00      	nop
  400854:	204009f2 	.word	0x204009f2

00400858 <set_but3_flag>:
_Bool set_but3_flag(_Bool val)
{
    but3_flag = val;
  400858:	4b01      	ldr	r3, [pc, #4]	; (400860 <set_but3_flag+0x8>)
  40085a:	7018      	strb	r0, [r3, #0]
}
  40085c:	4770      	bx	lr
  40085e:	bf00      	nop
  400860:	204009f2 	.word	0x204009f2

00400864 <pin_toggle>:


void pin_toggle(Pio *pio, uint32_t mask)
{
  400864:	b538      	push	{r3, r4, r5, lr}
  400866:	4604      	mov	r4, r0
  400868:	460d      	mov	r5, r1
    if (pio_get_output_data_status(pio, mask))
  40086a:	4b06      	ldr	r3, [pc, #24]	; (400884 <pin_toggle+0x20>)
  40086c:	4798      	blx	r3
  40086e:	b920      	cbnz	r0, 40087a <pin_toggle+0x16>
        pio_clear(pio, mask);
    else
        pio_set(pio, mask);
  400870:	4629      	mov	r1, r5
  400872:	4620      	mov	r0, r4
  400874:	4b04      	ldr	r3, [pc, #16]	; (400888 <pin_toggle+0x24>)
  400876:	4798      	blx	r3
  400878:	bd38      	pop	{r3, r4, r5, pc}
        pio_clear(pio, mask);
  40087a:	4629      	mov	r1, r5
  40087c:	4620      	mov	r0, r4
  40087e:	4b03      	ldr	r3, [pc, #12]	; (40088c <pin_toggle+0x28>)
  400880:	4798      	blx	r3
  400882:	bd38      	pop	{r3, r4, r5, pc}
  400884:	00401195 	.word	0x00401195
  400888:	00400ff3 	.word	0x00400ff3
  40088c:	00400ff7 	.word	0x00400ff7

00400890 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400890:	4b01      	ldr	r3, [pc, #4]	; (400898 <gfx_mono_set_framebuffer+0x8>)
  400892:	6018      	str	r0, [r3, #0]
  400894:	4770      	bx	lr
  400896:	bf00      	nop
  400898:	204009f4 	.word	0x204009f4

0040089c <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  40089c:	4b02      	ldr	r3, [pc, #8]	; (4008a8 <gfx_mono_framebuffer_put_byte+0xc>)
  40089e:	681b      	ldr	r3, [r3, #0]
  4008a0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4008a4:	5442      	strb	r2, [r0, r1]
  4008a6:	4770      	bx	lr
  4008a8:	204009f4 	.word	0x204009f4

004008ac <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4008ac:	4b02      	ldr	r3, [pc, #8]	; (4008b8 <gfx_mono_framebuffer_get_byte+0xc>)
  4008ae:	681b      	ldr	r3, [r3, #0]
  4008b0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4008b4:	5c40      	ldrb	r0, [r0, r1]
  4008b6:	4770      	bx	lr
  4008b8:	204009f4 	.word	0x204009f4

004008bc <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4008c0:	1884      	adds	r4, r0, r2
  4008c2:	2c80      	cmp	r4, #128	; 0x80
  4008c4:	dd02      	ble.n	4008cc <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  4008c6:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  4008ca:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  4008cc:	b322      	cbz	r2, 400918 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  4008ce:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  4008d0:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  4008d4:	2601      	movs	r6, #1
  4008d6:	fa06 f101 	lsl.w	r1, r6, r1
  4008da:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  4008dc:	2b01      	cmp	r3, #1
  4008de:	d01d      	beq.n	40091c <gfx_mono_generic_draw_horizontal_line+0x60>
  4008e0:	2b00      	cmp	r3, #0
  4008e2:	d035      	beq.n	400950 <gfx_mono_generic_draw_horizontal_line+0x94>
  4008e4:	2b02      	cmp	r3, #2
  4008e6:	d117      	bne.n	400918 <gfx_mono_generic_draw_horizontal_line+0x5c>
  4008e8:	3801      	subs	r0, #1
  4008ea:	b2c7      	uxtb	r7, r0
  4008ec:	19d4      	adds	r4, r2, r7
  4008ee:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  4008f0:	f8df a090 	ldr.w	sl, [pc, #144]	; 400984 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  4008f4:	f04f 0900 	mov.w	r9, #0
  4008f8:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400988 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4008fc:	4621      	mov	r1, r4
  4008fe:	4628      	mov	r0, r5
  400900:	47d0      	blx	sl
			temp ^= pixelmask;
  400902:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400906:	464b      	mov	r3, r9
  400908:	b2d2      	uxtb	r2, r2
  40090a:	4621      	mov	r1, r4
  40090c:	4628      	mov	r0, r5
  40090e:	47c0      	blx	r8
  400910:	3c01      	subs	r4, #1
  400912:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400914:	42bc      	cmp	r4, r7
  400916:	d1f1      	bne.n	4008fc <gfx_mono_generic_draw_horizontal_line+0x40>
  400918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40091c:	3801      	subs	r0, #1
  40091e:	b2c7      	uxtb	r7, r0
  400920:	19d4      	adds	r4, r2, r7
  400922:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400924:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400984 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  400928:	f04f 0900 	mov.w	r9, #0
  40092c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400988 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400930:	4621      	mov	r1, r4
  400932:	4628      	mov	r0, r5
  400934:	47d0      	blx	sl
			temp |= pixelmask;
  400936:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40093a:	464b      	mov	r3, r9
  40093c:	b2d2      	uxtb	r2, r2
  40093e:	4621      	mov	r1, r4
  400940:	4628      	mov	r0, r5
  400942:	47c0      	blx	r8
  400944:	3c01      	subs	r4, #1
  400946:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400948:	42bc      	cmp	r4, r7
  40094a:	d1f1      	bne.n	400930 <gfx_mono_generic_draw_horizontal_line+0x74>
  40094c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400950:	3801      	subs	r0, #1
  400952:	b2c7      	uxtb	r7, r0
  400954:	19d4      	adds	r4, r2, r7
  400956:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400958:	f8df 8028 	ldr.w	r8, [pc, #40]	; 400984 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  40095c:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  40095e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400988 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400962:	4621      	mov	r1, r4
  400964:	4628      	mov	r0, r5
  400966:	47c0      	blx	r8
			temp &= ~pixelmask;
  400968:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40096c:	2300      	movs	r3, #0
  40096e:	b2d2      	uxtb	r2, r2
  400970:	4621      	mov	r1, r4
  400972:	4628      	mov	r0, r5
  400974:	47c8      	blx	r9
  400976:	3c01      	subs	r4, #1
  400978:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40097a:	42bc      	cmp	r4, r7
  40097c:	d1f1      	bne.n	400962 <gfx_mono_generic_draw_horizontal_line+0xa6>
  40097e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400982:	bf00      	nop
  400984:	00400bbd 	.word	0x00400bbd
  400988:	00400ab9 	.word	0x00400ab9

0040098c <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  40098c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400990:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  400994:	b18b      	cbz	r3, 4009ba <gfx_mono_generic_draw_filled_rect+0x2e>
  400996:	461c      	mov	r4, r3
  400998:	4690      	mov	r8, r2
  40099a:	4606      	mov	r6, r0
  40099c:	1e4d      	subs	r5, r1, #1
  40099e:	b2ed      	uxtb	r5, r5
  4009a0:	442c      	add	r4, r5
  4009a2:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  4009a4:	f8df 9018 	ldr.w	r9, [pc, #24]	; 4009c0 <gfx_mono_generic_draw_filled_rect+0x34>
  4009a8:	463b      	mov	r3, r7
  4009aa:	4642      	mov	r2, r8
  4009ac:	4621      	mov	r1, r4
  4009ae:	4630      	mov	r0, r6
  4009b0:	47c8      	blx	r9
  4009b2:	3c01      	subs	r4, #1
  4009b4:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  4009b6:	42ac      	cmp	r4, r5
  4009b8:	d1f6      	bne.n	4009a8 <gfx_mono_generic_draw_filled_rect+0x1c>
  4009ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4009be:	bf00      	nop
  4009c0:	004008bd 	.word	0x004008bd

004009c4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  4009c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4009c8:	b083      	sub	sp, #12
  4009ca:	4604      	mov	r4, r0
  4009cc:	4688      	mov	r8, r1
  4009ce:	4691      	mov	r9, r2
  4009d0:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4009d2:	7a5b      	ldrb	r3, [r3, #9]
  4009d4:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4009d8:	2100      	movs	r1, #0
  4009da:	9100      	str	r1, [sp, #0]
  4009dc:	4649      	mov	r1, r9
  4009de:	4640      	mov	r0, r8
  4009e0:	4d21      	ldr	r5, [pc, #132]	; (400a68 <gfx_mono_draw_char+0xa4>)
  4009e2:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  4009e4:	f89b 3000 	ldrb.w	r3, [fp]
  4009e8:	b113      	cbz	r3, 4009f0 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  4009ea:	b003      	add	sp, #12
  4009ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  4009f0:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4009f4:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  4009f6:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  4009fa:	bf18      	it	ne
  4009fc:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  4009fe:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400a02:	f89b 700a 	ldrb.w	r7, [fp, #10]
  400a06:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400a08:	fb17 f70a 	smulbb	r7, r7, sl
  400a0c:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400a10:	f8db 3004 	ldr.w	r3, [fp, #4]
  400a14:	fa13 f787 	uxtah	r7, r3, r7
  400a18:	e01f      	b.n	400a5a <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  400a1a:	0064      	lsls	r4, r4, #1
  400a1c:	b2e4      	uxtb	r4, r4
  400a1e:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400a20:	b2eb      	uxtb	r3, r5
  400a22:	429e      	cmp	r6, r3
  400a24:	d910      	bls.n	400a48 <gfx_mono_draw_char+0x84>
  400a26:	b2eb      	uxtb	r3, r5
  400a28:	eb08 0003 	add.w	r0, r8, r3
  400a2c:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400a2e:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400a32:	bf08      	it	eq
  400a34:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400a38:	f014 0f80 	tst.w	r4, #128	; 0x80
  400a3c:	d0ed      	beq.n	400a1a <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400a3e:	2201      	movs	r2, #1
  400a40:	4649      	mov	r1, r9
  400a42:	4b0a      	ldr	r3, [pc, #40]	; (400a6c <gfx_mono_draw_char+0xa8>)
  400a44:	4798      	blx	r3
  400a46:	e7e8      	b.n	400a1a <gfx_mono_draw_char+0x56>
		inc_y += 1;
  400a48:	f109 0901 	add.w	r9, r9, #1
  400a4c:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400a50:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400a54:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  400a58:	d0c7      	beq.n	4009ea <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  400a5a:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  400a5e:	2e00      	cmp	r6, #0
  400a60:	d0f2      	beq.n	400a48 <gfx_mono_draw_char+0x84>
  400a62:	2500      	movs	r5, #0
  400a64:	462c      	mov	r4, r5
  400a66:	e7de      	b.n	400a26 <gfx_mono_draw_char+0x62>
  400a68:	0040098d 	.word	0x0040098d
  400a6c:	00400b59 	.word	0x00400b59

00400a70 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400a74:	4604      	mov	r4, r0
  400a76:	4690      	mov	r8, r2
  400a78:	461d      	mov	r5, r3
  400a7a:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400a7c:	4f0d      	ldr	r7, [pc, #52]	; (400ab4 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  400a7e:	460e      	mov	r6, r1
  400a80:	e008      	b.n	400a94 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  400a82:	7a6a      	ldrb	r2, [r5, #9]
  400a84:	3201      	adds	r2, #1
  400a86:	4442      	add	r2, r8
  400a88:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  400a8c:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  400a8e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  400a92:	b16b      	cbz	r3, 400ab0 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  400a94:	7820      	ldrb	r0, [r4, #0]
  400a96:	280a      	cmp	r0, #10
  400a98:	d0f3      	beq.n	400a82 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  400a9a:	280d      	cmp	r0, #13
  400a9c:	d0f7      	beq.n	400a8e <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  400a9e:	462b      	mov	r3, r5
  400aa0:	4642      	mov	r2, r8
  400aa2:	4649      	mov	r1, r9
  400aa4:	47b8      	blx	r7
			x += font->width;
  400aa6:	7a2b      	ldrb	r3, [r5, #8]
  400aa8:	4499      	add	r9, r3
  400aaa:	fa5f f989 	uxtb.w	r9, r9
  400aae:	e7ee      	b.n	400a8e <gfx_mono_draw_string+0x1e>
}
  400ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400ab4:	004009c5 	.word	0x004009c5

00400ab8 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400ab8:	b570      	push	{r4, r5, r6, lr}
  400aba:	4604      	mov	r4, r0
  400abc:	460d      	mov	r5, r1
  400abe:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400ac0:	b91b      	cbnz	r3, 400aca <gfx_mono_ssd1306_put_byte+0x12>
  400ac2:	4b0d      	ldr	r3, [pc, #52]	; (400af8 <gfx_mono_ssd1306_put_byte+0x40>)
  400ac4:	4798      	blx	r3
  400ac6:	42b0      	cmp	r0, r6
  400ac8:	d015      	beq.n	400af6 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400aca:	4632      	mov	r2, r6
  400acc:	4629      	mov	r1, r5
  400ace:	4620      	mov	r0, r4
  400ad0:	4b0a      	ldr	r3, [pc, #40]	; (400afc <gfx_mono_ssd1306_put_byte+0x44>)
  400ad2:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400ad4:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400ad8:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400adc:	4c08      	ldr	r4, [pc, #32]	; (400b00 <gfx_mono_ssd1306_put_byte+0x48>)
  400ade:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400ae0:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400ae4:	f040 0010 	orr.w	r0, r0, #16
  400ae8:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400aea:	f005 000f 	and.w	r0, r5, #15
  400aee:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400af0:	4630      	mov	r0, r6
  400af2:	4b04      	ldr	r3, [pc, #16]	; (400b04 <gfx_mono_ssd1306_put_byte+0x4c>)
  400af4:	4798      	blx	r3
  400af6:	bd70      	pop	{r4, r5, r6, pc}
  400af8:	004008ad 	.word	0x004008ad
  400afc:	0040089d 	.word	0x0040089d
  400b00:	00400bc9 	.word	0x00400bc9
  400b04:	00400de9 	.word	0x00400de9

00400b08 <gfx_mono_ssd1306_init>:
{
  400b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400b0c:	480d      	ldr	r0, [pc, #52]	; (400b44 <gfx_mono_ssd1306_init+0x3c>)
  400b0e:	4b0e      	ldr	r3, [pc, #56]	; (400b48 <gfx_mono_ssd1306_init+0x40>)
  400b10:	4798      	blx	r3
	ssd1306_init();
  400b12:	4b0e      	ldr	r3, [pc, #56]	; (400b4c <gfx_mono_ssd1306_init+0x44>)
  400b14:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400b16:	2040      	movs	r0, #64	; 0x40
  400b18:	4b0d      	ldr	r3, [pc, #52]	; (400b50 <gfx_mono_ssd1306_init+0x48>)
  400b1a:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400b1c:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400b1e:	f04f 0801 	mov.w	r8, #1
  400b22:	462f      	mov	r7, r5
  400b24:	4e0b      	ldr	r6, [pc, #44]	; (400b54 <gfx_mono_ssd1306_init+0x4c>)
{
  400b26:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400b28:	4643      	mov	r3, r8
  400b2a:	463a      	mov	r2, r7
  400b2c:	b2e1      	uxtb	r1, r4
  400b2e:	4628      	mov	r0, r5
  400b30:	47b0      	blx	r6
  400b32:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400b34:	2c80      	cmp	r4, #128	; 0x80
  400b36:	d1f7      	bne.n	400b28 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400b38:	3501      	adds	r5, #1
  400b3a:	b2ed      	uxtb	r5, r5
  400b3c:	2d04      	cmp	r5, #4
  400b3e:	d1f2      	bne.n	400b26 <gfx_mono_ssd1306_init+0x1e>
  400b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b44:	204009f8 	.word	0x204009f8
  400b48:	00400891 	.word	0x00400891
  400b4c:	00400c09 	.word	0x00400c09
  400b50:	00400bc9 	.word	0x00400bc9
  400b54:	00400ab9 	.word	0x00400ab9

00400b58 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400b58:	09c3      	lsrs	r3, r0, #7
  400b5a:	d12a      	bne.n	400bb2 <gfx_mono_ssd1306_draw_pixel+0x5a>
  400b5c:	291f      	cmp	r1, #31
  400b5e:	d828      	bhi.n	400bb2 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b64:	4614      	mov	r4, r2
  400b66:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400b68:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400b6a:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400b6e:	2201      	movs	r2, #1
  400b70:	fa02 f701 	lsl.w	r7, r2, r1
  400b74:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400b78:	4601      	mov	r1, r0
  400b7a:	4630      	mov	r0, r6
  400b7c:	4b0d      	ldr	r3, [pc, #52]	; (400bb4 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400b7e:	4798      	blx	r3
  400b80:	4602      	mov	r2, r0
	switch (color) {
  400b82:	2c01      	cmp	r4, #1
  400b84:	d009      	beq.n	400b9a <gfx_mono_ssd1306_draw_pixel+0x42>
  400b86:	b164      	cbz	r4, 400ba2 <gfx_mono_ssd1306_draw_pixel+0x4a>
  400b88:	2c02      	cmp	r4, #2
  400b8a:	d00e      	beq.n	400baa <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400b8c:	2300      	movs	r3, #0
  400b8e:	4629      	mov	r1, r5
  400b90:	4630      	mov	r0, r6
  400b92:	4c09      	ldr	r4, [pc, #36]	; (400bb8 <gfx_mono_ssd1306_draw_pixel+0x60>)
  400b94:	47a0      	blx	r4
  400b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400b9a:	ea48 0200 	orr.w	r2, r8, r0
  400b9e:	b2d2      	uxtb	r2, r2
		break;
  400ba0:	e7f4      	b.n	400b8c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  400ba2:	ea20 0207 	bic.w	r2, r0, r7
  400ba6:	b2d2      	uxtb	r2, r2
		break;
  400ba8:	e7f0      	b.n	400b8c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400baa:	ea88 0200 	eor.w	r2, r8, r0
  400bae:	b2d2      	uxtb	r2, r2
		break;
  400bb0:	e7ec      	b.n	400b8c <gfx_mono_ssd1306_draw_pixel+0x34>
  400bb2:	4770      	bx	lr
  400bb4:	004008ad 	.word	0x004008ad
  400bb8:	00400ab9 	.word	0x00400ab9

00400bbc <gfx_mono_ssd1306_get_byte>:
{
  400bbc:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400bbe:	4b01      	ldr	r3, [pc, #4]	; (400bc4 <gfx_mono_ssd1306_get_byte+0x8>)
  400bc0:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400bc2:	bd08      	pop	{r3, pc}
  400bc4:	004008ad 	.word	0x004008ad

00400bc8 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400bc8:	b538      	push	{r3, r4, r5, lr}
  400bca:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400bcc:	2208      	movs	r2, #8
  400bce:	4b09      	ldr	r3, [pc, #36]	; (400bf4 <ssd1306_write_command+0x2c>)
  400bd0:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400bd2:	4c09      	ldr	r4, [pc, #36]	; (400bf8 <ssd1306_write_command+0x30>)
  400bd4:	2101      	movs	r1, #1
  400bd6:	4620      	mov	r0, r4
  400bd8:	4b08      	ldr	r3, [pc, #32]	; (400bfc <ssd1306_write_command+0x34>)
  400bda:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400bdc:	2301      	movs	r3, #1
  400bde:	461a      	mov	r2, r3
  400be0:	4629      	mov	r1, r5
  400be2:	4620      	mov	r0, r4
  400be4:	4c06      	ldr	r4, [pc, #24]	; (400c00 <ssd1306_write_command+0x38>)
  400be6:	47a0      	blx	r4
	delay_us(10);
  400be8:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400bec:	4b05      	ldr	r3, [pc, #20]	; (400c04 <ssd1306_write_command+0x3c>)
  400bee:	4798      	blx	r3
  400bf0:	bd38      	pop	{r3, r4, r5, pc}
  400bf2:	bf00      	nop
  400bf4:	400e1000 	.word	0x400e1000
  400bf8:	40008000 	.word	0x40008000
  400bfc:	0040029d 	.word	0x0040029d
  400c00:	004002b3 	.word	0x004002b3
  400c04:	20400001 	.word	0x20400001

00400c08 <ssd1306_init>:
{
  400c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c0c:	4d66      	ldr	r5, [pc, #408]	; (400da8 <ssd1306_init+0x1a0>)
  400c0e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400c12:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c14:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c18:	4b64      	ldr	r3, [pc, #400]	; (400dac <ssd1306_init+0x1a4>)
  400c1a:	2708      	movs	r7, #8
  400c1c:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c1e:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400c22:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400c24:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c28:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c2a:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c2c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c30:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400c32:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400c36:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c38:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400c3a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400c3e:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400c40:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400c42:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c46:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c48:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c4a:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400c50:	f022 0208 	bic.w	r2, r2, #8
  400c54:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c56:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400c58:	f022 0208 	bic.w	r2, r2, #8
  400c5c:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400c5e:	601f      	str	r7, [r3, #0]
  400c60:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400c62:	631f      	str	r7, [r3, #48]	; 0x30
  400c64:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400c66:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400de4 <ssd1306_init+0x1dc>
  400c6a:	2300      	movs	r3, #0
  400c6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400c70:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c74:	4640      	mov	r0, r8
  400c76:	4c4e      	ldr	r4, [pc, #312]	; (400db0 <ssd1306_init+0x1a8>)
  400c78:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400c7a:	2300      	movs	r3, #0
  400c7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400c80:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c84:	4640      	mov	r0, r8
  400c86:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400c88:	2300      	movs	r3, #0
  400c8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400c8e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c92:	4640      	mov	r0, r8
  400c94:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400c96:	2300      	movs	r3, #0
  400c98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400c9c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ca0:	4640      	mov	r0, r8
  400ca2:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400ca4:	2300      	movs	r3, #0
  400ca6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400caa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400cae:	4640      	mov	r0, r8
  400cb0:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400cb2:	2300      	movs	r3, #0
  400cb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400cb8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400cbc:	4640      	mov	r0, r8
  400cbe:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400cc0:	4c3c      	ldr	r4, [pc, #240]	; (400db4 <ssd1306_init+0x1ac>)
  400cc2:	f04f 0902 	mov.w	r9, #2
  400cc6:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400cca:	f04f 0880 	mov.w	r8, #128	; 0x80
  400cce:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400cd2:	6863      	ldr	r3, [r4, #4]
  400cd4:	f043 0301 	orr.w	r3, r3, #1
  400cd8:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400cda:	463a      	mov	r2, r7
  400cdc:	2101      	movs	r1, #1
  400cde:	4620      	mov	r0, r4
  400ce0:	4b35      	ldr	r3, [pc, #212]	; (400db8 <ssd1306_init+0x1b0>)
  400ce2:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400ce4:	2200      	movs	r2, #0
  400ce6:	2101      	movs	r1, #1
  400ce8:	4620      	mov	r0, r4
  400cea:	4b34      	ldr	r3, [pc, #208]	; (400dbc <ssd1306_init+0x1b4>)
  400cec:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400cee:	2200      	movs	r2, #0
  400cf0:	2101      	movs	r1, #1
  400cf2:	4620      	mov	r0, r4
  400cf4:	4b32      	ldr	r3, [pc, #200]	; (400dc0 <ssd1306_init+0x1b8>)
  400cf6:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400cf8:	6863      	ldr	r3, [r4, #4]
  400cfa:	f023 0302 	bic.w	r3, r3, #2
  400cfe:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400d00:	2200      	movs	r2, #0
  400d02:	2101      	movs	r1, #1
  400d04:	4620      	mov	r0, r4
  400d06:	4b2f      	ldr	r3, [pc, #188]	; (400dc4 <ssd1306_init+0x1bc>)
  400d08:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400d0a:	6863      	ldr	r3, [r4, #4]
  400d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400d10:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400d12:	6863      	ldr	r3, [r4, #4]
  400d14:	f043 0310 	orr.w	r3, r3, #16
  400d18:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400d1a:	492b      	ldr	r1, [pc, #172]	; (400dc8 <ssd1306_init+0x1c0>)
  400d1c:	482b      	ldr	r0, [pc, #172]	; (400dcc <ssd1306_init+0x1c4>)
  400d1e:	4b2c      	ldr	r3, [pc, #176]	; (400dd0 <ssd1306_init+0x1c8>)
  400d20:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400d22:	b2c2      	uxtb	r2, r0
  400d24:	2101      	movs	r1, #1
  400d26:	4620      	mov	r0, r4
  400d28:	4b2a      	ldr	r3, [pc, #168]	; (400dd4 <ssd1306_init+0x1cc>)
  400d2a:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400d2c:	4620      	mov	r0, r4
  400d2e:	4b2a      	ldr	r3, [pc, #168]	; (400dd8 <ssd1306_init+0x1d0>)
  400d30:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400d32:	2301      	movs	r3, #1
  400d34:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400d36:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400d38:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400d3c:	4c27      	ldr	r4, [pc, #156]	; (400ddc <ssd1306_init+0x1d4>)
  400d3e:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d40:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400d42:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400d46:	47a0      	blx	r4
  400d48:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400d4a:	20a8      	movs	r0, #168	; 0xa8
  400d4c:	4c24      	ldr	r4, [pc, #144]	; (400de0 <ssd1306_init+0x1d8>)
  400d4e:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400d50:	201f      	movs	r0, #31
  400d52:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400d54:	20d3      	movs	r0, #211	; 0xd3
  400d56:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400d58:	2000      	movs	r0, #0
  400d5a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400d5c:	2040      	movs	r0, #64	; 0x40
  400d5e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400d60:	20a1      	movs	r0, #161	; 0xa1
  400d62:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400d64:	20c8      	movs	r0, #200	; 0xc8
  400d66:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400d68:	20da      	movs	r0, #218	; 0xda
  400d6a:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400d6c:	4648      	mov	r0, r9
  400d6e:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400d70:	2081      	movs	r0, #129	; 0x81
  400d72:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400d74:	208f      	movs	r0, #143	; 0x8f
  400d76:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400d78:	20a4      	movs	r0, #164	; 0xa4
  400d7a:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400d7c:	20a6      	movs	r0, #166	; 0xa6
  400d7e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400d80:	20d5      	movs	r0, #213	; 0xd5
  400d82:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400d84:	4640      	mov	r0, r8
  400d86:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400d88:	208d      	movs	r0, #141	; 0x8d
  400d8a:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400d8c:	2014      	movs	r0, #20
  400d8e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400d90:	20db      	movs	r0, #219	; 0xdb
  400d92:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400d94:	2040      	movs	r0, #64	; 0x40
  400d96:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400d98:	20d9      	movs	r0, #217	; 0xd9
  400d9a:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400d9c:	20f1      	movs	r0, #241	; 0xf1
  400d9e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400da0:	20af      	movs	r0, #175	; 0xaf
  400da2:	47a0      	blx	r4
  400da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400da8:	400e1200 	.word	0x400e1200
  400dac:	400e1000 	.word	0x400e1000
  400db0:	00401105 	.word	0x00401105
  400db4:	40008000 	.word	0x40008000
  400db8:	00400323 	.word	0x00400323
  400dbc:	004002e7 	.word	0x004002e7
  400dc0:	00400305 	.word	0x00400305
  400dc4:	00400369 	.word	0x00400369
  400dc8:	08f0d180 	.word	0x08f0d180
  400dcc:	001e8480 	.word	0x001e8480
  400dd0:	0040037d 	.word	0x0040037d
  400dd4:	00400393 	.word	0x00400393
  400dd8:	00400271 	.word	0x00400271
  400ddc:	20400001 	.word	0x20400001
  400de0:	00400bc9 	.word	0x00400bc9
  400de4:	400e1400 	.word	0x400e1400

00400de8 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400de8:	b538      	push	{r3, r4, r5, lr}
  400dea:	4605      	mov	r5, r0
  400dec:	2208      	movs	r2, #8
  400dee:	4b09      	ldr	r3, [pc, #36]	; (400e14 <ssd1306_write_data+0x2c>)
  400df0:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400df2:	4c09      	ldr	r4, [pc, #36]	; (400e18 <ssd1306_write_data+0x30>)
  400df4:	2101      	movs	r1, #1
  400df6:	4620      	mov	r0, r4
  400df8:	4b08      	ldr	r3, [pc, #32]	; (400e1c <ssd1306_write_data+0x34>)
  400dfa:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400dfc:	2301      	movs	r3, #1
  400dfe:	461a      	mov	r2, r3
  400e00:	4629      	mov	r1, r5
  400e02:	4620      	mov	r0, r4
  400e04:	4c06      	ldr	r4, [pc, #24]	; (400e20 <ssd1306_write_data+0x38>)
  400e06:	47a0      	blx	r4
	delay_us(10);
  400e08:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400e0c:	4b05      	ldr	r3, [pc, #20]	; (400e24 <ssd1306_write_data+0x3c>)
  400e0e:	4798      	blx	r3
  400e10:	bd38      	pop	{r3, r4, r5, pc}
  400e12:	bf00      	nop
  400e14:	400e1000 	.word	0x400e1000
  400e18:	40008000 	.word	0x40008000
  400e1c:	0040029d 	.word	0x0040029d
  400e20:	004002b3 	.word	0x004002b3
  400e24:	20400001 	.word	0x20400001

00400e28 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400e28:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400e2a:	4810      	ldr	r0, [pc, #64]	; (400e6c <sysclk_init+0x44>)
  400e2c:	4b10      	ldr	r3, [pc, #64]	; (400e70 <sysclk_init+0x48>)
  400e2e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400e30:	213e      	movs	r1, #62	; 0x3e
  400e32:	2000      	movs	r0, #0
  400e34:	4b0f      	ldr	r3, [pc, #60]	; (400e74 <sysclk_init+0x4c>)
  400e36:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400e38:	4c0f      	ldr	r4, [pc, #60]	; (400e78 <sysclk_init+0x50>)
  400e3a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400e3c:	2800      	cmp	r0, #0
  400e3e:	d0fc      	beq.n	400e3a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400e40:	4b0e      	ldr	r3, [pc, #56]	; (400e7c <sysclk_init+0x54>)
  400e42:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400e44:	4a0e      	ldr	r2, [pc, #56]	; (400e80 <sysclk_init+0x58>)
  400e46:	4b0f      	ldr	r3, [pc, #60]	; (400e84 <sysclk_init+0x5c>)
  400e48:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400e4a:	4c0f      	ldr	r4, [pc, #60]	; (400e88 <sysclk_init+0x60>)
  400e4c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400e4e:	2800      	cmp	r0, #0
  400e50:	d0fc      	beq.n	400e4c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400e52:	2002      	movs	r0, #2
  400e54:	4b0d      	ldr	r3, [pc, #52]	; (400e8c <sysclk_init+0x64>)
  400e56:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400e58:	2000      	movs	r0, #0
  400e5a:	4b0d      	ldr	r3, [pc, #52]	; (400e90 <sysclk_init+0x68>)
  400e5c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400e5e:	4b0d      	ldr	r3, [pc, #52]	; (400e94 <sysclk_init+0x6c>)
  400e60:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400e62:	4802      	ldr	r0, [pc, #8]	; (400e6c <sysclk_init+0x44>)
  400e64:	4b02      	ldr	r3, [pc, #8]	; (400e70 <sysclk_init+0x48>)
  400e66:	4798      	blx	r3
  400e68:	bd10      	pop	{r4, pc}
  400e6a:	bf00      	nop
  400e6c:	11e1a300 	.word	0x11e1a300
  400e70:	00401915 	.word	0x00401915
  400e74:	004013a1 	.word	0x004013a1
  400e78:	004013f5 	.word	0x004013f5
  400e7c:	00401405 	.word	0x00401405
  400e80:	20183f01 	.word	0x20183f01
  400e84:	400e0600 	.word	0x400e0600
  400e88:	00401415 	.word	0x00401415
  400e8c:	00401305 	.word	0x00401305
  400e90:	0040133d 	.word	0x0040133d
  400e94:	00401809 	.word	0x00401809

00400e98 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400e9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400e9e:	4b48      	ldr	r3, [pc, #288]	; (400fc0 <board_init+0x128>)
  400ea0:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400ea2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ea6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400eaa:	4b46      	ldr	r3, [pc, #280]	; (400fc4 <board_init+0x12c>)
  400eac:	2200      	movs	r2, #0
  400eae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400eb2:	695a      	ldr	r2, [r3, #20]
  400eb4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400eb8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400eba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ebe:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400ec2:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400ec6:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400eca:	f007 0007 	and.w	r0, r7, #7
  400ece:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400ed0:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400ed4:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400ed8:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400edc:	f3bf 8f4f 	dsb	sy
  400ee0:	f04f 34ff 	mov.w	r4, #4294967295
  400ee4:	fa04 fc00 	lsl.w	ip, r4, r0
  400ee8:	fa06 f000 	lsl.w	r0, r6, r0
  400eec:	fa04 f40e 	lsl.w	r4, r4, lr
  400ef0:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400ef4:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400ef6:	463a      	mov	r2, r7
  400ef8:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400efa:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400efe:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400f02:	3a01      	subs	r2, #1
  400f04:	4423      	add	r3, r4
  400f06:	f1b2 3fff 	cmp.w	r2, #4294967295
  400f0a:	d1f6      	bne.n	400efa <board_init+0x62>
        } while(sets--);
  400f0c:	3e01      	subs	r6, #1
  400f0e:	4460      	add	r0, ip
  400f10:	f1b6 3fff 	cmp.w	r6, #4294967295
  400f14:	d1ef      	bne.n	400ef6 <board_init+0x5e>
  400f16:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400f1a:	4b2a      	ldr	r3, [pc, #168]	; (400fc4 <board_init+0x12c>)
  400f1c:	695a      	ldr	r2, [r3, #20]
  400f1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400f22:	615a      	str	r2, [r3, #20]
  400f24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f28:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400f2c:	4a26      	ldr	r2, [pc, #152]	; (400fc8 <board_init+0x130>)
  400f2e:	4927      	ldr	r1, [pc, #156]	; (400fcc <board_init+0x134>)
  400f30:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400f32:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400f36:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400f38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f3c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400f40:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400f44:	f022 0201 	bic.w	r2, r2, #1
  400f48:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400f4c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400f50:	f022 0201 	bic.w	r2, r2, #1
  400f54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400f58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f5c:	f3bf 8f6f 	isb	sy
  400f60:	200a      	movs	r0, #10
  400f62:	4c1b      	ldr	r4, [pc, #108]	; (400fd0 <board_init+0x138>)
  400f64:	47a0      	blx	r4
  400f66:	200b      	movs	r0, #11
  400f68:	47a0      	blx	r4
  400f6a:	200c      	movs	r0, #12
  400f6c:	47a0      	blx	r4
  400f6e:	2010      	movs	r0, #16
  400f70:	47a0      	blx	r4
  400f72:	2011      	movs	r0, #17
  400f74:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400f76:	4b17      	ldr	r3, [pc, #92]	; (400fd4 <board_init+0x13c>)
  400f78:	f44f 7280 	mov.w	r2, #256	; 0x100
  400f7c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f7e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400f82:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400f84:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400f8c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f8e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400f92:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400f94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f98:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400f9a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400fa0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400fa2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400fa6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400fa8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400faa:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400fae:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400fb0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400fb4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400fb8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400fbe:	bf00      	nop
  400fc0:	400e1850 	.word	0x400e1850
  400fc4:	e000ed00 	.word	0xe000ed00
  400fc8:	400e0c00 	.word	0x400e0c00
  400fcc:	5a00080c 	.word	0x5a00080c
  400fd0:	00401425 	.word	0x00401425
  400fd4:	400e1200 	.word	0x400e1200

00400fd8 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400fd8:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400fdc:	0053      	lsls	r3, r2, #1
  400fde:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400fe2:	fbb2 f2f3 	udiv	r2, r2, r3
  400fe6:	3a01      	subs	r2, #1
  400fe8:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400fec:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400ff0:	4770      	bx	lr

00400ff2 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400ff2:	6301      	str	r1, [r0, #48]	; 0x30
  400ff4:	4770      	bx	lr

00400ff6 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400ff6:	6341      	str	r1, [r0, #52]	; 0x34
  400ff8:	4770      	bx	lr

00400ffa <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400ffa:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  400ffe:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401002:	d105      	bne.n	401010 <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  401004:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  401006:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  401008:	bf14      	ite	ne
  40100a:	2001      	movne	r0, #1
  40100c:	2000      	moveq	r0, #0
  40100e:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  401010:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  401012:	e7f8      	b.n	401006 <pio_get+0xc>

00401014 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401014:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401016:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40101a:	d03a      	beq.n	401092 <pio_set_peripheral+0x7e>
  40101c:	d813      	bhi.n	401046 <pio_set_peripheral+0x32>
  40101e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401022:	d025      	beq.n	401070 <pio_set_peripheral+0x5c>
  401024:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401028:	d10a      	bne.n	401040 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40102a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40102c:	4313      	orrs	r3, r2
  40102e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401030:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401032:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401034:	400b      	ands	r3, r1
  401036:	ea23 0302 	bic.w	r3, r3, r2
  40103a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40103c:	6042      	str	r2, [r0, #4]
  40103e:	4770      	bx	lr
	switch (ul_type) {
  401040:	2900      	cmp	r1, #0
  401042:	d1fb      	bne.n	40103c <pio_set_peripheral+0x28>
  401044:	4770      	bx	lr
  401046:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40104a:	d021      	beq.n	401090 <pio_set_peripheral+0x7c>
  40104c:	d809      	bhi.n	401062 <pio_set_peripheral+0x4e>
  40104e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401052:	d1f3      	bne.n	40103c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401054:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401056:	4313      	orrs	r3, r2
  401058:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40105a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40105c:	4313      	orrs	r3, r2
  40105e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401060:	e7ec      	b.n	40103c <pio_set_peripheral+0x28>
	switch (ul_type) {
  401062:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401066:	d013      	beq.n	401090 <pio_set_peripheral+0x7c>
  401068:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40106c:	d010      	beq.n	401090 <pio_set_peripheral+0x7c>
  40106e:	e7e5      	b.n	40103c <pio_set_peripheral+0x28>
{
  401070:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401072:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401074:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401076:	43d3      	mvns	r3, r2
  401078:	4021      	ands	r1, r4
  40107a:	461c      	mov	r4, r3
  40107c:	4019      	ands	r1, r3
  40107e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401080:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401082:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401084:	400b      	ands	r3, r1
  401086:	4023      	ands	r3, r4
  401088:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40108a:	6042      	str	r2, [r0, #4]
}
  40108c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401090:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401092:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401094:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401096:	400b      	ands	r3, r1
  401098:	ea23 0302 	bic.w	r3, r3, r2
  40109c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40109e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4010a0:	4313      	orrs	r3, r2
  4010a2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4010a4:	e7ca      	b.n	40103c <pio_set_peripheral+0x28>

004010a6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4010a6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4010a8:	f012 0f01 	tst.w	r2, #1
  4010ac:	d10d      	bne.n	4010ca <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4010ae:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4010b0:	f012 0f0a 	tst.w	r2, #10
  4010b4:	d00b      	beq.n	4010ce <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4010b6:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4010b8:	f012 0f02 	tst.w	r2, #2
  4010bc:	d109      	bne.n	4010d2 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4010be:	f012 0f08 	tst.w	r2, #8
  4010c2:	d008      	beq.n	4010d6 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4010c4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4010c8:	e005      	b.n	4010d6 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4010ca:	6641      	str	r1, [r0, #100]	; 0x64
  4010cc:	e7f0      	b.n	4010b0 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4010ce:	6241      	str	r1, [r0, #36]	; 0x24
  4010d0:	e7f2      	b.n	4010b8 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4010d2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4010d6:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4010d8:	6001      	str	r1, [r0, #0]
  4010da:	4770      	bx	lr

004010dc <pio_set_output>:
{
  4010dc:	b410      	push	{r4}
  4010de:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4010e0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4010e2:	b94c      	cbnz	r4, 4010f8 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4010e4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4010e6:	b14b      	cbz	r3, 4010fc <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4010e8:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4010ea:	b94a      	cbnz	r2, 401100 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4010ec:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4010ee:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4010f0:	6001      	str	r1, [r0, #0]
}
  4010f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010f6:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4010f8:	6641      	str	r1, [r0, #100]	; 0x64
  4010fa:	e7f4      	b.n	4010e6 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4010fc:	6541      	str	r1, [r0, #84]	; 0x54
  4010fe:	e7f4      	b.n	4010ea <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401100:	6301      	str	r1, [r0, #48]	; 0x30
  401102:	e7f4      	b.n	4010ee <pio_set_output+0x12>

00401104 <pio_configure>:
{
  401104:	b570      	push	{r4, r5, r6, lr}
  401106:	b082      	sub	sp, #8
  401108:	4605      	mov	r5, r0
  40110a:	4616      	mov	r6, r2
  40110c:	461c      	mov	r4, r3
	switch (ul_type) {
  40110e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401112:	d014      	beq.n	40113e <pio_configure+0x3a>
  401114:	d90a      	bls.n	40112c <pio_configure+0x28>
  401116:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40111a:	d024      	beq.n	401166 <pio_configure+0x62>
  40111c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401120:	d021      	beq.n	401166 <pio_configure+0x62>
  401122:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401126:	d017      	beq.n	401158 <pio_configure+0x54>
		return 0;
  401128:	2000      	movs	r0, #0
  40112a:	e01a      	b.n	401162 <pio_configure+0x5e>
	switch (ul_type) {
  40112c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401130:	d005      	beq.n	40113e <pio_configure+0x3a>
  401132:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401136:	d002      	beq.n	40113e <pio_configure+0x3a>
  401138:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40113c:	d1f4      	bne.n	401128 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40113e:	4632      	mov	r2, r6
  401140:	4628      	mov	r0, r5
  401142:	4b11      	ldr	r3, [pc, #68]	; (401188 <pio_configure+0x84>)
  401144:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401146:	f014 0f01 	tst.w	r4, #1
  40114a:	d102      	bne.n	401152 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  40114c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40114e:	2001      	movs	r0, #1
  401150:	e007      	b.n	401162 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  401152:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401154:	2001      	movs	r0, #1
  401156:	e004      	b.n	401162 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401158:	461a      	mov	r2, r3
  40115a:	4631      	mov	r1, r6
  40115c:	4b0b      	ldr	r3, [pc, #44]	; (40118c <pio_configure+0x88>)
  40115e:	4798      	blx	r3
	return 1;
  401160:	2001      	movs	r0, #1
}
  401162:	b002      	add	sp, #8
  401164:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401166:	f004 0301 	and.w	r3, r4, #1
  40116a:	9300      	str	r3, [sp, #0]
  40116c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401170:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401174:	bf14      	ite	ne
  401176:	2200      	movne	r2, #0
  401178:	2201      	moveq	r2, #1
  40117a:	4631      	mov	r1, r6
  40117c:	4628      	mov	r0, r5
  40117e:	4c04      	ldr	r4, [pc, #16]	; (401190 <pio_configure+0x8c>)
  401180:	47a0      	blx	r4
	return 1;
  401182:	2001      	movs	r0, #1
		break;
  401184:	e7ed      	b.n	401162 <pio_configure+0x5e>
  401186:	bf00      	nop
  401188:	00401015 	.word	0x00401015
  40118c:	004010a7 	.word	0x004010a7
  401190:	004010dd 	.word	0x004010dd

00401194 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  401194:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401196:	420b      	tst	r3, r1
}
  401198:	bf14      	ite	ne
  40119a:	2001      	movne	r0, #1
  40119c:	2000      	moveq	r0, #0
  40119e:	4770      	bx	lr

004011a0 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4011a0:	f012 0f10 	tst.w	r2, #16
  4011a4:	d012      	beq.n	4011cc <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4011a6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4011aa:	f012 0f20 	tst.w	r2, #32
  4011ae:	d007      	beq.n	4011c0 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4011b0:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4011b4:	f012 0f40 	tst.w	r2, #64	; 0x40
  4011b8:	d005      	beq.n	4011c6 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4011ba:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4011be:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4011c0:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4011c4:	e7f6      	b.n	4011b4 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4011c6:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4011ca:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4011cc:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4011d0:	4770      	bx	lr

004011d2 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4011d2:	6401      	str	r1, [r0, #64]	; 0x40
  4011d4:	4770      	bx	lr

004011d6 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4011d6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4011d8:	4770      	bx	lr

004011da <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4011da:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4011dc:	4770      	bx	lr
	...

004011e0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4011e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4011e4:	4604      	mov	r4, r0
  4011e6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4011e8:	4b0e      	ldr	r3, [pc, #56]	; (401224 <pio_handler_process+0x44>)
  4011ea:	4798      	blx	r3
  4011ec:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4011ee:	4620      	mov	r0, r4
  4011f0:	4b0d      	ldr	r3, [pc, #52]	; (401228 <pio_handler_process+0x48>)
  4011f2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4011f4:	4005      	ands	r5, r0
  4011f6:	d013      	beq.n	401220 <pio_handler_process+0x40>
  4011f8:	4c0c      	ldr	r4, [pc, #48]	; (40122c <pio_handler_process+0x4c>)
  4011fa:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4011fe:	e003      	b.n	401208 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401200:	42b4      	cmp	r4, r6
  401202:	d00d      	beq.n	401220 <pio_handler_process+0x40>
  401204:	3410      	adds	r4, #16
		while (status != 0) {
  401206:	b15d      	cbz	r5, 401220 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401208:	6820      	ldr	r0, [r4, #0]
  40120a:	4540      	cmp	r0, r8
  40120c:	d1f8      	bne.n	401200 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40120e:	6861      	ldr	r1, [r4, #4]
  401210:	4229      	tst	r1, r5
  401212:	d0f5      	beq.n	401200 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401214:	68e3      	ldr	r3, [r4, #12]
  401216:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401218:	6863      	ldr	r3, [r4, #4]
  40121a:	ea25 0503 	bic.w	r5, r5, r3
  40121e:	e7ef      	b.n	401200 <pio_handler_process+0x20>
  401220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401224:	004011d7 	.word	0x004011d7
  401228:	004011db 	.word	0x004011db
  40122c:	20400bf8 	.word	0x20400bf8

00401230 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  401230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  401232:	4c18      	ldr	r4, [pc, #96]	; (401294 <pio_handler_set+0x64>)
  401234:	6826      	ldr	r6, [r4, #0]
  401236:	2e06      	cmp	r6, #6
  401238:	d82a      	bhi.n	401290 <pio_handler_set+0x60>
  40123a:	f04f 0c00 	mov.w	ip, #0
  40123e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401240:	4f15      	ldr	r7, [pc, #84]	; (401298 <pio_handler_set+0x68>)
  401242:	e004      	b.n	40124e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401244:	3401      	adds	r4, #1
  401246:	b2e4      	uxtb	r4, r4
  401248:	46a4      	mov	ip, r4
  40124a:	42a6      	cmp	r6, r4
  40124c:	d309      	bcc.n	401262 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40124e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401250:	0125      	lsls	r5, r4, #4
  401252:	597d      	ldr	r5, [r7, r5]
  401254:	428d      	cmp	r5, r1
  401256:	d1f5      	bne.n	401244 <pio_handler_set+0x14>
  401258:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  40125c:	686d      	ldr	r5, [r5, #4]
  40125e:	4295      	cmp	r5, r2
  401260:	d1f0      	bne.n	401244 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  401262:	4d0d      	ldr	r5, [pc, #52]	; (401298 <pio_handler_set+0x68>)
  401264:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  401268:	eb05 040e 	add.w	r4, r5, lr
  40126c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  401270:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  401272:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  401274:	9906      	ldr	r1, [sp, #24]
  401276:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  401278:	3601      	adds	r6, #1
  40127a:	4566      	cmp	r6, ip
  40127c:	d005      	beq.n	40128a <pio_handler_set+0x5a>
  40127e:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401280:	461a      	mov	r2, r3
  401282:	4b06      	ldr	r3, [pc, #24]	; (40129c <pio_handler_set+0x6c>)
  401284:	4798      	blx	r3

	return 0;
  401286:	2000      	movs	r0, #0
  401288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  40128a:	4902      	ldr	r1, [pc, #8]	; (401294 <pio_handler_set+0x64>)
  40128c:	600e      	str	r6, [r1, #0]
  40128e:	e7f6      	b.n	40127e <pio_handler_set+0x4e>
		return 1;
  401290:	2001      	movs	r0, #1
}
  401292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401294:	20400c68 	.word	0x20400c68
  401298:	20400bf8 	.word	0x20400bf8
  40129c:	004011a1 	.word	0x004011a1

004012a0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4012a0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4012a2:	210a      	movs	r1, #10
  4012a4:	4801      	ldr	r0, [pc, #4]	; (4012ac <PIOA_Handler+0xc>)
  4012a6:	4b02      	ldr	r3, [pc, #8]	; (4012b0 <PIOA_Handler+0x10>)
  4012a8:	4798      	blx	r3
  4012aa:	bd08      	pop	{r3, pc}
  4012ac:	400e0e00 	.word	0x400e0e00
  4012b0:	004011e1 	.word	0x004011e1

004012b4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4012b4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4012b6:	210b      	movs	r1, #11
  4012b8:	4801      	ldr	r0, [pc, #4]	; (4012c0 <PIOB_Handler+0xc>)
  4012ba:	4b02      	ldr	r3, [pc, #8]	; (4012c4 <PIOB_Handler+0x10>)
  4012bc:	4798      	blx	r3
  4012be:	bd08      	pop	{r3, pc}
  4012c0:	400e1000 	.word	0x400e1000
  4012c4:	004011e1 	.word	0x004011e1

004012c8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4012c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4012ca:	210c      	movs	r1, #12
  4012cc:	4801      	ldr	r0, [pc, #4]	; (4012d4 <PIOC_Handler+0xc>)
  4012ce:	4b02      	ldr	r3, [pc, #8]	; (4012d8 <PIOC_Handler+0x10>)
  4012d0:	4798      	blx	r3
  4012d2:	bd08      	pop	{r3, pc}
  4012d4:	400e1200 	.word	0x400e1200
  4012d8:	004011e1 	.word	0x004011e1

004012dc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4012dc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4012de:	2110      	movs	r1, #16
  4012e0:	4801      	ldr	r0, [pc, #4]	; (4012e8 <PIOD_Handler+0xc>)
  4012e2:	4b02      	ldr	r3, [pc, #8]	; (4012ec <PIOD_Handler+0x10>)
  4012e4:	4798      	blx	r3
  4012e6:	bd08      	pop	{r3, pc}
  4012e8:	400e1400 	.word	0x400e1400
  4012ec:	004011e1 	.word	0x004011e1

004012f0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4012f0:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4012f2:	2111      	movs	r1, #17
  4012f4:	4801      	ldr	r0, [pc, #4]	; (4012fc <PIOE_Handler+0xc>)
  4012f6:	4b02      	ldr	r3, [pc, #8]	; (401300 <PIOE_Handler+0x10>)
  4012f8:	4798      	blx	r3
  4012fa:	bd08      	pop	{r3, pc}
  4012fc:	400e1600 	.word	0x400e1600
  401300:	004011e1 	.word	0x004011e1

00401304 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401304:	2803      	cmp	r0, #3
  401306:	d011      	beq.n	40132c <pmc_mck_set_division+0x28>
  401308:	2804      	cmp	r0, #4
  40130a:	d012      	beq.n	401332 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40130c:	2802      	cmp	r0, #2
  40130e:	bf0c      	ite	eq
  401310:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401314:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401316:	4a08      	ldr	r2, [pc, #32]	; (401338 <pmc_mck_set_division+0x34>)
  401318:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40131a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40131e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401320:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401322:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401324:	f013 0f08 	tst.w	r3, #8
  401328:	d0fb      	beq.n	401322 <pmc_mck_set_division+0x1e>
}
  40132a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40132c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401330:	e7f1      	b.n	401316 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401332:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401336:	e7ee      	b.n	401316 <pmc_mck_set_division+0x12>
  401338:	400e0600 	.word	0x400e0600

0040133c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40133c:	4a17      	ldr	r2, [pc, #92]	; (40139c <pmc_switch_mck_to_pllack+0x60>)
  40133e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401344:	4318      	orrs	r0, r3
  401346:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401348:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40134a:	f013 0f08 	tst.w	r3, #8
  40134e:	d10a      	bne.n	401366 <pmc_switch_mck_to_pllack+0x2a>
  401350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401354:	4911      	ldr	r1, [pc, #68]	; (40139c <pmc_switch_mck_to_pllack+0x60>)
  401356:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401358:	f012 0f08 	tst.w	r2, #8
  40135c:	d103      	bne.n	401366 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40135e:	3b01      	subs	r3, #1
  401360:	d1f9      	bne.n	401356 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401362:	2001      	movs	r0, #1
  401364:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401366:	4a0d      	ldr	r2, [pc, #52]	; (40139c <pmc_switch_mck_to_pllack+0x60>)
  401368:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40136a:	f023 0303 	bic.w	r3, r3, #3
  40136e:	f043 0302 	orr.w	r3, r3, #2
  401372:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401374:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401376:	f013 0f08 	tst.w	r3, #8
  40137a:	d10a      	bne.n	401392 <pmc_switch_mck_to_pllack+0x56>
  40137c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401380:	4906      	ldr	r1, [pc, #24]	; (40139c <pmc_switch_mck_to_pllack+0x60>)
  401382:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401384:	f012 0f08 	tst.w	r2, #8
  401388:	d105      	bne.n	401396 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40138a:	3b01      	subs	r3, #1
  40138c:	d1f9      	bne.n	401382 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40138e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401390:	4770      	bx	lr
	return 0;
  401392:	2000      	movs	r0, #0
  401394:	4770      	bx	lr
  401396:	2000      	movs	r0, #0
  401398:	4770      	bx	lr
  40139a:	bf00      	nop
  40139c:	400e0600 	.word	0x400e0600

004013a0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4013a0:	b9a0      	cbnz	r0, 4013cc <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4013a2:	480e      	ldr	r0, [pc, #56]	; (4013dc <pmc_switch_mainck_to_xtal+0x3c>)
  4013a4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4013a6:	0209      	lsls	r1, r1, #8
  4013a8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4013aa:	4a0d      	ldr	r2, [pc, #52]	; (4013e0 <pmc_switch_mainck_to_xtal+0x40>)
  4013ac:	401a      	ands	r2, r3
  4013ae:	4b0d      	ldr	r3, [pc, #52]	; (4013e4 <pmc_switch_mainck_to_xtal+0x44>)
  4013b0:	4313      	orrs	r3, r2
  4013b2:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4013b4:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4013b6:	4602      	mov	r2, r0
  4013b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013ba:	f013 0f01 	tst.w	r3, #1
  4013be:	d0fb      	beq.n	4013b8 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4013c0:	4a06      	ldr	r2, [pc, #24]	; (4013dc <pmc_switch_mainck_to_xtal+0x3c>)
  4013c2:	6a11      	ldr	r1, [r2, #32]
  4013c4:	4b08      	ldr	r3, [pc, #32]	; (4013e8 <pmc_switch_mainck_to_xtal+0x48>)
  4013c6:	430b      	orrs	r3, r1
  4013c8:	6213      	str	r3, [r2, #32]
  4013ca:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4013cc:	4903      	ldr	r1, [pc, #12]	; (4013dc <pmc_switch_mainck_to_xtal+0x3c>)
  4013ce:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4013d0:	4a06      	ldr	r2, [pc, #24]	; (4013ec <pmc_switch_mainck_to_xtal+0x4c>)
  4013d2:	401a      	ands	r2, r3
  4013d4:	4b06      	ldr	r3, [pc, #24]	; (4013f0 <pmc_switch_mainck_to_xtal+0x50>)
  4013d6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4013d8:	620b      	str	r3, [r1, #32]
  4013da:	4770      	bx	lr
  4013dc:	400e0600 	.word	0x400e0600
  4013e0:	ffc8fffc 	.word	0xffc8fffc
  4013e4:	00370001 	.word	0x00370001
  4013e8:	01370000 	.word	0x01370000
  4013ec:	fec8fffc 	.word	0xfec8fffc
  4013f0:	01370002 	.word	0x01370002

004013f4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4013f4:	4b02      	ldr	r3, [pc, #8]	; (401400 <pmc_osc_is_ready_mainck+0xc>)
  4013f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4013f8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4013fc:	4770      	bx	lr
  4013fe:	bf00      	nop
  401400:	400e0600 	.word	0x400e0600

00401404 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401404:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401408:	4b01      	ldr	r3, [pc, #4]	; (401410 <pmc_disable_pllack+0xc>)
  40140a:	629a      	str	r2, [r3, #40]	; 0x28
  40140c:	4770      	bx	lr
  40140e:	bf00      	nop
  401410:	400e0600 	.word	0x400e0600

00401414 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401414:	4b02      	ldr	r3, [pc, #8]	; (401420 <pmc_is_locked_pllack+0xc>)
  401416:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401418:	f000 0002 	and.w	r0, r0, #2
  40141c:	4770      	bx	lr
  40141e:	bf00      	nop
  401420:	400e0600 	.word	0x400e0600

00401424 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401424:	283f      	cmp	r0, #63	; 0x3f
  401426:	d81e      	bhi.n	401466 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401428:	281f      	cmp	r0, #31
  40142a:	d80c      	bhi.n	401446 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40142c:	4b11      	ldr	r3, [pc, #68]	; (401474 <pmc_enable_periph_clk+0x50>)
  40142e:	699a      	ldr	r2, [r3, #24]
  401430:	2301      	movs	r3, #1
  401432:	4083      	lsls	r3, r0
  401434:	4393      	bics	r3, r2
  401436:	d018      	beq.n	40146a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401438:	2301      	movs	r3, #1
  40143a:	fa03 f000 	lsl.w	r0, r3, r0
  40143e:	4b0d      	ldr	r3, [pc, #52]	; (401474 <pmc_enable_periph_clk+0x50>)
  401440:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401442:	2000      	movs	r0, #0
  401444:	4770      	bx	lr
		ul_id -= 32;
  401446:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401448:	4b0a      	ldr	r3, [pc, #40]	; (401474 <pmc_enable_periph_clk+0x50>)
  40144a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40144e:	2301      	movs	r3, #1
  401450:	4083      	lsls	r3, r0
  401452:	4393      	bics	r3, r2
  401454:	d00b      	beq.n	40146e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401456:	2301      	movs	r3, #1
  401458:	fa03 f000 	lsl.w	r0, r3, r0
  40145c:	4b05      	ldr	r3, [pc, #20]	; (401474 <pmc_enable_periph_clk+0x50>)
  40145e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401462:	2000      	movs	r0, #0
  401464:	4770      	bx	lr
		return 1;
  401466:	2001      	movs	r0, #1
  401468:	4770      	bx	lr
	return 0;
  40146a:	2000      	movs	r0, #0
  40146c:	4770      	bx	lr
  40146e:	2000      	movs	r0, #0
}
  401470:	4770      	bx	lr
  401472:	bf00      	nop
  401474:	400e0600 	.word	0x400e0600

00401478 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  401478:	4770      	bx	lr
	...

0040147c <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  40147c:	4a10      	ldr	r2, [pc, #64]	; (4014c0 <pmc_enable_waitmode+0x44>)
  40147e:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  401480:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  401484:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  401488:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  40148a:	6a11      	ldr	r1, [r2, #32]
  40148c:	4b0d      	ldr	r3, [pc, #52]	; (4014c4 <pmc_enable_waitmode+0x48>)
  40148e:	430b      	orrs	r3, r1
  401490:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401492:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401494:	f013 0f08 	tst.w	r3, #8
  401498:	d0fb      	beq.n	401492 <pmc_enable_waitmode+0x16>
  40149a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  40149e:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  4014a0:	3b01      	subs	r3, #1
  4014a2:	d1fc      	bne.n	40149e <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4014a4:	4a06      	ldr	r2, [pc, #24]	; (4014c0 <pmc_enable_waitmode+0x44>)
  4014a6:	6a13      	ldr	r3, [r2, #32]
  4014a8:	f013 0f08 	tst.w	r3, #8
  4014ac:	d0fb      	beq.n	4014a6 <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4014ae:	4a04      	ldr	r2, [pc, #16]	; (4014c0 <pmc_enable_waitmode+0x44>)
  4014b0:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4014b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4014b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4014ba:	6713      	str	r3, [r2, #112]	; 0x70
  4014bc:	4770      	bx	lr
  4014be:	bf00      	nop
  4014c0:	400e0600 	.word	0x400e0600
  4014c4:	00370004 	.word	0x00370004

004014c8 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4014c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  4014cc:	1e43      	subs	r3, r0, #1
  4014ce:	2b04      	cmp	r3, #4
  4014d0:	f200 8107 	bhi.w	4016e2 <pmc_sleep+0x21a>
  4014d4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4014d8:	00050005 	.word	0x00050005
  4014dc:	00150015 	.word	0x00150015
  4014e0:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  4014e2:	4a81      	ldr	r2, [pc, #516]	; (4016e8 <pmc_sleep+0x220>)
  4014e4:	6913      	ldr	r3, [r2, #16]
  4014e6:	f023 0304 	bic.w	r3, r3, #4
  4014ea:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  4014ec:	2201      	movs	r2, #1
  4014ee:	4b7f      	ldr	r3, [pc, #508]	; (4016ec <pmc_sleep+0x224>)
  4014f0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4014f2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4014f6:	b662      	cpsie	i
  __ASM volatile ("dsb");
  4014f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  4014fc:	bf30      	wfi
  4014fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401502:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  401504:	2803      	cmp	r0, #3
  401506:	bf0c      	ite	eq
  401508:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40150a:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  40150e:	4b78      	ldr	r3, [pc, #480]	; (4016f0 <pmc_sleep+0x228>)
  401510:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401512:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401514:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  401518:	2200      	movs	r2, #0
  40151a:	4b74      	ldr	r3, [pc, #464]	; (4016ec <pmc_sleep+0x224>)
  40151c:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  40151e:	2201      	movs	r2, #1
  401520:	4b74      	ldr	r3, [pc, #464]	; (4016f4 <pmc_sleep+0x22c>)
  401522:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  401524:	4b74      	ldr	r3, [pc, #464]	; (4016f8 <pmc_sleep+0x230>)
  401526:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  401528:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40152a:	4a74      	ldr	r2, [pc, #464]	; (4016fc <pmc_sleep+0x234>)
  40152c:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  401530:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  401532:	4a73      	ldr	r2, [pc, #460]	; (401700 <pmc_sleep+0x238>)
  401534:	433a      	orrs	r2, r7
  401536:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  401538:	f005 0903 	and.w	r9, r5, #3
  40153c:	f1b9 0f01 	cmp.w	r9, #1
  401540:	f240 8089 	bls.w	401656 <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  401544:	f025 0103 	bic.w	r1, r5, #3
  401548:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  40154c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40154e:	461a      	mov	r2, r3
  401550:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401552:	f013 0f08 	tst.w	r3, #8
  401556:	d0fb      	beq.n	401550 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  401558:	f011 0f70 	tst.w	r1, #112	; 0x70
  40155c:	d008      	beq.n	401570 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  40155e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  401562:	4b65      	ldr	r3, [pc, #404]	; (4016f8 <pmc_sleep+0x230>)
  401564:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401566:	461a      	mov	r2, r3
  401568:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40156a:	f013 0f08 	tst.w	r3, #8
  40156e:	d0fb      	beq.n	401568 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  401570:	4b64      	ldr	r3, [pc, #400]	; (401704 <pmc_sleep+0x23c>)
  401572:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401574:	4a60      	ldr	r2, [pc, #384]	; (4016f8 <pmc_sleep+0x230>)
  401576:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401578:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40157c:	d0fb      	beq.n	401576 <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40157e:	4a5e      	ldr	r2, [pc, #376]	; (4016f8 <pmc_sleep+0x230>)
  401580:	6a11      	ldr	r1, [r2, #32]
  401582:	4b61      	ldr	r3, [pc, #388]	; (401708 <pmc_sleep+0x240>)
  401584:	400b      	ands	r3, r1
  401586:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40158a:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40158c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40158e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401592:	d0fb      	beq.n	40158c <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  401594:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  401598:	4a58      	ldr	r2, [pc, #352]	; (4016fc <pmc_sleep+0x234>)
  40159a:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  40159c:	2c04      	cmp	r4, #4
  40159e:	d05c      	beq.n	40165a <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4015a0:	4c52      	ldr	r4, [pc, #328]	; (4016ec <pmc_sleep+0x224>)
  4015a2:	2301      	movs	r3, #1
  4015a4:	7023      	strb	r3, [r4, #0]
  4015a6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4015aa:	b662      	cpsie	i

		pmc_enable_waitmode();
  4015ac:	4b57      	ldr	r3, [pc, #348]	; (40170c <pmc_sleep+0x244>)
  4015ae:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4015b0:	b672      	cpsid	i
  4015b2:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4015b6:	2300      	movs	r3, #0
  4015b8:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4015ba:	f017 0f02 	tst.w	r7, #2
  4015be:	d055      	beq.n	40166c <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015c0:	4a4d      	ldr	r2, [pc, #308]	; (4016f8 <pmc_sleep+0x230>)
  4015c2:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4015c4:	4952      	ldr	r1, [pc, #328]	; (401710 <pmc_sleep+0x248>)
  4015c6:	4019      	ands	r1, r3
  4015c8:	4b52      	ldr	r3, [pc, #328]	; (401714 <pmc_sleep+0x24c>)
  4015ca:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015cc:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4015ce:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  4015d0:	4b51      	ldr	r3, [pc, #324]	; (401718 <pmc_sleep+0x250>)
  4015d2:	400b      	ands	r3, r1
  4015d4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4015d8:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  4015da:	4b50      	ldr	r3, [pc, #320]	; (40171c <pmc_sleep+0x254>)
  4015dc:	4033      	ands	r3, r6
  4015de:	2b00      	cmp	r3, #0
  4015e0:	d06e      	beq.n	4016c0 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  4015e2:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4015e6:	4b44      	ldr	r3, [pc, #272]	; (4016f8 <pmc_sleep+0x230>)
  4015e8:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  4015ea:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  4015ec:	f1b9 0f02 	cmp.w	r9, #2
  4015f0:	d104      	bne.n	4015fc <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  4015f2:	4a41      	ldr	r2, [pc, #260]	; (4016f8 <pmc_sleep+0x230>)
  4015f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4015f6:	f013 0f02 	tst.w	r3, #2
  4015fa:	d0fb      	beq.n	4015f4 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  4015fc:	4a3e      	ldr	r2, [pc, #248]	; (4016f8 <pmc_sleep+0x230>)
  4015fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  401604:	f005 0070 	and.w	r0, r5, #112	; 0x70
  401608:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40160a:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40160c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40160e:	f013 0f08 	tst.w	r3, #8
  401612:	d0fb      	beq.n	40160c <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  401614:	4b39      	ldr	r3, [pc, #228]	; (4016fc <pmc_sleep+0x234>)
  401616:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  40161a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  40161e:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401620:	461a      	mov	r2, r3
  401622:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401624:	f013 0f08 	tst.w	r3, #8
  401628:	d0fb      	beq.n	401622 <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  40162a:	4a33      	ldr	r2, [pc, #204]	; (4016f8 <pmc_sleep+0x230>)
  40162c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40162e:	420b      	tst	r3, r1
  401630:	d0fc      	beq.n	40162c <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  401632:	2200      	movs	r2, #0
  401634:	4b2f      	ldr	r3, [pc, #188]	; (4016f4 <pmc_sleep+0x22c>)
  401636:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  401638:	4b39      	ldr	r3, [pc, #228]	; (401720 <pmc_sleep+0x258>)
  40163a:	681b      	ldr	r3, [r3, #0]
  40163c:	b11b      	cbz	r3, 401646 <pmc_sleep+0x17e>
			callback_clocks_restored();
  40163e:	4798      	blx	r3
			callback_clocks_restored = NULL;
  401640:	2200      	movs	r2, #0
  401642:	4b37      	ldr	r3, [pc, #220]	; (401720 <pmc_sleep+0x258>)
  401644:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  401646:	2201      	movs	r2, #1
  401648:	4b28      	ldr	r3, [pc, #160]	; (4016ec <pmc_sleep+0x224>)
  40164a:	701a      	strb	r2, [r3, #0]
  40164c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401650:	b662      	cpsie	i
  401652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  401656:	4629      	mov	r1, r5
  401658:	e77e      	b.n	401558 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40165a:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  40165e:	6a11      	ldr	r1, [r2, #32]
  401660:	4b30      	ldr	r3, [pc, #192]	; (401724 <pmc_sleep+0x25c>)
  401662:	400b      	ands	r3, r1
  401664:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401668:	6213      	str	r3, [r2, #32]
  40166a:	e799      	b.n	4015a0 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  40166c:	f017 0f01 	tst.w	r7, #1
  401670:	d0b3      	beq.n	4015da <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  401672:	4b21      	ldr	r3, [pc, #132]	; (4016f8 <pmc_sleep+0x230>)
  401674:	6a1b      	ldr	r3, [r3, #32]
  401676:	f013 0f01 	tst.w	r3, #1
  40167a:	d10b      	bne.n	401694 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40167c:	491e      	ldr	r1, [pc, #120]	; (4016f8 <pmc_sleep+0x230>)
  40167e:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  401680:	4a29      	ldr	r2, [pc, #164]	; (401728 <pmc_sleep+0x260>)
  401682:	401a      	ands	r2, r3
  401684:	4b29      	ldr	r3, [pc, #164]	; (40172c <pmc_sleep+0x264>)
  401686:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401688:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40168a:	460a      	mov	r2, r1
  40168c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40168e:	f013 0f01 	tst.w	r3, #1
  401692:	d0fb      	beq.n	40168c <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  401694:	4b18      	ldr	r3, [pc, #96]	; (4016f8 <pmc_sleep+0x230>)
  401696:	6a1b      	ldr	r3, [r3, #32]
  401698:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40169c:	d108      	bne.n	4016b0 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40169e:	4a16      	ldr	r2, [pc, #88]	; (4016f8 <pmc_sleep+0x230>)
  4016a0:	6a11      	ldr	r1, [r2, #32]
  4016a2:	4b23      	ldr	r3, [pc, #140]	; (401730 <pmc_sleep+0x268>)
  4016a4:	430b      	orrs	r3, r1
  4016a6:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4016a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4016aa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4016ae:	d0fb      	beq.n	4016a8 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4016b0:	4a11      	ldr	r2, [pc, #68]	; (4016f8 <pmc_sleep+0x230>)
  4016b2:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  4016b4:	4b18      	ldr	r3, [pc, #96]	; (401718 <pmc_sleep+0x250>)
  4016b6:	400b      	ands	r3, r1
  4016b8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4016bc:	6213      	str	r3, [r2, #32]
  4016be:	e78c      	b.n	4015da <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  4016c0:	2100      	movs	r1, #0
  4016c2:	e793      	b.n	4015ec <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  4016c4:	4a08      	ldr	r2, [pc, #32]	; (4016e8 <pmc_sleep+0x220>)
  4016c6:	6913      	ldr	r3, [r2, #16]
  4016c8:	f043 0304 	orr.w	r3, r3, #4
  4016cc:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  4016ce:	4a19      	ldr	r2, [pc, #100]	; (401734 <pmc_sleep+0x26c>)
  4016d0:	4b19      	ldr	r3, [pc, #100]	; (401738 <pmc_sleep+0x270>)
  4016d2:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  4016d4:	2201      	movs	r2, #1
  4016d6:	4b05      	ldr	r3, [pc, #20]	; (4016ec <pmc_sleep+0x224>)
  4016d8:	701a      	strb	r2, [r3, #0]
  4016da:	f3bf 8f5f 	dmb	sy
  4016de:	b662      	cpsie	i
  __ASM volatile ("wfi");
  4016e0:	bf30      	wfi
  4016e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4016e6:	bf00      	nop
  4016e8:	e000ed00 	.word	0xe000ed00
  4016ec:	20400018 	.word	0x20400018
  4016f0:	00401479 	.word	0x00401479
  4016f4:	20400c6c 	.word	0x20400c6c
  4016f8:	400e0600 	.word	0x400e0600
  4016fc:	400e0c00 	.word	0x400e0c00
  401700:	00370008 	.word	0x00370008
  401704:	00401405 	.word	0x00401405
  401708:	fec8ffff 	.word	0xfec8ffff
  40170c:	0040147d 	.word	0x0040147d
  401710:	fec8fffc 	.word	0xfec8fffc
  401714:	01370002 	.word	0x01370002
  401718:	ffc8ff87 	.word	0xffc8ff87
  40171c:	07ff0000 	.word	0x07ff0000
  401720:	20400c70 	.word	0x20400c70
  401724:	ffc8fffe 	.word	0xffc8fffe
  401728:	ffc8fffc 	.word	0xffc8fffc
  40172c:	00370001 	.word	0x00370001
  401730:	01370000 	.word	0x01370000
  401734:	a5000004 	.word	0xa5000004
  401738:	400e1810 	.word	0x400e1810

0040173c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40173c:	e7fe      	b.n	40173c <Dummy_Handler>
	...

00401740 <Reset_Handler>:
{
  401740:	b500      	push	{lr}
  401742:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401744:	4b25      	ldr	r3, [pc, #148]	; (4017dc <Reset_Handler+0x9c>)
  401746:	4a26      	ldr	r2, [pc, #152]	; (4017e0 <Reset_Handler+0xa0>)
  401748:	429a      	cmp	r2, r3
  40174a:	d010      	beq.n	40176e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40174c:	4b25      	ldr	r3, [pc, #148]	; (4017e4 <Reset_Handler+0xa4>)
  40174e:	4a23      	ldr	r2, [pc, #140]	; (4017dc <Reset_Handler+0x9c>)
  401750:	429a      	cmp	r2, r3
  401752:	d20c      	bcs.n	40176e <Reset_Handler+0x2e>
  401754:	3b01      	subs	r3, #1
  401756:	1a9b      	subs	r3, r3, r2
  401758:	f023 0303 	bic.w	r3, r3, #3
  40175c:	3304      	adds	r3, #4
  40175e:	4413      	add	r3, r2
  401760:	491f      	ldr	r1, [pc, #124]	; (4017e0 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401762:	f851 0b04 	ldr.w	r0, [r1], #4
  401766:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40176a:	429a      	cmp	r2, r3
  40176c:	d1f9      	bne.n	401762 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40176e:	4b1e      	ldr	r3, [pc, #120]	; (4017e8 <Reset_Handler+0xa8>)
  401770:	4a1e      	ldr	r2, [pc, #120]	; (4017ec <Reset_Handler+0xac>)
  401772:	429a      	cmp	r2, r3
  401774:	d20a      	bcs.n	40178c <Reset_Handler+0x4c>
  401776:	3b01      	subs	r3, #1
  401778:	1a9b      	subs	r3, r3, r2
  40177a:	f023 0303 	bic.w	r3, r3, #3
  40177e:	3304      	adds	r3, #4
  401780:	4413      	add	r3, r2
                *pDest++ = 0;
  401782:	2100      	movs	r1, #0
  401784:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401788:	4293      	cmp	r3, r2
  40178a:	d1fb      	bne.n	401784 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40178c:	4a18      	ldr	r2, [pc, #96]	; (4017f0 <Reset_Handler+0xb0>)
  40178e:	4b19      	ldr	r3, [pc, #100]	; (4017f4 <Reset_Handler+0xb4>)
  401790:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401794:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401796:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40179a:	fab3 f383 	clz	r3, r3
  40179e:	095b      	lsrs	r3, r3, #5
  4017a0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4017a2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4017a4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4017a8:	2200      	movs	r2, #0
  4017aa:	4b13      	ldr	r3, [pc, #76]	; (4017f8 <Reset_Handler+0xb8>)
  4017ac:	701a      	strb	r2, [r3, #0]
	return flags;
  4017ae:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4017b0:	4a12      	ldr	r2, [pc, #72]	; (4017fc <Reset_Handler+0xbc>)
  4017b2:	6813      	ldr	r3, [r2, #0]
  4017b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4017b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4017ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4017be:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4017c2:	b129      	cbz	r1, 4017d0 <Reset_Handler+0x90>
		cpu_irq_enable();
  4017c4:	2201      	movs	r2, #1
  4017c6:	4b0c      	ldr	r3, [pc, #48]	; (4017f8 <Reset_Handler+0xb8>)
  4017c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4017ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4017ce:	b662      	cpsie	i
        __libc_init_array();
  4017d0:	4b0b      	ldr	r3, [pc, #44]	; (401800 <Reset_Handler+0xc0>)
  4017d2:	4798      	blx	r3
        main();
  4017d4:	4b0b      	ldr	r3, [pc, #44]	; (401804 <Reset_Handler+0xc4>)
  4017d6:	4798      	blx	r3
  4017d8:	e7fe      	b.n	4017d8 <Reset_Handler+0x98>
  4017da:	bf00      	nop
  4017dc:	20400000 	.word	0x20400000
  4017e0:	0040742c 	.word	0x0040742c
  4017e4:	204009d0 	.word	0x204009d0
  4017e8:	20400cd8 	.word	0x20400cd8
  4017ec:	204009d0 	.word	0x204009d0
  4017f0:	e000ed00 	.word	0xe000ed00
  4017f4:	00400000 	.word	0x00400000
  4017f8:	20400018 	.word	0x20400018
  4017fc:	e000ed88 	.word	0xe000ed88
  401800:	00402109 	.word	0x00402109
  401804:	00401cc1 	.word	0x00401cc1

00401808 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401808:	4b3b      	ldr	r3, [pc, #236]	; (4018f8 <SystemCoreClockUpdate+0xf0>)
  40180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40180c:	f003 0303 	and.w	r3, r3, #3
  401810:	2b01      	cmp	r3, #1
  401812:	d01d      	beq.n	401850 <SystemCoreClockUpdate+0x48>
  401814:	b183      	cbz	r3, 401838 <SystemCoreClockUpdate+0x30>
  401816:	2b02      	cmp	r3, #2
  401818:	d036      	beq.n	401888 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40181a:	4b37      	ldr	r3, [pc, #220]	; (4018f8 <SystemCoreClockUpdate+0xf0>)
  40181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40181e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401822:	2b70      	cmp	r3, #112	; 0x70
  401824:	d05f      	beq.n	4018e6 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401826:	4b34      	ldr	r3, [pc, #208]	; (4018f8 <SystemCoreClockUpdate+0xf0>)
  401828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40182a:	4934      	ldr	r1, [pc, #208]	; (4018fc <SystemCoreClockUpdate+0xf4>)
  40182c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401830:	680b      	ldr	r3, [r1, #0]
  401832:	40d3      	lsrs	r3, r2
  401834:	600b      	str	r3, [r1, #0]
  401836:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401838:	4b31      	ldr	r3, [pc, #196]	; (401900 <SystemCoreClockUpdate+0xf8>)
  40183a:	695b      	ldr	r3, [r3, #20]
  40183c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401840:	bf14      	ite	ne
  401842:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401846:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40184a:	4b2c      	ldr	r3, [pc, #176]	; (4018fc <SystemCoreClockUpdate+0xf4>)
  40184c:	601a      	str	r2, [r3, #0]
  40184e:	e7e4      	b.n	40181a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401850:	4b29      	ldr	r3, [pc, #164]	; (4018f8 <SystemCoreClockUpdate+0xf0>)
  401852:	6a1b      	ldr	r3, [r3, #32]
  401854:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401858:	d003      	beq.n	401862 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40185a:	4a2a      	ldr	r2, [pc, #168]	; (401904 <SystemCoreClockUpdate+0xfc>)
  40185c:	4b27      	ldr	r3, [pc, #156]	; (4018fc <SystemCoreClockUpdate+0xf4>)
  40185e:	601a      	str	r2, [r3, #0]
  401860:	e7db      	b.n	40181a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401862:	4a29      	ldr	r2, [pc, #164]	; (401908 <SystemCoreClockUpdate+0x100>)
  401864:	4b25      	ldr	r3, [pc, #148]	; (4018fc <SystemCoreClockUpdate+0xf4>)
  401866:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401868:	4b23      	ldr	r3, [pc, #140]	; (4018f8 <SystemCoreClockUpdate+0xf0>)
  40186a:	6a1b      	ldr	r3, [r3, #32]
  40186c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401870:	2b10      	cmp	r3, #16
  401872:	d005      	beq.n	401880 <SystemCoreClockUpdate+0x78>
  401874:	2b20      	cmp	r3, #32
  401876:	d1d0      	bne.n	40181a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401878:	4a22      	ldr	r2, [pc, #136]	; (401904 <SystemCoreClockUpdate+0xfc>)
  40187a:	4b20      	ldr	r3, [pc, #128]	; (4018fc <SystemCoreClockUpdate+0xf4>)
  40187c:	601a      	str	r2, [r3, #0]
          break;
  40187e:	e7cc      	b.n	40181a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401880:	4a22      	ldr	r2, [pc, #136]	; (40190c <SystemCoreClockUpdate+0x104>)
  401882:	4b1e      	ldr	r3, [pc, #120]	; (4018fc <SystemCoreClockUpdate+0xf4>)
  401884:	601a      	str	r2, [r3, #0]
          break;
  401886:	e7c8      	b.n	40181a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401888:	4b1b      	ldr	r3, [pc, #108]	; (4018f8 <SystemCoreClockUpdate+0xf0>)
  40188a:	6a1b      	ldr	r3, [r3, #32]
  40188c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401890:	d016      	beq.n	4018c0 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401892:	4a1c      	ldr	r2, [pc, #112]	; (401904 <SystemCoreClockUpdate+0xfc>)
  401894:	4b19      	ldr	r3, [pc, #100]	; (4018fc <SystemCoreClockUpdate+0xf4>)
  401896:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401898:	4b17      	ldr	r3, [pc, #92]	; (4018f8 <SystemCoreClockUpdate+0xf0>)
  40189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40189c:	f003 0303 	and.w	r3, r3, #3
  4018a0:	2b02      	cmp	r3, #2
  4018a2:	d1ba      	bne.n	40181a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4018a4:	4a14      	ldr	r2, [pc, #80]	; (4018f8 <SystemCoreClockUpdate+0xf0>)
  4018a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4018a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4018aa:	4814      	ldr	r0, [pc, #80]	; (4018fc <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4018ac:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4018b0:	6803      	ldr	r3, [r0, #0]
  4018b2:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4018b6:	b2d2      	uxtb	r2, r2
  4018b8:	fbb3 f3f2 	udiv	r3, r3, r2
  4018bc:	6003      	str	r3, [r0, #0]
  4018be:	e7ac      	b.n	40181a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4018c0:	4a11      	ldr	r2, [pc, #68]	; (401908 <SystemCoreClockUpdate+0x100>)
  4018c2:	4b0e      	ldr	r3, [pc, #56]	; (4018fc <SystemCoreClockUpdate+0xf4>)
  4018c4:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4018c6:	4b0c      	ldr	r3, [pc, #48]	; (4018f8 <SystemCoreClockUpdate+0xf0>)
  4018c8:	6a1b      	ldr	r3, [r3, #32]
  4018ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018ce:	2b10      	cmp	r3, #16
  4018d0:	d005      	beq.n	4018de <SystemCoreClockUpdate+0xd6>
  4018d2:	2b20      	cmp	r3, #32
  4018d4:	d1e0      	bne.n	401898 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4018d6:	4a0b      	ldr	r2, [pc, #44]	; (401904 <SystemCoreClockUpdate+0xfc>)
  4018d8:	4b08      	ldr	r3, [pc, #32]	; (4018fc <SystemCoreClockUpdate+0xf4>)
  4018da:	601a      	str	r2, [r3, #0]
          break;
  4018dc:	e7dc      	b.n	401898 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4018de:	4a0b      	ldr	r2, [pc, #44]	; (40190c <SystemCoreClockUpdate+0x104>)
  4018e0:	4b06      	ldr	r3, [pc, #24]	; (4018fc <SystemCoreClockUpdate+0xf4>)
  4018e2:	601a      	str	r2, [r3, #0]
          break;
  4018e4:	e7d8      	b.n	401898 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4018e6:	4a05      	ldr	r2, [pc, #20]	; (4018fc <SystemCoreClockUpdate+0xf4>)
  4018e8:	6813      	ldr	r3, [r2, #0]
  4018ea:	4909      	ldr	r1, [pc, #36]	; (401910 <SystemCoreClockUpdate+0x108>)
  4018ec:	fba1 1303 	umull	r1, r3, r1, r3
  4018f0:	085b      	lsrs	r3, r3, #1
  4018f2:	6013      	str	r3, [r2, #0]
  4018f4:	4770      	bx	lr
  4018f6:	bf00      	nop
  4018f8:	400e0600 	.word	0x400e0600
  4018fc:	2040001c 	.word	0x2040001c
  401900:	400e1810 	.word	0x400e1810
  401904:	00b71b00 	.word	0x00b71b00
  401908:	003d0900 	.word	0x003d0900
  40190c:	007a1200 	.word	0x007a1200
  401910:	aaaaaaab 	.word	0xaaaaaaab

00401914 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401914:	4b16      	ldr	r3, [pc, #88]	; (401970 <system_init_flash+0x5c>)
  401916:	4298      	cmp	r0, r3
  401918:	d913      	bls.n	401942 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40191a:	4b16      	ldr	r3, [pc, #88]	; (401974 <system_init_flash+0x60>)
  40191c:	4298      	cmp	r0, r3
  40191e:	d915      	bls.n	40194c <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401920:	4b15      	ldr	r3, [pc, #84]	; (401978 <system_init_flash+0x64>)
  401922:	4298      	cmp	r0, r3
  401924:	d916      	bls.n	401954 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401926:	4b15      	ldr	r3, [pc, #84]	; (40197c <system_init_flash+0x68>)
  401928:	4298      	cmp	r0, r3
  40192a:	d917      	bls.n	40195c <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40192c:	4b14      	ldr	r3, [pc, #80]	; (401980 <system_init_flash+0x6c>)
  40192e:	4298      	cmp	r0, r3
  401930:	d918      	bls.n	401964 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401932:	4b14      	ldr	r3, [pc, #80]	; (401984 <system_init_flash+0x70>)
  401934:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401936:	bf94      	ite	ls
  401938:	4a13      	ldrls	r2, [pc, #76]	; (401988 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40193a:	4a14      	ldrhi	r2, [pc, #80]	; (40198c <system_init_flash+0x78>)
  40193c:	4b14      	ldr	r3, [pc, #80]	; (401990 <system_init_flash+0x7c>)
  40193e:	601a      	str	r2, [r3, #0]
  401940:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401942:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401946:	4b12      	ldr	r3, [pc, #72]	; (401990 <system_init_flash+0x7c>)
  401948:	601a      	str	r2, [r3, #0]
  40194a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40194c:	4a11      	ldr	r2, [pc, #68]	; (401994 <system_init_flash+0x80>)
  40194e:	4b10      	ldr	r3, [pc, #64]	; (401990 <system_init_flash+0x7c>)
  401950:	601a      	str	r2, [r3, #0]
  401952:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401954:	4a10      	ldr	r2, [pc, #64]	; (401998 <system_init_flash+0x84>)
  401956:	4b0e      	ldr	r3, [pc, #56]	; (401990 <system_init_flash+0x7c>)
  401958:	601a      	str	r2, [r3, #0]
  40195a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40195c:	4a0f      	ldr	r2, [pc, #60]	; (40199c <system_init_flash+0x88>)
  40195e:	4b0c      	ldr	r3, [pc, #48]	; (401990 <system_init_flash+0x7c>)
  401960:	601a      	str	r2, [r3, #0]
  401962:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401964:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401968:	4b09      	ldr	r3, [pc, #36]	; (401990 <system_init_flash+0x7c>)
  40196a:	601a      	str	r2, [r3, #0]
  40196c:	4770      	bx	lr
  40196e:	bf00      	nop
  401970:	015ef3bf 	.word	0x015ef3bf
  401974:	02bde77f 	.word	0x02bde77f
  401978:	041cdb3f 	.word	0x041cdb3f
  40197c:	057bceff 	.word	0x057bceff
  401980:	06dac2bf 	.word	0x06dac2bf
  401984:	0839b67f 	.word	0x0839b67f
  401988:	04000500 	.word	0x04000500
  40198c:	04000600 	.word	0x04000600
  401990:	400e0c00 	.word	0x400e0c00
  401994:	04000100 	.word	0x04000100
  401998:	04000200 	.word	0x04000200
  40199c:	04000300 	.word	0x04000300

004019a0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4019a0:	4b0a      	ldr	r3, [pc, #40]	; (4019cc <_sbrk+0x2c>)
  4019a2:	681b      	ldr	r3, [r3, #0]
  4019a4:	b153      	cbz	r3, 4019bc <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4019a6:	4b09      	ldr	r3, [pc, #36]	; (4019cc <_sbrk+0x2c>)
  4019a8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4019aa:	181a      	adds	r2, r3, r0
  4019ac:	4908      	ldr	r1, [pc, #32]	; (4019d0 <_sbrk+0x30>)
  4019ae:	4291      	cmp	r1, r2
  4019b0:	db08      	blt.n	4019c4 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4019b2:	4610      	mov	r0, r2
  4019b4:	4a05      	ldr	r2, [pc, #20]	; (4019cc <_sbrk+0x2c>)
  4019b6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4019b8:	4618      	mov	r0, r3
  4019ba:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4019bc:	4a05      	ldr	r2, [pc, #20]	; (4019d4 <_sbrk+0x34>)
  4019be:	4b03      	ldr	r3, [pc, #12]	; (4019cc <_sbrk+0x2c>)
  4019c0:	601a      	str	r2, [r3, #0]
  4019c2:	e7f0      	b.n	4019a6 <_sbrk+0x6>
		return (caddr_t) -1;	
  4019c4:	f04f 30ff 	mov.w	r0, #4294967295
}
  4019c8:	4770      	bx	lr
  4019ca:	bf00      	nop
  4019cc:	20400c74 	.word	0x20400c74
  4019d0:	2045fffc 	.word	0x2045fffc
  4019d4:	20402ed8 	.word	0x20402ed8

004019d8 <TC0_Handler>:
volatile _Bool start = 1;
volatile _Bool oppened = 0;
volatile _Bool passed = 0;

void TC0_Handler(void)
{
  4019d8:	b500      	push	{lr}
  4019da:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 0);
  4019dc:	2100      	movs	r1, #0
  4019de:	4805      	ldr	r0, [pc, #20]	; (4019f4 <TC0_Handler+0x1c>)
  4019e0:	4b05      	ldr	r3, [pc, #20]	; (4019f8 <TC0_Handler+0x20>)
  4019e2:	4798      	blx	r3
  4019e4:	9001      	str	r0, [sp, #4]
	tc0_flag = 1;
  4019e6:	2201      	movs	r2, #1
  4019e8:	4b04      	ldr	r3, [pc, #16]	; (4019fc <TC0_Handler+0x24>)
  4019ea:	701a      	strb	r2, [r3, #0]
}
  4019ec:	b003      	add	sp, #12
  4019ee:	f85d fb04 	ldr.w	pc, [sp], #4
  4019f2:	bf00      	nop
  4019f4:	4000c000 	.word	0x4000c000
  4019f8:	004003f5 	.word	0x004003f5
  4019fc:	20400c7a 	.word	0x20400c7a

00401a00 <TC1_Handler>:

void TC1_Handler(void)
{
  401a00:	b500      	push	{lr}
  401a02:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 1);
  401a04:	2101      	movs	r1, #1
  401a06:	4807      	ldr	r0, [pc, #28]	; (401a24 <TC1_Handler+0x24>)
  401a08:	4b07      	ldr	r3, [pc, #28]	; (401a28 <TC1_Handler+0x28>)
  401a0a:	4798      	blx	r3
  401a0c:	9001      	str	r0, [sp, #4]
	pin_toggle(LED3_PIO, LED3_PIO_IDX_MASK);
  401a0e:	2104      	movs	r1, #4
  401a10:	4806      	ldr	r0, [pc, #24]	; (401a2c <TC1_Handler+0x2c>)
  401a12:	4b07      	ldr	r3, [pc, #28]	; (401a30 <TC1_Handler+0x30>)
  401a14:	4798      	blx	r3
	tc1_flag = 1;
  401a16:	2201      	movs	r2, #1
  401a18:	4b06      	ldr	r3, [pc, #24]	; (401a34 <TC1_Handler+0x34>)
  401a1a:	701a      	strb	r2, [r3, #0]
}
  401a1c:	b003      	add	sp, #12
  401a1e:	f85d fb04 	ldr.w	pc, [sp], #4
  401a22:	bf00      	nop
  401a24:	4000c000 	.word	0x4000c000
  401a28:	004003f5 	.word	0x004003f5
  401a2c:	400e1000 	.word	0x400e1000
  401a30:	00400865 	.word	0x00400865
  401a34:	20400c7b 	.word	0x20400c7b

00401a38 <RTT_Handler>:

void RTT_Handler(void)
{
  401a38:	b508      	push	{r3, lr}
	uint32_t ul_status;
	ul_status = rtt_get_status(RTT);
  401a3a:	4806      	ldr	r0, [pc, #24]	; (401a54 <RTT_Handler+0x1c>)
  401a3c:	4b06      	ldr	r3, [pc, #24]	; (401a58 <RTT_Handler+0x20>)
  401a3e:	4798      	blx	r3

	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS)
  401a40:	f010 0f01 	tst.w	r0, #1
  401a44:	d100      	bne.n	401a48 <RTT_Handler+0x10>
  401a46:	bd08      	pop	{r3, pc}
	{
		pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  401a48:	2101      	movs	r1, #1
  401a4a:	4804      	ldr	r0, [pc, #16]	; (401a5c <RTT_Handler+0x24>)
  401a4c:	4b04      	ldr	r3, [pc, #16]	; (401a60 <RTT_Handler+0x28>)
  401a4e:	4798      	blx	r3
	}

	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC)
	{
	}
}
  401a50:	e7f9      	b.n	401a46 <RTT_Handler+0xe>
  401a52:	bf00      	nop
  401a54:	400e1830 	.word	0x400e1830
  401a58:	00400229 	.word	0x00400229
  401a5c:	400e0e00 	.word	0x400e0e00
  401a60:	00400ff3 	.word	0x00400ff3

00401a64 <set_time>:

void set_time(Time *t)
{
  401a64:	b570      	push	{r4, r5, r6, lr}
  401a66:	4604      	mov	r4, r0
	if (get_but2_flag())
  401a68:	4b2c      	ldr	r3, [pc, #176]	; (401b1c <set_time+0xb8>)
  401a6a:	4798      	blx	r3
  401a6c:	b918      	cbnz	r0, 401a76 <set_time+0x12>
		else if (t->sec + 10 <= 60)
		{
			t->sec += 10;
		}
	}
	if (get_but3_flag())
  401a6e:	4b2c      	ldr	r3, [pc, #176]	; (401b20 <set_time+0xbc>)
  401a70:	4798      	blx	r3
  401a72:	bb40      	cbnz	r0, 401ac6 <set_time+0x62>
  401a74:	bd70      	pop	{r4, r5, r6, pc}
		start = 0;
  401a76:	2500      	movs	r5, #0
  401a78:	4b2a      	ldr	r3, [pc, #168]	; (401b24 <set_time+0xc0>)
  401a7a:	701d      	strb	r5, [r3, #0]
		oppened = 0;
  401a7c:	4b2a      	ldr	r3, [pc, #168]	; (401b28 <set_time+0xc4>)
  401a7e:	701d      	strb	r5, [r3, #0]
		tc_stop(TC0, 1);
  401a80:	2101      	movs	r1, #1
  401a82:	482a      	ldr	r0, [pc, #168]	; (401b2c <set_time+0xc8>)
  401a84:	4b2a      	ldr	r3, [pc, #168]	; (401b30 <set_time+0xcc>)
  401a86:	4798      	blx	r3
		pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  401a88:	2104      	movs	r1, #4
  401a8a:	482a      	ldr	r0, [pc, #168]	; (401b34 <set_time+0xd0>)
  401a8c:	4b2a      	ldr	r3, [pc, #168]	; (401b38 <set_time+0xd4>)
  401a8e:	4798      	blx	r3
		pio_clear(LED2_PIO, LED2_PIO_IDX_MASK);
  401a90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401a94:	4829      	ldr	r0, [pc, #164]	; (401b3c <set_time+0xd8>)
  401a96:	4e2a      	ldr	r6, [pc, #168]	; (401b40 <set_time+0xdc>)
  401a98:	47b0      	blx	r6
		pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  401a9a:	2101      	movs	r1, #1
  401a9c:	4829      	ldr	r0, [pc, #164]	; (401b44 <set_time+0xe0>)
  401a9e:	47b0      	blx	r6
		set_but2_flag(0);
  401aa0:	4628      	mov	r0, r5
  401aa2:	4b29      	ldr	r3, [pc, #164]	; (401b48 <set_time+0xe4>)
  401aa4:	4798      	blx	r3
		if (t->sec + 10 > 60 && t->min + 1 <= 60)
  401aa6:	6863      	ldr	r3, [r4, #4]
  401aa8:	f103 020a 	add.w	r2, r3, #10
  401aac:	2a3c      	cmp	r2, #60	; 0x3c
  401aae:	dd08      	ble.n	401ac2 <set_time+0x5e>
  401ab0:	6822      	ldr	r2, [r4, #0]
  401ab2:	3201      	adds	r2, #1
  401ab4:	2a3c      	cmp	r2, #60	; 0x3c
  401ab6:	dcda      	bgt.n	401a6e <set_time+0xa>
			t->min++;
  401ab8:	6022      	str	r2, [r4, #0]
			t->sec = 60 - t->sec;
  401aba:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
  401abe:	6063      	str	r3, [r4, #4]
  401ac0:	e7d5      	b.n	401a6e <set_time+0xa>
			t->sec += 10;
  401ac2:	6062      	str	r2, [r4, #4]
  401ac4:	e7d3      	b.n	401a6e <set_time+0xa>
	{
		start = 0;
  401ac6:	2500      	movs	r5, #0
  401ac8:	4b16      	ldr	r3, [pc, #88]	; (401b24 <set_time+0xc0>)
  401aca:	701d      	strb	r5, [r3, #0]
		oppened = 0;
  401acc:	4b16      	ldr	r3, [pc, #88]	; (401b28 <set_time+0xc4>)
  401ace:	701d      	strb	r5, [r3, #0]
		tc_stop(TC0, 1);
  401ad0:	2101      	movs	r1, #1
  401ad2:	4816      	ldr	r0, [pc, #88]	; (401b2c <set_time+0xc8>)
  401ad4:	4b16      	ldr	r3, [pc, #88]	; (401b30 <set_time+0xcc>)
  401ad6:	4798      	blx	r3
		pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  401ad8:	2104      	movs	r1, #4
  401ada:	4816      	ldr	r0, [pc, #88]	; (401b34 <set_time+0xd0>)
  401adc:	4b16      	ldr	r3, [pc, #88]	; (401b38 <set_time+0xd4>)
  401ade:	4798      	blx	r3
		pio_clear(LED2_PIO, LED2_PIO_IDX_MASK);
  401ae0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401ae4:	4815      	ldr	r0, [pc, #84]	; (401b3c <set_time+0xd8>)
  401ae6:	4e16      	ldr	r6, [pc, #88]	; (401b40 <set_time+0xdc>)
  401ae8:	47b0      	blx	r6
		pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  401aea:	2101      	movs	r1, #1
  401aec:	4815      	ldr	r0, [pc, #84]	; (401b44 <set_time+0xe0>)
  401aee:	47b0      	blx	r6
		set_but3_flag(0);
  401af0:	4628      	mov	r0, r5
  401af2:	4b16      	ldr	r3, [pc, #88]	; (401b4c <set_time+0xe8>)
  401af4:	4798      	blx	r3
		if (t->sec + 10 > 60 && t->min + 1 <= 60)
  401af6:	6863      	ldr	r3, [r4, #4]
  401af8:	f103 020a 	add.w	r2, r3, #10
  401afc:	2a3c      	cmp	r2, #60	; 0x3c
  401afe:	dd03      	ble.n	401b08 <set_time+0xa4>
  401b00:	6822      	ldr	r2, [r4, #0]
  401b02:	3201      	adds	r2, #1
  401b04:	2a3c      	cmp	r2, #60	; 0x3c
  401b06:	dd04      	ble.n	401b12 <set_time+0xae>
		{
			t->min++;
			t->sec = 60 - t->sec;
		}
		else if (t->sec + 5 <= 60)
  401b08:	3305      	adds	r3, #5
  401b0a:	2b3c      	cmp	r3, #60	; 0x3c
		{
			t->sec += 5;
  401b0c:	bfd8      	it	le
  401b0e:	6063      	strle	r3, [r4, #4]
		}
	}
}
  401b10:	e7b0      	b.n	401a74 <set_time+0x10>
			t->min++;
  401b12:	6022      	str	r2, [r4, #0]
			t->sec = 60 - t->sec;
  401b14:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
  401b18:	6063      	str	r3, [r4, #4]
  401b1a:	bd70      	pop	{r4, r5, r6, pc}
  401b1c:	00400835 	.word	0x00400835
  401b20:	0040084d 	.word	0x0040084d
  401b24:	20400020 	.word	0x20400020
  401b28:	20400c78 	.word	0x20400c78
  401b2c:	4000c000 	.word	0x4000c000
  401b30:	004003dd 	.word	0x004003dd
  401b34:	400e1000 	.word	0x400e1000
  401b38:	00400ff3 	.word	0x00400ff3
  401b3c:	400e1200 	.word	0x400e1200
  401b40:	00400ff7 	.word	0x00400ff7
  401b44:	400e0e00 	.word	0x400e0e00
  401b48:	00400841 	.word	0x00400841
  401b4c:	00400859 	.word	0x00400859

00401b50 <use_door>:

void use_door(Time *t)
{
  401b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401b52:	4607      	mov	r7, r0
	if (get_but1_flag())
  401b54:	4b2d      	ldr	r3, [pc, #180]	; (401c0c <use_door+0xbc>)
  401b56:	4798      	blx	r3
  401b58:	b900      	cbnz	r0, 401b5c <use_door+0xc>
  401b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
		tc_stop(TC0, 1);
  401b5c:	2101      	movs	r1, #1
  401b5e:	482c      	ldr	r0, [pc, #176]	; (401c10 <use_door+0xc0>)
  401b60:	4b2c      	ldr	r3, [pc, #176]	; (401c14 <use_door+0xc4>)
  401b62:	4798      	blx	r3
		while (!pio_get(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK))
  401b64:	4c2c      	ldr	r4, [pc, #176]	; (401c18 <use_door+0xc8>)
		{
			tc_stop(TC0, 0);
			pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  401b66:	4e2d      	ldr	r6, [pc, #180]	; (401c1c <use_door+0xcc>)
			pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  401b68:	4d2d      	ldr	r5, [pc, #180]	; (401c20 <use_door+0xd0>)
		while (!pio_get(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK))
  401b6a:	e00c      	b.n	401b86 <use_door+0x36>
			tc_stop(TC0, 0);
  401b6c:	2100      	movs	r1, #0
  401b6e:	4828      	ldr	r0, [pc, #160]	; (401c10 <use_door+0xc0>)
  401b70:	4b28      	ldr	r3, [pc, #160]	; (401c14 <use_door+0xc4>)
  401b72:	4798      	blx	r3
			pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  401b74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401b78:	4630      	mov	r0, r6
  401b7a:	4b2a      	ldr	r3, [pc, #168]	; (401c24 <use_door+0xd4>)
  401b7c:	4798      	blx	r3
			pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  401b7e:	2101      	movs	r1, #1
  401b80:	4628      	mov	r0, r5
  401b82:	4b29      	ldr	r3, [pc, #164]	; (401c28 <use_door+0xd8>)
  401b84:	4798      	blx	r3
		while (!pio_get(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK))
  401b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b8a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401b8e:	4620      	mov	r0, r4
  401b90:	4b26      	ldr	r3, [pc, #152]	; (401c2c <use_door+0xdc>)
  401b92:	4798      	blx	r3
  401b94:	2800      	cmp	r0, #0
  401b96:	d0e9      	beq.n	401b6c <use_door+0x1c>
		}
		set_but1_flag(0);
  401b98:	2000      	movs	r0, #0
  401b9a:	4b25      	ldr	r3, [pc, #148]	; (401c30 <use_door+0xe0>)
  401b9c:	4798      	blx	r3
		if (pio_get(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK) && t->min >= 0 && t->sec > 0)
  401b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ba2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401ba6:	481c      	ldr	r0, [pc, #112]	; (401c18 <use_door+0xc8>)
  401ba8:	4b20      	ldr	r3, [pc, #128]	; (401c2c <use_door+0xdc>)
  401baa:	4798      	blx	r3
  401bac:	b170      	cbz	r0, 401bcc <use_door+0x7c>
  401bae:	683b      	ldr	r3, [r7, #0]
  401bb0:	2b00      	cmp	r3, #0
  401bb2:	db0b      	blt.n	401bcc <use_door+0x7c>
  401bb4:	687b      	ldr	r3, [r7, #4]
  401bb6:	2b00      	cmp	r3, #0
  401bb8:	dd08      	ble.n	401bcc <use_door+0x7c>
		{
			tc_start(TC0, 0);
  401bba:	2100      	movs	r1, #0
  401bbc:	4814      	ldr	r0, [pc, #80]	; (401c10 <use_door+0xc0>)
  401bbe:	4b1d      	ldr	r3, [pc, #116]	; (401c34 <use_door+0xe4>)
  401bc0:	4798      	blx	r3
			pio_clear(LED2_PIO, LED2_PIO_IDX_MASK);
  401bc2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401bc6:	4815      	ldr	r0, [pc, #84]	; (401c1c <use_door+0xcc>)
  401bc8:	4b17      	ldr	r3, [pc, #92]	; (401c28 <use_door+0xd8>)
  401bca:	4798      	blx	r3
		}
		if (pio_get(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK) && t->min == 0 && t->sec == 0)
  401bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401bd0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401bd4:	4810      	ldr	r0, [pc, #64]	; (401c18 <use_door+0xc8>)
  401bd6:	4b15      	ldr	r3, [pc, #84]	; (401c2c <use_door+0xdc>)
  401bd8:	4798      	blx	r3
  401bda:	2800      	cmp	r0, #0
  401bdc:	d0bd      	beq.n	401b5a <use_door+0xa>
  401bde:	683b      	ldr	r3, [r7, #0]
  401be0:	2b00      	cmp	r3, #0
  401be2:	d1ba      	bne.n	401b5a <use_door+0xa>
  401be4:	687b      	ldr	r3, [r7, #4]
  401be6:	2b00      	cmp	r3, #0
  401be8:	d1b7      	bne.n	401b5a <use_door+0xa>
		{
			tc_start(TC0, 0);
  401bea:	2100      	movs	r1, #0
  401bec:	4808      	ldr	r0, [pc, #32]	; (401c10 <use_door+0xc0>)
  401bee:	4b11      	ldr	r3, [pc, #68]	; (401c34 <use_door+0xe4>)
  401bf0:	4798      	blx	r3
			oppened = 1;
  401bf2:	2501      	movs	r5, #1
  401bf4:	4b10      	ldr	r3, [pc, #64]	; (401c38 <use_door+0xe8>)
  401bf6:	701d      	strb	r5, [r3, #0]
			pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  401bf8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401bfc:	4807      	ldr	r0, [pc, #28]	; (401c1c <use_door+0xcc>)
  401bfe:	4c09      	ldr	r4, [pc, #36]	; (401c24 <use_door+0xd4>)
  401c00:	47a0      	blx	r4
			pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  401c02:	4629      	mov	r1, r5
  401c04:	4806      	ldr	r0, [pc, #24]	; (401c20 <use_door+0xd0>)
  401c06:	47a0      	blx	r4
		}
	}
}
  401c08:	e7a7      	b.n	401b5a <use_door+0xa>
  401c0a:	bf00      	nop
  401c0c:	0040081d 	.word	0x0040081d
  401c10:	4000c000 	.word	0x4000c000
  401c14:	004003dd 	.word	0x004003dd
  401c18:	400e1400 	.word	0x400e1400
  401c1c:	400e1200 	.word	0x400e1200
  401c20:	400e0e00 	.word	0x400e0e00
  401c24:	00400ff3 	.word	0x00400ff3
  401c28:	00400ff7 	.word	0x00400ff7
  401c2c:	00400ffb 	.word	0x00400ffb
  401c30:	00400829 	.word	0x00400829
  401c34:	004003d5 	.word	0x004003d5
  401c38:	20400c78 	.word	0x20400c78

00401c3c <reset>:

void reset(Time *t)
{
  401c3c:	b538      	push	{r3, r4, r5, lr}
  401c3e:	4604      	mov	r4, r0
	if (!pio_get(BUT2_PIO, PIO_INPUT, BUT2_PIO_IDX_MASK) && !pio_get(BUT3_PIO, PIO_INPUT, BUT3_PIO_IDX_MASK))
  401c40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401c44:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401c48:	4813      	ldr	r0, [pc, #76]	; (401c98 <reset+0x5c>)
  401c4a:	4b14      	ldr	r3, [pc, #80]	; (401c9c <reset+0x60>)
  401c4c:	4798      	blx	r3
  401c4e:	b100      	cbz	r0, 401c52 <reset+0x16>
  401c50:	bd38      	pop	{r3, r4, r5, pc}
  401c52:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401c56:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401c5a:	4811      	ldr	r0, [pc, #68]	; (401ca0 <reset+0x64>)
  401c5c:	4b0f      	ldr	r3, [pc, #60]	; (401c9c <reset+0x60>)
  401c5e:	4798      	blx	r3
  401c60:	2800      	cmp	r0, #0
  401c62:	d1f5      	bne.n	401c50 <reset+0x14>
	{
		oppened = 1;
  401c64:	2501      	movs	r5, #1
  401c66:	4b0f      	ldr	r3, [pc, #60]	; (401ca4 <reset+0x68>)
  401c68:	701d      	strb	r5, [r3, #0]
		set_but2_flag(0);
  401c6a:	4b0f      	ldr	r3, [pc, #60]	; (401ca8 <reset+0x6c>)
  401c6c:	4798      	blx	r3
		set_but3_flag(0);
  401c6e:	2000      	movs	r0, #0
  401c70:	4b0e      	ldr	r3, [pc, #56]	; (401cac <reset+0x70>)
  401c72:	4798      	blx	r3
		t->min = 0;
  401c74:	2300      	movs	r3, #0
  401c76:	6023      	str	r3, [r4, #0]
		t->sec = 0;
  401c78:	6063      	str	r3, [r4, #4]
		pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  401c7a:	4629      	mov	r1, r5
  401c7c:	4808      	ldr	r0, [pc, #32]	; (401ca0 <reset+0x64>)
  401c7e:	4c0c      	ldr	r4, [pc, #48]	; (401cb0 <reset+0x74>)
  401c80:	47a0      	blx	r4
		pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  401c82:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401c86:	4804      	ldr	r0, [pc, #16]	; (401c98 <reset+0x5c>)
  401c88:	47a0      	blx	r4
		pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  401c8a:	2104      	movs	r1, #4
  401c8c:	4809      	ldr	r0, [pc, #36]	; (401cb4 <reset+0x78>)
  401c8e:	47a0      	blx	r4
		delay_ms(500);
  401c90:	4809      	ldr	r0, [pc, #36]	; (401cb8 <reset+0x7c>)
  401c92:	4b0a      	ldr	r3, [pc, #40]	; (401cbc <reset+0x80>)
  401c94:	4798      	blx	r3
	}
}
  401c96:	e7db      	b.n	401c50 <reset+0x14>
  401c98:	400e1200 	.word	0x400e1200
  401c9c:	00400ffb 	.word	0x00400ffb
  401ca0:	400e0e00 	.word	0x400e0e00
  401ca4:	20400c78 	.word	0x20400c78
  401ca8:	00400841 	.word	0x00400841
  401cac:	00400859 	.word	0x00400859
  401cb0:	00400ff3 	.word	0x00400ff3
  401cb4:	400e1000 	.word	0x400e1000
  401cb8:	0181d7b6 	.word	0x0181d7b6
  401cbc:	20400001 	.word	0x20400001

00401cc0 <main>:

void main(void)
{
  401cc0:	b580      	push	{r7, lr}
  401cc2:	b082      	sub	sp, #8
	init();
  401cc4:	4b3b      	ldr	r3, [pc, #236]	; (401db4 <main+0xf4>)
  401cc6:	4798      	blx	r3
	Time t = {0, 0};
  401cc8:	2400      	movs	r4, #0
  401cca:	9400      	str	r4, [sp, #0]
  401ccc:	9401      	str	r4, [sp, #4]
	draw_time(t);
  401cce:	ab02      	add	r3, sp, #8
  401cd0:	e913 0003 	ldmdb	r3, {r0, r1}
  401cd4:	4b38      	ldr	r3, [pc, #224]	; (401db8 <main+0xf8>)
  401cd6:	4798      	blx	r3

	// TC
	TC_init(TC0, ID_TC0, 0, 1);
  401cd8:	4d38      	ldr	r5, [pc, #224]	; (401dbc <main+0xfc>)
  401cda:	2301      	movs	r3, #1
  401cdc:	4622      	mov	r2, r4
  401cde:	2117      	movs	r1, #23
  401ce0:	4628      	mov	r0, r5
  401ce2:	4e37      	ldr	r6, [pc, #220]	; (401dc0 <main+0x100>)
  401ce4:	47b0      	blx	r6
	tc_start(TC0, 0);
  401ce6:	4621      	mov	r1, r4
  401ce8:	4628      	mov	r0, r5
  401cea:	4b36      	ldr	r3, [pc, #216]	; (401dc4 <main+0x104>)
  401cec:	4798      	blx	r3

	TC_init(TC0, ID_TC1, 1, 10);
  401cee:	230a      	movs	r3, #10
  401cf0:	2201      	movs	r2, #1
  401cf2:	2118      	movs	r1, #24
  401cf4:	4628      	mov	r0, r5
  401cf6:	47b0      	blx	r6
	// RTT
	// ---

	while (1)
	{
		reset(&t);
  401cf8:	466c      	mov	r4, sp
			}
			if (t.min == 0 && t.sec == 0 && !start && !oppened)
			{

				tc_start(TC0, 1);
				pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  401cfa:	f505 2555 	add.w	r5, r5, #872448	; 0xd5000
  401cfe:	f505 7500 	add.w	r5, r5, #512	; 0x200
				pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  401d02:	4e31      	ldr	r6, [pc, #196]	; (401dc8 <main+0x108>)
  401d04:	e013      	b.n	401d2e <main+0x6e>
				if (t.sec - 1 < 0 && t.min >= 0)
  401d06:	9a00      	ldr	r2, [sp, #0]
  401d08:	2a00      	cmp	r2, #0
  401d0a:	db2b      	blt.n	401d64 <main+0xa4>
					t.min--;
  401d0c:	3a01      	subs	r2, #1
  401d0e:	9200      	str	r2, [sp, #0]
					t.sec = 60;
  401d10:	233c      	movs	r3, #60	; 0x3c
  401d12:	9301      	str	r3, [sp, #4]
		// {
		// 	tc1_flag = 0;
		// 	pin_toggle(LED3_PIO, LED3_PIO_IDX_MASK);
		// }

		use_door(&t);
  401d14:	4620      	mov	r0, r4
  401d16:	4b2d      	ldr	r3, [pc, #180]	; (401dcc <main+0x10c>)
  401d18:	4798      	blx	r3
		set_time(&t);
  401d1a:	4620      	mov	r0, r4
  401d1c:	4b2c      	ldr	r3, [pc, #176]	; (401dd0 <main+0x110>)
  401d1e:	4798      	blx	r3
		draw_time(t);
  401d20:	e894 0003 	ldmia.w	r4, {r0, r1}
  401d24:	4b24      	ldr	r3, [pc, #144]	; (401db8 <main+0xf8>)
  401d26:	4798      	blx	r3
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  401d28:	2002      	movs	r0, #2
  401d2a:	4b2a      	ldr	r3, [pc, #168]	; (401dd4 <main+0x114>)
  401d2c:	4798      	blx	r3
		reset(&t);
  401d2e:	4620      	mov	r0, r4
  401d30:	4b29      	ldr	r3, [pc, #164]	; (401dd8 <main+0x118>)
  401d32:	4798      	blx	r3
		if (tc0_flag)
  401d34:	4b29      	ldr	r3, [pc, #164]	; (401ddc <main+0x11c>)
  401d36:	781b      	ldrb	r3, [r3, #0]
  401d38:	2b00      	cmp	r3, #0
  401d3a:	d0eb      	beq.n	401d14 <main+0x54>
			tc0_flag = 0;
  401d3c:	2200      	movs	r2, #0
  401d3e:	4b27      	ldr	r3, [pc, #156]	; (401ddc <main+0x11c>)
  401d40:	701a      	strb	r2, [r3, #0]
			if (t.min >= 0 && t.sec > 0)
  401d42:	9b00      	ldr	r3, [sp, #0]
  401d44:	4293      	cmp	r3, r2
  401d46:	dbe5      	blt.n	401d14 <main+0x54>
  401d48:	9b01      	ldr	r3, [sp, #4]
  401d4a:	4293      	cmp	r3, r2
  401d4c:	dd0b      	ble.n	401d66 <main+0xa6>
				pio_clear(LED2_PIO, LED2_PIO_IDX_MASK);
  401d4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401d52:	4628      	mov	r0, r5
  401d54:	4f22      	ldr	r7, [pc, #136]	; (401de0 <main+0x120>)
  401d56:	47b8      	blx	r7
				pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  401d58:	2101      	movs	r1, #1
  401d5a:	4630      	mov	r0, r6
  401d5c:	47b8      	blx	r7
				if (t.sec - 1 < 0 && t.min >= 0)
  401d5e:	9b01      	ldr	r3, [sp, #4]
  401d60:	3b01      	subs	r3, #1
  401d62:	d4d0      	bmi.n	401d06 <main+0x46>
					t.sec--;
  401d64:	9301      	str	r3, [sp, #4]
			if (t.min == 0 && t.sec == 0 && !start && !oppened)
  401d66:	9b00      	ldr	r3, [sp, #0]
  401d68:	2b00      	cmp	r3, #0
  401d6a:	d1d3      	bne.n	401d14 <main+0x54>
  401d6c:	9b01      	ldr	r3, [sp, #4]
  401d6e:	2b00      	cmp	r3, #0
  401d70:	d1d0      	bne.n	401d14 <main+0x54>
  401d72:	4b1c      	ldr	r3, [pc, #112]	; (401de4 <main+0x124>)
  401d74:	781b      	ldrb	r3, [r3, #0]
  401d76:	2b00      	cmp	r3, #0
  401d78:	d1cc      	bne.n	401d14 <main+0x54>
  401d7a:	4b1b      	ldr	r3, [pc, #108]	; (401de8 <main+0x128>)
  401d7c:	781b      	ldrb	r3, [r3, #0]
  401d7e:	2b00      	cmp	r3, #0
  401d80:	d1c8      	bne.n	401d14 <main+0x54>
				tc_start(TC0, 1);
  401d82:	2101      	movs	r1, #1
  401d84:	480d      	ldr	r0, [pc, #52]	; (401dbc <main+0xfc>)
  401d86:	4b0f      	ldr	r3, [pc, #60]	; (401dc4 <main+0x104>)
  401d88:	4798      	blx	r3
				pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  401d8a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401d8e:	4628      	mov	r0, r5
  401d90:	4b16      	ldr	r3, [pc, #88]	; (401dec <main+0x12c>)
  401d92:	4798      	blx	r3
				if (!passed)
  401d94:	4b16      	ldr	r3, [pc, #88]	; (401df0 <main+0x130>)
  401d96:	781b      	ldrb	r3, [r3, #0]
  401d98:	2b00      	cmp	r3, #0
  401d9a:	d1bb      	bne.n	401d14 <main+0x54>
					passed = 1;
  401d9c:	2201      	movs	r2, #1
  401d9e:	4b14      	ldr	r3, [pc, #80]	; (401df0 <main+0x130>)
  401da0:	701a      	strb	r2, [r3, #0]
					RTT_init(4, 60, RTT_MR_ALMIEN);
  401da2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401da6:	213c      	movs	r1, #60	; 0x3c
  401da8:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
  401dac:	4b11      	ldr	r3, [pc, #68]	; (401df4 <main+0x134>)
  401dae:	4798      	blx	r3
  401db0:	e7b0      	b.n	401d14 <main+0x54>
  401db2:	bf00      	nop
  401db4:	004005f1 	.word	0x004005f1
  401db8:	004007c9 	.word	0x004007c9
  401dbc:	4000c000 	.word	0x4000c000
  401dc0:	00400491 	.word	0x00400491
  401dc4:	004003d5 	.word	0x004003d5
  401dc8:	400e0e00 	.word	0x400e0e00
  401dcc:	00401b51 	.word	0x00401b51
  401dd0:	00401a65 	.word	0x00401a65
  401dd4:	004014c9 	.word	0x004014c9
  401dd8:	00401c3d 	.word	0x00401c3d
  401ddc:	20400c7a 	.word	0x20400c7a
  401de0:	00400ff7 	.word	0x00400ff7
  401de4:	20400020 	.word	0x20400020
  401de8:	20400c78 	.word	0x20400c78
  401dec:	00400ff3 	.word	0x00400ff3
  401df0:	20400c79 	.word	0x20400c79
  401df4:	00400539 	.word	0x00400539

00401df8 <__aeabi_uldivmod>:
  401df8:	b953      	cbnz	r3, 401e10 <__aeabi_uldivmod+0x18>
  401dfa:	b94a      	cbnz	r2, 401e10 <__aeabi_uldivmod+0x18>
  401dfc:	2900      	cmp	r1, #0
  401dfe:	bf08      	it	eq
  401e00:	2800      	cmpeq	r0, #0
  401e02:	bf1c      	itt	ne
  401e04:	f04f 31ff 	movne.w	r1, #4294967295
  401e08:	f04f 30ff 	movne.w	r0, #4294967295
  401e0c:	f000 b97a 	b.w	402104 <__aeabi_idiv0>
  401e10:	f1ad 0c08 	sub.w	ip, sp, #8
  401e14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401e18:	f000 f806 	bl	401e28 <__udivmoddi4>
  401e1c:	f8dd e004 	ldr.w	lr, [sp, #4]
  401e20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401e24:	b004      	add	sp, #16
  401e26:	4770      	bx	lr

00401e28 <__udivmoddi4>:
  401e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401e2c:	468c      	mov	ip, r1
  401e2e:	460d      	mov	r5, r1
  401e30:	4604      	mov	r4, r0
  401e32:	9e08      	ldr	r6, [sp, #32]
  401e34:	2b00      	cmp	r3, #0
  401e36:	d151      	bne.n	401edc <__udivmoddi4+0xb4>
  401e38:	428a      	cmp	r2, r1
  401e3a:	4617      	mov	r7, r2
  401e3c:	d96d      	bls.n	401f1a <__udivmoddi4+0xf2>
  401e3e:	fab2 fe82 	clz	lr, r2
  401e42:	f1be 0f00 	cmp.w	lr, #0
  401e46:	d00b      	beq.n	401e60 <__udivmoddi4+0x38>
  401e48:	f1ce 0c20 	rsb	ip, lr, #32
  401e4c:	fa01 f50e 	lsl.w	r5, r1, lr
  401e50:	fa20 fc0c 	lsr.w	ip, r0, ip
  401e54:	fa02 f70e 	lsl.w	r7, r2, lr
  401e58:	ea4c 0c05 	orr.w	ip, ip, r5
  401e5c:	fa00 f40e 	lsl.w	r4, r0, lr
  401e60:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401e64:	0c25      	lsrs	r5, r4, #16
  401e66:	fbbc f8fa 	udiv	r8, ip, sl
  401e6a:	fa1f f987 	uxth.w	r9, r7
  401e6e:	fb0a cc18 	mls	ip, sl, r8, ip
  401e72:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  401e76:	fb08 f309 	mul.w	r3, r8, r9
  401e7a:	42ab      	cmp	r3, r5
  401e7c:	d90a      	bls.n	401e94 <__udivmoddi4+0x6c>
  401e7e:	19ed      	adds	r5, r5, r7
  401e80:	f108 32ff 	add.w	r2, r8, #4294967295
  401e84:	f080 8123 	bcs.w	4020ce <__udivmoddi4+0x2a6>
  401e88:	42ab      	cmp	r3, r5
  401e8a:	f240 8120 	bls.w	4020ce <__udivmoddi4+0x2a6>
  401e8e:	f1a8 0802 	sub.w	r8, r8, #2
  401e92:	443d      	add	r5, r7
  401e94:	1aed      	subs	r5, r5, r3
  401e96:	b2a4      	uxth	r4, r4
  401e98:	fbb5 f0fa 	udiv	r0, r5, sl
  401e9c:	fb0a 5510 	mls	r5, sl, r0, r5
  401ea0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401ea4:	fb00 f909 	mul.w	r9, r0, r9
  401ea8:	45a1      	cmp	r9, r4
  401eaa:	d909      	bls.n	401ec0 <__udivmoddi4+0x98>
  401eac:	19e4      	adds	r4, r4, r7
  401eae:	f100 33ff 	add.w	r3, r0, #4294967295
  401eb2:	f080 810a 	bcs.w	4020ca <__udivmoddi4+0x2a2>
  401eb6:	45a1      	cmp	r9, r4
  401eb8:	f240 8107 	bls.w	4020ca <__udivmoddi4+0x2a2>
  401ebc:	3802      	subs	r0, #2
  401ebe:	443c      	add	r4, r7
  401ec0:	eba4 0409 	sub.w	r4, r4, r9
  401ec4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401ec8:	2100      	movs	r1, #0
  401eca:	2e00      	cmp	r6, #0
  401ecc:	d061      	beq.n	401f92 <__udivmoddi4+0x16a>
  401ece:	fa24 f40e 	lsr.w	r4, r4, lr
  401ed2:	2300      	movs	r3, #0
  401ed4:	6034      	str	r4, [r6, #0]
  401ed6:	6073      	str	r3, [r6, #4]
  401ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401edc:	428b      	cmp	r3, r1
  401ede:	d907      	bls.n	401ef0 <__udivmoddi4+0xc8>
  401ee0:	2e00      	cmp	r6, #0
  401ee2:	d054      	beq.n	401f8e <__udivmoddi4+0x166>
  401ee4:	2100      	movs	r1, #0
  401ee6:	e886 0021 	stmia.w	r6, {r0, r5}
  401eea:	4608      	mov	r0, r1
  401eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401ef0:	fab3 f183 	clz	r1, r3
  401ef4:	2900      	cmp	r1, #0
  401ef6:	f040 808e 	bne.w	402016 <__udivmoddi4+0x1ee>
  401efa:	42ab      	cmp	r3, r5
  401efc:	d302      	bcc.n	401f04 <__udivmoddi4+0xdc>
  401efe:	4282      	cmp	r2, r0
  401f00:	f200 80fa 	bhi.w	4020f8 <__udivmoddi4+0x2d0>
  401f04:	1a84      	subs	r4, r0, r2
  401f06:	eb65 0503 	sbc.w	r5, r5, r3
  401f0a:	2001      	movs	r0, #1
  401f0c:	46ac      	mov	ip, r5
  401f0e:	2e00      	cmp	r6, #0
  401f10:	d03f      	beq.n	401f92 <__udivmoddi4+0x16a>
  401f12:	e886 1010 	stmia.w	r6, {r4, ip}
  401f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401f1a:	b912      	cbnz	r2, 401f22 <__udivmoddi4+0xfa>
  401f1c:	2701      	movs	r7, #1
  401f1e:	fbb7 f7f2 	udiv	r7, r7, r2
  401f22:	fab7 fe87 	clz	lr, r7
  401f26:	f1be 0f00 	cmp.w	lr, #0
  401f2a:	d134      	bne.n	401f96 <__udivmoddi4+0x16e>
  401f2c:	1beb      	subs	r3, r5, r7
  401f2e:	0c3a      	lsrs	r2, r7, #16
  401f30:	fa1f fc87 	uxth.w	ip, r7
  401f34:	2101      	movs	r1, #1
  401f36:	fbb3 f8f2 	udiv	r8, r3, r2
  401f3a:	0c25      	lsrs	r5, r4, #16
  401f3c:	fb02 3318 	mls	r3, r2, r8, r3
  401f40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401f44:	fb0c f308 	mul.w	r3, ip, r8
  401f48:	42ab      	cmp	r3, r5
  401f4a:	d907      	bls.n	401f5c <__udivmoddi4+0x134>
  401f4c:	19ed      	adds	r5, r5, r7
  401f4e:	f108 30ff 	add.w	r0, r8, #4294967295
  401f52:	d202      	bcs.n	401f5a <__udivmoddi4+0x132>
  401f54:	42ab      	cmp	r3, r5
  401f56:	f200 80d1 	bhi.w	4020fc <__udivmoddi4+0x2d4>
  401f5a:	4680      	mov	r8, r0
  401f5c:	1aed      	subs	r5, r5, r3
  401f5e:	b2a3      	uxth	r3, r4
  401f60:	fbb5 f0f2 	udiv	r0, r5, r2
  401f64:	fb02 5510 	mls	r5, r2, r0, r5
  401f68:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401f6c:	fb0c fc00 	mul.w	ip, ip, r0
  401f70:	45a4      	cmp	ip, r4
  401f72:	d907      	bls.n	401f84 <__udivmoddi4+0x15c>
  401f74:	19e4      	adds	r4, r4, r7
  401f76:	f100 33ff 	add.w	r3, r0, #4294967295
  401f7a:	d202      	bcs.n	401f82 <__udivmoddi4+0x15a>
  401f7c:	45a4      	cmp	ip, r4
  401f7e:	f200 80b8 	bhi.w	4020f2 <__udivmoddi4+0x2ca>
  401f82:	4618      	mov	r0, r3
  401f84:	eba4 040c 	sub.w	r4, r4, ip
  401f88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401f8c:	e79d      	b.n	401eca <__udivmoddi4+0xa2>
  401f8e:	4631      	mov	r1, r6
  401f90:	4630      	mov	r0, r6
  401f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401f96:	f1ce 0420 	rsb	r4, lr, #32
  401f9a:	fa05 f30e 	lsl.w	r3, r5, lr
  401f9e:	fa07 f70e 	lsl.w	r7, r7, lr
  401fa2:	fa20 f804 	lsr.w	r8, r0, r4
  401fa6:	0c3a      	lsrs	r2, r7, #16
  401fa8:	fa25 f404 	lsr.w	r4, r5, r4
  401fac:	ea48 0803 	orr.w	r8, r8, r3
  401fb0:	fbb4 f1f2 	udiv	r1, r4, r2
  401fb4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  401fb8:	fb02 4411 	mls	r4, r2, r1, r4
  401fbc:	fa1f fc87 	uxth.w	ip, r7
  401fc0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  401fc4:	fb01 f30c 	mul.w	r3, r1, ip
  401fc8:	42ab      	cmp	r3, r5
  401fca:	fa00 f40e 	lsl.w	r4, r0, lr
  401fce:	d909      	bls.n	401fe4 <__udivmoddi4+0x1bc>
  401fd0:	19ed      	adds	r5, r5, r7
  401fd2:	f101 30ff 	add.w	r0, r1, #4294967295
  401fd6:	f080 808a 	bcs.w	4020ee <__udivmoddi4+0x2c6>
  401fda:	42ab      	cmp	r3, r5
  401fdc:	f240 8087 	bls.w	4020ee <__udivmoddi4+0x2c6>
  401fe0:	3902      	subs	r1, #2
  401fe2:	443d      	add	r5, r7
  401fe4:	1aeb      	subs	r3, r5, r3
  401fe6:	fa1f f588 	uxth.w	r5, r8
  401fea:	fbb3 f0f2 	udiv	r0, r3, r2
  401fee:	fb02 3310 	mls	r3, r2, r0, r3
  401ff2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401ff6:	fb00 f30c 	mul.w	r3, r0, ip
  401ffa:	42ab      	cmp	r3, r5
  401ffc:	d907      	bls.n	40200e <__udivmoddi4+0x1e6>
  401ffe:	19ed      	adds	r5, r5, r7
  402000:	f100 38ff 	add.w	r8, r0, #4294967295
  402004:	d26f      	bcs.n	4020e6 <__udivmoddi4+0x2be>
  402006:	42ab      	cmp	r3, r5
  402008:	d96d      	bls.n	4020e6 <__udivmoddi4+0x2be>
  40200a:	3802      	subs	r0, #2
  40200c:	443d      	add	r5, r7
  40200e:	1aeb      	subs	r3, r5, r3
  402010:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402014:	e78f      	b.n	401f36 <__udivmoddi4+0x10e>
  402016:	f1c1 0720 	rsb	r7, r1, #32
  40201a:	fa22 f807 	lsr.w	r8, r2, r7
  40201e:	408b      	lsls	r3, r1
  402020:	fa05 f401 	lsl.w	r4, r5, r1
  402024:	ea48 0303 	orr.w	r3, r8, r3
  402028:	fa20 fe07 	lsr.w	lr, r0, r7
  40202c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402030:	40fd      	lsrs	r5, r7
  402032:	ea4e 0e04 	orr.w	lr, lr, r4
  402036:	fbb5 f9fc 	udiv	r9, r5, ip
  40203a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40203e:	fb0c 5519 	mls	r5, ip, r9, r5
  402042:	fa1f f883 	uxth.w	r8, r3
  402046:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40204a:	fb09 f408 	mul.w	r4, r9, r8
  40204e:	42ac      	cmp	r4, r5
  402050:	fa02 f201 	lsl.w	r2, r2, r1
  402054:	fa00 fa01 	lsl.w	sl, r0, r1
  402058:	d908      	bls.n	40206c <__udivmoddi4+0x244>
  40205a:	18ed      	adds	r5, r5, r3
  40205c:	f109 30ff 	add.w	r0, r9, #4294967295
  402060:	d243      	bcs.n	4020ea <__udivmoddi4+0x2c2>
  402062:	42ac      	cmp	r4, r5
  402064:	d941      	bls.n	4020ea <__udivmoddi4+0x2c2>
  402066:	f1a9 0902 	sub.w	r9, r9, #2
  40206a:	441d      	add	r5, r3
  40206c:	1b2d      	subs	r5, r5, r4
  40206e:	fa1f fe8e 	uxth.w	lr, lr
  402072:	fbb5 f0fc 	udiv	r0, r5, ip
  402076:	fb0c 5510 	mls	r5, ip, r0, r5
  40207a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40207e:	fb00 f808 	mul.w	r8, r0, r8
  402082:	45a0      	cmp	r8, r4
  402084:	d907      	bls.n	402096 <__udivmoddi4+0x26e>
  402086:	18e4      	adds	r4, r4, r3
  402088:	f100 35ff 	add.w	r5, r0, #4294967295
  40208c:	d229      	bcs.n	4020e2 <__udivmoddi4+0x2ba>
  40208e:	45a0      	cmp	r8, r4
  402090:	d927      	bls.n	4020e2 <__udivmoddi4+0x2ba>
  402092:	3802      	subs	r0, #2
  402094:	441c      	add	r4, r3
  402096:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40209a:	eba4 0408 	sub.w	r4, r4, r8
  40209e:	fba0 8902 	umull	r8, r9, r0, r2
  4020a2:	454c      	cmp	r4, r9
  4020a4:	46c6      	mov	lr, r8
  4020a6:	464d      	mov	r5, r9
  4020a8:	d315      	bcc.n	4020d6 <__udivmoddi4+0x2ae>
  4020aa:	d012      	beq.n	4020d2 <__udivmoddi4+0x2aa>
  4020ac:	b156      	cbz	r6, 4020c4 <__udivmoddi4+0x29c>
  4020ae:	ebba 030e 	subs.w	r3, sl, lr
  4020b2:	eb64 0405 	sbc.w	r4, r4, r5
  4020b6:	fa04 f707 	lsl.w	r7, r4, r7
  4020ba:	40cb      	lsrs	r3, r1
  4020bc:	431f      	orrs	r7, r3
  4020be:	40cc      	lsrs	r4, r1
  4020c0:	6037      	str	r7, [r6, #0]
  4020c2:	6074      	str	r4, [r6, #4]
  4020c4:	2100      	movs	r1, #0
  4020c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4020ca:	4618      	mov	r0, r3
  4020cc:	e6f8      	b.n	401ec0 <__udivmoddi4+0x98>
  4020ce:	4690      	mov	r8, r2
  4020d0:	e6e0      	b.n	401e94 <__udivmoddi4+0x6c>
  4020d2:	45c2      	cmp	sl, r8
  4020d4:	d2ea      	bcs.n	4020ac <__udivmoddi4+0x284>
  4020d6:	ebb8 0e02 	subs.w	lr, r8, r2
  4020da:	eb69 0503 	sbc.w	r5, r9, r3
  4020de:	3801      	subs	r0, #1
  4020e0:	e7e4      	b.n	4020ac <__udivmoddi4+0x284>
  4020e2:	4628      	mov	r0, r5
  4020e4:	e7d7      	b.n	402096 <__udivmoddi4+0x26e>
  4020e6:	4640      	mov	r0, r8
  4020e8:	e791      	b.n	40200e <__udivmoddi4+0x1e6>
  4020ea:	4681      	mov	r9, r0
  4020ec:	e7be      	b.n	40206c <__udivmoddi4+0x244>
  4020ee:	4601      	mov	r1, r0
  4020f0:	e778      	b.n	401fe4 <__udivmoddi4+0x1bc>
  4020f2:	3802      	subs	r0, #2
  4020f4:	443c      	add	r4, r7
  4020f6:	e745      	b.n	401f84 <__udivmoddi4+0x15c>
  4020f8:	4608      	mov	r0, r1
  4020fa:	e708      	b.n	401f0e <__udivmoddi4+0xe6>
  4020fc:	f1a8 0802 	sub.w	r8, r8, #2
  402100:	443d      	add	r5, r7
  402102:	e72b      	b.n	401f5c <__udivmoddi4+0x134>

00402104 <__aeabi_idiv0>:
  402104:	4770      	bx	lr
  402106:	bf00      	nop

00402108 <__libc_init_array>:
  402108:	b570      	push	{r4, r5, r6, lr}
  40210a:	4e0f      	ldr	r6, [pc, #60]	; (402148 <__libc_init_array+0x40>)
  40210c:	4d0f      	ldr	r5, [pc, #60]	; (40214c <__libc_init_array+0x44>)
  40210e:	1b76      	subs	r6, r6, r5
  402110:	10b6      	asrs	r6, r6, #2
  402112:	bf18      	it	ne
  402114:	2400      	movne	r4, #0
  402116:	d005      	beq.n	402124 <__libc_init_array+0x1c>
  402118:	3401      	adds	r4, #1
  40211a:	f855 3b04 	ldr.w	r3, [r5], #4
  40211e:	4798      	blx	r3
  402120:	42a6      	cmp	r6, r4
  402122:	d1f9      	bne.n	402118 <__libc_init_array+0x10>
  402124:	4e0a      	ldr	r6, [pc, #40]	; (402150 <__libc_init_array+0x48>)
  402126:	4d0b      	ldr	r5, [pc, #44]	; (402154 <__libc_init_array+0x4c>)
  402128:	1b76      	subs	r6, r6, r5
  40212a:	f005 f969 	bl	407400 <_init>
  40212e:	10b6      	asrs	r6, r6, #2
  402130:	bf18      	it	ne
  402132:	2400      	movne	r4, #0
  402134:	d006      	beq.n	402144 <__libc_init_array+0x3c>
  402136:	3401      	adds	r4, #1
  402138:	f855 3b04 	ldr.w	r3, [r5], #4
  40213c:	4798      	blx	r3
  40213e:	42a6      	cmp	r6, r4
  402140:	d1f9      	bne.n	402136 <__libc_init_array+0x2e>
  402142:	bd70      	pop	{r4, r5, r6, pc}
  402144:	bd70      	pop	{r4, r5, r6, pc}
  402146:	bf00      	nop
  402148:	0040740c 	.word	0x0040740c
  40214c:	0040740c 	.word	0x0040740c
  402150:	00407414 	.word	0x00407414
  402154:	0040740c 	.word	0x0040740c

00402158 <memset>:
  402158:	b470      	push	{r4, r5, r6}
  40215a:	0786      	lsls	r6, r0, #30
  40215c:	d046      	beq.n	4021ec <memset+0x94>
  40215e:	1e54      	subs	r4, r2, #1
  402160:	2a00      	cmp	r2, #0
  402162:	d041      	beq.n	4021e8 <memset+0x90>
  402164:	b2ca      	uxtb	r2, r1
  402166:	4603      	mov	r3, r0
  402168:	e002      	b.n	402170 <memset+0x18>
  40216a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40216e:	d33b      	bcc.n	4021e8 <memset+0x90>
  402170:	f803 2b01 	strb.w	r2, [r3], #1
  402174:	079d      	lsls	r5, r3, #30
  402176:	d1f8      	bne.n	40216a <memset+0x12>
  402178:	2c03      	cmp	r4, #3
  40217a:	d92e      	bls.n	4021da <memset+0x82>
  40217c:	b2cd      	uxtb	r5, r1
  40217e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402182:	2c0f      	cmp	r4, #15
  402184:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402188:	d919      	bls.n	4021be <memset+0x66>
  40218a:	f103 0210 	add.w	r2, r3, #16
  40218e:	4626      	mov	r6, r4
  402190:	3e10      	subs	r6, #16
  402192:	2e0f      	cmp	r6, #15
  402194:	f842 5c10 	str.w	r5, [r2, #-16]
  402198:	f842 5c0c 	str.w	r5, [r2, #-12]
  40219c:	f842 5c08 	str.w	r5, [r2, #-8]
  4021a0:	f842 5c04 	str.w	r5, [r2, #-4]
  4021a4:	f102 0210 	add.w	r2, r2, #16
  4021a8:	d8f2      	bhi.n	402190 <memset+0x38>
  4021aa:	f1a4 0210 	sub.w	r2, r4, #16
  4021ae:	f022 020f 	bic.w	r2, r2, #15
  4021b2:	f004 040f 	and.w	r4, r4, #15
  4021b6:	3210      	adds	r2, #16
  4021b8:	2c03      	cmp	r4, #3
  4021ba:	4413      	add	r3, r2
  4021bc:	d90d      	bls.n	4021da <memset+0x82>
  4021be:	461e      	mov	r6, r3
  4021c0:	4622      	mov	r2, r4
  4021c2:	3a04      	subs	r2, #4
  4021c4:	2a03      	cmp	r2, #3
  4021c6:	f846 5b04 	str.w	r5, [r6], #4
  4021ca:	d8fa      	bhi.n	4021c2 <memset+0x6a>
  4021cc:	1f22      	subs	r2, r4, #4
  4021ce:	f022 0203 	bic.w	r2, r2, #3
  4021d2:	3204      	adds	r2, #4
  4021d4:	4413      	add	r3, r2
  4021d6:	f004 0403 	and.w	r4, r4, #3
  4021da:	b12c      	cbz	r4, 4021e8 <memset+0x90>
  4021dc:	b2c9      	uxtb	r1, r1
  4021de:	441c      	add	r4, r3
  4021e0:	f803 1b01 	strb.w	r1, [r3], #1
  4021e4:	429c      	cmp	r4, r3
  4021e6:	d1fb      	bne.n	4021e0 <memset+0x88>
  4021e8:	bc70      	pop	{r4, r5, r6}
  4021ea:	4770      	bx	lr
  4021ec:	4614      	mov	r4, r2
  4021ee:	4603      	mov	r3, r0
  4021f0:	e7c2      	b.n	402178 <memset+0x20>
  4021f2:	bf00      	nop

004021f4 <sprintf>:
  4021f4:	b40e      	push	{r1, r2, r3}
  4021f6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4021f8:	b09c      	sub	sp, #112	; 0x70
  4021fa:	ab21      	add	r3, sp, #132	; 0x84
  4021fc:	490f      	ldr	r1, [pc, #60]	; (40223c <sprintf+0x48>)
  4021fe:	f853 2b04 	ldr.w	r2, [r3], #4
  402202:	9301      	str	r3, [sp, #4]
  402204:	4605      	mov	r5, r0
  402206:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40220a:	6808      	ldr	r0, [r1, #0]
  40220c:	9502      	str	r5, [sp, #8]
  40220e:	f44f 7702 	mov.w	r7, #520	; 0x208
  402212:	f64f 76ff 	movw	r6, #65535	; 0xffff
  402216:	a902      	add	r1, sp, #8
  402218:	9506      	str	r5, [sp, #24]
  40221a:	f8ad 7014 	strh.w	r7, [sp, #20]
  40221e:	9404      	str	r4, [sp, #16]
  402220:	9407      	str	r4, [sp, #28]
  402222:	f8ad 6016 	strh.w	r6, [sp, #22]
  402226:	f000 f80b 	bl	402240 <_svfprintf_r>
  40222a:	9b02      	ldr	r3, [sp, #8]
  40222c:	2200      	movs	r2, #0
  40222e:	701a      	strb	r2, [r3, #0]
  402230:	b01c      	add	sp, #112	; 0x70
  402232:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  402236:	b003      	add	sp, #12
  402238:	4770      	bx	lr
  40223a:	bf00      	nop
  40223c:	20400024 	.word	0x20400024

00402240 <_svfprintf_r>:
  402240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402244:	b0c3      	sub	sp, #268	; 0x10c
  402246:	460c      	mov	r4, r1
  402248:	910b      	str	r1, [sp, #44]	; 0x2c
  40224a:	4692      	mov	sl, r2
  40224c:	930f      	str	r3, [sp, #60]	; 0x3c
  40224e:	900c      	str	r0, [sp, #48]	; 0x30
  402250:	f002 fa0e 	bl	404670 <_localeconv_r>
  402254:	6803      	ldr	r3, [r0, #0]
  402256:	931a      	str	r3, [sp, #104]	; 0x68
  402258:	4618      	mov	r0, r3
  40225a:	f003 f8f1 	bl	405440 <strlen>
  40225e:	89a3      	ldrh	r3, [r4, #12]
  402260:	9019      	str	r0, [sp, #100]	; 0x64
  402262:	0619      	lsls	r1, r3, #24
  402264:	d503      	bpl.n	40226e <_svfprintf_r+0x2e>
  402266:	6923      	ldr	r3, [r4, #16]
  402268:	2b00      	cmp	r3, #0
  40226a:	f001 8003 	beq.w	403274 <_svfprintf_r+0x1034>
  40226e:	2300      	movs	r3, #0
  402270:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  402274:	9313      	str	r3, [sp, #76]	; 0x4c
  402276:	9315      	str	r3, [sp, #84]	; 0x54
  402278:	9314      	str	r3, [sp, #80]	; 0x50
  40227a:	9327      	str	r3, [sp, #156]	; 0x9c
  40227c:	9326      	str	r3, [sp, #152]	; 0x98
  40227e:	9318      	str	r3, [sp, #96]	; 0x60
  402280:	931b      	str	r3, [sp, #108]	; 0x6c
  402282:	9309      	str	r3, [sp, #36]	; 0x24
  402284:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  402288:	46c8      	mov	r8, r9
  40228a:	9316      	str	r3, [sp, #88]	; 0x58
  40228c:	9317      	str	r3, [sp, #92]	; 0x5c
  40228e:	f89a 3000 	ldrb.w	r3, [sl]
  402292:	4654      	mov	r4, sl
  402294:	b1e3      	cbz	r3, 4022d0 <_svfprintf_r+0x90>
  402296:	2b25      	cmp	r3, #37	; 0x25
  402298:	d102      	bne.n	4022a0 <_svfprintf_r+0x60>
  40229a:	e019      	b.n	4022d0 <_svfprintf_r+0x90>
  40229c:	2b25      	cmp	r3, #37	; 0x25
  40229e:	d003      	beq.n	4022a8 <_svfprintf_r+0x68>
  4022a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4022a4:	2b00      	cmp	r3, #0
  4022a6:	d1f9      	bne.n	40229c <_svfprintf_r+0x5c>
  4022a8:	eba4 050a 	sub.w	r5, r4, sl
  4022ac:	b185      	cbz	r5, 4022d0 <_svfprintf_r+0x90>
  4022ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4022b0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4022b2:	f8c8 a000 	str.w	sl, [r8]
  4022b6:	3301      	adds	r3, #1
  4022b8:	442a      	add	r2, r5
  4022ba:	2b07      	cmp	r3, #7
  4022bc:	f8c8 5004 	str.w	r5, [r8, #4]
  4022c0:	9227      	str	r2, [sp, #156]	; 0x9c
  4022c2:	9326      	str	r3, [sp, #152]	; 0x98
  4022c4:	dc7f      	bgt.n	4023c6 <_svfprintf_r+0x186>
  4022c6:	f108 0808 	add.w	r8, r8, #8
  4022ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4022cc:	442b      	add	r3, r5
  4022ce:	9309      	str	r3, [sp, #36]	; 0x24
  4022d0:	7823      	ldrb	r3, [r4, #0]
  4022d2:	2b00      	cmp	r3, #0
  4022d4:	d07f      	beq.n	4023d6 <_svfprintf_r+0x196>
  4022d6:	2300      	movs	r3, #0
  4022d8:	461a      	mov	r2, r3
  4022da:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4022de:	4619      	mov	r1, r3
  4022e0:	930d      	str	r3, [sp, #52]	; 0x34
  4022e2:	469b      	mov	fp, r3
  4022e4:	f04f 30ff 	mov.w	r0, #4294967295
  4022e8:	7863      	ldrb	r3, [r4, #1]
  4022ea:	900a      	str	r0, [sp, #40]	; 0x28
  4022ec:	f104 0a01 	add.w	sl, r4, #1
  4022f0:	f10a 0a01 	add.w	sl, sl, #1
  4022f4:	f1a3 0020 	sub.w	r0, r3, #32
  4022f8:	2858      	cmp	r0, #88	; 0x58
  4022fa:	f200 83c1 	bhi.w	402a80 <_svfprintf_r+0x840>
  4022fe:	e8df f010 	tbh	[pc, r0, lsl #1]
  402302:	0238      	.short	0x0238
  402304:	03bf03bf 	.word	0x03bf03bf
  402308:	03bf0240 	.word	0x03bf0240
  40230c:	03bf03bf 	.word	0x03bf03bf
  402310:	03bf03bf 	.word	0x03bf03bf
  402314:	024503bf 	.word	0x024503bf
  402318:	03bf0203 	.word	0x03bf0203
  40231c:	026b005d 	.word	0x026b005d
  402320:	028603bf 	.word	0x028603bf
  402324:	039d039d 	.word	0x039d039d
  402328:	039d039d 	.word	0x039d039d
  40232c:	039d039d 	.word	0x039d039d
  402330:	039d039d 	.word	0x039d039d
  402334:	03bf039d 	.word	0x03bf039d
  402338:	03bf03bf 	.word	0x03bf03bf
  40233c:	03bf03bf 	.word	0x03bf03bf
  402340:	03bf03bf 	.word	0x03bf03bf
  402344:	03bf03bf 	.word	0x03bf03bf
  402348:	033703bf 	.word	0x033703bf
  40234c:	03bf0357 	.word	0x03bf0357
  402350:	03bf0357 	.word	0x03bf0357
  402354:	03bf03bf 	.word	0x03bf03bf
  402358:	039803bf 	.word	0x039803bf
  40235c:	03bf03bf 	.word	0x03bf03bf
  402360:	03bf03ad 	.word	0x03bf03ad
  402364:	03bf03bf 	.word	0x03bf03bf
  402368:	03bf03bf 	.word	0x03bf03bf
  40236c:	03bf0259 	.word	0x03bf0259
  402370:	031e03bf 	.word	0x031e03bf
  402374:	03bf03bf 	.word	0x03bf03bf
  402378:	03bf03bf 	.word	0x03bf03bf
  40237c:	03bf03bf 	.word	0x03bf03bf
  402380:	03bf03bf 	.word	0x03bf03bf
  402384:	03bf03bf 	.word	0x03bf03bf
  402388:	02db02c6 	.word	0x02db02c6
  40238c:	03570357 	.word	0x03570357
  402390:	028b0357 	.word	0x028b0357
  402394:	03bf02db 	.word	0x03bf02db
  402398:	029003bf 	.word	0x029003bf
  40239c:	029d03bf 	.word	0x029d03bf
  4023a0:	02b401cc 	.word	0x02b401cc
  4023a4:	03bf0208 	.word	0x03bf0208
  4023a8:	03bf01e1 	.word	0x03bf01e1
  4023ac:	03bf007e 	.word	0x03bf007e
  4023b0:	020d03bf 	.word	0x020d03bf
  4023b4:	980d      	ldr	r0, [sp, #52]	; 0x34
  4023b6:	930f      	str	r3, [sp, #60]	; 0x3c
  4023b8:	4240      	negs	r0, r0
  4023ba:	900d      	str	r0, [sp, #52]	; 0x34
  4023bc:	f04b 0b04 	orr.w	fp, fp, #4
  4023c0:	f89a 3000 	ldrb.w	r3, [sl]
  4023c4:	e794      	b.n	4022f0 <_svfprintf_r+0xb0>
  4023c6:	aa25      	add	r2, sp, #148	; 0x94
  4023c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4023ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4023cc:	f003 f8a6 	bl	40551c <__ssprint_r>
  4023d0:	b940      	cbnz	r0, 4023e4 <_svfprintf_r+0x1a4>
  4023d2:	46c8      	mov	r8, r9
  4023d4:	e779      	b.n	4022ca <_svfprintf_r+0x8a>
  4023d6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4023d8:	b123      	cbz	r3, 4023e4 <_svfprintf_r+0x1a4>
  4023da:	980c      	ldr	r0, [sp, #48]	; 0x30
  4023dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4023de:	aa25      	add	r2, sp, #148	; 0x94
  4023e0:	f003 f89c 	bl	40551c <__ssprint_r>
  4023e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4023e6:	899b      	ldrh	r3, [r3, #12]
  4023e8:	f013 0f40 	tst.w	r3, #64	; 0x40
  4023ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4023ee:	bf18      	it	ne
  4023f0:	f04f 33ff 	movne.w	r3, #4294967295
  4023f4:	9309      	str	r3, [sp, #36]	; 0x24
  4023f6:	9809      	ldr	r0, [sp, #36]	; 0x24
  4023f8:	b043      	add	sp, #268	; 0x10c
  4023fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4023fe:	f01b 0f20 	tst.w	fp, #32
  402402:	9311      	str	r3, [sp, #68]	; 0x44
  402404:	f040 81dd 	bne.w	4027c2 <_svfprintf_r+0x582>
  402408:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40240a:	f01b 0f10 	tst.w	fp, #16
  40240e:	4613      	mov	r3, r2
  402410:	f040 856e 	bne.w	402ef0 <_svfprintf_r+0xcb0>
  402414:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402418:	f000 856a 	beq.w	402ef0 <_svfprintf_r+0xcb0>
  40241c:	8814      	ldrh	r4, [r2, #0]
  40241e:	3204      	adds	r2, #4
  402420:	2500      	movs	r5, #0
  402422:	2301      	movs	r3, #1
  402424:	920f      	str	r2, [sp, #60]	; 0x3c
  402426:	2700      	movs	r7, #0
  402428:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40242c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40242e:	1c4a      	adds	r2, r1, #1
  402430:	f000 8265 	beq.w	4028fe <_svfprintf_r+0x6be>
  402434:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  402438:	9207      	str	r2, [sp, #28]
  40243a:	ea54 0205 	orrs.w	r2, r4, r5
  40243e:	f040 8264 	bne.w	40290a <_svfprintf_r+0x6ca>
  402442:	2900      	cmp	r1, #0
  402444:	f040 843c 	bne.w	402cc0 <_svfprintf_r+0xa80>
  402448:	2b00      	cmp	r3, #0
  40244a:	f040 84d7 	bne.w	402dfc <_svfprintf_r+0xbbc>
  40244e:	f01b 0301 	ands.w	r3, fp, #1
  402452:	930e      	str	r3, [sp, #56]	; 0x38
  402454:	f000 8604 	beq.w	403060 <_svfprintf_r+0xe20>
  402458:	ae42      	add	r6, sp, #264	; 0x108
  40245a:	2330      	movs	r3, #48	; 0x30
  40245c:	f806 3d41 	strb.w	r3, [r6, #-65]!
  402460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402462:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402464:	4293      	cmp	r3, r2
  402466:	bfb8      	it	lt
  402468:	4613      	movlt	r3, r2
  40246a:	9308      	str	r3, [sp, #32]
  40246c:	2300      	movs	r3, #0
  40246e:	9312      	str	r3, [sp, #72]	; 0x48
  402470:	b117      	cbz	r7, 402478 <_svfprintf_r+0x238>
  402472:	9b08      	ldr	r3, [sp, #32]
  402474:	3301      	adds	r3, #1
  402476:	9308      	str	r3, [sp, #32]
  402478:	9b07      	ldr	r3, [sp, #28]
  40247a:	f013 0302 	ands.w	r3, r3, #2
  40247e:	9310      	str	r3, [sp, #64]	; 0x40
  402480:	d002      	beq.n	402488 <_svfprintf_r+0x248>
  402482:	9b08      	ldr	r3, [sp, #32]
  402484:	3302      	adds	r3, #2
  402486:	9308      	str	r3, [sp, #32]
  402488:	9b07      	ldr	r3, [sp, #28]
  40248a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40248e:	f040 830e 	bne.w	402aae <_svfprintf_r+0x86e>
  402492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402494:	9a08      	ldr	r2, [sp, #32]
  402496:	eba3 0b02 	sub.w	fp, r3, r2
  40249a:	f1bb 0f00 	cmp.w	fp, #0
  40249e:	f340 8306 	ble.w	402aae <_svfprintf_r+0x86e>
  4024a2:	f1bb 0f10 	cmp.w	fp, #16
  4024a6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4024a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4024aa:	dd29      	ble.n	402500 <_svfprintf_r+0x2c0>
  4024ac:	4643      	mov	r3, r8
  4024ae:	4621      	mov	r1, r4
  4024b0:	46a8      	mov	r8, r5
  4024b2:	2710      	movs	r7, #16
  4024b4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4024b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4024b8:	e006      	b.n	4024c8 <_svfprintf_r+0x288>
  4024ba:	f1ab 0b10 	sub.w	fp, fp, #16
  4024be:	f1bb 0f10 	cmp.w	fp, #16
  4024c2:	f103 0308 	add.w	r3, r3, #8
  4024c6:	dd18      	ble.n	4024fa <_svfprintf_r+0x2ba>
  4024c8:	3201      	adds	r2, #1
  4024ca:	48b7      	ldr	r0, [pc, #732]	; (4027a8 <_svfprintf_r+0x568>)
  4024cc:	9226      	str	r2, [sp, #152]	; 0x98
  4024ce:	3110      	adds	r1, #16
  4024d0:	2a07      	cmp	r2, #7
  4024d2:	9127      	str	r1, [sp, #156]	; 0x9c
  4024d4:	e883 0081 	stmia.w	r3, {r0, r7}
  4024d8:	ddef      	ble.n	4024ba <_svfprintf_r+0x27a>
  4024da:	aa25      	add	r2, sp, #148	; 0x94
  4024dc:	4629      	mov	r1, r5
  4024de:	4620      	mov	r0, r4
  4024e0:	f003 f81c 	bl	40551c <__ssprint_r>
  4024e4:	2800      	cmp	r0, #0
  4024e6:	f47f af7d 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  4024ea:	f1ab 0b10 	sub.w	fp, fp, #16
  4024ee:	f1bb 0f10 	cmp.w	fp, #16
  4024f2:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4024f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4024f6:	464b      	mov	r3, r9
  4024f8:	dce6      	bgt.n	4024c8 <_svfprintf_r+0x288>
  4024fa:	4645      	mov	r5, r8
  4024fc:	460c      	mov	r4, r1
  4024fe:	4698      	mov	r8, r3
  402500:	3201      	adds	r2, #1
  402502:	4ba9      	ldr	r3, [pc, #676]	; (4027a8 <_svfprintf_r+0x568>)
  402504:	9226      	str	r2, [sp, #152]	; 0x98
  402506:	445c      	add	r4, fp
  402508:	2a07      	cmp	r2, #7
  40250a:	9427      	str	r4, [sp, #156]	; 0x9c
  40250c:	e888 0808 	stmia.w	r8, {r3, fp}
  402510:	f300 8498 	bgt.w	402e44 <_svfprintf_r+0xc04>
  402514:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402518:	f108 0808 	add.w	r8, r8, #8
  40251c:	b177      	cbz	r7, 40253c <_svfprintf_r+0x2fc>
  40251e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402520:	3301      	adds	r3, #1
  402522:	3401      	adds	r4, #1
  402524:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  402528:	2201      	movs	r2, #1
  40252a:	2b07      	cmp	r3, #7
  40252c:	9427      	str	r4, [sp, #156]	; 0x9c
  40252e:	9326      	str	r3, [sp, #152]	; 0x98
  402530:	e888 0006 	stmia.w	r8, {r1, r2}
  402534:	f300 83db 	bgt.w	402cee <_svfprintf_r+0xaae>
  402538:	f108 0808 	add.w	r8, r8, #8
  40253c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40253e:	b16b      	cbz	r3, 40255c <_svfprintf_r+0x31c>
  402540:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402542:	3301      	adds	r3, #1
  402544:	3402      	adds	r4, #2
  402546:	a91e      	add	r1, sp, #120	; 0x78
  402548:	2202      	movs	r2, #2
  40254a:	2b07      	cmp	r3, #7
  40254c:	9427      	str	r4, [sp, #156]	; 0x9c
  40254e:	9326      	str	r3, [sp, #152]	; 0x98
  402550:	e888 0006 	stmia.w	r8, {r1, r2}
  402554:	f300 83d6 	bgt.w	402d04 <_svfprintf_r+0xac4>
  402558:	f108 0808 	add.w	r8, r8, #8
  40255c:	2d80      	cmp	r5, #128	; 0x80
  40255e:	f000 8315 	beq.w	402b8c <_svfprintf_r+0x94c>
  402562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402564:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402566:	1a9f      	subs	r7, r3, r2
  402568:	2f00      	cmp	r7, #0
  40256a:	dd36      	ble.n	4025da <_svfprintf_r+0x39a>
  40256c:	2f10      	cmp	r7, #16
  40256e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402570:	4d8e      	ldr	r5, [pc, #568]	; (4027ac <_svfprintf_r+0x56c>)
  402572:	dd27      	ble.n	4025c4 <_svfprintf_r+0x384>
  402574:	4642      	mov	r2, r8
  402576:	4621      	mov	r1, r4
  402578:	46b0      	mov	r8, r6
  40257a:	f04f 0b10 	mov.w	fp, #16
  40257e:	462e      	mov	r6, r5
  402580:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402582:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402584:	e004      	b.n	402590 <_svfprintf_r+0x350>
  402586:	3f10      	subs	r7, #16
  402588:	2f10      	cmp	r7, #16
  40258a:	f102 0208 	add.w	r2, r2, #8
  40258e:	dd15      	ble.n	4025bc <_svfprintf_r+0x37c>
  402590:	3301      	adds	r3, #1
  402592:	3110      	adds	r1, #16
  402594:	2b07      	cmp	r3, #7
  402596:	9127      	str	r1, [sp, #156]	; 0x9c
  402598:	9326      	str	r3, [sp, #152]	; 0x98
  40259a:	e882 0840 	stmia.w	r2, {r6, fp}
  40259e:	ddf2      	ble.n	402586 <_svfprintf_r+0x346>
  4025a0:	aa25      	add	r2, sp, #148	; 0x94
  4025a2:	4629      	mov	r1, r5
  4025a4:	4620      	mov	r0, r4
  4025a6:	f002 ffb9 	bl	40551c <__ssprint_r>
  4025aa:	2800      	cmp	r0, #0
  4025ac:	f47f af1a 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  4025b0:	3f10      	subs	r7, #16
  4025b2:	2f10      	cmp	r7, #16
  4025b4:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4025b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4025b8:	464a      	mov	r2, r9
  4025ba:	dce9      	bgt.n	402590 <_svfprintf_r+0x350>
  4025bc:	4635      	mov	r5, r6
  4025be:	460c      	mov	r4, r1
  4025c0:	4646      	mov	r6, r8
  4025c2:	4690      	mov	r8, r2
  4025c4:	3301      	adds	r3, #1
  4025c6:	443c      	add	r4, r7
  4025c8:	2b07      	cmp	r3, #7
  4025ca:	9427      	str	r4, [sp, #156]	; 0x9c
  4025cc:	9326      	str	r3, [sp, #152]	; 0x98
  4025ce:	e888 00a0 	stmia.w	r8, {r5, r7}
  4025d2:	f300 8381 	bgt.w	402cd8 <_svfprintf_r+0xa98>
  4025d6:	f108 0808 	add.w	r8, r8, #8
  4025da:	9b07      	ldr	r3, [sp, #28]
  4025dc:	05df      	lsls	r7, r3, #23
  4025de:	f100 8268 	bmi.w	402ab2 <_svfprintf_r+0x872>
  4025e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4025e4:	990e      	ldr	r1, [sp, #56]	; 0x38
  4025e6:	f8c8 6000 	str.w	r6, [r8]
  4025ea:	3301      	adds	r3, #1
  4025ec:	440c      	add	r4, r1
  4025ee:	2b07      	cmp	r3, #7
  4025f0:	9427      	str	r4, [sp, #156]	; 0x9c
  4025f2:	f8c8 1004 	str.w	r1, [r8, #4]
  4025f6:	9326      	str	r3, [sp, #152]	; 0x98
  4025f8:	f300 834d 	bgt.w	402c96 <_svfprintf_r+0xa56>
  4025fc:	f108 0808 	add.w	r8, r8, #8
  402600:	9b07      	ldr	r3, [sp, #28]
  402602:	075b      	lsls	r3, r3, #29
  402604:	d53a      	bpl.n	40267c <_svfprintf_r+0x43c>
  402606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402608:	9a08      	ldr	r2, [sp, #32]
  40260a:	1a9d      	subs	r5, r3, r2
  40260c:	2d00      	cmp	r5, #0
  40260e:	dd35      	ble.n	40267c <_svfprintf_r+0x43c>
  402610:	2d10      	cmp	r5, #16
  402612:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402614:	dd20      	ble.n	402658 <_svfprintf_r+0x418>
  402616:	2610      	movs	r6, #16
  402618:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40261a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40261e:	e004      	b.n	40262a <_svfprintf_r+0x3ea>
  402620:	3d10      	subs	r5, #16
  402622:	2d10      	cmp	r5, #16
  402624:	f108 0808 	add.w	r8, r8, #8
  402628:	dd16      	ble.n	402658 <_svfprintf_r+0x418>
  40262a:	3301      	adds	r3, #1
  40262c:	4a5e      	ldr	r2, [pc, #376]	; (4027a8 <_svfprintf_r+0x568>)
  40262e:	9326      	str	r3, [sp, #152]	; 0x98
  402630:	3410      	adds	r4, #16
  402632:	2b07      	cmp	r3, #7
  402634:	9427      	str	r4, [sp, #156]	; 0x9c
  402636:	e888 0044 	stmia.w	r8, {r2, r6}
  40263a:	ddf1      	ble.n	402620 <_svfprintf_r+0x3e0>
  40263c:	aa25      	add	r2, sp, #148	; 0x94
  40263e:	4659      	mov	r1, fp
  402640:	4638      	mov	r0, r7
  402642:	f002 ff6b 	bl	40551c <__ssprint_r>
  402646:	2800      	cmp	r0, #0
  402648:	f47f aecc 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  40264c:	3d10      	subs	r5, #16
  40264e:	2d10      	cmp	r5, #16
  402650:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402652:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402654:	46c8      	mov	r8, r9
  402656:	dce8      	bgt.n	40262a <_svfprintf_r+0x3ea>
  402658:	3301      	adds	r3, #1
  40265a:	4a53      	ldr	r2, [pc, #332]	; (4027a8 <_svfprintf_r+0x568>)
  40265c:	9326      	str	r3, [sp, #152]	; 0x98
  40265e:	442c      	add	r4, r5
  402660:	2b07      	cmp	r3, #7
  402662:	9427      	str	r4, [sp, #156]	; 0x9c
  402664:	e888 0024 	stmia.w	r8, {r2, r5}
  402668:	dd08      	ble.n	40267c <_svfprintf_r+0x43c>
  40266a:	aa25      	add	r2, sp, #148	; 0x94
  40266c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40266e:	980c      	ldr	r0, [sp, #48]	; 0x30
  402670:	f002 ff54 	bl	40551c <__ssprint_r>
  402674:	2800      	cmp	r0, #0
  402676:	f47f aeb5 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  40267a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40267c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40267e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402680:	9908      	ldr	r1, [sp, #32]
  402682:	428a      	cmp	r2, r1
  402684:	bfac      	ite	ge
  402686:	189b      	addge	r3, r3, r2
  402688:	185b      	addlt	r3, r3, r1
  40268a:	9309      	str	r3, [sp, #36]	; 0x24
  40268c:	2c00      	cmp	r4, #0
  40268e:	f040 830d 	bne.w	402cac <_svfprintf_r+0xa6c>
  402692:	2300      	movs	r3, #0
  402694:	9326      	str	r3, [sp, #152]	; 0x98
  402696:	46c8      	mov	r8, r9
  402698:	e5f9      	b.n	40228e <_svfprintf_r+0x4e>
  40269a:	9311      	str	r3, [sp, #68]	; 0x44
  40269c:	f01b 0320 	ands.w	r3, fp, #32
  4026a0:	f040 81e3 	bne.w	402a6a <_svfprintf_r+0x82a>
  4026a4:	f01b 0210 	ands.w	r2, fp, #16
  4026a8:	f040 842e 	bne.w	402f08 <_svfprintf_r+0xcc8>
  4026ac:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  4026b0:	f000 842a 	beq.w	402f08 <_svfprintf_r+0xcc8>
  4026b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4026b6:	4613      	mov	r3, r2
  4026b8:	460a      	mov	r2, r1
  4026ba:	3204      	adds	r2, #4
  4026bc:	880c      	ldrh	r4, [r1, #0]
  4026be:	920f      	str	r2, [sp, #60]	; 0x3c
  4026c0:	2500      	movs	r5, #0
  4026c2:	e6b0      	b.n	402426 <_svfprintf_r+0x1e6>
  4026c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4026c6:	9311      	str	r3, [sp, #68]	; 0x44
  4026c8:	6816      	ldr	r6, [r2, #0]
  4026ca:	2400      	movs	r4, #0
  4026cc:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4026d0:	1d15      	adds	r5, r2, #4
  4026d2:	2e00      	cmp	r6, #0
  4026d4:	f000 86a7 	beq.w	403426 <_svfprintf_r+0x11e6>
  4026d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4026da:	1c53      	adds	r3, r2, #1
  4026dc:	f000 8609 	beq.w	4032f2 <_svfprintf_r+0x10b2>
  4026e0:	4621      	mov	r1, r4
  4026e2:	4630      	mov	r0, r6
  4026e4:	f002 fa8c 	bl	404c00 <memchr>
  4026e8:	2800      	cmp	r0, #0
  4026ea:	f000 86e1 	beq.w	4034b0 <_svfprintf_r+0x1270>
  4026ee:	1b83      	subs	r3, r0, r6
  4026f0:	930e      	str	r3, [sp, #56]	; 0x38
  4026f2:	940a      	str	r4, [sp, #40]	; 0x28
  4026f4:	950f      	str	r5, [sp, #60]	; 0x3c
  4026f6:	f8cd b01c 	str.w	fp, [sp, #28]
  4026fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4026fe:	9308      	str	r3, [sp, #32]
  402700:	9412      	str	r4, [sp, #72]	; 0x48
  402702:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402706:	e6b3      	b.n	402470 <_svfprintf_r+0x230>
  402708:	f89a 3000 	ldrb.w	r3, [sl]
  40270c:	2201      	movs	r2, #1
  40270e:	212b      	movs	r1, #43	; 0x2b
  402710:	e5ee      	b.n	4022f0 <_svfprintf_r+0xb0>
  402712:	f04b 0b20 	orr.w	fp, fp, #32
  402716:	f89a 3000 	ldrb.w	r3, [sl]
  40271a:	e5e9      	b.n	4022f0 <_svfprintf_r+0xb0>
  40271c:	9311      	str	r3, [sp, #68]	; 0x44
  40271e:	2a00      	cmp	r2, #0
  402720:	f040 8795 	bne.w	40364e <_svfprintf_r+0x140e>
  402724:	4b22      	ldr	r3, [pc, #136]	; (4027b0 <_svfprintf_r+0x570>)
  402726:	9318      	str	r3, [sp, #96]	; 0x60
  402728:	f01b 0f20 	tst.w	fp, #32
  40272c:	f040 8111 	bne.w	402952 <_svfprintf_r+0x712>
  402730:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402732:	f01b 0f10 	tst.w	fp, #16
  402736:	4613      	mov	r3, r2
  402738:	f040 83e1 	bne.w	402efe <_svfprintf_r+0xcbe>
  40273c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402740:	f000 83dd 	beq.w	402efe <_svfprintf_r+0xcbe>
  402744:	3304      	adds	r3, #4
  402746:	8814      	ldrh	r4, [r2, #0]
  402748:	930f      	str	r3, [sp, #60]	; 0x3c
  40274a:	2500      	movs	r5, #0
  40274c:	f01b 0f01 	tst.w	fp, #1
  402750:	f000 810c 	beq.w	40296c <_svfprintf_r+0x72c>
  402754:	ea54 0305 	orrs.w	r3, r4, r5
  402758:	f000 8108 	beq.w	40296c <_svfprintf_r+0x72c>
  40275c:	2330      	movs	r3, #48	; 0x30
  40275e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  402762:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  402766:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  40276a:	f04b 0b02 	orr.w	fp, fp, #2
  40276e:	2302      	movs	r3, #2
  402770:	e659      	b.n	402426 <_svfprintf_r+0x1e6>
  402772:	f89a 3000 	ldrb.w	r3, [sl]
  402776:	2900      	cmp	r1, #0
  402778:	f47f adba 	bne.w	4022f0 <_svfprintf_r+0xb0>
  40277c:	2201      	movs	r2, #1
  40277e:	2120      	movs	r1, #32
  402780:	e5b6      	b.n	4022f0 <_svfprintf_r+0xb0>
  402782:	f04b 0b01 	orr.w	fp, fp, #1
  402786:	f89a 3000 	ldrb.w	r3, [sl]
  40278a:	e5b1      	b.n	4022f0 <_svfprintf_r+0xb0>
  40278c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40278e:	6823      	ldr	r3, [r4, #0]
  402790:	930d      	str	r3, [sp, #52]	; 0x34
  402792:	4618      	mov	r0, r3
  402794:	2800      	cmp	r0, #0
  402796:	4623      	mov	r3, r4
  402798:	f103 0304 	add.w	r3, r3, #4
  40279c:	f6ff ae0a 	blt.w	4023b4 <_svfprintf_r+0x174>
  4027a0:	930f      	str	r3, [sp, #60]	; 0x3c
  4027a2:	f89a 3000 	ldrb.w	r3, [sl]
  4027a6:	e5a3      	b.n	4022f0 <_svfprintf_r+0xb0>
  4027a8:	004071c0 	.word	0x004071c0
  4027ac:	004071d0 	.word	0x004071d0
  4027b0:	004071a0 	.word	0x004071a0
  4027b4:	f04b 0b10 	orr.w	fp, fp, #16
  4027b8:	f01b 0f20 	tst.w	fp, #32
  4027bc:	9311      	str	r3, [sp, #68]	; 0x44
  4027be:	f43f ae23 	beq.w	402408 <_svfprintf_r+0x1c8>
  4027c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4027c4:	3507      	adds	r5, #7
  4027c6:	f025 0307 	bic.w	r3, r5, #7
  4027ca:	f103 0208 	add.w	r2, r3, #8
  4027ce:	e9d3 4500 	ldrd	r4, r5, [r3]
  4027d2:	920f      	str	r2, [sp, #60]	; 0x3c
  4027d4:	2301      	movs	r3, #1
  4027d6:	e626      	b.n	402426 <_svfprintf_r+0x1e6>
  4027d8:	f89a 3000 	ldrb.w	r3, [sl]
  4027dc:	2b2a      	cmp	r3, #42	; 0x2a
  4027de:	f10a 0401 	add.w	r4, sl, #1
  4027e2:	f000 8727 	beq.w	403634 <_svfprintf_r+0x13f4>
  4027e6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4027ea:	2809      	cmp	r0, #9
  4027ec:	46a2      	mov	sl, r4
  4027ee:	f200 86ad 	bhi.w	40354c <_svfprintf_r+0x130c>
  4027f2:	2300      	movs	r3, #0
  4027f4:	461c      	mov	r4, r3
  4027f6:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4027fa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4027fe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  402802:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402806:	2809      	cmp	r0, #9
  402808:	d9f5      	bls.n	4027f6 <_svfprintf_r+0x5b6>
  40280a:	940a      	str	r4, [sp, #40]	; 0x28
  40280c:	e572      	b.n	4022f4 <_svfprintf_r+0xb4>
  40280e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  402812:	f89a 3000 	ldrb.w	r3, [sl]
  402816:	e56b      	b.n	4022f0 <_svfprintf_r+0xb0>
  402818:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40281c:	f89a 3000 	ldrb.w	r3, [sl]
  402820:	e566      	b.n	4022f0 <_svfprintf_r+0xb0>
  402822:	f89a 3000 	ldrb.w	r3, [sl]
  402826:	2b6c      	cmp	r3, #108	; 0x6c
  402828:	bf03      	ittte	eq
  40282a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40282e:	f04b 0b20 	orreq.w	fp, fp, #32
  402832:	f10a 0a01 	addeq.w	sl, sl, #1
  402836:	f04b 0b10 	orrne.w	fp, fp, #16
  40283a:	e559      	b.n	4022f0 <_svfprintf_r+0xb0>
  40283c:	2a00      	cmp	r2, #0
  40283e:	f040 8711 	bne.w	403664 <_svfprintf_r+0x1424>
  402842:	f01b 0f20 	tst.w	fp, #32
  402846:	f040 84f9 	bne.w	40323c <_svfprintf_r+0xffc>
  40284a:	f01b 0f10 	tst.w	fp, #16
  40284e:	f040 84ac 	bne.w	4031aa <_svfprintf_r+0xf6a>
  402852:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402856:	f000 84a8 	beq.w	4031aa <_svfprintf_r+0xf6a>
  40285a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40285c:	6813      	ldr	r3, [r2, #0]
  40285e:	3204      	adds	r2, #4
  402860:	920f      	str	r2, [sp, #60]	; 0x3c
  402862:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  402866:	801a      	strh	r2, [r3, #0]
  402868:	e511      	b.n	40228e <_svfprintf_r+0x4e>
  40286a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40286c:	4bb3      	ldr	r3, [pc, #716]	; (402b3c <_svfprintf_r+0x8fc>)
  40286e:	680c      	ldr	r4, [r1, #0]
  402870:	9318      	str	r3, [sp, #96]	; 0x60
  402872:	2230      	movs	r2, #48	; 0x30
  402874:	2378      	movs	r3, #120	; 0x78
  402876:	3104      	adds	r1, #4
  402878:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  40287c:	9311      	str	r3, [sp, #68]	; 0x44
  40287e:	f04b 0b02 	orr.w	fp, fp, #2
  402882:	910f      	str	r1, [sp, #60]	; 0x3c
  402884:	2500      	movs	r5, #0
  402886:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  40288a:	2302      	movs	r3, #2
  40288c:	e5cb      	b.n	402426 <_svfprintf_r+0x1e6>
  40288e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402890:	9311      	str	r3, [sp, #68]	; 0x44
  402892:	680a      	ldr	r2, [r1, #0]
  402894:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  402898:	2300      	movs	r3, #0
  40289a:	460a      	mov	r2, r1
  40289c:	461f      	mov	r7, r3
  40289e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4028a2:	3204      	adds	r2, #4
  4028a4:	2301      	movs	r3, #1
  4028a6:	9308      	str	r3, [sp, #32]
  4028a8:	f8cd b01c 	str.w	fp, [sp, #28]
  4028ac:	970a      	str	r7, [sp, #40]	; 0x28
  4028ae:	9712      	str	r7, [sp, #72]	; 0x48
  4028b0:	920f      	str	r2, [sp, #60]	; 0x3c
  4028b2:	930e      	str	r3, [sp, #56]	; 0x38
  4028b4:	ae28      	add	r6, sp, #160	; 0xa0
  4028b6:	e5df      	b.n	402478 <_svfprintf_r+0x238>
  4028b8:	9311      	str	r3, [sp, #68]	; 0x44
  4028ba:	2a00      	cmp	r2, #0
  4028bc:	f040 86ea 	bne.w	403694 <_svfprintf_r+0x1454>
  4028c0:	f01b 0f20 	tst.w	fp, #32
  4028c4:	d15d      	bne.n	402982 <_svfprintf_r+0x742>
  4028c6:	f01b 0f10 	tst.w	fp, #16
  4028ca:	f040 8308 	bne.w	402ede <_svfprintf_r+0xc9e>
  4028ce:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4028d2:	f000 8304 	beq.w	402ede <_svfprintf_r+0xc9e>
  4028d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4028d8:	f9b1 4000 	ldrsh.w	r4, [r1]
  4028dc:	3104      	adds	r1, #4
  4028de:	17e5      	asrs	r5, r4, #31
  4028e0:	4622      	mov	r2, r4
  4028e2:	462b      	mov	r3, r5
  4028e4:	910f      	str	r1, [sp, #60]	; 0x3c
  4028e6:	2a00      	cmp	r2, #0
  4028e8:	f173 0300 	sbcs.w	r3, r3, #0
  4028ec:	db58      	blt.n	4029a0 <_svfprintf_r+0x760>
  4028ee:	990a      	ldr	r1, [sp, #40]	; 0x28
  4028f0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4028f4:	1c4a      	adds	r2, r1, #1
  4028f6:	f04f 0301 	mov.w	r3, #1
  4028fa:	f47f ad9b 	bne.w	402434 <_svfprintf_r+0x1f4>
  4028fe:	ea54 0205 	orrs.w	r2, r4, r5
  402902:	f000 81df 	beq.w	402cc4 <_svfprintf_r+0xa84>
  402906:	f8cd b01c 	str.w	fp, [sp, #28]
  40290a:	2b01      	cmp	r3, #1
  40290c:	f000 827b 	beq.w	402e06 <_svfprintf_r+0xbc6>
  402910:	2b02      	cmp	r3, #2
  402912:	f040 8206 	bne.w	402d22 <_svfprintf_r+0xae2>
  402916:	9818      	ldr	r0, [sp, #96]	; 0x60
  402918:	464e      	mov	r6, r9
  40291a:	0923      	lsrs	r3, r4, #4
  40291c:	f004 010f 	and.w	r1, r4, #15
  402920:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  402924:	092a      	lsrs	r2, r5, #4
  402926:	461c      	mov	r4, r3
  402928:	4615      	mov	r5, r2
  40292a:	5c43      	ldrb	r3, [r0, r1]
  40292c:	f806 3d01 	strb.w	r3, [r6, #-1]!
  402930:	ea54 0305 	orrs.w	r3, r4, r5
  402934:	d1f1      	bne.n	40291a <_svfprintf_r+0x6da>
  402936:	eba9 0306 	sub.w	r3, r9, r6
  40293a:	930e      	str	r3, [sp, #56]	; 0x38
  40293c:	e590      	b.n	402460 <_svfprintf_r+0x220>
  40293e:	9311      	str	r3, [sp, #68]	; 0x44
  402940:	2a00      	cmp	r2, #0
  402942:	f040 86a3 	bne.w	40368c <_svfprintf_r+0x144c>
  402946:	4b7e      	ldr	r3, [pc, #504]	; (402b40 <_svfprintf_r+0x900>)
  402948:	9318      	str	r3, [sp, #96]	; 0x60
  40294a:	f01b 0f20 	tst.w	fp, #32
  40294e:	f43f aeef 	beq.w	402730 <_svfprintf_r+0x4f0>
  402952:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402954:	3507      	adds	r5, #7
  402956:	f025 0307 	bic.w	r3, r5, #7
  40295a:	f103 0208 	add.w	r2, r3, #8
  40295e:	f01b 0f01 	tst.w	fp, #1
  402962:	920f      	str	r2, [sp, #60]	; 0x3c
  402964:	e9d3 4500 	ldrd	r4, r5, [r3]
  402968:	f47f aef4 	bne.w	402754 <_svfprintf_r+0x514>
  40296c:	2302      	movs	r3, #2
  40296e:	e55a      	b.n	402426 <_svfprintf_r+0x1e6>
  402970:	9311      	str	r3, [sp, #68]	; 0x44
  402972:	2a00      	cmp	r2, #0
  402974:	f040 8686 	bne.w	403684 <_svfprintf_r+0x1444>
  402978:	f04b 0b10 	orr.w	fp, fp, #16
  40297c:	f01b 0f20 	tst.w	fp, #32
  402980:	d0a1      	beq.n	4028c6 <_svfprintf_r+0x686>
  402982:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402984:	3507      	adds	r5, #7
  402986:	f025 0507 	bic.w	r5, r5, #7
  40298a:	e9d5 2300 	ldrd	r2, r3, [r5]
  40298e:	2a00      	cmp	r2, #0
  402990:	f105 0108 	add.w	r1, r5, #8
  402994:	461d      	mov	r5, r3
  402996:	f173 0300 	sbcs.w	r3, r3, #0
  40299a:	910f      	str	r1, [sp, #60]	; 0x3c
  40299c:	4614      	mov	r4, r2
  40299e:	daa6      	bge.n	4028ee <_svfprintf_r+0x6ae>
  4029a0:	272d      	movs	r7, #45	; 0x2d
  4029a2:	4264      	negs	r4, r4
  4029a4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4029a8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4029ac:	2301      	movs	r3, #1
  4029ae:	e53d      	b.n	40242c <_svfprintf_r+0x1ec>
  4029b0:	9311      	str	r3, [sp, #68]	; 0x44
  4029b2:	2a00      	cmp	r2, #0
  4029b4:	f040 8662 	bne.w	40367c <_svfprintf_r+0x143c>
  4029b8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4029ba:	3507      	adds	r5, #7
  4029bc:	f025 0307 	bic.w	r3, r5, #7
  4029c0:	f103 0208 	add.w	r2, r3, #8
  4029c4:	920f      	str	r2, [sp, #60]	; 0x3c
  4029c6:	681a      	ldr	r2, [r3, #0]
  4029c8:	9215      	str	r2, [sp, #84]	; 0x54
  4029ca:	685b      	ldr	r3, [r3, #4]
  4029cc:	9314      	str	r3, [sp, #80]	; 0x50
  4029ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4029d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4029d2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4029d6:	4628      	mov	r0, r5
  4029d8:	4621      	mov	r1, r4
  4029da:	f04f 32ff 	mov.w	r2, #4294967295
  4029de:	4b59      	ldr	r3, [pc, #356]	; (402b44 <_svfprintf_r+0x904>)
  4029e0:	f003 fe62 	bl	4066a8 <__aeabi_dcmpun>
  4029e4:	2800      	cmp	r0, #0
  4029e6:	f040 834a 	bne.w	40307e <_svfprintf_r+0xe3e>
  4029ea:	4628      	mov	r0, r5
  4029ec:	4621      	mov	r1, r4
  4029ee:	f04f 32ff 	mov.w	r2, #4294967295
  4029f2:	4b54      	ldr	r3, [pc, #336]	; (402b44 <_svfprintf_r+0x904>)
  4029f4:	f003 fe3a 	bl	40666c <__aeabi_dcmple>
  4029f8:	2800      	cmp	r0, #0
  4029fa:	f040 8340 	bne.w	40307e <_svfprintf_r+0xe3e>
  4029fe:	a815      	add	r0, sp, #84	; 0x54
  402a00:	c80d      	ldmia	r0, {r0, r2, r3}
  402a02:	9914      	ldr	r1, [sp, #80]	; 0x50
  402a04:	f003 fe28 	bl	406658 <__aeabi_dcmplt>
  402a08:	2800      	cmp	r0, #0
  402a0a:	f040 8530 	bne.w	40346e <_svfprintf_r+0x122e>
  402a0e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402a12:	4e4d      	ldr	r6, [pc, #308]	; (402b48 <_svfprintf_r+0x908>)
  402a14:	4b4d      	ldr	r3, [pc, #308]	; (402b4c <_svfprintf_r+0x90c>)
  402a16:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  402a1a:	9007      	str	r0, [sp, #28]
  402a1c:	9811      	ldr	r0, [sp, #68]	; 0x44
  402a1e:	2203      	movs	r2, #3
  402a20:	2100      	movs	r1, #0
  402a22:	9208      	str	r2, [sp, #32]
  402a24:	910a      	str	r1, [sp, #40]	; 0x28
  402a26:	2847      	cmp	r0, #71	; 0x47
  402a28:	bfd8      	it	le
  402a2a:	461e      	movle	r6, r3
  402a2c:	920e      	str	r2, [sp, #56]	; 0x38
  402a2e:	9112      	str	r1, [sp, #72]	; 0x48
  402a30:	e51e      	b.n	402470 <_svfprintf_r+0x230>
  402a32:	f04b 0b08 	orr.w	fp, fp, #8
  402a36:	f89a 3000 	ldrb.w	r3, [sl]
  402a3a:	e459      	b.n	4022f0 <_svfprintf_r+0xb0>
  402a3c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402a40:	2300      	movs	r3, #0
  402a42:	461c      	mov	r4, r3
  402a44:	f81a 3b01 	ldrb.w	r3, [sl], #1
  402a48:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402a4c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  402a50:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402a54:	2809      	cmp	r0, #9
  402a56:	d9f5      	bls.n	402a44 <_svfprintf_r+0x804>
  402a58:	940d      	str	r4, [sp, #52]	; 0x34
  402a5a:	e44b      	b.n	4022f4 <_svfprintf_r+0xb4>
  402a5c:	f04b 0b10 	orr.w	fp, fp, #16
  402a60:	9311      	str	r3, [sp, #68]	; 0x44
  402a62:	f01b 0320 	ands.w	r3, fp, #32
  402a66:	f43f ae1d 	beq.w	4026a4 <_svfprintf_r+0x464>
  402a6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402a6c:	3507      	adds	r5, #7
  402a6e:	f025 0307 	bic.w	r3, r5, #7
  402a72:	f103 0208 	add.w	r2, r3, #8
  402a76:	e9d3 4500 	ldrd	r4, r5, [r3]
  402a7a:	920f      	str	r2, [sp, #60]	; 0x3c
  402a7c:	2300      	movs	r3, #0
  402a7e:	e4d2      	b.n	402426 <_svfprintf_r+0x1e6>
  402a80:	9311      	str	r3, [sp, #68]	; 0x44
  402a82:	2a00      	cmp	r2, #0
  402a84:	f040 85e7 	bne.w	403656 <_svfprintf_r+0x1416>
  402a88:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a8a:	2a00      	cmp	r2, #0
  402a8c:	f43f aca3 	beq.w	4023d6 <_svfprintf_r+0x196>
  402a90:	2300      	movs	r3, #0
  402a92:	2101      	movs	r1, #1
  402a94:	461f      	mov	r7, r3
  402a96:	9108      	str	r1, [sp, #32]
  402a98:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  402a9c:	f8cd b01c 	str.w	fp, [sp, #28]
  402aa0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402aa4:	930a      	str	r3, [sp, #40]	; 0x28
  402aa6:	9312      	str	r3, [sp, #72]	; 0x48
  402aa8:	910e      	str	r1, [sp, #56]	; 0x38
  402aaa:	ae28      	add	r6, sp, #160	; 0xa0
  402aac:	e4e4      	b.n	402478 <_svfprintf_r+0x238>
  402aae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402ab0:	e534      	b.n	40251c <_svfprintf_r+0x2dc>
  402ab2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402ab4:	2b65      	cmp	r3, #101	; 0x65
  402ab6:	f340 80a7 	ble.w	402c08 <_svfprintf_r+0x9c8>
  402aba:	a815      	add	r0, sp, #84	; 0x54
  402abc:	c80d      	ldmia	r0, {r0, r2, r3}
  402abe:	9914      	ldr	r1, [sp, #80]	; 0x50
  402ac0:	f003 fdc0 	bl	406644 <__aeabi_dcmpeq>
  402ac4:	2800      	cmp	r0, #0
  402ac6:	f000 8150 	beq.w	402d6a <_svfprintf_r+0xb2a>
  402aca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402acc:	4a20      	ldr	r2, [pc, #128]	; (402b50 <_svfprintf_r+0x910>)
  402ace:	f8c8 2000 	str.w	r2, [r8]
  402ad2:	3301      	adds	r3, #1
  402ad4:	3401      	adds	r4, #1
  402ad6:	2201      	movs	r2, #1
  402ad8:	2b07      	cmp	r3, #7
  402ada:	9427      	str	r4, [sp, #156]	; 0x9c
  402adc:	9326      	str	r3, [sp, #152]	; 0x98
  402ade:	f8c8 2004 	str.w	r2, [r8, #4]
  402ae2:	f300 836a 	bgt.w	4031ba <_svfprintf_r+0xf7a>
  402ae6:	f108 0808 	add.w	r8, r8, #8
  402aea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402aec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402aee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402af0:	4293      	cmp	r3, r2
  402af2:	db03      	blt.n	402afc <_svfprintf_r+0x8bc>
  402af4:	9b07      	ldr	r3, [sp, #28]
  402af6:	07dd      	lsls	r5, r3, #31
  402af8:	f57f ad82 	bpl.w	402600 <_svfprintf_r+0x3c0>
  402afc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402afe:	9919      	ldr	r1, [sp, #100]	; 0x64
  402b00:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  402b02:	f8c8 2000 	str.w	r2, [r8]
  402b06:	3301      	adds	r3, #1
  402b08:	440c      	add	r4, r1
  402b0a:	2b07      	cmp	r3, #7
  402b0c:	f8c8 1004 	str.w	r1, [r8, #4]
  402b10:	9427      	str	r4, [sp, #156]	; 0x9c
  402b12:	9326      	str	r3, [sp, #152]	; 0x98
  402b14:	f300 839e 	bgt.w	403254 <_svfprintf_r+0x1014>
  402b18:	f108 0808 	add.w	r8, r8, #8
  402b1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402b1e:	1e5e      	subs	r6, r3, #1
  402b20:	2e00      	cmp	r6, #0
  402b22:	f77f ad6d 	ble.w	402600 <_svfprintf_r+0x3c0>
  402b26:	2e10      	cmp	r6, #16
  402b28:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402b2a:	4d0a      	ldr	r5, [pc, #40]	; (402b54 <_svfprintf_r+0x914>)
  402b2c:	f340 81f5 	ble.w	402f1a <_svfprintf_r+0xcda>
  402b30:	4622      	mov	r2, r4
  402b32:	2710      	movs	r7, #16
  402b34:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  402b38:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  402b3a:	e013      	b.n	402b64 <_svfprintf_r+0x924>
  402b3c:	004071a0 	.word	0x004071a0
  402b40:	0040718c 	.word	0x0040718c
  402b44:	7fefffff 	.word	0x7fefffff
  402b48:	00407180 	.word	0x00407180
  402b4c:	0040717c 	.word	0x0040717c
  402b50:	004071bc 	.word	0x004071bc
  402b54:	004071d0 	.word	0x004071d0
  402b58:	f108 0808 	add.w	r8, r8, #8
  402b5c:	3e10      	subs	r6, #16
  402b5e:	2e10      	cmp	r6, #16
  402b60:	f340 81da 	ble.w	402f18 <_svfprintf_r+0xcd8>
  402b64:	3301      	adds	r3, #1
  402b66:	3210      	adds	r2, #16
  402b68:	2b07      	cmp	r3, #7
  402b6a:	9227      	str	r2, [sp, #156]	; 0x9c
  402b6c:	9326      	str	r3, [sp, #152]	; 0x98
  402b6e:	e888 00a0 	stmia.w	r8, {r5, r7}
  402b72:	ddf1      	ble.n	402b58 <_svfprintf_r+0x918>
  402b74:	aa25      	add	r2, sp, #148	; 0x94
  402b76:	4621      	mov	r1, r4
  402b78:	4658      	mov	r0, fp
  402b7a:	f002 fccf 	bl	40551c <__ssprint_r>
  402b7e:	2800      	cmp	r0, #0
  402b80:	f47f ac30 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  402b84:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402b86:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402b88:	46c8      	mov	r8, r9
  402b8a:	e7e7      	b.n	402b5c <_svfprintf_r+0x91c>
  402b8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402b8e:	9a08      	ldr	r2, [sp, #32]
  402b90:	1a9f      	subs	r7, r3, r2
  402b92:	2f00      	cmp	r7, #0
  402b94:	f77f ace5 	ble.w	402562 <_svfprintf_r+0x322>
  402b98:	2f10      	cmp	r7, #16
  402b9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402b9c:	4db6      	ldr	r5, [pc, #728]	; (402e78 <_svfprintf_r+0xc38>)
  402b9e:	dd27      	ble.n	402bf0 <_svfprintf_r+0x9b0>
  402ba0:	4642      	mov	r2, r8
  402ba2:	4621      	mov	r1, r4
  402ba4:	46b0      	mov	r8, r6
  402ba6:	f04f 0b10 	mov.w	fp, #16
  402baa:	462e      	mov	r6, r5
  402bac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402bae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402bb0:	e004      	b.n	402bbc <_svfprintf_r+0x97c>
  402bb2:	3f10      	subs	r7, #16
  402bb4:	2f10      	cmp	r7, #16
  402bb6:	f102 0208 	add.w	r2, r2, #8
  402bba:	dd15      	ble.n	402be8 <_svfprintf_r+0x9a8>
  402bbc:	3301      	adds	r3, #1
  402bbe:	3110      	adds	r1, #16
  402bc0:	2b07      	cmp	r3, #7
  402bc2:	9127      	str	r1, [sp, #156]	; 0x9c
  402bc4:	9326      	str	r3, [sp, #152]	; 0x98
  402bc6:	e882 0840 	stmia.w	r2, {r6, fp}
  402bca:	ddf2      	ble.n	402bb2 <_svfprintf_r+0x972>
  402bcc:	aa25      	add	r2, sp, #148	; 0x94
  402bce:	4629      	mov	r1, r5
  402bd0:	4620      	mov	r0, r4
  402bd2:	f002 fca3 	bl	40551c <__ssprint_r>
  402bd6:	2800      	cmp	r0, #0
  402bd8:	f47f ac04 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  402bdc:	3f10      	subs	r7, #16
  402bde:	2f10      	cmp	r7, #16
  402be0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402be2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402be4:	464a      	mov	r2, r9
  402be6:	dce9      	bgt.n	402bbc <_svfprintf_r+0x97c>
  402be8:	4635      	mov	r5, r6
  402bea:	460c      	mov	r4, r1
  402bec:	4646      	mov	r6, r8
  402bee:	4690      	mov	r8, r2
  402bf0:	3301      	adds	r3, #1
  402bf2:	443c      	add	r4, r7
  402bf4:	2b07      	cmp	r3, #7
  402bf6:	9427      	str	r4, [sp, #156]	; 0x9c
  402bf8:	9326      	str	r3, [sp, #152]	; 0x98
  402bfa:	e888 00a0 	stmia.w	r8, {r5, r7}
  402bfe:	f300 8232 	bgt.w	403066 <_svfprintf_r+0xe26>
  402c02:	f108 0808 	add.w	r8, r8, #8
  402c06:	e4ac      	b.n	402562 <_svfprintf_r+0x322>
  402c08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402c0a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402c0c:	2b01      	cmp	r3, #1
  402c0e:	f340 81fe 	ble.w	40300e <_svfprintf_r+0xdce>
  402c12:	3701      	adds	r7, #1
  402c14:	3401      	adds	r4, #1
  402c16:	2301      	movs	r3, #1
  402c18:	2f07      	cmp	r7, #7
  402c1a:	9427      	str	r4, [sp, #156]	; 0x9c
  402c1c:	9726      	str	r7, [sp, #152]	; 0x98
  402c1e:	f8c8 6000 	str.w	r6, [r8]
  402c22:	f8c8 3004 	str.w	r3, [r8, #4]
  402c26:	f300 8203 	bgt.w	403030 <_svfprintf_r+0xdf0>
  402c2a:	f108 0808 	add.w	r8, r8, #8
  402c2e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  402c30:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402c32:	f8c8 3000 	str.w	r3, [r8]
  402c36:	3701      	adds	r7, #1
  402c38:	4414      	add	r4, r2
  402c3a:	2f07      	cmp	r7, #7
  402c3c:	9427      	str	r4, [sp, #156]	; 0x9c
  402c3e:	9726      	str	r7, [sp, #152]	; 0x98
  402c40:	f8c8 2004 	str.w	r2, [r8, #4]
  402c44:	f300 8200 	bgt.w	403048 <_svfprintf_r+0xe08>
  402c48:	f108 0808 	add.w	r8, r8, #8
  402c4c:	a815      	add	r0, sp, #84	; 0x54
  402c4e:	c80d      	ldmia	r0, {r0, r2, r3}
  402c50:	9914      	ldr	r1, [sp, #80]	; 0x50
  402c52:	f003 fcf7 	bl	406644 <__aeabi_dcmpeq>
  402c56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402c58:	2800      	cmp	r0, #0
  402c5a:	f040 8101 	bne.w	402e60 <_svfprintf_r+0xc20>
  402c5e:	3b01      	subs	r3, #1
  402c60:	3701      	adds	r7, #1
  402c62:	3601      	adds	r6, #1
  402c64:	441c      	add	r4, r3
  402c66:	2f07      	cmp	r7, #7
  402c68:	9726      	str	r7, [sp, #152]	; 0x98
  402c6a:	9427      	str	r4, [sp, #156]	; 0x9c
  402c6c:	f8c8 6000 	str.w	r6, [r8]
  402c70:	f8c8 3004 	str.w	r3, [r8, #4]
  402c74:	f300 8127 	bgt.w	402ec6 <_svfprintf_r+0xc86>
  402c78:	f108 0808 	add.w	r8, r8, #8
  402c7c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  402c7e:	f8c8 2004 	str.w	r2, [r8, #4]
  402c82:	3701      	adds	r7, #1
  402c84:	4414      	add	r4, r2
  402c86:	ab21      	add	r3, sp, #132	; 0x84
  402c88:	2f07      	cmp	r7, #7
  402c8a:	9427      	str	r4, [sp, #156]	; 0x9c
  402c8c:	9726      	str	r7, [sp, #152]	; 0x98
  402c8e:	f8c8 3000 	str.w	r3, [r8]
  402c92:	f77f acb3 	ble.w	4025fc <_svfprintf_r+0x3bc>
  402c96:	aa25      	add	r2, sp, #148	; 0x94
  402c98:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402c9a:	980c      	ldr	r0, [sp, #48]	; 0x30
  402c9c:	f002 fc3e 	bl	40551c <__ssprint_r>
  402ca0:	2800      	cmp	r0, #0
  402ca2:	f47f ab9f 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  402ca6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402ca8:	46c8      	mov	r8, r9
  402caa:	e4a9      	b.n	402600 <_svfprintf_r+0x3c0>
  402cac:	aa25      	add	r2, sp, #148	; 0x94
  402cae:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402cb0:	980c      	ldr	r0, [sp, #48]	; 0x30
  402cb2:	f002 fc33 	bl	40551c <__ssprint_r>
  402cb6:	2800      	cmp	r0, #0
  402cb8:	f43f aceb 	beq.w	402692 <_svfprintf_r+0x452>
  402cbc:	f7ff bb92 	b.w	4023e4 <_svfprintf_r+0x1a4>
  402cc0:	f8dd b01c 	ldr.w	fp, [sp, #28]
  402cc4:	2b01      	cmp	r3, #1
  402cc6:	f000 8134 	beq.w	402f32 <_svfprintf_r+0xcf2>
  402cca:	2b02      	cmp	r3, #2
  402ccc:	d125      	bne.n	402d1a <_svfprintf_r+0xada>
  402cce:	f8cd b01c 	str.w	fp, [sp, #28]
  402cd2:	2400      	movs	r4, #0
  402cd4:	2500      	movs	r5, #0
  402cd6:	e61e      	b.n	402916 <_svfprintf_r+0x6d6>
  402cd8:	aa25      	add	r2, sp, #148	; 0x94
  402cda:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402cdc:	980c      	ldr	r0, [sp, #48]	; 0x30
  402cde:	f002 fc1d 	bl	40551c <__ssprint_r>
  402ce2:	2800      	cmp	r0, #0
  402ce4:	f47f ab7e 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  402ce8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402cea:	46c8      	mov	r8, r9
  402cec:	e475      	b.n	4025da <_svfprintf_r+0x39a>
  402cee:	aa25      	add	r2, sp, #148	; 0x94
  402cf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402cf2:	980c      	ldr	r0, [sp, #48]	; 0x30
  402cf4:	f002 fc12 	bl	40551c <__ssprint_r>
  402cf8:	2800      	cmp	r0, #0
  402cfa:	f47f ab73 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  402cfe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402d00:	46c8      	mov	r8, r9
  402d02:	e41b      	b.n	40253c <_svfprintf_r+0x2fc>
  402d04:	aa25      	add	r2, sp, #148	; 0x94
  402d06:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402d08:	980c      	ldr	r0, [sp, #48]	; 0x30
  402d0a:	f002 fc07 	bl	40551c <__ssprint_r>
  402d0e:	2800      	cmp	r0, #0
  402d10:	f47f ab68 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  402d14:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402d16:	46c8      	mov	r8, r9
  402d18:	e420      	b.n	40255c <_svfprintf_r+0x31c>
  402d1a:	f8cd b01c 	str.w	fp, [sp, #28]
  402d1e:	2400      	movs	r4, #0
  402d20:	2500      	movs	r5, #0
  402d22:	4649      	mov	r1, r9
  402d24:	e000      	b.n	402d28 <_svfprintf_r+0xae8>
  402d26:	4631      	mov	r1, r6
  402d28:	08e2      	lsrs	r2, r4, #3
  402d2a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  402d2e:	08e8      	lsrs	r0, r5, #3
  402d30:	f004 0307 	and.w	r3, r4, #7
  402d34:	4605      	mov	r5, r0
  402d36:	4614      	mov	r4, r2
  402d38:	3330      	adds	r3, #48	; 0x30
  402d3a:	ea54 0205 	orrs.w	r2, r4, r5
  402d3e:	f801 3c01 	strb.w	r3, [r1, #-1]
  402d42:	f101 36ff 	add.w	r6, r1, #4294967295
  402d46:	d1ee      	bne.n	402d26 <_svfprintf_r+0xae6>
  402d48:	9a07      	ldr	r2, [sp, #28]
  402d4a:	07d2      	lsls	r2, r2, #31
  402d4c:	f57f adf3 	bpl.w	402936 <_svfprintf_r+0x6f6>
  402d50:	2b30      	cmp	r3, #48	; 0x30
  402d52:	f43f adf0 	beq.w	402936 <_svfprintf_r+0x6f6>
  402d56:	3902      	subs	r1, #2
  402d58:	2330      	movs	r3, #48	; 0x30
  402d5a:	f806 3c01 	strb.w	r3, [r6, #-1]
  402d5e:	eba9 0301 	sub.w	r3, r9, r1
  402d62:	930e      	str	r3, [sp, #56]	; 0x38
  402d64:	460e      	mov	r6, r1
  402d66:	f7ff bb7b 	b.w	402460 <_svfprintf_r+0x220>
  402d6a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  402d6c:	2900      	cmp	r1, #0
  402d6e:	f340 822e 	ble.w	4031ce <_svfprintf_r+0xf8e>
  402d72:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402d74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402d76:	4293      	cmp	r3, r2
  402d78:	bfa8      	it	ge
  402d7a:	4613      	movge	r3, r2
  402d7c:	2b00      	cmp	r3, #0
  402d7e:	461f      	mov	r7, r3
  402d80:	dd0d      	ble.n	402d9e <_svfprintf_r+0xb5e>
  402d82:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d84:	f8c8 6000 	str.w	r6, [r8]
  402d88:	3301      	adds	r3, #1
  402d8a:	443c      	add	r4, r7
  402d8c:	2b07      	cmp	r3, #7
  402d8e:	9427      	str	r4, [sp, #156]	; 0x9c
  402d90:	f8c8 7004 	str.w	r7, [r8, #4]
  402d94:	9326      	str	r3, [sp, #152]	; 0x98
  402d96:	f300 831f 	bgt.w	4033d8 <_svfprintf_r+0x1198>
  402d9a:	f108 0808 	add.w	r8, r8, #8
  402d9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402da0:	2f00      	cmp	r7, #0
  402da2:	bfa8      	it	ge
  402da4:	1bdb      	subge	r3, r3, r7
  402da6:	2b00      	cmp	r3, #0
  402da8:	461f      	mov	r7, r3
  402daa:	f340 80d6 	ble.w	402f5a <_svfprintf_r+0xd1a>
  402dae:	2f10      	cmp	r7, #16
  402db0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402db2:	4d31      	ldr	r5, [pc, #196]	; (402e78 <_svfprintf_r+0xc38>)
  402db4:	f340 81ed 	ble.w	403192 <_svfprintf_r+0xf52>
  402db8:	4642      	mov	r2, r8
  402dba:	4621      	mov	r1, r4
  402dbc:	46b0      	mov	r8, r6
  402dbe:	f04f 0b10 	mov.w	fp, #16
  402dc2:	462e      	mov	r6, r5
  402dc4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402dc6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402dc8:	e004      	b.n	402dd4 <_svfprintf_r+0xb94>
  402dca:	3208      	adds	r2, #8
  402dcc:	3f10      	subs	r7, #16
  402dce:	2f10      	cmp	r7, #16
  402dd0:	f340 81db 	ble.w	40318a <_svfprintf_r+0xf4a>
  402dd4:	3301      	adds	r3, #1
  402dd6:	3110      	adds	r1, #16
  402dd8:	2b07      	cmp	r3, #7
  402dda:	9127      	str	r1, [sp, #156]	; 0x9c
  402ddc:	9326      	str	r3, [sp, #152]	; 0x98
  402dde:	e882 0840 	stmia.w	r2, {r6, fp}
  402de2:	ddf2      	ble.n	402dca <_svfprintf_r+0xb8a>
  402de4:	aa25      	add	r2, sp, #148	; 0x94
  402de6:	4629      	mov	r1, r5
  402de8:	4620      	mov	r0, r4
  402dea:	f002 fb97 	bl	40551c <__ssprint_r>
  402dee:	2800      	cmp	r0, #0
  402df0:	f47f aaf8 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  402df4:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402df6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402df8:	464a      	mov	r2, r9
  402dfa:	e7e7      	b.n	402dcc <_svfprintf_r+0xb8c>
  402dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402dfe:	930e      	str	r3, [sp, #56]	; 0x38
  402e00:	464e      	mov	r6, r9
  402e02:	f7ff bb2d 	b.w	402460 <_svfprintf_r+0x220>
  402e06:	2d00      	cmp	r5, #0
  402e08:	bf08      	it	eq
  402e0a:	2c0a      	cmpeq	r4, #10
  402e0c:	f0c0 808f 	bcc.w	402f2e <_svfprintf_r+0xcee>
  402e10:	464e      	mov	r6, r9
  402e12:	4620      	mov	r0, r4
  402e14:	4629      	mov	r1, r5
  402e16:	220a      	movs	r2, #10
  402e18:	2300      	movs	r3, #0
  402e1a:	f7fe ffed 	bl	401df8 <__aeabi_uldivmod>
  402e1e:	3230      	adds	r2, #48	; 0x30
  402e20:	f806 2d01 	strb.w	r2, [r6, #-1]!
  402e24:	4620      	mov	r0, r4
  402e26:	4629      	mov	r1, r5
  402e28:	2300      	movs	r3, #0
  402e2a:	220a      	movs	r2, #10
  402e2c:	f7fe ffe4 	bl	401df8 <__aeabi_uldivmod>
  402e30:	4604      	mov	r4, r0
  402e32:	460d      	mov	r5, r1
  402e34:	ea54 0305 	orrs.w	r3, r4, r5
  402e38:	d1eb      	bne.n	402e12 <_svfprintf_r+0xbd2>
  402e3a:	eba9 0306 	sub.w	r3, r9, r6
  402e3e:	930e      	str	r3, [sp, #56]	; 0x38
  402e40:	f7ff bb0e 	b.w	402460 <_svfprintf_r+0x220>
  402e44:	aa25      	add	r2, sp, #148	; 0x94
  402e46:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402e48:	980c      	ldr	r0, [sp, #48]	; 0x30
  402e4a:	f002 fb67 	bl	40551c <__ssprint_r>
  402e4e:	2800      	cmp	r0, #0
  402e50:	f47f aac8 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  402e54:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402e58:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402e5a:	46c8      	mov	r8, r9
  402e5c:	f7ff bb5e 	b.w	40251c <_svfprintf_r+0x2dc>
  402e60:	1e5e      	subs	r6, r3, #1
  402e62:	2e00      	cmp	r6, #0
  402e64:	f77f af0a 	ble.w	402c7c <_svfprintf_r+0xa3c>
  402e68:	2e10      	cmp	r6, #16
  402e6a:	4d03      	ldr	r5, [pc, #12]	; (402e78 <_svfprintf_r+0xc38>)
  402e6c:	dd22      	ble.n	402eb4 <_svfprintf_r+0xc74>
  402e6e:	4622      	mov	r2, r4
  402e70:	f04f 0b10 	mov.w	fp, #16
  402e74:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402e76:	e006      	b.n	402e86 <_svfprintf_r+0xc46>
  402e78:	004071d0 	.word	0x004071d0
  402e7c:	3e10      	subs	r6, #16
  402e7e:	2e10      	cmp	r6, #16
  402e80:	f108 0808 	add.w	r8, r8, #8
  402e84:	dd15      	ble.n	402eb2 <_svfprintf_r+0xc72>
  402e86:	3701      	adds	r7, #1
  402e88:	3210      	adds	r2, #16
  402e8a:	2f07      	cmp	r7, #7
  402e8c:	9227      	str	r2, [sp, #156]	; 0x9c
  402e8e:	9726      	str	r7, [sp, #152]	; 0x98
  402e90:	e888 0820 	stmia.w	r8, {r5, fp}
  402e94:	ddf2      	ble.n	402e7c <_svfprintf_r+0xc3c>
  402e96:	aa25      	add	r2, sp, #148	; 0x94
  402e98:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402e9a:	4620      	mov	r0, r4
  402e9c:	f002 fb3e 	bl	40551c <__ssprint_r>
  402ea0:	2800      	cmp	r0, #0
  402ea2:	f47f aa9f 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  402ea6:	3e10      	subs	r6, #16
  402ea8:	2e10      	cmp	r6, #16
  402eaa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402eac:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402eae:	46c8      	mov	r8, r9
  402eb0:	dce9      	bgt.n	402e86 <_svfprintf_r+0xc46>
  402eb2:	4614      	mov	r4, r2
  402eb4:	3701      	adds	r7, #1
  402eb6:	4434      	add	r4, r6
  402eb8:	2f07      	cmp	r7, #7
  402eba:	9427      	str	r4, [sp, #156]	; 0x9c
  402ebc:	9726      	str	r7, [sp, #152]	; 0x98
  402ebe:	e888 0060 	stmia.w	r8, {r5, r6}
  402ec2:	f77f aed9 	ble.w	402c78 <_svfprintf_r+0xa38>
  402ec6:	aa25      	add	r2, sp, #148	; 0x94
  402ec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402eca:	980c      	ldr	r0, [sp, #48]	; 0x30
  402ecc:	f002 fb26 	bl	40551c <__ssprint_r>
  402ed0:	2800      	cmp	r0, #0
  402ed2:	f47f aa87 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  402ed6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402ed8:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402eda:	46c8      	mov	r8, r9
  402edc:	e6ce      	b.n	402c7c <_svfprintf_r+0xa3c>
  402ede:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402ee0:	6814      	ldr	r4, [r2, #0]
  402ee2:	4613      	mov	r3, r2
  402ee4:	3304      	adds	r3, #4
  402ee6:	17e5      	asrs	r5, r4, #31
  402ee8:	930f      	str	r3, [sp, #60]	; 0x3c
  402eea:	4622      	mov	r2, r4
  402eec:	462b      	mov	r3, r5
  402eee:	e4fa      	b.n	4028e6 <_svfprintf_r+0x6a6>
  402ef0:	3204      	adds	r2, #4
  402ef2:	681c      	ldr	r4, [r3, #0]
  402ef4:	920f      	str	r2, [sp, #60]	; 0x3c
  402ef6:	2301      	movs	r3, #1
  402ef8:	2500      	movs	r5, #0
  402efa:	f7ff ba94 	b.w	402426 <_svfprintf_r+0x1e6>
  402efe:	681c      	ldr	r4, [r3, #0]
  402f00:	3304      	adds	r3, #4
  402f02:	930f      	str	r3, [sp, #60]	; 0x3c
  402f04:	2500      	movs	r5, #0
  402f06:	e421      	b.n	40274c <_svfprintf_r+0x50c>
  402f08:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402f0a:	460a      	mov	r2, r1
  402f0c:	3204      	adds	r2, #4
  402f0e:	680c      	ldr	r4, [r1, #0]
  402f10:	920f      	str	r2, [sp, #60]	; 0x3c
  402f12:	2500      	movs	r5, #0
  402f14:	f7ff ba87 	b.w	402426 <_svfprintf_r+0x1e6>
  402f18:	4614      	mov	r4, r2
  402f1a:	3301      	adds	r3, #1
  402f1c:	4434      	add	r4, r6
  402f1e:	2b07      	cmp	r3, #7
  402f20:	9427      	str	r4, [sp, #156]	; 0x9c
  402f22:	9326      	str	r3, [sp, #152]	; 0x98
  402f24:	e888 0060 	stmia.w	r8, {r5, r6}
  402f28:	f77f ab68 	ble.w	4025fc <_svfprintf_r+0x3bc>
  402f2c:	e6b3      	b.n	402c96 <_svfprintf_r+0xa56>
  402f2e:	f8dd b01c 	ldr.w	fp, [sp, #28]
  402f32:	f8cd b01c 	str.w	fp, [sp, #28]
  402f36:	ae42      	add	r6, sp, #264	; 0x108
  402f38:	3430      	adds	r4, #48	; 0x30
  402f3a:	2301      	movs	r3, #1
  402f3c:	f806 4d41 	strb.w	r4, [r6, #-65]!
  402f40:	930e      	str	r3, [sp, #56]	; 0x38
  402f42:	f7ff ba8d 	b.w	402460 <_svfprintf_r+0x220>
  402f46:	aa25      	add	r2, sp, #148	; 0x94
  402f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  402f4c:	f002 fae6 	bl	40551c <__ssprint_r>
  402f50:	2800      	cmp	r0, #0
  402f52:	f47f aa47 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  402f56:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402f58:	46c8      	mov	r8, r9
  402f5a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  402f5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402f5e:	429a      	cmp	r2, r3
  402f60:	db44      	blt.n	402fec <_svfprintf_r+0xdac>
  402f62:	9b07      	ldr	r3, [sp, #28]
  402f64:	07d9      	lsls	r1, r3, #31
  402f66:	d441      	bmi.n	402fec <_svfprintf_r+0xdac>
  402f68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402f6a:	9812      	ldr	r0, [sp, #72]	; 0x48
  402f6c:	1a9a      	subs	r2, r3, r2
  402f6e:	1a1d      	subs	r5, r3, r0
  402f70:	4295      	cmp	r5, r2
  402f72:	bfa8      	it	ge
  402f74:	4615      	movge	r5, r2
  402f76:	2d00      	cmp	r5, #0
  402f78:	dd0e      	ble.n	402f98 <_svfprintf_r+0xd58>
  402f7a:	9926      	ldr	r1, [sp, #152]	; 0x98
  402f7c:	f8c8 5004 	str.w	r5, [r8, #4]
  402f80:	3101      	adds	r1, #1
  402f82:	4406      	add	r6, r0
  402f84:	442c      	add	r4, r5
  402f86:	2907      	cmp	r1, #7
  402f88:	f8c8 6000 	str.w	r6, [r8]
  402f8c:	9427      	str	r4, [sp, #156]	; 0x9c
  402f8e:	9126      	str	r1, [sp, #152]	; 0x98
  402f90:	f300 823b 	bgt.w	40340a <_svfprintf_r+0x11ca>
  402f94:	f108 0808 	add.w	r8, r8, #8
  402f98:	2d00      	cmp	r5, #0
  402f9a:	bfac      	ite	ge
  402f9c:	1b56      	subge	r6, r2, r5
  402f9e:	4616      	movlt	r6, r2
  402fa0:	2e00      	cmp	r6, #0
  402fa2:	f77f ab2d 	ble.w	402600 <_svfprintf_r+0x3c0>
  402fa6:	2e10      	cmp	r6, #16
  402fa8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402faa:	4db0      	ldr	r5, [pc, #704]	; (40326c <_svfprintf_r+0x102c>)
  402fac:	ddb5      	ble.n	402f1a <_svfprintf_r+0xcda>
  402fae:	4622      	mov	r2, r4
  402fb0:	2710      	movs	r7, #16
  402fb2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  402fb6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  402fb8:	e004      	b.n	402fc4 <_svfprintf_r+0xd84>
  402fba:	f108 0808 	add.w	r8, r8, #8
  402fbe:	3e10      	subs	r6, #16
  402fc0:	2e10      	cmp	r6, #16
  402fc2:	dda9      	ble.n	402f18 <_svfprintf_r+0xcd8>
  402fc4:	3301      	adds	r3, #1
  402fc6:	3210      	adds	r2, #16
  402fc8:	2b07      	cmp	r3, #7
  402fca:	9227      	str	r2, [sp, #156]	; 0x9c
  402fcc:	9326      	str	r3, [sp, #152]	; 0x98
  402fce:	e888 00a0 	stmia.w	r8, {r5, r7}
  402fd2:	ddf2      	ble.n	402fba <_svfprintf_r+0xd7a>
  402fd4:	aa25      	add	r2, sp, #148	; 0x94
  402fd6:	4621      	mov	r1, r4
  402fd8:	4658      	mov	r0, fp
  402fda:	f002 fa9f 	bl	40551c <__ssprint_r>
  402fde:	2800      	cmp	r0, #0
  402fe0:	f47f aa00 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  402fe4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402fe6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402fe8:	46c8      	mov	r8, r9
  402fea:	e7e8      	b.n	402fbe <_svfprintf_r+0xd7e>
  402fec:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402fee:	9819      	ldr	r0, [sp, #100]	; 0x64
  402ff0:	991a      	ldr	r1, [sp, #104]	; 0x68
  402ff2:	f8c8 1000 	str.w	r1, [r8]
  402ff6:	3301      	adds	r3, #1
  402ff8:	4404      	add	r4, r0
  402ffa:	2b07      	cmp	r3, #7
  402ffc:	9427      	str	r4, [sp, #156]	; 0x9c
  402ffe:	f8c8 0004 	str.w	r0, [r8, #4]
  403002:	9326      	str	r3, [sp, #152]	; 0x98
  403004:	f300 81f5 	bgt.w	4033f2 <_svfprintf_r+0x11b2>
  403008:	f108 0808 	add.w	r8, r8, #8
  40300c:	e7ac      	b.n	402f68 <_svfprintf_r+0xd28>
  40300e:	9b07      	ldr	r3, [sp, #28]
  403010:	07da      	lsls	r2, r3, #31
  403012:	f53f adfe 	bmi.w	402c12 <_svfprintf_r+0x9d2>
  403016:	3701      	adds	r7, #1
  403018:	3401      	adds	r4, #1
  40301a:	2301      	movs	r3, #1
  40301c:	2f07      	cmp	r7, #7
  40301e:	9427      	str	r4, [sp, #156]	; 0x9c
  403020:	9726      	str	r7, [sp, #152]	; 0x98
  403022:	f8c8 6000 	str.w	r6, [r8]
  403026:	f8c8 3004 	str.w	r3, [r8, #4]
  40302a:	f77f ae25 	ble.w	402c78 <_svfprintf_r+0xa38>
  40302e:	e74a      	b.n	402ec6 <_svfprintf_r+0xc86>
  403030:	aa25      	add	r2, sp, #148	; 0x94
  403032:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403034:	980c      	ldr	r0, [sp, #48]	; 0x30
  403036:	f002 fa71 	bl	40551c <__ssprint_r>
  40303a:	2800      	cmp	r0, #0
  40303c:	f47f a9d2 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  403040:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403042:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403044:	46c8      	mov	r8, r9
  403046:	e5f2      	b.n	402c2e <_svfprintf_r+0x9ee>
  403048:	aa25      	add	r2, sp, #148	; 0x94
  40304a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40304c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40304e:	f002 fa65 	bl	40551c <__ssprint_r>
  403052:	2800      	cmp	r0, #0
  403054:	f47f a9c6 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  403058:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40305a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40305c:	46c8      	mov	r8, r9
  40305e:	e5f5      	b.n	402c4c <_svfprintf_r+0xa0c>
  403060:	464e      	mov	r6, r9
  403062:	f7ff b9fd 	b.w	402460 <_svfprintf_r+0x220>
  403066:	aa25      	add	r2, sp, #148	; 0x94
  403068:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40306a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40306c:	f002 fa56 	bl	40551c <__ssprint_r>
  403070:	2800      	cmp	r0, #0
  403072:	f47f a9b7 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  403076:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403078:	46c8      	mov	r8, r9
  40307a:	f7ff ba72 	b.w	402562 <_svfprintf_r+0x322>
  40307e:	9c15      	ldr	r4, [sp, #84]	; 0x54
  403080:	4622      	mov	r2, r4
  403082:	4620      	mov	r0, r4
  403084:	9c14      	ldr	r4, [sp, #80]	; 0x50
  403086:	4623      	mov	r3, r4
  403088:	4621      	mov	r1, r4
  40308a:	f003 fb0d 	bl	4066a8 <__aeabi_dcmpun>
  40308e:	2800      	cmp	r0, #0
  403090:	f040 8286 	bne.w	4035a0 <_svfprintf_r+0x1360>
  403094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403096:	3301      	adds	r3, #1
  403098:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40309a:	f023 0320 	bic.w	r3, r3, #32
  40309e:	930e      	str	r3, [sp, #56]	; 0x38
  4030a0:	f000 81e2 	beq.w	403468 <_svfprintf_r+0x1228>
  4030a4:	2b47      	cmp	r3, #71	; 0x47
  4030a6:	f000 811e 	beq.w	4032e6 <_svfprintf_r+0x10a6>
  4030aa:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4030ae:	9307      	str	r3, [sp, #28]
  4030b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4030b2:	1e1f      	subs	r7, r3, #0
  4030b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4030b6:	9308      	str	r3, [sp, #32]
  4030b8:	bfbb      	ittet	lt
  4030ba:	463b      	movlt	r3, r7
  4030bc:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4030c0:	2300      	movge	r3, #0
  4030c2:	232d      	movlt	r3, #45	; 0x2d
  4030c4:	9310      	str	r3, [sp, #64]	; 0x40
  4030c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4030c8:	2b66      	cmp	r3, #102	; 0x66
  4030ca:	f000 81bb 	beq.w	403444 <_svfprintf_r+0x1204>
  4030ce:	2b46      	cmp	r3, #70	; 0x46
  4030d0:	f000 80df 	beq.w	403292 <_svfprintf_r+0x1052>
  4030d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4030d6:	9a08      	ldr	r2, [sp, #32]
  4030d8:	2b45      	cmp	r3, #69	; 0x45
  4030da:	bf0c      	ite	eq
  4030dc:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4030de:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4030e0:	a823      	add	r0, sp, #140	; 0x8c
  4030e2:	a920      	add	r1, sp, #128	; 0x80
  4030e4:	bf08      	it	eq
  4030e6:	1c5d      	addeq	r5, r3, #1
  4030e8:	9004      	str	r0, [sp, #16]
  4030ea:	9103      	str	r1, [sp, #12]
  4030ec:	a81f      	add	r0, sp, #124	; 0x7c
  4030ee:	2102      	movs	r1, #2
  4030f0:	463b      	mov	r3, r7
  4030f2:	9002      	str	r0, [sp, #8]
  4030f4:	9501      	str	r5, [sp, #4]
  4030f6:	9100      	str	r1, [sp, #0]
  4030f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4030fa:	f000 fb75 	bl	4037e8 <_dtoa_r>
  4030fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403100:	2b67      	cmp	r3, #103	; 0x67
  403102:	4606      	mov	r6, r0
  403104:	f040 81e0 	bne.w	4034c8 <_svfprintf_r+0x1288>
  403108:	f01b 0f01 	tst.w	fp, #1
  40310c:	f000 8246 	beq.w	40359c <_svfprintf_r+0x135c>
  403110:	1974      	adds	r4, r6, r5
  403112:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403114:	9808      	ldr	r0, [sp, #32]
  403116:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403118:	4639      	mov	r1, r7
  40311a:	f003 fa93 	bl	406644 <__aeabi_dcmpeq>
  40311e:	2800      	cmp	r0, #0
  403120:	f040 8165 	bne.w	4033ee <_svfprintf_r+0x11ae>
  403124:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403126:	42a3      	cmp	r3, r4
  403128:	d206      	bcs.n	403138 <_svfprintf_r+0xef8>
  40312a:	2130      	movs	r1, #48	; 0x30
  40312c:	1c5a      	adds	r2, r3, #1
  40312e:	9223      	str	r2, [sp, #140]	; 0x8c
  403130:	7019      	strb	r1, [r3, #0]
  403132:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403134:	429c      	cmp	r4, r3
  403136:	d8f9      	bhi.n	40312c <_svfprintf_r+0xeec>
  403138:	1b9b      	subs	r3, r3, r6
  40313a:	9313      	str	r3, [sp, #76]	; 0x4c
  40313c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40313e:	2b47      	cmp	r3, #71	; 0x47
  403140:	f000 80e9 	beq.w	403316 <_svfprintf_r+0x10d6>
  403144:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403146:	2b65      	cmp	r3, #101	; 0x65
  403148:	f340 81cd 	ble.w	4034e6 <_svfprintf_r+0x12a6>
  40314c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40314e:	2b66      	cmp	r3, #102	; 0x66
  403150:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403152:	9312      	str	r3, [sp, #72]	; 0x48
  403154:	f000 819e 	beq.w	403494 <_svfprintf_r+0x1254>
  403158:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40315a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40315c:	4619      	mov	r1, r3
  40315e:	4291      	cmp	r1, r2
  403160:	f300 818a 	bgt.w	403478 <_svfprintf_r+0x1238>
  403164:	f01b 0f01 	tst.w	fp, #1
  403168:	f040 8213 	bne.w	403592 <_svfprintf_r+0x1352>
  40316c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  403170:	9308      	str	r3, [sp, #32]
  403172:	2367      	movs	r3, #103	; 0x67
  403174:	920e      	str	r2, [sp, #56]	; 0x38
  403176:	9311      	str	r3, [sp, #68]	; 0x44
  403178:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40317a:	2b00      	cmp	r3, #0
  40317c:	f040 80c4 	bne.w	403308 <_svfprintf_r+0x10c8>
  403180:	930a      	str	r3, [sp, #40]	; 0x28
  403182:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403186:	f7ff b973 	b.w	402470 <_svfprintf_r+0x230>
  40318a:	4635      	mov	r5, r6
  40318c:	460c      	mov	r4, r1
  40318e:	4646      	mov	r6, r8
  403190:	4690      	mov	r8, r2
  403192:	3301      	adds	r3, #1
  403194:	443c      	add	r4, r7
  403196:	2b07      	cmp	r3, #7
  403198:	9427      	str	r4, [sp, #156]	; 0x9c
  40319a:	9326      	str	r3, [sp, #152]	; 0x98
  40319c:	e888 00a0 	stmia.w	r8, {r5, r7}
  4031a0:	f73f aed1 	bgt.w	402f46 <_svfprintf_r+0xd06>
  4031a4:	f108 0808 	add.w	r8, r8, #8
  4031a8:	e6d7      	b.n	402f5a <_svfprintf_r+0xd1a>
  4031aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4031ac:	6813      	ldr	r3, [r2, #0]
  4031ae:	3204      	adds	r2, #4
  4031b0:	920f      	str	r2, [sp, #60]	; 0x3c
  4031b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4031b4:	601a      	str	r2, [r3, #0]
  4031b6:	f7ff b86a 	b.w	40228e <_svfprintf_r+0x4e>
  4031ba:	aa25      	add	r2, sp, #148	; 0x94
  4031bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4031be:	980c      	ldr	r0, [sp, #48]	; 0x30
  4031c0:	f002 f9ac 	bl	40551c <__ssprint_r>
  4031c4:	2800      	cmp	r0, #0
  4031c6:	f47f a90d 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  4031ca:	46c8      	mov	r8, r9
  4031cc:	e48d      	b.n	402aea <_svfprintf_r+0x8aa>
  4031ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4031d0:	4a27      	ldr	r2, [pc, #156]	; (403270 <_svfprintf_r+0x1030>)
  4031d2:	f8c8 2000 	str.w	r2, [r8]
  4031d6:	3301      	adds	r3, #1
  4031d8:	3401      	adds	r4, #1
  4031da:	2201      	movs	r2, #1
  4031dc:	2b07      	cmp	r3, #7
  4031de:	9427      	str	r4, [sp, #156]	; 0x9c
  4031e0:	9326      	str	r3, [sp, #152]	; 0x98
  4031e2:	f8c8 2004 	str.w	r2, [r8, #4]
  4031e6:	dc72      	bgt.n	4032ce <_svfprintf_r+0x108e>
  4031e8:	f108 0808 	add.w	r8, r8, #8
  4031ec:	b929      	cbnz	r1, 4031fa <_svfprintf_r+0xfba>
  4031ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4031f0:	b91b      	cbnz	r3, 4031fa <_svfprintf_r+0xfba>
  4031f2:	9b07      	ldr	r3, [sp, #28]
  4031f4:	07d8      	lsls	r0, r3, #31
  4031f6:	f57f aa03 	bpl.w	402600 <_svfprintf_r+0x3c0>
  4031fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4031fc:	9819      	ldr	r0, [sp, #100]	; 0x64
  4031fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403200:	f8c8 2000 	str.w	r2, [r8]
  403204:	3301      	adds	r3, #1
  403206:	4602      	mov	r2, r0
  403208:	4422      	add	r2, r4
  40320a:	2b07      	cmp	r3, #7
  40320c:	9227      	str	r2, [sp, #156]	; 0x9c
  40320e:	f8c8 0004 	str.w	r0, [r8, #4]
  403212:	9326      	str	r3, [sp, #152]	; 0x98
  403214:	f300 818d 	bgt.w	403532 <_svfprintf_r+0x12f2>
  403218:	f108 0808 	add.w	r8, r8, #8
  40321c:	2900      	cmp	r1, #0
  40321e:	f2c0 8165 	blt.w	4034ec <_svfprintf_r+0x12ac>
  403222:	9913      	ldr	r1, [sp, #76]	; 0x4c
  403224:	f8c8 6000 	str.w	r6, [r8]
  403228:	3301      	adds	r3, #1
  40322a:	188c      	adds	r4, r1, r2
  40322c:	2b07      	cmp	r3, #7
  40322e:	9427      	str	r4, [sp, #156]	; 0x9c
  403230:	9326      	str	r3, [sp, #152]	; 0x98
  403232:	f8c8 1004 	str.w	r1, [r8, #4]
  403236:	f77f a9e1 	ble.w	4025fc <_svfprintf_r+0x3bc>
  40323a:	e52c      	b.n	402c96 <_svfprintf_r+0xa56>
  40323c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40323e:	9909      	ldr	r1, [sp, #36]	; 0x24
  403240:	6813      	ldr	r3, [r2, #0]
  403242:	17cd      	asrs	r5, r1, #31
  403244:	4608      	mov	r0, r1
  403246:	3204      	adds	r2, #4
  403248:	4629      	mov	r1, r5
  40324a:	920f      	str	r2, [sp, #60]	; 0x3c
  40324c:	e9c3 0100 	strd	r0, r1, [r3]
  403250:	f7ff b81d 	b.w	40228e <_svfprintf_r+0x4e>
  403254:	aa25      	add	r2, sp, #148	; 0x94
  403256:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403258:	980c      	ldr	r0, [sp, #48]	; 0x30
  40325a:	f002 f95f 	bl	40551c <__ssprint_r>
  40325e:	2800      	cmp	r0, #0
  403260:	f47f a8c0 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  403264:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403266:	46c8      	mov	r8, r9
  403268:	e458      	b.n	402b1c <_svfprintf_r+0x8dc>
  40326a:	bf00      	nop
  40326c:	004071d0 	.word	0x004071d0
  403270:	004071bc 	.word	0x004071bc
  403274:	2140      	movs	r1, #64	; 0x40
  403276:	980c      	ldr	r0, [sp, #48]	; 0x30
  403278:	f001 fa0c 	bl	404694 <_malloc_r>
  40327c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40327e:	6010      	str	r0, [r2, #0]
  403280:	6110      	str	r0, [r2, #16]
  403282:	2800      	cmp	r0, #0
  403284:	f000 81f2 	beq.w	40366c <_svfprintf_r+0x142c>
  403288:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40328a:	2340      	movs	r3, #64	; 0x40
  40328c:	6153      	str	r3, [r2, #20]
  40328e:	f7fe bfee 	b.w	40226e <_svfprintf_r+0x2e>
  403292:	a823      	add	r0, sp, #140	; 0x8c
  403294:	a920      	add	r1, sp, #128	; 0x80
  403296:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403298:	9004      	str	r0, [sp, #16]
  40329a:	9103      	str	r1, [sp, #12]
  40329c:	a81f      	add	r0, sp, #124	; 0x7c
  40329e:	2103      	movs	r1, #3
  4032a0:	9002      	str	r0, [sp, #8]
  4032a2:	9a08      	ldr	r2, [sp, #32]
  4032a4:	9401      	str	r4, [sp, #4]
  4032a6:	463b      	mov	r3, r7
  4032a8:	9100      	str	r1, [sp, #0]
  4032aa:	980c      	ldr	r0, [sp, #48]	; 0x30
  4032ac:	f000 fa9c 	bl	4037e8 <_dtoa_r>
  4032b0:	4625      	mov	r5, r4
  4032b2:	4606      	mov	r6, r0
  4032b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4032b6:	2b46      	cmp	r3, #70	; 0x46
  4032b8:	eb06 0405 	add.w	r4, r6, r5
  4032bc:	f47f af29 	bne.w	403112 <_svfprintf_r+0xed2>
  4032c0:	7833      	ldrb	r3, [r6, #0]
  4032c2:	2b30      	cmp	r3, #48	; 0x30
  4032c4:	f000 8178 	beq.w	4035b8 <_svfprintf_r+0x1378>
  4032c8:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  4032ca:	442c      	add	r4, r5
  4032cc:	e721      	b.n	403112 <_svfprintf_r+0xed2>
  4032ce:	aa25      	add	r2, sp, #148	; 0x94
  4032d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4032d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4032d4:	f002 f922 	bl	40551c <__ssprint_r>
  4032d8:	2800      	cmp	r0, #0
  4032da:	f47f a883 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  4032de:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4032e0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4032e2:	46c8      	mov	r8, r9
  4032e4:	e782      	b.n	4031ec <_svfprintf_r+0xfac>
  4032e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4032e8:	2b00      	cmp	r3, #0
  4032ea:	bf08      	it	eq
  4032ec:	2301      	moveq	r3, #1
  4032ee:	930a      	str	r3, [sp, #40]	; 0x28
  4032f0:	e6db      	b.n	4030aa <_svfprintf_r+0xe6a>
  4032f2:	4630      	mov	r0, r6
  4032f4:	940a      	str	r4, [sp, #40]	; 0x28
  4032f6:	f002 f8a3 	bl	405440 <strlen>
  4032fa:	950f      	str	r5, [sp, #60]	; 0x3c
  4032fc:	900e      	str	r0, [sp, #56]	; 0x38
  4032fe:	f8cd b01c 	str.w	fp, [sp, #28]
  403302:	4603      	mov	r3, r0
  403304:	f7ff b9f9 	b.w	4026fa <_svfprintf_r+0x4ba>
  403308:	272d      	movs	r7, #45	; 0x2d
  40330a:	2300      	movs	r3, #0
  40330c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403310:	930a      	str	r3, [sp, #40]	; 0x28
  403312:	f7ff b8ae 	b.w	402472 <_svfprintf_r+0x232>
  403316:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403318:	9312      	str	r3, [sp, #72]	; 0x48
  40331a:	461a      	mov	r2, r3
  40331c:	3303      	adds	r3, #3
  40331e:	db04      	blt.n	40332a <_svfprintf_r+0x10ea>
  403320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403322:	4619      	mov	r1, r3
  403324:	4291      	cmp	r1, r2
  403326:	f6bf af17 	bge.w	403158 <_svfprintf_r+0xf18>
  40332a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40332c:	3b02      	subs	r3, #2
  40332e:	9311      	str	r3, [sp, #68]	; 0x44
  403330:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  403334:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  403338:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40333a:	3b01      	subs	r3, #1
  40333c:	2b00      	cmp	r3, #0
  40333e:	931f      	str	r3, [sp, #124]	; 0x7c
  403340:	bfbd      	ittte	lt
  403342:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  403344:	f1c3 0301 	rsblt	r3, r3, #1
  403348:	222d      	movlt	r2, #45	; 0x2d
  40334a:	222b      	movge	r2, #43	; 0x2b
  40334c:	2b09      	cmp	r3, #9
  40334e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  403352:	f340 8116 	ble.w	403582 <_svfprintf_r+0x1342>
  403356:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  40335a:	4620      	mov	r0, r4
  40335c:	4dab      	ldr	r5, [pc, #684]	; (40360c <_svfprintf_r+0x13cc>)
  40335e:	e000      	b.n	403362 <_svfprintf_r+0x1122>
  403360:	4610      	mov	r0, r2
  403362:	fb85 1203 	smull	r1, r2, r5, r3
  403366:	17d9      	asrs	r1, r3, #31
  403368:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  40336c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  403370:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  403374:	3230      	adds	r2, #48	; 0x30
  403376:	2909      	cmp	r1, #9
  403378:	f800 2c01 	strb.w	r2, [r0, #-1]
  40337c:	460b      	mov	r3, r1
  40337e:	f100 32ff 	add.w	r2, r0, #4294967295
  403382:	dced      	bgt.n	403360 <_svfprintf_r+0x1120>
  403384:	3330      	adds	r3, #48	; 0x30
  403386:	3802      	subs	r0, #2
  403388:	b2d9      	uxtb	r1, r3
  40338a:	4284      	cmp	r4, r0
  40338c:	f802 1c01 	strb.w	r1, [r2, #-1]
  403390:	f240 8165 	bls.w	40365e <_svfprintf_r+0x141e>
  403394:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  403398:	4613      	mov	r3, r2
  40339a:	e001      	b.n	4033a0 <_svfprintf_r+0x1160>
  40339c:	f813 1b01 	ldrb.w	r1, [r3], #1
  4033a0:	f800 1b01 	strb.w	r1, [r0], #1
  4033a4:	42a3      	cmp	r3, r4
  4033a6:	d1f9      	bne.n	40339c <_svfprintf_r+0x115c>
  4033a8:	3301      	adds	r3, #1
  4033aa:	1a9b      	subs	r3, r3, r2
  4033ac:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  4033b0:	4413      	add	r3, r2
  4033b2:	aa21      	add	r2, sp, #132	; 0x84
  4033b4:	1a9b      	subs	r3, r3, r2
  4033b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4033b8:	931b      	str	r3, [sp, #108]	; 0x6c
  4033ba:	2a01      	cmp	r2, #1
  4033bc:	4413      	add	r3, r2
  4033be:	930e      	str	r3, [sp, #56]	; 0x38
  4033c0:	f340 8119 	ble.w	4035f6 <_svfprintf_r+0x13b6>
  4033c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4033c6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4033c8:	4413      	add	r3, r2
  4033ca:	930e      	str	r3, [sp, #56]	; 0x38
  4033cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4033d0:	9308      	str	r3, [sp, #32]
  4033d2:	2300      	movs	r3, #0
  4033d4:	9312      	str	r3, [sp, #72]	; 0x48
  4033d6:	e6cf      	b.n	403178 <_svfprintf_r+0xf38>
  4033d8:	aa25      	add	r2, sp, #148	; 0x94
  4033da:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4033dc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4033de:	f002 f89d 	bl	40551c <__ssprint_r>
  4033e2:	2800      	cmp	r0, #0
  4033e4:	f47e affe 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  4033e8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4033ea:	46c8      	mov	r8, r9
  4033ec:	e4d7      	b.n	402d9e <_svfprintf_r+0xb5e>
  4033ee:	4623      	mov	r3, r4
  4033f0:	e6a2      	b.n	403138 <_svfprintf_r+0xef8>
  4033f2:	aa25      	add	r2, sp, #148	; 0x94
  4033f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4033f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4033f8:	f002 f890 	bl	40551c <__ssprint_r>
  4033fc:	2800      	cmp	r0, #0
  4033fe:	f47e aff1 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  403402:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  403404:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403406:	46c8      	mov	r8, r9
  403408:	e5ae      	b.n	402f68 <_svfprintf_r+0xd28>
  40340a:	aa25      	add	r2, sp, #148	; 0x94
  40340c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40340e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403410:	f002 f884 	bl	40551c <__ssprint_r>
  403414:	2800      	cmp	r0, #0
  403416:	f47e afe5 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  40341a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40341c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40341e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403420:	1a9a      	subs	r2, r3, r2
  403422:	46c8      	mov	r8, r9
  403424:	e5b8      	b.n	402f98 <_svfprintf_r+0xd58>
  403426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403428:	9612      	str	r6, [sp, #72]	; 0x48
  40342a:	2b06      	cmp	r3, #6
  40342c:	bf28      	it	cs
  40342e:	2306      	movcs	r3, #6
  403430:	960a      	str	r6, [sp, #40]	; 0x28
  403432:	4637      	mov	r7, r6
  403434:	9308      	str	r3, [sp, #32]
  403436:	950f      	str	r5, [sp, #60]	; 0x3c
  403438:	f8cd b01c 	str.w	fp, [sp, #28]
  40343c:	930e      	str	r3, [sp, #56]	; 0x38
  40343e:	4e74      	ldr	r6, [pc, #464]	; (403610 <_svfprintf_r+0x13d0>)
  403440:	f7ff b816 	b.w	402470 <_svfprintf_r+0x230>
  403444:	a823      	add	r0, sp, #140	; 0x8c
  403446:	a920      	add	r1, sp, #128	; 0x80
  403448:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40344a:	9004      	str	r0, [sp, #16]
  40344c:	9103      	str	r1, [sp, #12]
  40344e:	a81f      	add	r0, sp, #124	; 0x7c
  403450:	2103      	movs	r1, #3
  403452:	9002      	str	r0, [sp, #8]
  403454:	9a08      	ldr	r2, [sp, #32]
  403456:	9501      	str	r5, [sp, #4]
  403458:	463b      	mov	r3, r7
  40345a:	9100      	str	r1, [sp, #0]
  40345c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40345e:	f000 f9c3 	bl	4037e8 <_dtoa_r>
  403462:	4606      	mov	r6, r0
  403464:	1944      	adds	r4, r0, r5
  403466:	e72b      	b.n	4032c0 <_svfprintf_r+0x1080>
  403468:	2306      	movs	r3, #6
  40346a:	930a      	str	r3, [sp, #40]	; 0x28
  40346c:	e61d      	b.n	4030aa <_svfprintf_r+0xe6a>
  40346e:	272d      	movs	r7, #45	; 0x2d
  403470:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403474:	f7ff bacd 	b.w	402a12 <_svfprintf_r+0x7d2>
  403478:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40347a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40347c:	4413      	add	r3, r2
  40347e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403480:	930e      	str	r3, [sp, #56]	; 0x38
  403482:	2a00      	cmp	r2, #0
  403484:	f340 80b0 	ble.w	4035e8 <_svfprintf_r+0x13a8>
  403488:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40348c:	9308      	str	r3, [sp, #32]
  40348e:	2367      	movs	r3, #103	; 0x67
  403490:	9311      	str	r3, [sp, #68]	; 0x44
  403492:	e671      	b.n	403178 <_svfprintf_r+0xf38>
  403494:	2b00      	cmp	r3, #0
  403496:	f340 80c3 	ble.w	403620 <_svfprintf_r+0x13e0>
  40349a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40349c:	2a00      	cmp	r2, #0
  40349e:	f040 8099 	bne.w	4035d4 <_svfprintf_r+0x1394>
  4034a2:	f01b 0f01 	tst.w	fp, #1
  4034a6:	f040 8095 	bne.w	4035d4 <_svfprintf_r+0x1394>
  4034aa:	9308      	str	r3, [sp, #32]
  4034ac:	930e      	str	r3, [sp, #56]	; 0x38
  4034ae:	e663      	b.n	403178 <_svfprintf_r+0xf38>
  4034b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4034b2:	9308      	str	r3, [sp, #32]
  4034b4:	930e      	str	r3, [sp, #56]	; 0x38
  4034b6:	900a      	str	r0, [sp, #40]	; 0x28
  4034b8:	950f      	str	r5, [sp, #60]	; 0x3c
  4034ba:	f8cd b01c 	str.w	fp, [sp, #28]
  4034be:	9012      	str	r0, [sp, #72]	; 0x48
  4034c0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4034c4:	f7fe bfd4 	b.w	402470 <_svfprintf_r+0x230>
  4034c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4034ca:	2b47      	cmp	r3, #71	; 0x47
  4034cc:	f47f ae20 	bne.w	403110 <_svfprintf_r+0xed0>
  4034d0:	f01b 0f01 	tst.w	fp, #1
  4034d4:	f47f aeee 	bne.w	4032b4 <_svfprintf_r+0x1074>
  4034d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4034da:	1b9b      	subs	r3, r3, r6
  4034dc:	9313      	str	r3, [sp, #76]	; 0x4c
  4034de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4034e0:	2b47      	cmp	r3, #71	; 0x47
  4034e2:	f43f af18 	beq.w	403316 <_svfprintf_r+0x10d6>
  4034e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4034e8:	9312      	str	r3, [sp, #72]	; 0x48
  4034ea:	e721      	b.n	403330 <_svfprintf_r+0x10f0>
  4034ec:	424f      	negs	r7, r1
  4034ee:	3110      	adds	r1, #16
  4034f0:	4d48      	ldr	r5, [pc, #288]	; (403614 <_svfprintf_r+0x13d4>)
  4034f2:	da2f      	bge.n	403554 <_svfprintf_r+0x1314>
  4034f4:	2410      	movs	r4, #16
  4034f6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4034fa:	e004      	b.n	403506 <_svfprintf_r+0x12c6>
  4034fc:	f108 0808 	add.w	r8, r8, #8
  403500:	3f10      	subs	r7, #16
  403502:	2f10      	cmp	r7, #16
  403504:	dd26      	ble.n	403554 <_svfprintf_r+0x1314>
  403506:	3301      	adds	r3, #1
  403508:	3210      	adds	r2, #16
  40350a:	2b07      	cmp	r3, #7
  40350c:	9227      	str	r2, [sp, #156]	; 0x9c
  40350e:	9326      	str	r3, [sp, #152]	; 0x98
  403510:	f8c8 5000 	str.w	r5, [r8]
  403514:	f8c8 4004 	str.w	r4, [r8, #4]
  403518:	ddf0      	ble.n	4034fc <_svfprintf_r+0x12bc>
  40351a:	aa25      	add	r2, sp, #148	; 0x94
  40351c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40351e:	4658      	mov	r0, fp
  403520:	f001 fffc 	bl	40551c <__ssprint_r>
  403524:	2800      	cmp	r0, #0
  403526:	f47e af5d 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  40352a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40352c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40352e:	46c8      	mov	r8, r9
  403530:	e7e6      	b.n	403500 <_svfprintf_r+0x12c0>
  403532:	aa25      	add	r2, sp, #148	; 0x94
  403534:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403536:	980c      	ldr	r0, [sp, #48]	; 0x30
  403538:	f001 fff0 	bl	40551c <__ssprint_r>
  40353c:	2800      	cmp	r0, #0
  40353e:	f47e af51 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  403542:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403544:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403546:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403548:	46c8      	mov	r8, r9
  40354a:	e667      	b.n	40321c <_svfprintf_r+0xfdc>
  40354c:	2000      	movs	r0, #0
  40354e:	900a      	str	r0, [sp, #40]	; 0x28
  403550:	f7fe bed0 	b.w	4022f4 <_svfprintf_r+0xb4>
  403554:	3301      	adds	r3, #1
  403556:	443a      	add	r2, r7
  403558:	2b07      	cmp	r3, #7
  40355a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40355e:	9227      	str	r2, [sp, #156]	; 0x9c
  403560:	9326      	str	r3, [sp, #152]	; 0x98
  403562:	f108 0808 	add.w	r8, r8, #8
  403566:	f77f ae5c 	ble.w	403222 <_svfprintf_r+0xfe2>
  40356a:	aa25      	add	r2, sp, #148	; 0x94
  40356c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40356e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403570:	f001 ffd4 	bl	40551c <__ssprint_r>
  403574:	2800      	cmp	r0, #0
  403576:	f47e af35 	bne.w	4023e4 <_svfprintf_r+0x1a4>
  40357a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40357c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40357e:	46c8      	mov	r8, r9
  403580:	e64f      	b.n	403222 <_svfprintf_r+0xfe2>
  403582:	3330      	adds	r3, #48	; 0x30
  403584:	2230      	movs	r2, #48	; 0x30
  403586:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40358a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40358e:	ab22      	add	r3, sp, #136	; 0x88
  403590:	e70f      	b.n	4033b2 <_svfprintf_r+0x1172>
  403592:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403594:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403596:	4413      	add	r3, r2
  403598:	930e      	str	r3, [sp, #56]	; 0x38
  40359a:	e775      	b.n	403488 <_svfprintf_r+0x1248>
  40359c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40359e:	e5cb      	b.n	403138 <_svfprintf_r+0xef8>
  4035a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4035a2:	4e1d      	ldr	r6, [pc, #116]	; (403618 <_svfprintf_r+0x13d8>)
  4035a4:	2b00      	cmp	r3, #0
  4035a6:	bfb6      	itet	lt
  4035a8:	272d      	movlt	r7, #45	; 0x2d
  4035aa:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  4035ae:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  4035b2:	4b1a      	ldr	r3, [pc, #104]	; (40361c <_svfprintf_r+0x13dc>)
  4035b4:	f7ff ba2f 	b.w	402a16 <_svfprintf_r+0x7d6>
  4035b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4035ba:	9808      	ldr	r0, [sp, #32]
  4035bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4035be:	4639      	mov	r1, r7
  4035c0:	f003 f840 	bl	406644 <__aeabi_dcmpeq>
  4035c4:	2800      	cmp	r0, #0
  4035c6:	f47f ae7f 	bne.w	4032c8 <_svfprintf_r+0x1088>
  4035ca:	f1c5 0501 	rsb	r5, r5, #1
  4035ce:	951f      	str	r5, [sp, #124]	; 0x7c
  4035d0:	442c      	add	r4, r5
  4035d2:	e59e      	b.n	403112 <_svfprintf_r+0xed2>
  4035d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4035d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4035d8:	4413      	add	r3, r2
  4035da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4035dc:	441a      	add	r2, r3
  4035de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4035e2:	920e      	str	r2, [sp, #56]	; 0x38
  4035e4:	9308      	str	r3, [sp, #32]
  4035e6:	e5c7      	b.n	403178 <_svfprintf_r+0xf38>
  4035e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4035ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4035ec:	f1c3 0301 	rsb	r3, r3, #1
  4035f0:	441a      	add	r2, r3
  4035f2:	4613      	mov	r3, r2
  4035f4:	e7d0      	b.n	403598 <_svfprintf_r+0x1358>
  4035f6:	f01b 0301 	ands.w	r3, fp, #1
  4035fa:	9312      	str	r3, [sp, #72]	; 0x48
  4035fc:	f47f aee2 	bne.w	4033c4 <_svfprintf_r+0x1184>
  403600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403602:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403606:	9308      	str	r3, [sp, #32]
  403608:	e5b6      	b.n	403178 <_svfprintf_r+0xf38>
  40360a:	bf00      	nop
  40360c:	66666667 	.word	0x66666667
  403610:	004071b4 	.word	0x004071b4
  403614:	004071d0 	.word	0x004071d0
  403618:	00407188 	.word	0x00407188
  40361c:	00407184 	.word	0x00407184
  403620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403622:	b913      	cbnz	r3, 40362a <_svfprintf_r+0x13ea>
  403624:	f01b 0f01 	tst.w	fp, #1
  403628:	d002      	beq.n	403630 <_svfprintf_r+0x13f0>
  40362a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40362c:	3301      	adds	r3, #1
  40362e:	e7d4      	b.n	4035da <_svfprintf_r+0x139a>
  403630:	2301      	movs	r3, #1
  403632:	e73a      	b.n	4034aa <_svfprintf_r+0x126a>
  403634:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403636:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40363a:	6828      	ldr	r0, [r5, #0]
  40363c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  403640:	900a      	str	r0, [sp, #40]	; 0x28
  403642:	4628      	mov	r0, r5
  403644:	3004      	adds	r0, #4
  403646:	46a2      	mov	sl, r4
  403648:	900f      	str	r0, [sp, #60]	; 0x3c
  40364a:	f7fe be51 	b.w	4022f0 <_svfprintf_r+0xb0>
  40364e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403652:	f7ff b867 	b.w	402724 <_svfprintf_r+0x4e4>
  403656:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40365a:	f7ff ba15 	b.w	402a88 <_svfprintf_r+0x848>
  40365e:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  403662:	e6a6      	b.n	4033b2 <_svfprintf_r+0x1172>
  403664:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403668:	f7ff b8eb 	b.w	402842 <_svfprintf_r+0x602>
  40366c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40366e:	230c      	movs	r3, #12
  403670:	6013      	str	r3, [r2, #0]
  403672:	f04f 33ff 	mov.w	r3, #4294967295
  403676:	9309      	str	r3, [sp, #36]	; 0x24
  403678:	f7fe bebd 	b.w	4023f6 <_svfprintf_r+0x1b6>
  40367c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403680:	f7ff b99a 	b.w	4029b8 <_svfprintf_r+0x778>
  403684:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403688:	f7ff b976 	b.w	402978 <_svfprintf_r+0x738>
  40368c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403690:	f7ff b959 	b.w	402946 <_svfprintf_r+0x706>
  403694:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403698:	f7ff b912 	b.w	4028c0 <_svfprintf_r+0x680>

0040369c <register_fini>:
  40369c:	4b02      	ldr	r3, [pc, #8]	; (4036a8 <register_fini+0xc>)
  40369e:	b113      	cbz	r3, 4036a6 <register_fini+0xa>
  4036a0:	4802      	ldr	r0, [pc, #8]	; (4036ac <register_fini+0x10>)
  4036a2:	f000 b805 	b.w	4036b0 <atexit>
  4036a6:	4770      	bx	lr
  4036a8:	00000000 	.word	0x00000000
  4036ac:	0040463d 	.word	0x0040463d

004036b0 <atexit>:
  4036b0:	2300      	movs	r3, #0
  4036b2:	4601      	mov	r1, r0
  4036b4:	461a      	mov	r2, r3
  4036b6:	4618      	mov	r0, r3
  4036b8:	f001 bfae 	b.w	405618 <__register_exitproc>

004036bc <quorem>:
  4036bc:	6902      	ldr	r2, [r0, #16]
  4036be:	690b      	ldr	r3, [r1, #16]
  4036c0:	4293      	cmp	r3, r2
  4036c2:	f300 808d 	bgt.w	4037e0 <quorem+0x124>
  4036c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4036ca:	f103 38ff 	add.w	r8, r3, #4294967295
  4036ce:	f101 0714 	add.w	r7, r1, #20
  4036d2:	f100 0b14 	add.w	fp, r0, #20
  4036d6:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4036da:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4036de:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4036e2:	b083      	sub	sp, #12
  4036e4:	3201      	adds	r2, #1
  4036e6:	fbb3 f9f2 	udiv	r9, r3, r2
  4036ea:	eb0b 0304 	add.w	r3, fp, r4
  4036ee:	9400      	str	r4, [sp, #0]
  4036f0:	eb07 0a04 	add.w	sl, r7, r4
  4036f4:	9301      	str	r3, [sp, #4]
  4036f6:	f1b9 0f00 	cmp.w	r9, #0
  4036fa:	d039      	beq.n	403770 <quorem+0xb4>
  4036fc:	2500      	movs	r5, #0
  4036fe:	462e      	mov	r6, r5
  403700:	46bc      	mov	ip, r7
  403702:	46de      	mov	lr, fp
  403704:	f85c 4b04 	ldr.w	r4, [ip], #4
  403708:	f8de 3000 	ldr.w	r3, [lr]
  40370c:	b2a2      	uxth	r2, r4
  40370e:	fb09 5502 	mla	r5, r9, r2, r5
  403712:	0c22      	lsrs	r2, r4, #16
  403714:	0c2c      	lsrs	r4, r5, #16
  403716:	fb09 4202 	mla	r2, r9, r2, r4
  40371a:	b2ad      	uxth	r5, r5
  40371c:	1b75      	subs	r5, r6, r5
  40371e:	b296      	uxth	r6, r2
  403720:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  403724:	fa15 f383 	uxtah	r3, r5, r3
  403728:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40372c:	b29b      	uxth	r3, r3
  40372e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  403732:	45e2      	cmp	sl, ip
  403734:	ea4f 4512 	mov.w	r5, r2, lsr #16
  403738:	f84e 3b04 	str.w	r3, [lr], #4
  40373c:	ea4f 4626 	mov.w	r6, r6, asr #16
  403740:	d2e0      	bcs.n	403704 <quorem+0x48>
  403742:	9b00      	ldr	r3, [sp, #0]
  403744:	f85b 3003 	ldr.w	r3, [fp, r3]
  403748:	b993      	cbnz	r3, 403770 <quorem+0xb4>
  40374a:	9c01      	ldr	r4, [sp, #4]
  40374c:	1f23      	subs	r3, r4, #4
  40374e:	459b      	cmp	fp, r3
  403750:	d20c      	bcs.n	40376c <quorem+0xb0>
  403752:	f854 3c04 	ldr.w	r3, [r4, #-4]
  403756:	b94b      	cbnz	r3, 40376c <quorem+0xb0>
  403758:	f1a4 0308 	sub.w	r3, r4, #8
  40375c:	e002      	b.n	403764 <quorem+0xa8>
  40375e:	681a      	ldr	r2, [r3, #0]
  403760:	3b04      	subs	r3, #4
  403762:	b91a      	cbnz	r2, 40376c <quorem+0xb0>
  403764:	459b      	cmp	fp, r3
  403766:	f108 38ff 	add.w	r8, r8, #4294967295
  40376a:	d3f8      	bcc.n	40375e <quorem+0xa2>
  40376c:	f8c0 8010 	str.w	r8, [r0, #16]
  403770:	4604      	mov	r4, r0
  403772:	f001 fd39 	bl	4051e8 <__mcmp>
  403776:	2800      	cmp	r0, #0
  403778:	db2e      	blt.n	4037d8 <quorem+0x11c>
  40377a:	f109 0901 	add.w	r9, r9, #1
  40377e:	465d      	mov	r5, fp
  403780:	2300      	movs	r3, #0
  403782:	f857 1b04 	ldr.w	r1, [r7], #4
  403786:	6828      	ldr	r0, [r5, #0]
  403788:	b28a      	uxth	r2, r1
  40378a:	1a9a      	subs	r2, r3, r2
  40378c:	0c0b      	lsrs	r3, r1, #16
  40378e:	fa12 f280 	uxtah	r2, r2, r0
  403792:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  403796:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40379a:	b292      	uxth	r2, r2
  40379c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4037a0:	45ba      	cmp	sl, r7
  4037a2:	f845 2b04 	str.w	r2, [r5], #4
  4037a6:	ea4f 4323 	mov.w	r3, r3, asr #16
  4037aa:	d2ea      	bcs.n	403782 <quorem+0xc6>
  4037ac:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4037b0:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4037b4:	b982      	cbnz	r2, 4037d8 <quorem+0x11c>
  4037b6:	1f1a      	subs	r2, r3, #4
  4037b8:	4593      	cmp	fp, r2
  4037ba:	d20b      	bcs.n	4037d4 <quorem+0x118>
  4037bc:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4037c0:	b942      	cbnz	r2, 4037d4 <quorem+0x118>
  4037c2:	3b08      	subs	r3, #8
  4037c4:	e002      	b.n	4037cc <quorem+0x110>
  4037c6:	681a      	ldr	r2, [r3, #0]
  4037c8:	3b04      	subs	r3, #4
  4037ca:	b91a      	cbnz	r2, 4037d4 <quorem+0x118>
  4037cc:	459b      	cmp	fp, r3
  4037ce:	f108 38ff 	add.w	r8, r8, #4294967295
  4037d2:	d3f8      	bcc.n	4037c6 <quorem+0x10a>
  4037d4:	f8c4 8010 	str.w	r8, [r4, #16]
  4037d8:	4648      	mov	r0, r9
  4037da:	b003      	add	sp, #12
  4037dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037e0:	2000      	movs	r0, #0
  4037e2:	4770      	bx	lr
  4037e4:	0000      	movs	r0, r0
	...

004037e8 <_dtoa_r>:
  4037e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4037ec:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4037ee:	b09b      	sub	sp, #108	; 0x6c
  4037f0:	4604      	mov	r4, r0
  4037f2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4037f4:	4692      	mov	sl, r2
  4037f6:	469b      	mov	fp, r3
  4037f8:	b141      	cbz	r1, 40380c <_dtoa_r+0x24>
  4037fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4037fc:	604a      	str	r2, [r1, #4]
  4037fe:	2301      	movs	r3, #1
  403800:	4093      	lsls	r3, r2
  403802:	608b      	str	r3, [r1, #8]
  403804:	f001 fb18 	bl	404e38 <_Bfree>
  403808:	2300      	movs	r3, #0
  40380a:	6423      	str	r3, [r4, #64]	; 0x40
  40380c:	f1bb 0f00 	cmp.w	fp, #0
  403810:	465d      	mov	r5, fp
  403812:	db35      	blt.n	403880 <_dtoa_r+0x98>
  403814:	2300      	movs	r3, #0
  403816:	6033      	str	r3, [r6, #0]
  403818:	4b9d      	ldr	r3, [pc, #628]	; (403a90 <_dtoa_r+0x2a8>)
  40381a:	43ab      	bics	r3, r5
  40381c:	d015      	beq.n	40384a <_dtoa_r+0x62>
  40381e:	4650      	mov	r0, sl
  403820:	4659      	mov	r1, fp
  403822:	2200      	movs	r2, #0
  403824:	2300      	movs	r3, #0
  403826:	f002 ff0d 	bl	406644 <__aeabi_dcmpeq>
  40382a:	4680      	mov	r8, r0
  40382c:	2800      	cmp	r0, #0
  40382e:	d02d      	beq.n	40388c <_dtoa_r+0xa4>
  403830:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403832:	2301      	movs	r3, #1
  403834:	6013      	str	r3, [r2, #0]
  403836:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403838:	2b00      	cmp	r3, #0
  40383a:	f000 80bd 	beq.w	4039b8 <_dtoa_r+0x1d0>
  40383e:	4895      	ldr	r0, [pc, #596]	; (403a94 <_dtoa_r+0x2ac>)
  403840:	6018      	str	r0, [r3, #0]
  403842:	3801      	subs	r0, #1
  403844:	b01b      	add	sp, #108	; 0x6c
  403846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40384a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40384c:	f242 730f 	movw	r3, #9999	; 0x270f
  403850:	6013      	str	r3, [r2, #0]
  403852:	f1ba 0f00 	cmp.w	sl, #0
  403856:	d10d      	bne.n	403874 <_dtoa_r+0x8c>
  403858:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40385c:	b955      	cbnz	r5, 403874 <_dtoa_r+0x8c>
  40385e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403860:	488d      	ldr	r0, [pc, #564]	; (403a98 <_dtoa_r+0x2b0>)
  403862:	2b00      	cmp	r3, #0
  403864:	d0ee      	beq.n	403844 <_dtoa_r+0x5c>
  403866:	f100 0308 	add.w	r3, r0, #8
  40386a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40386c:	6013      	str	r3, [r2, #0]
  40386e:	b01b      	add	sp, #108	; 0x6c
  403870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403874:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403876:	4889      	ldr	r0, [pc, #548]	; (403a9c <_dtoa_r+0x2b4>)
  403878:	2b00      	cmp	r3, #0
  40387a:	d0e3      	beq.n	403844 <_dtoa_r+0x5c>
  40387c:	1cc3      	adds	r3, r0, #3
  40387e:	e7f4      	b.n	40386a <_dtoa_r+0x82>
  403880:	2301      	movs	r3, #1
  403882:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  403886:	6033      	str	r3, [r6, #0]
  403888:	46ab      	mov	fp, r5
  40388a:	e7c5      	b.n	403818 <_dtoa_r+0x30>
  40388c:	aa18      	add	r2, sp, #96	; 0x60
  40388e:	ab19      	add	r3, sp, #100	; 0x64
  403890:	9201      	str	r2, [sp, #4]
  403892:	9300      	str	r3, [sp, #0]
  403894:	4652      	mov	r2, sl
  403896:	465b      	mov	r3, fp
  403898:	4620      	mov	r0, r4
  40389a:	f001 fd45 	bl	405328 <__d2b>
  40389e:	0d2b      	lsrs	r3, r5, #20
  4038a0:	4681      	mov	r9, r0
  4038a2:	d071      	beq.n	403988 <_dtoa_r+0x1a0>
  4038a4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4038a8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4038ac:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4038ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  4038b2:	4650      	mov	r0, sl
  4038b4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  4038b8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4038bc:	2200      	movs	r2, #0
  4038be:	4b78      	ldr	r3, [pc, #480]	; (403aa0 <_dtoa_r+0x2b8>)
  4038c0:	f002 faa4 	bl	405e0c <__aeabi_dsub>
  4038c4:	a36c      	add	r3, pc, #432	; (adr r3, 403a78 <_dtoa_r+0x290>)
  4038c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4038ca:	f002 fc53 	bl	406174 <__aeabi_dmul>
  4038ce:	a36c      	add	r3, pc, #432	; (adr r3, 403a80 <_dtoa_r+0x298>)
  4038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4038d4:	f002 fa9c 	bl	405e10 <__adddf3>
  4038d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4038dc:	4630      	mov	r0, r6
  4038de:	f002 fbe3 	bl	4060a8 <__aeabi_i2d>
  4038e2:	a369      	add	r3, pc, #420	; (adr r3, 403a88 <_dtoa_r+0x2a0>)
  4038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4038e8:	f002 fc44 	bl	406174 <__aeabi_dmul>
  4038ec:	4602      	mov	r2, r0
  4038ee:	460b      	mov	r3, r1
  4038f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4038f4:	f002 fa8c 	bl	405e10 <__adddf3>
  4038f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4038fc:	f002 feea 	bl	4066d4 <__aeabi_d2iz>
  403900:	2200      	movs	r2, #0
  403902:	9002      	str	r0, [sp, #8]
  403904:	2300      	movs	r3, #0
  403906:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40390a:	f002 fea5 	bl	406658 <__aeabi_dcmplt>
  40390e:	2800      	cmp	r0, #0
  403910:	f040 8173 	bne.w	403bfa <_dtoa_r+0x412>
  403914:	9d02      	ldr	r5, [sp, #8]
  403916:	2d16      	cmp	r5, #22
  403918:	f200 815d 	bhi.w	403bd6 <_dtoa_r+0x3ee>
  40391c:	4b61      	ldr	r3, [pc, #388]	; (403aa4 <_dtoa_r+0x2bc>)
  40391e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  403922:	e9d3 0100 	ldrd	r0, r1, [r3]
  403926:	4652      	mov	r2, sl
  403928:	465b      	mov	r3, fp
  40392a:	f002 feb3 	bl	406694 <__aeabi_dcmpgt>
  40392e:	2800      	cmp	r0, #0
  403930:	f000 81c5 	beq.w	403cbe <_dtoa_r+0x4d6>
  403934:	1e6b      	subs	r3, r5, #1
  403936:	9302      	str	r3, [sp, #8]
  403938:	2300      	movs	r3, #0
  40393a:	930e      	str	r3, [sp, #56]	; 0x38
  40393c:	1bbf      	subs	r7, r7, r6
  40393e:	1e7b      	subs	r3, r7, #1
  403940:	9306      	str	r3, [sp, #24]
  403942:	f100 8154 	bmi.w	403bee <_dtoa_r+0x406>
  403946:	2300      	movs	r3, #0
  403948:	9308      	str	r3, [sp, #32]
  40394a:	9b02      	ldr	r3, [sp, #8]
  40394c:	2b00      	cmp	r3, #0
  40394e:	f2c0 8145 	blt.w	403bdc <_dtoa_r+0x3f4>
  403952:	9a06      	ldr	r2, [sp, #24]
  403954:	930d      	str	r3, [sp, #52]	; 0x34
  403956:	4611      	mov	r1, r2
  403958:	4419      	add	r1, r3
  40395a:	2300      	movs	r3, #0
  40395c:	9106      	str	r1, [sp, #24]
  40395e:	930c      	str	r3, [sp, #48]	; 0x30
  403960:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403962:	2b09      	cmp	r3, #9
  403964:	d82a      	bhi.n	4039bc <_dtoa_r+0x1d4>
  403966:	2b05      	cmp	r3, #5
  403968:	f340 865b 	ble.w	404622 <_dtoa_r+0xe3a>
  40396c:	3b04      	subs	r3, #4
  40396e:	9324      	str	r3, [sp, #144]	; 0x90
  403970:	2500      	movs	r5, #0
  403972:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403974:	3b02      	subs	r3, #2
  403976:	2b03      	cmp	r3, #3
  403978:	f200 8642 	bhi.w	404600 <_dtoa_r+0xe18>
  40397c:	e8df f013 	tbh	[pc, r3, lsl #1]
  403980:	02c903d4 	.word	0x02c903d4
  403984:	046103df 	.word	0x046103df
  403988:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40398a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40398c:	443e      	add	r6, r7
  40398e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  403992:	2b20      	cmp	r3, #32
  403994:	f340 818e 	ble.w	403cb4 <_dtoa_r+0x4cc>
  403998:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40399c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4039a0:	409d      	lsls	r5, r3
  4039a2:	fa2a f000 	lsr.w	r0, sl, r0
  4039a6:	4328      	orrs	r0, r5
  4039a8:	f002 fb6e 	bl	406088 <__aeabi_ui2d>
  4039ac:	2301      	movs	r3, #1
  4039ae:	3e01      	subs	r6, #1
  4039b0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4039b4:	9314      	str	r3, [sp, #80]	; 0x50
  4039b6:	e781      	b.n	4038bc <_dtoa_r+0xd4>
  4039b8:	483b      	ldr	r0, [pc, #236]	; (403aa8 <_dtoa_r+0x2c0>)
  4039ba:	e743      	b.n	403844 <_dtoa_r+0x5c>
  4039bc:	2100      	movs	r1, #0
  4039be:	6461      	str	r1, [r4, #68]	; 0x44
  4039c0:	4620      	mov	r0, r4
  4039c2:	9125      	str	r1, [sp, #148]	; 0x94
  4039c4:	f001 fa12 	bl	404dec <_Balloc>
  4039c8:	f04f 33ff 	mov.w	r3, #4294967295
  4039cc:	930a      	str	r3, [sp, #40]	; 0x28
  4039ce:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4039d0:	930f      	str	r3, [sp, #60]	; 0x3c
  4039d2:	2301      	movs	r3, #1
  4039d4:	9004      	str	r0, [sp, #16]
  4039d6:	6420      	str	r0, [r4, #64]	; 0x40
  4039d8:	9224      	str	r2, [sp, #144]	; 0x90
  4039da:	930b      	str	r3, [sp, #44]	; 0x2c
  4039dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4039de:	2b00      	cmp	r3, #0
  4039e0:	f2c0 80d9 	blt.w	403b96 <_dtoa_r+0x3ae>
  4039e4:	9a02      	ldr	r2, [sp, #8]
  4039e6:	2a0e      	cmp	r2, #14
  4039e8:	f300 80d5 	bgt.w	403b96 <_dtoa_r+0x3ae>
  4039ec:	4b2d      	ldr	r3, [pc, #180]	; (403aa4 <_dtoa_r+0x2bc>)
  4039ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4039f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4039fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4039fc:	2b00      	cmp	r3, #0
  4039fe:	f2c0 83ba 	blt.w	404176 <_dtoa_r+0x98e>
  403a02:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  403a06:	4650      	mov	r0, sl
  403a08:	462a      	mov	r2, r5
  403a0a:	4633      	mov	r3, r6
  403a0c:	4659      	mov	r1, fp
  403a0e:	f002 fcdb 	bl	4063c8 <__aeabi_ddiv>
  403a12:	f002 fe5f 	bl	4066d4 <__aeabi_d2iz>
  403a16:	4680      	mov	r8, r0
  403a18:	f002 fb46 	bl	4060a8 <__aeabi_i2d>
  403a1c:	462a      	mov	r2, r5
  403a1e:	4633      	mov	r3, r6
  403a20:	f002 fba8 	bl	406174 <__aeabi_dmul>
  403a24:	460b      	mov	r3, r1
  403a26:	4602      	mov	r2, r0
  403a28:	4659      	mov	r1, fp
  403a2a:	4650      	mov	r0, sl
  403a2c:	f002 f9ee 	bl	405e0c <__aeabi_dsub>
  403a30:	9d04      	ldr	r5, [sp, #16]
  403a32:	f108 0330 	add.w	r3, r8, #48	; 0x30
  403a36:	702b      	strb	r3, [r5, #0]
  403a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403a3a:	2b01      	cmp	r3, #1
  403a3c:	4606      	mov	r6, r0
  403a3e:	460f      	mov	r7, r1
  403a40:	f105 0501 	add.w	r5, r5, #1
  403a44:	d068      	beq.n	403b18 <_dtoa_r+0x330>
  403a46:	2200      	movs	r2, #0
  403a48:	4b18      	ldr	r3, [pc, #96]	; (403aac <_dtoa_r+0x2c4>)
  403a4a:	f002 fb93 	bl	406174 <__aeabi_dmul>
  403a4e:	2200      	movs	r2, #0
  403a50:	2300      	movs	r3, #0
  403a52:	4606      	mov	r6, r0
  403a54:	460f      	mov	r7, r1
  403a56:	f002 fdf5 	bl	406644 <__aeabi_dcmpeq>
  403a5a:	2800      	cmp	r0, #0
  403a5c:	f040 8088 	bne.w	403b70 <_dtoa_r+0x388>
  403a60:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  403a64:	f04f 0a00 	mov.w	sl, #0
  403a68:	f8df b040 	ldr.w	fp, [pc, #64]	; 403aac <_dtoa_r+0x2c4>
  403a6c:	940c      	str	r4, [sp, #48]	; 0x30
  403a6e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  403a72:	e028      	b.n	403ac6 <_dtoa_r+0x2de>
  403a74:	f3af 8000 	nop.w
  403a78:	636f4361 	.word	0x636f4361
  403a7c:	3fd287a7 	.word	0x3fd287a7
  403a80:	8b60c8b3 	.word	0x8b60c8b3
  403a84:	3fc68a28 	.word	0x3fc68a28
  403a88:	509f79fb 	.word	0x509f79fb
  403a8c:	3fd34413 	.word	0x3fd34413
  403a90:	7ff00000 	.word	0x7ff00000
  403a94:	004071bd 	.word	0x004071bd
  403a98:	004071e0 	.word	0x004071e0
  403a9c:	004071ec 	.word	0x004071ec
  403aa0:	3ff80000 	.word	0x3ff80000
  403aa4:	00407218 	.word	0x00407218
  403aa8:	004071bc 	.word	0x004071bc
  403aac:	40240000 	.word	0x40240000
  403ab0:	f002 fb60 	bl	406174 <__aeabi_dmul>
  403ab4:	2200      	movs	r2, #0
  403ab6:	2300      	movs	r3, #0
  403ab8:	4606      	mov	r6, r0
  403aba:	460f      	mov	r7, r1
  403abc:	f002 fdc2 	bl	406644 <__aeabi_dcmpeq>
  403ac0:	2800      	cmp	r0, #0
  403ac2:	f040 83c1 	bne.w	404248 <_dtoa_r+0xa60>
  403ac6:	4642      	mov	r2, r8
  403ac8:	464b      	mov	r3, r9
  403aca:	4630      	mov	r0, r6
  403acc:	4639      	mov	r1, r7
  403ace:	f002 fc7b 	bl	4063c8 <__aeabi_ddiv>
  403ad2:	f002 fdff 	bl	4066d4 <__aeabi_d2iz>
  403ad6:	4604      	mov	r4, r0
  403ad8:	f002 fae6 	bl	4060a8 <__aeabi_i2d>
  403adc:	4642      	mov	r2, r8
  403ade:	464b      	mov	r3, r9
  403ae0:	f002 fb48 	bl	406174 <__aeabi_dmul>
  403ae4:	4602      	mov	r2, r0
  403ae6:	460b      	mov	r3, r1
  403ae8:	4630      	mov	r0, r6
  403aea:	4639      	mov	r1, r7
  403aec:	f002 f98e 	bl	405e0c <__aeabi_dsub>
  403af0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  403af4:	9e04      	ldr	r6, [sp, #16]
  403af6:	f805 eb01 	strb.w	lr, [r5], #1
  403afa:	eba5 0e06 	sub.w	lr, r5, r6
  403afe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  403b00:	45b6      	cmp	lr, r6
  403b02:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403b06:	4652      	mov	r2, sl
  403b08:	465b      	mov	r3, fp
  403b0a:	d1d1      	bne.n	403ab0 <_dtoa_r+0x2c8>
  403b0c:	46a0      	mov	r8, r4
  403b0e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  403b12:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403b14:	4606      	mov	r6, r0
  403b16:	460f      	mov	r7, r1
  403b18:	4632      	mov	r2, r6
  403b1a:	463b      	mov	r3, r7
  403b1c:	4630      	mov	r0, r6
  403b1e:	4639      	mov	r1, r7
  403b20:	f002 f976 	bl	405e10 <__adddf3>
  403b24:	4606      	mov	r6, r0
  403b26:	460f      	mov	r7, r1
  403b28:	4602      	mov	r2, r0
  403b2a:	460b      	mov	r3, r1
  403b2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403b30:	f002 fd92 	bl	406658 <__aeabi_dcmplt>
  403b34:	b948      	cbnz	r0, 403b4a <_dtoa_r+0x362>
  403b36:	4632      	mov	r2, r6
  403b38:	463b      	mov	r3, r7
  403b3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403b3e:	f002 fd81 	bl	406644 <__aeabi_dcmpeq>
  403b42:	b1a8      	cbz	r0, 403b70 <_dtoa_r+0x388>
  403b44:	f018 0f01 	tst.w	r8, #1
  403b48:	d012      	beq.n	403b70 <_dtoa_r+0x388>
  403b4a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  403b4e:	9a04      	ldr	r2, [sp, #16]
  403b50:	1e6b      	subs	r3, r5, #1
  403b52:	e004      	b.n	403b5e <_dtoa_r+0x376>
  403b54:	429a      	cmp	r2, r3
  403b56:	f000 8401 	beq.w	40435c <_dtoa_r+0xb74>
  403b5a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  403b5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403b62:	f103 0501 	add.w	r5, r3, #1
  403b66:	d0f5      	beq.n	403b54 <_dtoa_r+0x36c>
  403b68:	f108 0801 	add.w	r8, r8, #1
  403b6c:	f883 8000 	strb.w	r8, [r3]
  403b70:	4649      	mov	r1, r9
  403b72:	4620      	mov	r0, r4
  403b74:	f001 f960 	bl	404e38 <_Bfree>
  403b78:	2200      	movs	r2, #0
  403b7a:	9b02      	ldr	r3, [sp, #8]
  403b7c:	702a      	strb	r2, [r5, #0]
  403b7e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403b80:	3301      	adds	r3, #1
  403b82:	6013      	str	r3, [r2, #0]
  403b84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403b86:	2b00      	cmp	r3, #0
  403b88:	f000 839e 	beq.w	4042c8 <_dtoa_r+0xae0>
  403b8c:	9804      	ldr	r0, [sp, #16]
  403b8e:	601d      	str	r5, [r3, #0]
  403b90:	b01b      	add	sp, #108	; 0x6c
  403b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403b98:	2a00      	cmp	r2, #0
  403b9a:	d03e      	beq.n	403c1a <_dtoa_r+0x432>
  403b9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403b9e:	2a01      	cmp	r2, #1
  403ba0:	f340 8311 	ble.w	4041c6 <_dtoa_r+0x9de>
  403ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403ba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403ba8:	1e5f      	subs	r7, r3, #1
  403baa:	42ba      	cmp	r2, r7
  403bac:	f2c0 838f 	blt.w	4042ce <_dtoa_r+0xae6>
  403bb0:	1bd7      	subs	r7, r2, r7
  403bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403bb4:	2b00      	cmp	r3, #0
  403bb6:	f2c0 848b 	blt.w	4044d0 <_dtoa_r+0xce8>
  403bba:	9d08      	ldr	r5, [sp, #32]
  403bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403bbe:	9a08      	ldr	r2, [sp, #32]
  403bc0:	441a      	add	r2, r3
  403bc2:	9208      	str	r2, [sp, #32]
  403bc4:	9a06      	ldr	r2, [sp, #24]
  403bc6:	2101      	movs	r1, #1
  403bc8:	441a      	add	r2, r3
  403bca:	4620      	mov	r0, r4
  403bcc:	9206      	str	r2, [sp, #24]
  403bce:	f001 f9cd 	bl	404f6c <__i2b>
  403bd2:	4606      	mov	r6, r0
  403bd4:	e024      	b.n	403c20 <_dtoa_r+0x438>
  403bd6:	2301      	movs	r3, #1
  403bd8:	930e      	str	r3, [sp, #56]	; 0x38
  403bda:	e6af      	b.n	40393c <_dtoa_r+0x154>
  403bdc:	9a08      	ldr	r2, [sp, #32]
  403bde:	9b02      	ldr	r3, [sp, #8]
  403be0:	1ad2      	subs	r2, r2, r3
  403be2:	425b      	negs	r3, r3
  403be4:	930c      	str	r3, [sp, #48]	; 0x30
  403be6:	2300      	movs	r3, #0
  403be8:	9208      	str	r2, [sp, #32]
  403bea:	930d      	str	r3, [sp, #52]	; 0x34
  403bec:	e6b8      	b.n	403960 <_dtoa_r+0x178>
  403bee:	f1c7 0301 	rsb	r3, r7, #1
  403bf2:	9308      	str	r3, [sp, #32]
  403bf4:	2300      	movs	r3, #0
  403bf6:	9306      	str	r3, [sp, #24]
  403bf8:	e6a7      	b.n	40394a <_dtoa_r+0x162>
  403bfa:	9d02      	ldr	r5, [sp, #8]
  403bfc:	4628      	mov	r0, r5
  403bfe:	f002 fa53 	bl	4060a8 <__aeabi_i2d>
  403c02:	4602      	mov	r2, r0
  403c04:	460b      	mov	r3, r1
  403c06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403c0a:	f002 fd1b 	bl	406644 <__aeabi_dcmpeq>
  403c0e:	2800      	cmp	r0, #0
  403c10:	f47f ae80 	bne.w	403914 <_dtoa_r+0x12c>
  403c14:	1e6b      	subs	r3, r5, #1
  403c16:	9302      	str	r3, [sp, #8]
  403c18:	e67c      	b.n	403914 <_dtoa_r+0x12c>
  403c1a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403c1c:	9d08      	ldr	r5, [sp, #32]
  403c1e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  403c20:	2d00      	cmp	r5, #0
  403c22:	dd0c      	ble.n	403c3e <_dtoa_r+0x456>
  403c24:	9906      	ldr	r1, [sp, #24]
  403c26:	2900      	cmp	r1, #0
  403c28:	460b      	mov	r3, r1
  403c2a:	dd08      	ble.n	403c3e <_dtoa_r+0x456>
  403c2c:	42a9      	cmp	r1, r5
  403c2e:	9a08      	ldr	r2, [sp, #32]
  403c30:	bfa8      	it	ge
  403c32:	462b      	movge	r3, r5
  403c34:	1ad2      	subs	r2, r2, r3
  403c36:	1aed      	subs	r5, r5, r3
  403c38:	1acb      	subs	r3, r1, r3
  403c3a:	9208      	str	r2, [sp, #32]
  403c3c:	9306      	str	r3, [sp, #24]
  403c3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403c40:	b1d3      	cbz	r3, 403c78 <_dtoa_r+0x490>
  403c42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403c44:	2b00      	cmp	r3, #0
  403c46:	f000 82b7 	beq.w	4041b8 <_dtoa_r+0x9d0>
  403c4a:	2f00      	cmp	r7, #0
  403c4c:	dd10      	ble.n	403c70 <_dtoa_r+0x488>
  403c4e:	4631      	mov	r1, r6
  403c50:	463a      	mov	r2, r7
  403c52:	4620      	mov	r0, r4
  403c54:	f001 fa26 	bl	4050a4 <__pow5mult>
  403c58:	464a      	mov	r2, r9
  403c5a:	4601      	mov	r1, r0
  403c5c:	4606      	mov	r6, r0
  403c5e:	4620      	mov	r0, r4
  403c60:	f001 f98e 	bl	404f80 <__multiply>
  403c64:	4649      	mov	r1, r9
  403c66:	4680      	mov	r8, r0
  403c68:	4620      	mov	r0, r4
  403c6a:	f001 f8e5 	bl	404e38 <_Bfree>
  403c6e:	46c1      	mov	r9, r8
  403c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403c72:	1bda      	subs	r2, r3, r7
  403c74:	f040 82a1 	bne.w	4041ba <_dtoa_r+0x9d2>
  403c78:	2101      	movs	r1, #1
  403c7a:	4620      	mov	r0, r4
  403c7c:	f001 f976 	bl	404f6c <__i2b>
  403c80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403c82:	2b00      	cmp	r3, #0
  403c84:	4680      	mov	r8, r0
  403c86:	dd1c      	ble.n	403cc2 <_dtoa_r+0x4da>
  403c88:	4601      	mov	r1, r0
  403c8a:	461a      	mov	r2, r3
  403c8c:	4620      	mov	r0, r4
  403c8e:	f001 fa09 	bl	4050a4 <__pow5mult>
  403c92:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403c94:	2b01      	cmp	r3, #1
  403c96:	4680      	mov	r8, r0
  403c98:	f340 8254 	ble.w	404144 <_dtoa_r+0x95c>
  403c9c:	2300      	movs	r3, #0
  403c9e:	930c      	str	r3, [sp, #48]	; 0x30
  403ca0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  403ca4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  403ca8:	6918      	ldr	r0, [r3, #16]
  403caa:	f001 f90f 	bl	404ecc <__hi0bits>
  403cae:	f1c0 0020 	rsb	r0, r0, #32
  403cb2:	e010      	b.n	403cd6 <_dtoa_r+0x4ee>
  403cb4:	f1c3 0520 	rsb	r5, r3, #32
  403cb8:	fa0a f005 	lsl.w	r0, sl, r5
  403cbc:	e674      	b.n	4039a8 <_dtoa_r+0x1c0>
  403cbe:	900e      	str	r0, [sp, #56]	; 0x38
  403cc0:	e63c      	b.n	40393c <_dtoa_r+0x154>
  403cc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403cc4:	2b01      	cmp	r3, #1
  403cc6:	f340 8287 	ble.w	4041d8 <_dtoa_r+0x9f0>
  403cca:	2300      	movs	r3, #0
  403ccc:	930c      	str	r3, [sp, #48]	; 0x30
  403cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403cd0:	2001      	movs	r0, #1
  403cd2:	2b00      	cmp	r3, #0
  403cd4:	d1e4      	bne.n	403ca0 <_dtoa_r+0x4b8>
  403cd6:	9a06      	ldr	r2, [sp, #24]
  403cd8:	4410      	add	r0, r2
  403cda:	f010 001f 	ands.w	r0, r0, #31
  403cde:	f000 80a1 	beq.w	403e24 <_dtoa_r+0x63c>
  403ce2:	f1c0 0320 	rsb	r3, r0, #32
  403ce6:	2b04      	cmp	r3, #4
  403ce8:	f340 849e 	ble.w	404628 <_dtoa_r+0xe40>
  403cec:	9b08      	ldr	r3, [sp, #32]
  403cee:	f1c0 001c 	rsb	r0, r0, #28
  403cf2:	4403      	add	r3, r0
  403cf4:	9308      	str	r3, [sp, #32]
  403cf6:	4613      	mov	r3, r2
  403cf8:	4403      	add	r3, r0
  403cfa:	4405      	add	r5, r0
  403cfc:	9306      	str	r3, [sp, #24]
  403cfe:	9b08      	ldr	r3, [sp, #32]
  403d00:	2b00      	cmp	r3, #0
  403d02:	dd05      	ble.n	403d10 <_dtoa_r+0x528>
  403d04:	4649      	mov	r1, r9
  403d06:	461a      	mov	r2, r3
  403d08:	4620      	mov	r0, r4
  403d0a:	f001 fa1b 	bl	405144 <__lshift>
  403d0e:	4681      	mov	r9, r0
  403d10:	9b06      	ldr	r3, [sp, #24]
  403d12:	2b00      	cmp	r3, #0
  403d14:	dd05      	ble.n	403d22 <_dtoa_r+0x53a>
  403d16:	4641      	mov	r1, r8
  403d18:	461a      	mov	r2, r3
  403d1a:	4620      	mov	r0, r4
  403d1c:	f001 fa12 	bl	405144 <__lshift>
  403d20:	4680      	mov	r8, r0
  403d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403d24:	2b00      	cmp	r3, #0
  403d26:	f040 8086 	bne.w	403e36 <_dtoa_r+0x64e>
  403d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403d2c:	2b00      	cmp	r3, #0
  403d2e:	f340 8266 	ble.w	4041fe <_dtoa_r+0xa16>
  403d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403d34:	2b00      	cmp	r3, #0
  403d36:	f000 8098 	beq.w	403e6a <_dtoa_r+0x682>
  403d3a:	2d00      	cmp	r5, #0
  403d3c:	dd05      	ble.n	403d4a <_dtoa_r+0x562>
  403d3e:	4631      	mov	r1, r6
  403d40:	462a      	mov	r2, r5
  403d42:	4620      	mov	r0, r4
  403d44:	f001 f9fe 	bl	405144 <__lshift>
  403d48:	4606      	mov	r6, r0
  403d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403d4c:	2b00      	cmp	r3, #0
  403d4e:	f040 8337 	bne.w	4043c0 <_dtoa_r+0xbd8>
  403d52:	9606      	str	r6, [sp, #24]
  403d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403d56:	9a04      	ldr	r2, [sp, #16]
  403d58:	f8dd b018 	ldr.w	fp, [sp, #24]
  403d5c:	3b01      	subs	r3, #1
  403d5e:	18d3      	adds	r3, r2, r3
  403d60:	930b      	str	r3, [sp, #44]	; 0x2c
  403d62:	f00a 0301 	and.w	r3, sl, #1
  403d66:	930c      	str	r3, [sp, #48]	; 0x30
  403d68:	4617      	mov	r7, r2
  403d6a:	46c2      	mov	sl, r8
  403d6c:	4651      	mov	r1, sl
  403d6e:	4648      	mov	r0, r9
  403d70:	f7ff fca4 	bl	4036bc <quorem>
  403d74:	4631      	mov	r1, r6
  403d76:	4605      	mov	r5, r0
  403d78:	4648      	mov	r0, r9
  403d7a:	f001 fa35 	bl	4051e8 <__mcmp>
  403d7e:	465a      	mov	r2, fp
  403d80:	900a      	str	r0, [sp, #40]	; 0x28
  403d82:	4651      	mov	r1, sl
  403d84:	4620      	mov	r0, r4
  403d86:	f001 fa4b 	bl	405220 <__mdiff>
  403d8a:	68c2      	ldr	r2, [r0, #12]
  403d8c:	4680      	mov	r8, r0
  403d8e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  403d92:	2a00      	cmp	r2, #0
  403d94:	f040 822b 	bne.w	4041ee <_dtoa_r+0xa06>
  403d98:	4601      	mov	r1, r0
  403d9a:	4648      	mov	r0, r9
  403d9c:	9308      	str	r3, [sp, #32]
  403d9e:	f001 fa23 	bl	4051e8 <__mcmp>
  403da2:	4641      	mov	r1, r8
  403da4:	9006      	str	r0, [sp, #24]
  403da6:	4620      	mov	r0, r4
  403da8:	f001 f846 	bl	404e38 <_Bfree>
  403dac:	9a06      	ldr	r2, [sp, #24]
  403dae:	9b08      	ldr	r3, [sp, #32]
  403db0:	b932      	cbnz	r2, 403dc0 <_dtoa_r+0x5d8>
  403db2:	9924      	ldr	r1, [sp, #144]	; 0x90
  403db4:	b921      	cbnz	r1, 403dc0 <_dtoa_r+0x5d8>
  403db6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403db8:	2a00      	cmp	r2, #0
  403dba:	f000 83ef 	beq.w	40459c <_dtoa_r+0xdb4>
  403dbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403dc0:	990a      	ldr	r1, [sp, #40]	; 0x28
  403dc2:	2900      	cmp	r1, #0
  403dc4:	f2c0 829f 	blt.w	404306 <_dtoa_r+0xb1e>
  403dc8:	d105      	bne.n	403dd6 <_dtoa_r+0x5ee>
  403dca:	9924      	ldr	r1, [sp, #144]	; 0x90
  403dcc:	b919      	cbnz	r1, 403dd6 <_dtoa_r+0x5ee>
  403dce:	990c      	ldr	r1, [sp, #48]	; 0x30
  403dd0:	2900      	cmp	r1, #0
  403dd2:	f000 8298 	beq.w	404306 <_dtoa_r+0xb1e>
  403dd6:	2a00      	cmp	r2, #0
  403dd8:	f300 8306 	bgt.w	4043e8 <_dtoa_r+0xc00>
  403ddc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403dde:	703b      	strb	r3, [r7, #0]
  403de0:	f107 0801 	add.w	r8, r7, #1
  403de4:	4297      	cmp	r7, r2
  403de6:	4645      	mov	r5, r8
  403de8:	f000 830c 	beq.w	404404 <_dtoa_r+0xc1c>
  403dec:	4649      	mov	r1, r9
  403dee:	2300      	movs	r3, #0
  403df0:	220a      	movs	r2, #10
  403df2:	4620      	mov	r0, r4
  403df4:	f001 f82a 	bl	404e4c <__multadd>
  403df8:	455e      	cmp	r6, fp
  403dfa:	4681      	mov	r9, r0
  403dfc:	4631      	mov	r1, r6
  403dfe:	f04f 0300 	mov.w	r3, #0
  403e02:	f04f 020a 	mov.w	r2, #10
  403e06:	4620      	mov	r0, r4
  403e08:	f000 81eb 	beq.w	4041e2 <_dtoa_r+0x9fa>
  403e0c:	f001 f81e 	bl	404e4c <__multadd>
  403e10:	4659      	mov	r1, fp
  403e12:	4606      	mov	r6, r0
  403e14:	2300      	movs	r3, #0
  403e16:	220a      	movs	r2, #10
  403e18:	4620      	mov	r0, r4
  403e1a:	f001 f817 	bl	404e4c <__multadd>
  403e1e:	4647      	mov	r7, r8
  403e20:	4683      	mov	fp, r0
  403e22:	e7a3      	b.n	403d6c <_dtoa_r+0x584>
  403e24:	201c      	movs	r0, #28
  403e26:	9b08      	ldr	r3, [sp, #32]
  403e28:	4403      	add	r3, r0
  403e2a:	9308      	str	r3, [sp, #32]
  403e2c:	9b06      	ldr	r3, [sp, #24]
  403e2e:	4403      	add	r3, r0
  403e30:	4405      	add	r5, r0
  403e32:	9306      	str	r3, [sp, #24]
  403e34:	e763      	b.n	403cfe <_dtoa_r+0x516>
  403e36:	4641      	mov	r1, r8
  403e38:	4648      	mov	r0, r9
  403e3a:	f001 f9d5 	bl	4051e8 <__mcmp>
  403e3e:	2800      	cmp	r0, #0
  403e40:	f6bf af73 	bge.w	403d2a <_dtoa_r+0x542>
  403e44:	9f02      	ldr	r7, [sp, #8]
  403e46:	4649      	mov	r1, r9
  403e48:	2300      	movs	r3, #0
  403e4a:	220a      	movs	r2, #10
  403e4c:	4620      	mov	r0, r4
  403e4e:	3f01      	subs	r7, #1
  403e50:	9702      	str	r7, [sp, #8]
  403e52:	f000 fffb 	bl	404e4c <__multadd>
  403e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403e58:	4681      	mov	r9, r0
  403e5a:	2b00      	cmp	r3, #0
  403e5c:	f040 83b6 	bne.w	4045cc <_dtoa_r+0xde4>
  403e60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403e62:	2b00      	cmp	r3, #0
  403e64:	f340 83bf 	ble.w	4045e6 <_dtoa_r+0xdfe>
  403e68:	930a      	str	r3, [sp, #40]	; 0x28
  403e6a:	f8dd b010 	ldr.w	fp, [sp, #16]
  403e6e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  403e70:	465d      	mov	r5, fp
  403e72:	e002      	b.n	403e7a <_dtoa_r+0x692>
  403e74:	f000 ffea 	bl	404e4c <__multadd>
  403e78:	4681      	mov	r9, r0
  403e7a:	4641      	mov	r1, r8
  403e7c:	4648      	mov	r0, r9
  403e7e:	f7ff fc1d 	bl	4036bc <quorem>
  403e82:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  403e86:	f805 ab01 	strb.w	sl, [r5], #1
  403e8a:	eba5 030b 	sub.w	r3, r5, fp
  403e8e:	42bb      	cmp	r3, r7
  403e90:	f04f 020a 	mov.w	r2, #10
  403e94:	f04f 0300 	mov.w	r3, #0
  403e98:	4649      	mov	r1, r9
  403e9a:	4620      	mov	r0, r4
  403e9c:	dbea      	blt.n	403e74 <_dtoa_r+0x68c>
  403e9e:	9b04      	ldr	r3, [sp, #16]
  403ea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403ea2:	2a01      	cmp	r2, #1
  403ea4:	bfac      	ite	ge
  403ea6:	189b      	addge	r3, r3, r2
  403ea8:	3301      	addlt	r3, #1
  403eaa:	461d      	mov	r5, r3
  403eac:	f04f 0b00 	mov.w	fp, #0
  403eb0:	4649      	mov	r1, r9
  403eb2:	2201      	movs	r2, #1
  403eb4:	4620      	mov	r0, r4
  403eb6:	f001 f945 	bl	405144 <__lshift>
  403eba:	4641      	mov	r1, r8
  403ebc:	4681      	mov	r9, r0
  403ebe:	f001 f993 	bl	4051e8 <__mcmp>
  403ec2:	2800      	cmp	r0, #0
  403ec4:	f340 823d 	ble.w	404342 <_dtoa_r+0xb5a>
  403ec8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  403ecc:	9904      	ldr	r1, [sp, #16]
  403ece:	1e6b      	subs	r3, r5, #1
  403ed0:	e004      	b.n	403edc <_dtoa_r+0x6f4>
  403ed2:	428b      	cmp	r3, r1
  403ed4:	f000 81ae 	beq.w	404234 <_dtoa_r+0xa4c>
  403ed8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  403edc:	2a39      	cmp	r2, #57	; 0x39
  403ede:	f103 0501 	add.w	r5, r3, #1
  403ee2:	d0f6      	beq.n	403ed2 <_dtoa_r+0x6ea>
  403ee4:	3201      	adds	r2, #1
  403ee6:	701a      	strb	r2, [r3, #0]
  403ee8:	4641      	mov	r1, r8
  403eea:	4620      	mov	r0, r4
  403eec:	f000 ffa4 	bl	404e38 <_Bfree>
  403ef0:	2e00      	cmp	r6, #0
  403ef2:	f43f ae3d 	beq.w	403b70 <_dtoa_r+0x388>
  403ef6:	f1bb 0f00 	cmp.w	fp, #0
  403efa:	d005      	beq.n	403f08 <_dtoa_r+0x720>
  403efc:	45b3      	cmp	fp, r6
  403efe:	d003      	beq.n	403f08 <_dtoa_r+0x720>
  403f00:	4659      	mov	r1, fp
  403f02:	4620      	mov	r0, r4
  403f04:	f000 ff98 	bl	404e38 <_Bfree>
  403f08:	4631      	mov	r1, r6
  403f0a:	4620      	mov	r0, r4
  403f0c:	f000 ff94 	bl	404e38 <_Bfree>
  403f10:	e62e      	b.n	403b70 <_dtoa_r+0x388>
  403f12:	2300      	movs	r3, #0
  403f14:	930b      	str	r3, [sp, #44]	; 0x2c
  403f16:	9b02      	ldr	r3, [sp, #8]
  403f18:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403f1a:	4413      	add	r3, r2
  403f1c:	930f      	str	r3, [sp, #60]	; 0x3c
  403f1e:	3301      	adds	r3, #1
  403f20:	2b01      	cmp	r3, #1
  403f22:	461f      	mov	r7, r3
  403f24:	461e      	mov	r6, r3
  403f26:	930a      	str	r3, [sp, #40]	; 0x28
  403f28:	bfb8      	it	lt
  403f2a:	2701      	movlt	r7, #1
  403f2c:	2100      	movs	r1, #0
  403f2e:	2f17      	cmp	r7, #23
  403f30:	6461      	str	r1, [r4, #68]	; 0x44
  403f32:	d90a      	bls.n	403f4a <_dtoa_r+0x762>
  403f34:	2201      	movs	r2, #1
  403f36:	2304      	movs	r3, #4
  403f38:	005b      	lsls	r3, r3, #1
  403f3a:	f103 0014 	add.w	r0, r3, #20
  403f3e:	4287      	cmp	r7, r0
  403f40:	4611      	mov	r1, r2
  403f42:	f102 0201 	add.w	r2, r2, #1
  403f46:	d2f7      	bcs.n	403f38 <_dtoa_r+0x750>
  403f48:	6461      	str	r1, [r4, #68]	; 0x44
  403f4a:	4620      	mov	r0, r4
  403f4c:	f000 ff4e 	bl	404dec <_Balloc>
  403f50:	2e0e      	cmp	r6, #14
  403f52:	9004      	str	r0, [sp, #16]
  403f54:	6420      	str	r0, [r4, #64]	; 0x40
  403f56:	f63f ad41 	bhi.w	4039dc <_dtoa_r+0x1f4>
  403f5a:	2d00      	cmp	r5, #0
  403f5c:	f43f ad3e 	beq.w	4039dc <_dtoa_r+0x1f4>
  403f60:	9902      	ldr	r1, [sp, #8]
  403f62:	2900      	cmp	r1, #0
  403f64:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  403f68:	f340 8202 	ble.w	404370 <_dtoa_r+0xb88>
  403f6c:	4bb8      	ldr	r3, [pc, #736]	; (404250 <_dtoa_r+0xa68>)
  403f6e:	f001 020f 	and.w	r2, r1, #15
  403f72:	110d      	asrs	r5, r1, #4
  403f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403f78:	06e9      	lsls	r1, r5, #27
  403f7a:	e9d3 6700 	ldrd	r6, r7, [r3]
  403f7e:	f140 81ae 	bpl.w	4042de <_dtoa_r+0xaf6>
  403f82:	4bb4      	ldr	r3, [pc, #720]	; (404254 <_dtoa_r+0xa6c>)
  403f84:	4650      	mov	r0, sl
  403f86:	4659      	mov	r1, fp
  403f88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  403f8c:	f002 fa1c 	bl	4063c8 <__aeabi_ddiv>
  403f90:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  403f94:	f005 050f 	and.w	r5, r5, #15
  403f98:	f04f 0a03 	mov.w	sl, #3
  403f9c:	b18d      	cbz	r5, 403fc2 <_dtoa_r+0x7da>
  403f9e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 404254 <_dtoa_r+0xa6c>
  403fa2:	07ea      	lsls	r2, r5, #31
  403fa4:	d509      	bpl.n	403fba <_dtoa_r+0x7d2>
  403fa6:	4630      	mov	r0, r6
  403fa8:	4639      	mov	r1, r7
  403faa:	e9d8 2300 	ldrd	r2, r3, [r8]
  403fae:	f002 f8e1 	bl	406174 <__aeabi_dmul>
  403fb2:	f10a 0a01 	add.w	sl, sl, #1
  403fb6:	4606      	mov	r6, r0
  403fb8:	460f      	mov	r7, r1
  403fba:	106d      	asrs	r5, r5, #1
  403fbc:	f108 0808 	add.w	r8, r8, #8
  403fc0:	d1ef      	bne.n	403fa2 <_dtoa_r+0x7ba>
  403fc2:	463b      	mov	r3, r7
  403fc4:	4632      	mov	r2, r6
  403fc6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  403fca:	f002 f9fd 	bl	4063c8 <__aeabi_ddiv>
  403fce:	4607      	mov	r7, r0
  403fd0:	4688      	mov	r8, r1
  403fd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403fd4:	b143      	cbz	r3, 403fe8 <_dtoa_r+0x800>
  403fd6:	2200      	movs	r2, #0
  403fd8:	4b9f      	ldr	r3, [pc, #636]	; (404258 <_dtoa_r+0xa70>)
  403fda:	4638      	mov	r0, r7
  403fdc:	4641      	mov	r1, r8
  403fde:	f002 fb3b 	bl	406658 <__aeabi_dcmplt>
  403fe2:	2800      	cmp	r0, #0
  403fe4:	f040 8286 	bne.w	4044f4 <_dtoa_r+0xd0c>
  403fe8:	4650      	mov	r0, sl
  403fea:	f002 f85d 	bl	4060a8 <__aeabi_i2d>
  403fee:	463a      	mov	r2, r7
  403ff0:	4643      	mov	r3, r8
  403ff2:	f002 f8bf 	bl	406174 <__aeabi_dmul>
  403ff6:	4b99      	ldr	r3, [pc, #612]	; (40425c <_dtoa_r+0xa74>)
  403ff8:	2200      	movs	r2, #0
  403ffa:	f001 ff09 	bl	405e10 <__adddf3>
  403ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404000:	4605      	mov	r5, r0
  404002:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404006:	2b00      	cmp	r3, #0
  404008:	f000 813e 	beq.w	404288 <_dtoa_r+0xaa0>
  40400c:	9b02      	ldr	r3, [sp, #8]
  40400e:	9315      	str	r3, [sp, #84]	; 0x54
  404010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404012:	9312      	str	r3, [sp, #72]	; 0x48
  404014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404016:	2b00      	cmp	r3, #0
  404018:	f000 81fa 	beq.w	404410 <_dtoa_r+0xc28>
  40401c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40401e:	4b8c      	ldr	r3, [pc, #560]	; (404250 <_dtoa_r+0xa68>)
  404020:	498f      	ldr	r1, [pc, #572]	; (404260 <_dtoa_r+0xa78>)
  404022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404026:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40402a:	2000      	movs	r0, #0
  40402c:	f002 f9cc 	bl	4063c8 <__aeabi_ddiv>
  404030:	462a      	mov	r2, r5
  404032:	4633      	mov	r3, r6
  404034:	f001 feea 	bl	405e0c <__aeabi_dsub>
  404038:	4682      	mov	sl, r0
  40403a:	468b      	mov	fp, r1
  40403c:	4638      	mov	r0, r7
  40403e:	4641      	mov	r1, r8
  404040:	f002 fb48 	bl	4066d4 <__aeabi_d2iz>
  404044:	4605      	mov	r5, r0
  404046:	f002 f82f 	bl	4060a8 <__aeabi_i2d>
  40404a:	4602      	mov	r2, r0
  40404c:	460b      	mov	r3, r1
  40404e:	4638      	mov	r0, r7
  404050:	4641      	mov	r1, r8
  404052:	f001 fedb 	bl	405e0c <__aeabi_dsub>
  404056:	3530      	adds	r5, #48	; 0x30
  404058:	fa5f f885 	uxtb.w	r8, r5
  40405c:	9d04      	ldr	r5, [sp, #16]
  40405e:	4606      	mov	r6, r0
  404060:	460f      	mov	r7, r1
  404062:	f885 8000 	strb.w	r8, [r5]
  404066:	4602      	mov	r2, r0
  404068:	460b      	mov	r3, r1
  40406a:	4650      	mov	r0, sl
  40406c:	4659      	mov	r1, fp
  40406e:	3501      	adds	r5, #1
  404070:	f002 fb10 	bl	406694 <__aeabi_dcmpgt>
  404074:	2800      	cmp	r0, #0
  404076:	d154      	bne.n	404122 <_dtoa_r+0x93a>
  404078:	4632      	mov	r2, r6
  40407a:	463b      	mov	r3, r7
  40407c:	2000      	movs	r0, #0
  40407e:	4976      	ldr	r1, [pc, #472]	; (404258 <_dtoa_r+0xa70>)
  404080:	f001 fec4 	bl	405e0c <__aeabi_dsub>
  404084:	4602      	mov	r2, r0
  404086:	460b      	mov	r3, r1
  404088:	4650      	mov	r0, sl
  40408a:	4659      	mov	r1, fp
  40408c:	f002 fb02 	bl	406694 <__aeabi_dcmpgt>
  404090:	2800      	cmp	r0, #0
  404092:	f040 8270 	bne.w	404576 <_dtoa_r+0xd8e>
  404096:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404098:	2a01      	cmp	r2, #1
  40409a:	f000 8111 	beq.w	4042c0 <_dtoa_r+0xad8>
  40409e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4040a0:	9a04      	ldr	r2, [sp, #16]
  4040a2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4040a6:	4413      	add	r3, r2
  4040a8:	4699      	mov	r9, r3
  4040aa:	e00d      	b.n	4040c8 <_dtoa_r+0x8e0>
  4040ac:	2000      	movs	r0, #0
  4040ae:	496a      	ldr	r1, [pc, #424]	; (404258 <_dtoa_r+0xa70>)
  4040b0:	f001 feac 	bl	405e0c <__aeabi_dsub>
  4040b4:	4652      	mov	r2, sl
  4040b6:	465b      	mov	r3, fp
  4040b8:	f002 face 	bl	406658 <__aeabi_dcmplt>
  4040bc:	2800      	cmp	r0, #0
  4040be:	f040 8258 	bne.w	404572 <_dtoa_r+0xd8a>
  4040c2:	454d      	cmp	r5, r9
  4040c4:	f000 80fa 	beq.w	4042bc <_dtoa_r+0xad4>
  4040c8:	4650      	mov	r0, sl
  4040ca:	4659      	mov	r1, fp
  4040cc:	2200      	movs	r2, #0
  4040ce:	4b65      	ldr	r3, [pc, #404]	; (404264 <_dtoa_r+0xa7c>)
  4040d0:	f002 f850 	bl	406174 <__aeabi_dmul>
  4040d4:	2200      	movs	r2, #0
  4040d6:	4b63      	ldr	r3, [pc, #396]	; (404264 <_dtoa_r+0xa7c>)
  4040d8:	4682      	mov	sl, r0
  4040da:	468b      	mov	fp, r1
  4040dc:	4630      	mov	r0, r6
  4040de:	4639      	mov	r1, r7
  4040e0:	f002 f848 	bl	406174 <__aeabi_dmul>
  4040e4:	460f      	mov	r7, r1
  4040e6:	4606      	mov	r6, r0
  4040e8:	f002 faf4 	bl	4066d4 <__aeabi_d2iz>
  4040ec:	4680      	mov	r8, r0
  4040ee:	f001 ffdb 	bl	4060a8 <__aeabi_i2d>
  4040f2:	4602      	mov	r2, r0
  4040f4:	460b      	mov	r3, r1
  4040f6:	4630      	mov	r0, r6
  4040f8:	4639      	mov	r1, r7
  4040fa:	f001 fe87 	bl	405e0c <__aeabi_dsub>
  4040fe:	f108 0830 	add.w	r8, r8, #48	; 0x30
  404102:	fa5f f888 	uxtb.w	r8, r8
  404106:	4652      	mov	r2, sl
  404108:	465b      	mov	r3, fp
  40410a:	f805 8b01 	strb.w	r8, [r5], #1
  40410e:	4606      	mov	r6, r0
  404110:	460f      	mov	r7, r1
  404112:	f002 faa1 	bl	406658 <__aeabi_dcmplt>
  404116:	4632      	mov	r2, r6
  404118:	463b      	mov	r3, r7
  40411a:	2800      	cmp	r0, #0
  40411c:	d0c6      	beq.n	4040ac <_dtoa_r+0x8c4>
  40411e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404122:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404124:	9302      	str	r3, [sp, #8]
  404126:	e523      	b.n	403b70 <_dtoa_r+0x388>
  404128:	2300      	movs	r3, #0
  40412a:	930b      	str	r3, [sp, #44]	; 0x2c
  40412c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40412e:	2b00      	cmp	r3, #0
  404130:	f340 80dc 	ble.w	4042ec <_dtoa_r+0xb04>
  404134:	461f      	mov	r7, r3
  404136:	461e      	mov	r6, r3
  404138:	930f      	str	r3, [sp, #60]	; 0x3c
  40413a:	930a      	str	r3, [sp, #40]	; 0x28
  40413c:	e6f6      	b.n	403f2c <_dtoa_r+0x744>
  40413e:	2301      	movs	r3, #1
  404140:	930b      	str	r3, [sp, #44]	; 0x2c
  404142:	e7f3      	b.n	40412c <_dtoa_r+0x944>
  404144:	f1ba 0f00 	cmp.w	sl, #0
  404148:	f47f ada8 	bne.w	403c9c <_dtoa_r+0x4b4>
  40414c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  404150:	2b00      	cmp	r3, #0
  404152:	f47f adba 	bne.w	403cca <_dtoa_r+0x4e2>
  404156:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40415a:	0d3f      	lsrs	r7, r7, #20
  40415c:	053f      	lsls	r7, r7, #20
  40415e:	2f00      	cmp	r7, #0
  404160:	f000 820d 	beq.w	40457e <_dtoa_r+0xd96>
  404164:	9b08      	ldr	r3, [sp, #32]
  404166:	3301      	adds	r3, #1
  404168:	9308      	str	r3, [sp, #32]
  40416a:	9b06      	ldr	r3, [sp, #24]
  40416c:	3301      	adds	r3, #1
  40416e:	9306      	str	r3, [sp, #24]
  404170:	2301      	movs	r3, #1
  404172:	930c      	str	r3, [sp, #48]	; 0x30
  404174:	e5ab      	b.n	403cce <_dtoa_r+0x4e6>
  404176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404178:	2b00      	cmp	r3, #0
  40417a:	f73f ac42 	bgt.w	403a02 <_dtoa_r+0x21a>
  40417e:	f040 8221 	bne.w	4045c4 <_dtoa_r+0xddc>
  404182:	2200      	movs	r2, #0
  404184:	4b38      	ldr	r3, [pc, #224]	; (404268 <_dtoa_r+0xa80>)
  404186:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40418a:	f001 fff3 	bl	406174 <__aeabi_dmul>
  40418e:	4652      	mov	r2, sl
  404190:	465b      	mov	r3, fp
  404192:	f002 fa75 	bl	406680 <__aeabi_dcmpge>
  404196:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40419a:	4646      	mov	r6, r8
  40419c:	2800      	cmp	r0, #0
  40419e:	d041      	beq.n	404224 <_dtoa_r+0xa3c>
  4041a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4041a2:	9d04      	ldr	r5, [sp, #16]
  4041a4:	43db      	mvns	r3, r3
  4041a6:	9302      	str	r3, [sp, #8]
  4041a8:	4641      	mov	r1, r8
  4041aa:	4620      	mov	r0, r4
  4041ac:	f000 fe44 	bl	404e38 <_Bfree>
  4041b0:	2e00      	cmp	r6, #0
  4041b2:	f43f acdd 	beq.w	403b70 <_dtoa_r+0x388>
  4041b6:	e6a7      	b.n	403f08 <_dtoa_r+0x720>
  4041b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4041ba:	4649      	mov	r1, r9
  4041bc:	4620      	mov	r0, r4
  4041be:	f000 ff71 	bl	4050a4 <__pow5mult>
  4041c2:	4681      	mov	r9, r0
  4041c4:	e558      	b.n	403c78 <_dtoa_r+0x490>
  4041c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4041c8:	2a00      	cmp	r2, #0
  4041ca:	f000 8187 	beq.w	4044dc <_dtoa_r+0xcf4>
  4041ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4041d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4041d4:	9d08      	ldr	r5, [sp, #32]
  4041d6:	e4f2      	b.n	403bbe <_dtoa_r+0x3d6>
  4041d8:	f1ba 0f00 	cmp.w	sl, #0
  4041dc:	f47f ad75 	bne.w	403cca <_dtoa_r+0x4e2>
  4041e0:	e7b4      	b.n	40414c <_dtoa_r+0x964>
  4041e2:	f000 fe33 	bl	404e4c <__multadd>
  4041e6:	4647      	mov	r7, r8
  4041e8:	4606      	mov	r6, r0
  4041ea:	4683      	mov	fp, r0
  4041ec:	e5be      	b.n	403d6c <_dtoa_r+0x584>
  4041ee:	4601      	mov	r1, r0
  4041f0:	4620      	mov	r0, r4
  4041f2:	9306      	str	r3, [sp, #24]
  4041f4:	f000 fe20 	bl	404e38 <_Bfree>
  4041f8:	2201      	movs	r2, #1
  4041fa:	9b06      	ldr	r3, [sp, #24]
  4041fc:	e5e0      	b.n	403dc0 <_dtoa_r+0x5d8>
  4041fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404200:	2b02      	cmp	r3, #2
  404202:	f77f ad96 	ble.w	403d32 <_dtoa_r+0x54a>
  404206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404208:	2b00      	cmp	r3, #0
  40420a:	d1c9      	bne.n	4041a0 <_dtoa_r+0x9b8>
  40420c:	4641      	mov	r1, r8
  40420e:	2205      	movs	r2, #5
  404210:	4620      	mov	r0, r4
  404212:	f000 fe1b 	bl	404e4c <__multadd>
  404216:	4601      	mov	r1, r0
  404218:	4680      	mov	r8, r0
  40421a:	4648      	mov	r0, r9
  40421c:	f000 ffe4 	bl	4051e8 <__mcmp>
  404220:	2800      	cmp	r0, #0
  404222:	ddbd      	ble.n	4041a0 <_dtoa_r+0x9b8>
  404224:	9a02      	ldr	r2, [sp, #8]
  404226:	9904      	ldr	r1, [sp, #16]
  404228:	2331      	movs	r3, #49	; 0x31
  40422a:	3201      	adds	r2, #1
  40422c:	9202      	str	r2, [sp, #8]
  40422e:	700b      	strb	r3, [r1, #0]
  404230:	1c4d      	adds	r5, r1, #1
  404232:	e7b9      	b.n	4041a8 <_dtoa_r+0x9c0>
  404234:	9a02      	ldr	r2, [sp, #8]
  404236:	3201      	adds	r2, #1
  404238:	9202      	str	r2, [sp, #8]
  40423a:	9a04      	ldr	r2, [sp, #16]
  40423c:	2331      	movs	r3, #49	; 0x31
  40423e:	7013      	strb	r3, [r2, #0]
  404240:	e652      	b.n	403ee8 <_dtoa_r+0x700>
  404242:	2301      	movs	r3, #1
  404244:	930b      	str	r3, [sp, #44]	; 0x2c
  404246:	e666      	b.n	403f16 <_dtoa_r+0x72e>
  404248:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40424c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40424e:	e48f      	b.n	403b70 <_dtoa_r+0x388>
  404250:	00407218 	.word	0x00407218
  404254:	004071f0 	.word	0x004071f0
  404258:	3ff00000 	.word	0x3ff00000
  40425c:	401c0000 	.word	0x401c0000
  404260:	3fe00000 	.word	0x3fe00000
  404264:	40240000 	.word	0x40240000
  404268:	40140000 	.word	0x40140000
  40426c:	4650      	mov	r0, sl
  40426e:	f001 ff1b 	bl	4060a8 <__aeabi_i2d>
  404272:	463a      	mov	r2, r7
  404274:	4643      	mov	r3, r8
  404276:	f001 ff7d 	bl	406174 <__aeabi_dmul>
  40427a:	2200      	movs	r2, #0
  40427c:	4bc1      	ldr	r3, [pc, #772]	; (404584 <_dtoa_r+0xd9c>)
  40427e:	f001 fdc7 	bl	405e10 <__adddf3>
  404282:	4605      	mov	r5, r0
  404284:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404288:	4641      	mov	r1, r8
  40428a:	2200      	movs	r2, #0
  40428c:	4bbe      	ldr	r3, [pc, #760]	; (404588 <_dtoa_r+0xda0>)
  40428e:	4638      	mov	r0, r7
  404290:	f001 fdbc 	bl	405e0c <__aeabi_dsub>
  404294:	462a      	mov	r2, r5
  404296:	4633      	mov	r3, r6
  404298:	4682      	mov	sl, r0
  40429a:	468b      	mov	fp, r1
  40429c:	f002 f9fa 	bl	406694 <__aeabi_dcmpgt>
  4042a0:	4680      	mov	r8, r0
  4042a2:	2800      	cmp	r0, #0
  4042a4:	f040 8110 	bne.w	4044c8 <_dtoa_r+0xce0>
  4042a8:	462a      	mov	r2, r5
  4042aa:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4042ae:	4650      	mov	r0, sl
  4042b0:	4659      	mov	r1, fp
  4042b2:	f002 f9d1 	bl	406658 <__aeabi_dcmplt>
  4042b6:	b118      	cbz	r0, 4042c0 <_dtoa_r+0xad8>
  4042b8:	4646      	mov	r6, r8
  4042ba:	e771      	b.n	4041a0 <_dtoa_r+0x9b8>
  4042bc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4042c0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4042c4:	f7ff bb8a 	b.w	4039dc <_dtoa_r+0x1f4>
  4042c8:	9804      	ldr	r0, [sp, #16]
  4042ca:	f7ff babb 	b.w	403844 <_dtoa_r+0x5c>
  4042ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4042d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4042d2:	970c      	str	r7, [sp, #48]	; 0x30
  4042d4:	1afb      	subs	r3, r7, r3
  4042d6:	441a      	add	r2, r3
  4042d8:	920d      	str	r2, [sp, #52]	; 0x34
  4042da:	2700      	movs	r7, #0
  4042dc:	e469      	b.n	403bb2 <_dtoa_r+0x3ca>
  4042de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  4042e2:	f04f 0a02 	mov.w	sl, #2
  4042e6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4042ea:	e657      	b.n	403f9c <_dtoa_r+0x7b4>
  4042ec:	2100      	movs	r1, #0
  4042ee:	2301      	movs	r3, #1
  4042f0:	6461      	str	r1, [r4, #68]	; 0x44
  4042f2:	4620      	mov	r0, r4
  4042f4:	9325      	str	r3, [sp, #148]	; 0x94
  4042f6:	f000 fd79 	bl	404dec <_Balloc>
  4042fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4042fc:	9004      	str	r0, [sp, #16]
  4042fe:	6420      	str	r0, [r4, #64]	; 0x40
  404300:	930a      	str	r3, [sp, #40]	; 0x28
  404302:	930f      	str	r3, [sp, #60]	; 0x3c
  404304:	e629      	b.n	403f5a <_dtoa_r+0x772>
  404306:	2a00      	cmp	r2, #0
  404308:	46d0      	mov	r8, sl
  40430a:	f8cd b018 	str.w	fp, [sp, #24]
  40430e:	469a      	mov	sl, r3
  404310:	dd11      	ble.n	404336 <_dtoa_r+0xb4e>
  404312:	4649      	mov	r1, r9
  404314:	2201      	movs	r2, #1
  404316:	4620      	mov	r0, r4
  404318:	f000 ff14 	bl	405144 <__lshift>
  40431c:	4641      	mov	r1, r8
  40431e:	4681      	mov	r9, r0
  404320:	f000 ff62 	bl	4051e8 <__mcmp>
  404324:	2800      	cmp	r0, #0
  404326:	f340 8146 	ble.w	4045b6 <_dtoa_r+0xdce>
  40432a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40432e:	f000 8106 	beq.w	40453e <_dtoa_r+0xd56>
  404332:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  404336:	46b3      	mov	fp, r6
  404338:	f887 a000 	strb.w	sl, [r7]
  40433c:	1c7d      	adds	r5, r7, #1
  40433e:	9e06      	ldr	r6, [sp, #24]
  404340:	e5d2      	b.n	403ee8 <_dtoa_r+0x700>
  404342:	d104      	bne.n	40434e <_dtoa_r+0xb66>
  404344:	f01a 0f01 	tst.w	sl, #1
  404348:	d001      	beq.n	40434e <_dtoa_r+0xb66>
  40434a:	e5bd      	b.n	403ec8 <_dtoa_r+0x6e0>
  40434c:	4615      	mov	r5, r2
  40434e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404352:	2b30      	cmp	r3, #48	; 0x30
  404354:	f105 32ff 	add.w	r2, r5, #4294967295
  404358:	d0f8      	beq.n	40434c <_dtoa_r+0xb64>
  40435a:	e5c5      	b.n	403ee8 <_dtoa_r+0x700>
  40435c:	9904      	ldr	r1, [sp, #16]
  40435e:	2230      	movs	r2, #48	; 0x30
  404360:	700a      	strb	r2, [r1, #0]
  404362:	9a02      	ldr	r2, [sp, #8]
  404364:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404368:	3201      	adds	r2, #1
  40436a:	9202      	str	r2, [sp, #8]
  40436c:	f7ff bbfc 	b.w	403b68 <_dtoa_r+0x380>
  404370:	f000 80bb 	beq.w	4044ea <_dtoa_r+0xd02>
  404374:	9b02      	ldr	r3, [sp, #8]
  404376:	425d      	negs	r5, r3
  404378:	4b84      	ldr	r3, [pc, #528]	; (40458c <_dtoa_r+0xda4>)
  40437a:	f005 020f 	and.w	r2, r5, #15
  40437e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404382:	e9d3 2300 	ldrd	r2, r3, [r3]
  404386:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40438a:	f001 fef3 	bl	406174 <__aeabi_dmul>
  40438e:	112d      	asrs	r5, r5, #4
  404390:	4607      	mov	r7, r0
  404392:	4688      	mov	r8, r1
  404394:	f000 812c 	beq.w	4045f0 <_dtoa_r+0xe08>
  404398:	4e7d      	ldr	r6, [pc, #500]	; (404590 <_dtoa_r+0xda8>)
  40439a:	f04f 0a02 	mov.w	sl, #2
  40439e:	07eb      	lsls	r3, r5, #31
  4043a0:	d509      	bpl.n	4043b6 <_dtoa_r+0xbce>
  4043a2:	4638      	mov	r0, r7
  4043a4:	4641      	mov	r1, r8
  4043a6:	e9d6 2300 	ldrd	r2, r3, [r6]
  4043aa:	f001 fee3 	bl	406174 <__aeabi_dmul>
  4043ae:	f10a 0a01 	add.w	sl, sl, #1
  4043b2:	4607      	mov	r7, r0
  4043b4:	4688      	mov	r8, r1
  4043b6:	106d      	asrs	r5, r5, #1
  4043b8:	f106 0608 	add.w	r6, r6, #8
  4043bc:	d1ef      	bne.n	40439e <_dtoa_r+0xbb6>
  4043be:	e608      	b.n	403fd2 <_dtoa_r+0x7ea>
  4043c0:	6871      	ldr	r1, [r6, #4]
  4043c2:	4620      	mov	r0, r4
  4043c4:	f000 fd12 	bl	404dec <_Balloc>
  4043c8:	6933      	ldr	r3, [r6, #16]
  4043ca:	3302      	adds	r3, #2
  4043cc:	009a      	lsls	r2, r3, #2
  4043ce:	4605      	mov	r5, r0
  4043d0:	f106 010c 	add.w	r1, r6, #12
  4043d4:	300c      	adds	r0, #12
  4043d6:	f000 fc63 	bl	404ca0 <memcpy>
  4043da:	4629      	mov	r1, r5
  4043dc:	2201      	movs	r2, #1
  4043de:	4620      	mov	r0, r4
  4043e0:	f000 feb0 	bl	405144 <__lshift>
  4043e4:	9006      	str	r0, [sp, #24]
  4043e6:	e4b5      	b.n	403d54 <_dtoa_r+0x56c>
  4043e8:	2b39      	cmp	r3, #57	; 0x39
  4043ea:	f8cd b018 	str.w	fp, [sp, #24]
  4043ee:	46d0      	mov	r8, sl
  4043f0:	f000 80a5 	beq.w	40453e <_dtoa_r+0xd56>
  4043f4:	f103 0a01 	add.w	sl, r3, #1
  4043f8:	46b3      	mov	fp, r6
  4043fa:	f887 a000 	strb.w	sl, [r7]
  4043fe:	1c7d      	adds	r5, r7, #1
  404400:	9e06      	ldr	r6, [sp, #24]
  404402:	e571      	b.n	403ee8 <_dtoa_r+0x700>
  404404:	465a      	mov	r2, fp
  404406:	46d0      	mov	r8, sl
  404408:	46b3      	mov	fp, r6
  40440a:	469a      	mov	sl, r3
  40440c:	4616      	mov	r6, r2
  40440e:	e54f      	b.n	403eb0 <_dtoa_r+0x6c8>
  404410:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404412:	495e      	ldr	r1, [pc, #376]	; (40458c <_dtoa_r+0xda4>)
  404414:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  404418:	462a      	mov	r2, r5
  40441a:	4633      	mov	r3, r6
  40441c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  404420:	f001 fea8 	bl	406174 <__aeabi_dmul>
  404424:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  404428:	4638      	mov	r0, r7
  40442a:	4641      	mov	r1, r8
  40442c:	f002 f952 	bl	4066d4 <__aeabi_d2iz>
  404430:	4605      	mov	r5, r0
  404432:	f001 fe39 	bl	4060a8 <__aeabi_i2d>
  404436:	460b      	mov	r3, r1
  404438:	4602      	mov	r2, r0
  40443a:	4641      	mov	r1, r8
  40443c:	4638      	mov	r0, r7
  40443e:	f001 fce5 	bl	405e0c <__aeabi_dsub>
  404442:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404444:	460f      	mov	r7, r1
  404446:	9904      	ldr	r1, [sp, #16]
  404448:	3530      	adds	r5, #48	; 0x30
  40444a:	2b01      	cmp	r3, #1
  40444c:	700d      	strb	r5, [r1, #0]
  40444e:	4606      	mov	r6, r0
  404450:	f101 0501 	add.w	r5, r1, #1
  404454:	d026      	beq.n	4044a4 <_dtoa_r+0xcbc>
  404456:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404458:	9a04      	ldr	r2, [sp, #16]
  40445a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 404598 <_dtoa_r+0xdb0>
  40445e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  404462:	4413      	add	r3, r2
  404464:	f04f 0a00 	mov.w	sl, #0
  404468:	4699      	mov	r9, r3
  40446a:	4652      	mov	r2, sl
  40446c:	465b      	mov	r3, fp
  40446e:	4630      	mov	r0, r6
  404470:	4639      	mov	r1, r7
  404472:	f001 fe7f 	bl	406174 <__aeabi_dmul>
  404476:	460f      	mov	r7, r1
  404478:	4606      	mov	r6, r0
  40447a:	f002 f92b 	bl	4066d4 <__aeabi_d2iz>
  40447e:	4680      	mov	r8, r0
  404480:	f001 fe12 	bl	4060a8 <__aeabi_i2d>
  404484:	f108 0830 	add.w	r8, r8, #48	; 0x30
  404488:	4602      	mov	r2, r0
  40448a:	460b      	mov	r3, r1
  40448c:	4630      	mov	r0, r6
  40448e:	4639      	mov	r1, r7
  404490:	f001 fcbc 	bl	405e0c <__aeabi_dsub>
  404494:	f805 8b01 	strb.w	r8, [r5], #1
  404498:	454d      	cmp	r5, r9
  40449a:	4606      	mov	r6, r0
  40449c:	460f      	mov	r7, r1
  40449e:	d1e4      	bne.n	40446a <_dtoa_r+0xc82>
  4044a0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4044a4:	4b3b      	ldr	r3, [pc, #236]	; (404594 <_dtoa_r+0xdac>)
  4044a6:	2200      	movs	r2, #0
  4044a8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4044ac:	f001 fcb0 	bl	405e10 <__adddf3>
  4044b0:	4632      	mov	r2, r6
  4044b2:	463b      	mov	r3, r7
  4044b4:	f002 f8d0 	bl	406658 <__aeabi_dcmplt>
  4044b8:	2800      	cmp	r0, #0
  4044ba:	d046      	beq.n	40454a <_dtoa_r+0xd62>
  4044bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4044be:	9302      	str	r3, [sp, #8]
  4044c0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4044c4:	f7ff bb43 	b.w	403b4e <_dtoa_r+0x366>
  4044c8:	f04f 0800 	mov.w	r8, #0
  4044cc:	4646      	mov	r6, r8
  4044ce:	e6a9      	b.n	404224 <_dtoa_r+0xa3c>
  4044d0:	9b08      	ldr	r3, [sp, #32]
  4044d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4044d4:	1a9d      	subs	r5, r3, r2
  4044d6:	2300      	movs	r3, #0
  4044d8:	f7ff bb71 	b.w	403bbe <_dtoa_r+0x3d6>
  4044dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4044de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4044e0:	9d08      	ldr	r5, [sp, #32]
  4044e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4044e6:	f7ff bb6a 	b.w	403bbe <_dtoa_r+0x3d6>
  4044ea:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4044ee:	f04f 0a02 	mov.w	sl, #2
  4044f2:	e56e      	b.n	403fd2 <_dtoa_r+0x7ea>
  4044f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4044f6:	2b00      	cmp	r3, #0
  4044f8:	f43f aeb8 	beq.w	40426c <_dtoa_r+0xa84>
  4044fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4044fe:	2b00      	cmp	r3, #0
  404500:	f77f aede 	ble.w	4042c0 <_dtoa_r+0xad8>
  404504:	2200      	movs	r2, #0
  404506:	4b24      	ldr	r3, [pc, #144]	; (404598 <_dtoa_r+0xdb0>)
  404508:	4638      	mov	r0, r7
  40450a:	4641      	mov	r1, r8
  40450c:	f001 fe32 	bl	406174 <__aeabi_dmul>
  404510:	4607      	mov	r7, r0
  404512:	4688      	mov	r8, r1
  404514:	f10a 0001 	add.w	r0, sl, #1
  404518:	f001 fdc6 	bl	4060a8 <__aeabi_i2d>
  40451c:	463a      	mov	r2, r7
  40451e:	4643      	mov	r3, r8
  404520:	f001 fe28 	bl	406174 <__aeabi_dmul>
  404524:	2200      	movs	r2, #0
  404526:	4b17      	ldr	r3, [pc, #92]	; (404584 <_dtoa_r+0xd9c>)
  404528:	f001 fc72 	bl	405e10 <__adddf3>
  40452c:	9a02      	ldr	r2, [sp, #8]
  40452e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404530:	9312      	str	r3, [sp, #72]	; 0x48
  404532:	3a01      	subs	r2, #1
  404534:	4605      	mov	r5, r0
  404536:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40453a:	9215      	str	r2, [sp, #84]	; 0x54
  40453c:	e56a      	b.n	404014 <_dtoa_r+0x82c>
  40453e:	2239      	movs	r2, #57	; 0x39
  404540:	46b3      	mov	fp, r6
  404542:	703a      	strb	r2, [r7, #0]
  404544:	9e06      	ldr	r6, [sp, #24]
  404546:	1c7d      	adds	r5, r7, #1
  404548:	e4c0      	b.n	403ecc <_dtoa_r+0x6e4>
  40454a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40454e:	2000      	movs	r0, #0
  404550:	4910      	ldr	r1, [pc, #64]	; (404594 <_dtoa_r+0xdac>)
  404552:	f001 fc5b 	bl	405e0c <__aeabi_dsub>
  404556:	4632      	mov	r2, r6
  404558:	463b      	mov	r3, r7
  40455a:	f002 f89b 	bl	406694 <__aeabi_dcmpgt>
  40455e:	b908      	cbnz	r0, 404564 <_dtoa_r+0xd7c>
  404560:	e6ae      	b.n	4042c0 <_dtoa_r+0xad8>
  404562:	4615      	mov	r5, r2
  404564:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404568:	2b30      	cmp	r3, #48	; 0x30
  40456a:	f105 32ff 	add.w	r2, r5, #4294967295
  40456e:	d0f8      	beq.n	404562 <_dtoa_r+0xd7a>
  404570:	e5d7      	b.n	404122 <_dtoa_r+0x93a>
  404572:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404576:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404578:	9302      	str	r3, [sp, #8]
  40457a:	f7ff bae8 	b.w	403b4e <_dtoa_r+0x366>
  40457e:	970c      	str	r7, [sp, #48]	; 0x30
  404580:	f7ff bba5 	b.w	403cce <_dtoa_r+0x4e6>
  404584:	401c0000 	.word	0x401c0000
  404588:	40140000 	.word	0x40140000
  40458c:	00407218 	.word	0x00407218
  404590:	004071f0 	.word	0x004071f0
  404594:	3fe00000 	.word	0x3fe00000
  404598:	40240000 	.word	0x40240000
  40459c:	2b39      	cmp	r3, #57	; 0x39
  40459e:	f8cd b018 	str.w	fp, [sp, #24]
  4045a2:	46d0      	mov	r8, sl
  4045a4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4045a8:	469a      	mov	sl, r3
  4045aa:	d0c8      	beq.n	40453e <_dtoa_r+0xd56>
  4045ac:	f1bb 0f00 	cmp.w	fp, #0
  4045b0:	f73f aebf 	bgt.w	404332 <_dtoa_r+0xb4a>
  4045b4:	e6bf      	b.n	404336 <_dtoa_r+0xb4e>
  4045b6:	f47f aebe 	bne.w	404336 <_dtoa_r+0xb4e>
  4045ba:	f01a 0f01 	tst.w	sl, #1
  4045be:	f43f aeba 	beq.w	404336 <_dtoa_r+0xb4e>
  4045c2:	e6b2      	b.n	40432a <_dtoa_r+0xb42>
  4045c4:	f04f 0800 	mov.w	r8, #0
  4045c8:	4646      	mov	r6, r8
  4045ca:	e5e9      	b.n	4041a0 <_dtoa_r+0x9b8>
  4045cc:	4631      	mov	r1, r6
  4045ce:	2300      	movs	r3, #0
  4045d0:	220a      	movs	r2, #10
  4045d2:	4620      	mov	r0, r4
  4045d4:	f000 fc3a 	bl	404e4c <__multadd>
  4045d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4045da:	2b00      	cmp	r3, #0
  4045dc:	4606      	mov	r6, r0
  4045de:	dd0a      	ble.n	4045f6 <_dtoa_r+0xe0e>
  4045e0:	930a      	str	r3, [sp, #40]	; 0x28
  4045e2:	f7ff bbaa 	b.w	403d3a <_dtoa_r+0x552>
  4045e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4045e8:	2b02      	cmp	r3, #2
  4045ea:	dc23      	bgt.n	404634 <_dtoa_r+0xe4c>
  4045ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4045ee:	e43b      	b.n	403e68 <_dtoa_r+0x680>
  4045f0:	f04f 0a02 	mov.w	sl, #2
  4045f4:	e4ed      	b.n	403fd2 <_dtoa_r+0x7ea>
  4045f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4045f8:	2b02      	cmp	r3, #2
  4045fa:	dc1b      	bgt.n	404634 <_dtoa_r+0xe4c>
  4045fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4045fe:	e7ef      	b.n	4045e0 <_dtoa_r+0xdf8>
  404600:	2500      	movs	r5, #0
  404602:	6465      	str	r5, [r4, #68]	; 0x44
  404604:	4629      	mov	r1, r5
  404606:	4620      	mov	r0, r4
  404608:	f000 fbf0 	bl	404dec <_Balloc>
  40460c:	f04f 33ff 	mov.w	r3, #4294967295
  404610:	930a      	str	r3, [sp, #40]	; 0x28
  404612:	930f      	str	r3, [sp, #60]	; 0x3c
  404614:	2301      	movs	r3, #1
  404616:	9004      	str	r0, [sp, #16]
  404618:	9525      	str	r5, [sp, #148]	; 0x94
  40461a:	6420      	str	r0, [r4, #64]	; 0x40
  40461c:	930b      	str	r3, [sp, #44]	; 0x2c
  40461e:	f7ff b9dd 	b.w	4039dc <_dtoa_r+0x1f4>
  404622:	2501      	movs	r5, #1
  404624:	f7ff b9a5 	b.w	403972 <_dtoa_r+0x18a>
  404628:	f43f ab69 	beq.w	403cfe <_dtoa_r+0x516>
  40462c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  404630:	f7ff bbf9 	b.w	403e26 <_dtoa_r+0x63e>
  404634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404636:	930a      	str	r3, [sp, #40]	; 0x28
  404638:	e5e5      	b.n	404206 <_dtoa_r+0xa1e>
  40463a:	bf00      	nop

0040463c <__libc_fini_array>:
  40463c:	b538      	push	{r3, r4, r5, lr}
  40463e:	4c0a      	ldr	r4, [pc, #40]	; (404668 <__libc_fini_array+0x2c>)
  404640:	4d0a      	ldr	r5, [pc, #40]	; (40466c <__libc_fini_array+0x30>)
  404642:	1b64      	subs	r4, r4, r5
  404644:	10a4      	asrs	r4, r4, #2
  404646:	d00a      	beq.n	40465e <__libc_fini_array+0x22>
  404648:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40464c:	3b01      	subs	r3, #1
  40464e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  404652:	3c01      	subs	r4, #1
  404654:	f855 3904 	ldr.w	r3, [r5], #-4
  404658:	4798      	blx	r3
  40465a:	2c00      	cmp	r4, #0
  40465c:	d1f9      	bne.n	404652 <__libc_fini_array+0x16>
  40465e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404662:	f002 bed7 	b.w	407414 <_fini>
  404666:	bf00      	nop
  404668:	00407424 	.word	0x00407424
  40466c:	00407420 	.word	0x00407420

00404670 <_localeconv_r>:
  404670:	4a04      	ldr	r2, [pc, #16]	; (404684 <_localeconv_r+0x14>)
  404672:	4b05      	ldr	r3, [pc, #20]	; (404688 <_localeconv_r+0x18>)
  404674:	6812      	ldr	r2, [r2, #0]
  404676:	6b50      	ldr	r0, [r2, #52]	; 0x34
  404678:	2800      	cmp	r0, #0
  40467a:	bf08      	it	eq
  40467c:	4618      	moveq	r0, r3
  40467e:	30f0      	adds	r0, #240	; 0xf0
  404680:	4770      	bx	lr
  404682:	bf00      	nop
  404684:	20400024 	.word	0x20400024
  404688:	20400864 	.word	0x20400864

0040468c <__retarget_lock_acquire_recursive>:
  40468c:	4770      	bx	lr
  40468e:	bf00      	nop

00404690 <__retarget_lock_release_recursive>:
  404690:	4770      	bx	lr
  404692:	bf00      	nop

00404694 <_malloc_r>:
  404694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404698:	f101 060b 	add.w	r6, r1, #11
  40469c:	2e16      	cmp	r6, #22
  40469e:	b083      	sub	sp, #12
  4046a0:	4605      	mov	r5, r0
  4046a2:	f240 809e 	bls.w	4047e2 <_malloc_r+0x14e>
  4046a6:	f036 0607 	bics.w	r6, r6, #7
  4046aa:	f100 80bd 	bmi.w	404828 <_malloc_r+0x194>
  4046ae:	42b1      	cmp	r1, r6
  4046b0:	f200 80ba 	bhi.w	404828 <_malloc_r+0x194>
  4046b4:	f000 fb8e 	bl	404dd4 <__malloc_lock>
  4046b8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4046bc:	f0c0 8293 	bcc.w	404be6 <_malloc_r+0x552>
  4046c0:	0a73      	lsrs	r3, r6, #9
  4046c2:	f000 80b8 	beq.w	404836 <_malloc_r+0x1a2>
  4046c6:	2b04      	cmp	r3, #4
  4046c8:	f200 8179 	bhi.w	4049be <_malloc_r+0x32a>
  4046cc:	09b3      	lsrs	r3, r6, #6
  4046ce:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4046d2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4046d6:	00c3      	lsls	r3, r0, #3
  4046d8:	4fbf      	ldr	r7, [pc, #764]	; (4049d8 <_malloc_r+0x344>)
  4046da:	443b      	add	r3, r7
  4046dc:	f1a3 0108 	sub.w	r1, r3, #8
  4046e0:	685c      	ldr	r4, [r3, #4]
  4046e2:	42a1      	cmp	r1, r4
  4046e4:	d106      	bne.n	4046f4 <_malloc_r+0x60>
  4046e6:	e00c      	b.n	404702 <_malloc_r+0x6e>
  4046e8:	2a00      	cmp	r2, #0
  4046ea:	f280 80aa 	bge.w	404842 <_malloc_r+0x1ae>
  4046ee:	68e4      	ldr	r4, [r4, #12]
  4046f0:	42a1      	cmp	r1, r4
  4046f2:	d006      	beq.n	404702 <_malloc_r+0x6e>
  4046f4:	6863      	ldr	r3, [r4, #4]
  4046f6:	f023 0303 	bic.w	r3, r3, #3
  4046fa:	1b9a      	subs	r2, r3, r6
  4046fc:	2a0f      	cmp	r2, #15
  4046fe:	ddf3      	ble.n	4046e8 <_malloc_r+0x54>
  404700:	4670      	mov	r0, lr
  404702:	693c      	ldr	r4, [r7, #16]
  404704:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4049ec <_malloc_r+0x358>
  404708:	4574      	cmp	r4, lr
  40470a:	f000 81ab 	beq.w	404a64 <_malloc_r+0x3d0>
  40470e:	6863      	ldr	r3, [r4, #4]
  404710:	f023 0303 	bic.w	r3, r3, #3
  404714:	1b9a      	subs	r2, r3, r6
  404716:	2a0f      	cmp	r2, #15
  404718:	f300 8190 	bgt.w	404a3c <_malloc_r+0x3a8>
  40471c:	2a00      	cmp	r2, #0
  40471e:	f8c7 e014 	str.w	lr, [r7, #20]
  404722:	f8c7 e010 	str.w	lr, [r7, #16]
  404726:	f280 809d 	bge.w	404864 <_malloc_r+0x1d0>
  40472a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40472e:	f080 8161 	bcs.w	4049f4 <_malloc_r+0x360>
  404732:	08db      	lsrs	r3, r3, #3
  404734:	f103 0c01 	add.w	ip, r3, #1
  404738:	1099      	asrs	r1, r3, #2
  40473a:	687a      	ldr	r2, [r7, #4]
  40473c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404740:	f8c4 8008 	str.w	r8, [r4, #8]
  404744:	2301      	movs	r3, #1
  404746:	408b      	lsls	r3, r1
  404748:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40474c:	4313      	orrs	r3, r2
  40474e:	3908      	subs	r1, #8
  404750:	60e1      	str	r1, [r4, #12]
  404752:	607b      	str	r3, [r7, #4]
  404754:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404758:	f8c8 400c 	str.w	r4, [r8, #12]
  40475c:	1082      	asrs	r2, r0, #2
  40475e:	2401      	movs	r4, #1
  404760:	4094      	lsls	r4, r2
  404762:	429c      	cmp	r4, r3
  404764:	f200 808b 	bhi.w	40487e <_malloc_r+0x1ea>
  404768:	421c      	tst	r4, r3
  40476a:	d106      	bne.n	40477a <_malloc_r+0xe6>
  40476c:	f020 0003 	bic.w	r0, r0, #3
  404770:	0064      	lsls	r4, r4, #1
  404772:	421c      	tst	r4, r3
  404774:	f100 0004 	add.w	r0, r0, #4
  404778:	d0fa      	beq.n	404770 <_malloc_r+0xdc>
  40477a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40477e:	46cc      	mov	ip, r9
  404780:	4680      	mov	r8, r0
  404782:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404786:	459c      	cmp	ip, r3
  404788:	d107      	bne.n	40479a <_malloc_r+0x106>
  40478a:	e16d      	b.n	404a68 <_malloc_r+0x3d4>
  40478c:	2a00      	cmp	r2, #0
  40478e:	f280 817b 	bge.w	404a88 <_malloc_r+0x3f4>
  404792:	68db      	ldr	r3, [r3, #12]
  404794:	459c      	cmp	ip, r3
  404796:	f000 8167 	beq.w	404a68 <_malloc_r+0x3d4>
  40479a:	6859      	ldr	r1, [r3, #4]
  40479c:	f021 0103 	bic.w	r1, r1, #3
  4047a0:	1b8a      	subs	r2, r1, r6
  4047a2:	2a0f      	cmp	r2, #15
  4047a4:	ddf2      	ble.n	40478c <_malloc_r+0xf8>
  4047a6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4047aa:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4047ae:	9300      	str	r3, [sp, #0]
  4047b0:	199c      	adds	r4, r3, r6
  4047b2:	4628      	mov	r0, r5
  4047b4:	f046 0601 	orr.w	r6, r6, #1
  4047b8:	f042 0501 	orr.w	r5, r2, #1
  4047bc:	605e      	str	r6, [r3, #4]
  4047be:	f8c8 c00c 	str.w	ip, [r8, #12]
  4047c2:	f8cc 8008 	str.w	r8, [ip, #8]
  4047c6:	617c      	str	r4, [r7, #20]
  4047c8:	613c      	str	r4, [r7, #16]
  4047ca:	f8c4 e00c 	str.w	lr, [r4, #12]
  4047ce:	f8c4 e008 	str.w	lr, [r4, #8]
  4047d2:	6065      	str	r5, [r4, #4]
  4047d4:	505a      	str	r2, [r3, r1]
  4047d6:	f000 fb03 	bl	404de0 <__malloc_unlock>
  4047da:	9b00      	ldr	r3, [sp, #0]
  4047dc:	f103 0408 	add.w	r4, r3, #8
  4047e0:	e01e      	b.n	404820 <_malloc_r+0x18c>
  4047e2:	2910      	cmp	r1, #16
  4047e4:	d820      	bhi.n	404828 <_malloc_r+0x194>
  4047e6:	f000 faf5 	bl	404dd4 <__malloc_lock>
  4047ea:	2610      	movs	r6, #16
  4047ec:	2318      	movs	r3, #24
  4047ee:	2002      	movs	r0, #2
  4047f0:	4f79      	ldr	r7, [pc, #484]	; (4049d8 <_malloc_r+0x344>)
  4047f2:	443b      	add	r3, r7
  4047f4:	f1a3 0208 	sub.w	r2, r3, #8
  4047f8:	685c      	ldr	r4, [r3, #4]
  4047fa:	4294      	cmp	r4, r2
  4047fc:	f000 813d 	beq.w	404a7a <_malloc_r+0x3e6>
  404800:	6863      	ldr	r3, [r4, #4]
  404802:	68e1      	ldr	r1, [r4, #12]
  404804:	68a6      	ldr	r6, [r4, #8]
  404806:	f023 0303 	bic.w	r3, r3, #3
  40480a:	4423      	add	r3, r4
  40480c:	4628      	mov	r0, r5
  40480e:	685a      	ldr	r2, [r3, #4]
  404810:	60f1      	str	r1, [r6, #12]
  404812:	f042 0201 	orr.w	r2, r2, #1
  404816:	608e      	str	r6, [r1, #8]
  404818:	605a      	str	r2, [r3, #4]
  40481a:	f000 fae1 	bl	404de0 <__malloc_unlock>
  40481e:	3408      	adds	r4, #8
  404820:	4620      	mov	r0, r4
  404822:	b003      	add	sp, #12
  404824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404828:	2400      	movs	r4, #0
  40482a:	230c      	movs	r3, #12
  40482c:	4620      	mov	r0, r4
  40482e:	602b      	str	r3, [r5, #0]
  404830:	b003      	add	sp, #12
  404832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404836:	2040      	movs	r0, #64	; 0x40
  404838:	f44f 7300 	mov.w	r3, #512	; 0x200
  40483c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404840:	e74a      	b.n	4046d8 <_malloc_r+0x44>
  404842:	4423      	add	r3, r4
  404844:	68e1      	ldr	r1, [r4, #12]
  404846:	685a      	ldr	r2, [r3, #4]
  404848:	68a6      	ldr	r6, [r4, #8]
  40484a:	f042 0201 	orr.w	r2, r2, #1
  40484e:	60f1      	str	r1, [r6, #12]
  404850:	4628      	mov	r0, r5
  404852:	608e      	str	r6, [r1, #8]
  404854:	605a      	str	r2, [r3, #4]
  404856:	f000 fac3 	bl	404de0 <__malloc_unlock>
  40485a:	3408      	adds	r4, #8
  40485c:	4620      	mov	r0, r4
  40485e:	b003      	add	sp, #12
  404860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404864:	4423      	add	r3, r4
  404866:	4628      	mov	r0, r5
  404868:	685a      	ldr	r2, [r3, #4]
  40486a:	f042 0201 	orr.w	r2, r2, #1
  40486e:	605a      	str	r2, [r3, #4]
  404870:	f000 fab6 	bl	404de0 <__malloc_unlock>
  404874:	3408      	adds	r4, #8
  404876:	4620      	mov	r0, r4
  404878:	b003      	add	sp, #12
  40487a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40487e:	68bc      	ldr	r4, [r7, #8]
  404880:	6863      	ldr	r3, [r4, #4]
  404882:	f023 0803 	bic.w	r8, r3, #3
  404886:	45b0      	cmp	r8, r6
  404888:	d304      	bcc.n	404894 <_malloc_r+0x200>
  40488a:	eba8 0306 	sub.w	r3, r8, r6
  40488e:	2b0f      	cmp	r3, #15
  404890:	f300 8085 	bgt.w	40499e <_malloc_r+0x30a>
  404894:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4049f0 <_malloc_r+0x35c>
  404898:	4b50      	ldr	r3, [pc, #320]	; (4049dc <_malloc_r+0x348>)
  40489a:	f8d9 2000 	ldr.w	r2, [r9]
  40489e:	681b      	ldr	r3, [r3, #0]
  4048a0:	3201      	adds	r2, #1
  4048a2:	4433      	add	r3, r6
  4048a4:	eb04 0a08 	add.w	sl, r4, r8
  4048a8:	f000 8155 	beq.w	404b56 <_malloc_r+0x4c2>
  4048ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4048b0:	330f      	adds	r3, #15
  4048b2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4048b6:	f02b 0b0f 	bic.w	fp, fp, #15
  4048ba:	4659      	mov	r1, fp
  4048bc:	4628      	mov	r0, r5
  4048be:	f000 fd8f 	bl	4053e0 <_sbrk_r>
  4048c2:	1c41      	adds	r1, r0, #1
  4048c4:	4602      	mov	r2, r0
  4048c6:	f000 80fc 	beq.w	404ac2 <_malloc_r+0x42e>
  4048ca:	4582      	cmp	sl, r0
  4048cc:	f200 80f7 	bhi.w	404abe <_malloc_r+0x42a>
  4048d0:	4b43      	ldr	r3, [pc, #268]	; (4049e0 <_malloc_r+0x34c>)
  4048d2:	6819      	ldr	r1, [r3, #0]
  4048d4:	4459      	add	r1, fp
  4048d6:	6019      	str	r1, [r3, #0]
  4048d8:	f000 814d 	beq.w	404b76 <_malloc_r+0x4e2>
  4048dc:	f8d9 0000 	ldr.w	r0, [r9]
  4048e0:	3001      	adds	r0, #1
  4048e2:	bf1b      	ittet	ne
  4048e4:	eba2 0a0a 	subne.w	sl, r2, sl
  4048e8:	4451      	addne	r1, sl
  4048ea:	f8c9 2000 	streq.w	r2, [r9]
  4048ee:	6019      	strne	r1, [r3, #0]
  4048f0:	f012 0107 	ands.w	r1, r2, #7
  4048f4:	f000 8115 	beq.w	404b22 <_malloc_r+0x48e>
  4048f8:	f1c1 0008 	rsb	r0, r1, #8
  4048fc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404900:	4402      	add	r2, r0
  404902:	3108      	adds	r1, #8
  404904:	eb02 090b 	add.w	r9, r2, fp
  404908:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40490c:	eba1 0909 	sub.w	r9, r1, r9
  404910:	4649      	mov	r1, r9
  404912:	4628      	mov	r0, r5
  404914:	9301      	str	r3, [sp, #4]
  404916:	9200      	str	r2, [sp, #0]
  404918:	f000 fd62 	bl	4053e0 <_sbrk_r>
  40491c:	1c43      	adds	r3, r0, #1
  40491e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404922:	f000 8143 	beq.w	404bac <_malloc_r+0x518>
  404926:	1a80      	subs	r0, r0, r2
  404928:	4448      	add	r0, r9
  40492a:	f040 0001 	orr.w	r0, r0, #1
  40492e:	6819      	ldr	r1, [r3, #0]
  404930:	60ba      	str	r2, [r7, #8]
  404932:	4449      	add	r1, r9
  404934:	42bc      	cmp	r4, r7
  404936:	6050      	str	r0, [r2, #4]
  404938:	6019      	str	r1, [r3, #0]
  40493a:	d017      	beq.n	40496c <_malloc_r+0x2d8>
  40493c:	f1b8 0f0f 	cmp.w	r8, #15
  404940:	f240 80fb 	bls.w	404b3a <_malloc_r+0x4a6>
  404944:	6860      	ldr	r0, [r4, #4]
  404946:	f1a8 020c 	sub.w	r2, r8, #12
  40494a:	f022 0207 	bic.w	r2, r2, #7
  40494e:	eb04 0e02 	add.w	lr, r4, r2
  404952:	f000 0001 	and.w	r0, r0, #1
  404956:	f04f 0c05 	mov.w	ip, #5
  40495a:	4310      	orrs	r0, r2
  40495c:	2a0f      	cmp	r2, #15
  40495e:	6060      	str	r0, [r4, #4]
  404960:	f8ce c004 	str.w	ip, [lr, #4]
  404964:	f8ce c008 	str.w	ip, [lr, #8]
  404968:	f200 8117 	bhi.w	404b9a <_malloc_r+0x506>
  40496c:	4b1d      	ldr	r3, [pc, #116]	; (4049e4 <_malloc_r+0x350>)
  40496e:	68bc      	ldr	r4, [r7, #8]
  404970:	681a      	ldr	r2, [r3, #0]
  404972:	4291      	cmp	r1, r2
  404974:	bf88      	it	hi
  404976:	6019      	strhi	r1, [r3, #0]
  404978:	4b1b      	ldr	r3, [pc, #108]	; (4049e8 <_malloc_r+0x354>)
  40497a:	681a      	ldr	r2, [r3, #0]
  40497c:	4291      	cmp	r1, r2
  40497e:	6862      	ldr	r2, [r4, #4]
  404980:	bf88      	it	hi
  404982:	6019      	strhi	r1, [r3, #0]
  404984:	f022 0203 	bic.w	r2, r2, #3
  404988:	4296      	cmp	r6, r2
  40498a:	eba2 0306 	sub.w	r3, r2, r6
  40498e:	d801      	bhi.n	404994 <_malloc_r+0x300>
  404990:	2b0f      	cmp	r3, #15
  404992:	dc04      	bgt.n	40499e <_malloc_r+0x30a>
  404994:	4628      	mov	r0, r5
  404996:	f000 fa23 	bl	404de0 <__malloc_unlock>
  40499a:	2400      	movs	r4, #0
  40499c:	e740      	b.n	404820 <_malloc_r+0x18c>
  40499e:	19a2      	adds	r2, r4, r6
  4049a0:	f043 0301 	orr.w	r3, r3, #1
  4049a4:	f046 0601 	orr.w	r6, r6, #1
  4049a8:	6066      	str	r6, [r4, #4]
  4049aa:	4628      	mov	r0, r5
  4049ac:	60ba      	str	r2, [r7, #8]
  4049ae:	6053      	str	r3, [r2, #4]
  4049b0:	f000 fa16 	bl	404de0 <__malloc_unlock>
  4049b4:	3408      	adds	r4, #8
  4049b6:	4620      	mov	r0, r4
  4049b8:	b003      	add	sp, #12
  4049ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049be:	2b14      	cmp	r3, #20
  4049c0:	d971      	bls.n	404aa6 <_malloc_r+0x412>
  4049c2:	2b54      	cmp	r3, #84	; 0x54
  4049c4:	f200 80a3 	bhi.w	404b0e <_malloc_r+0x47a>
  4049c8:	0b33      	lsrs	r3, r6, #12
  4049ca:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4049ce:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4049d2:	00c3      	lsls	r3, r0, #3
  4049d4:	e680      	b.n	4046d8 <_malloc_r+0x44>
  4049d6:	bf00      	nop
  4049d8:	20400454 	.word	0x20400454
  4049dc:	20400cac 	.word	0x20400cac
  4049e0:	20400c7c 	.word	0x20400c7c
  4049e4:	20400ca4 	.word	0x20400ca4
  4049e8:	20400ca8 	.word	0x20400ca8
  4049ec:	2040045c 	.word	0x2040045c
  4049f0:	2040085c 	.word	0x2040085c
  4049f4:	0a5a      	lsrs	r2, r3, #9
  4049f6:	2a04      	cmp	r2, #4
  4049f8:	d95b      	bls.n	404ab2 <_malloc_r+0x41e>
  4049fa:	2a14      	cmp	r2, #20
  4049fc:	f200 80ae 	bhi.w	404b5c <_malloc_r+0x4c8>
  404a00:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404a04:	00c9      	lsls	r1, r1, #3
  404a06:	325b      	adds	r2, #91	; 0x5b
  404a08:	eb07 0c01 	add.w	ip, r7, r1
  404a0c:	5879      	ldr	r1, [r7, r1]
  404a0e:	f1ac 0c08 	sub.w	ip, ip, #8
  404a12:	458c      	cmp	ip, r1
  404a14:	f000 8088 	beq.w	404b28 <_malloc_r+0x494>
  404a18:	684a      	ldr	r2, [r1, #4]
  404a1a:	f022 0203 	bic.w	r2, r2, #3
  404a1e:	4293      	cmp	r3, r2
  404a20:	d273      	bcs.n	404b0a <_malloc_r+0x476>
  404a22:	6889      	ldr	r1, [r1, #8]
  404a24:	458c      	cmp	ip, r1
  404a26:	d1f7      	bne.n	404a18 <_malloc_r+0x384>
  404a28:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404a2c:	687b      	ldr	r3, [r7, #4]
  404a2e:	60e2      	str	r2, [r4, #12]
  404a30:	f8c4 c008 	str.w	ip, [r4, #8]
  404a34:	6094      	str	r4, [r2, #8]
  404a36:	f8cc 400c 	str.w	r4, [ip, #12]
  404a3a:	e68f      	b.n	40475c <_malloc_r+0xc8>
  404a3c:	19a1      	adds	r1, r4, r6
  404a3e:	f046 0c01 	orr.w	ip, r6, #1
  404a42:	f042 0601 	orr.w	r6, r2, #1
  404a46:	f8c4 c004 	str.w	ip, [r4, #4]
  404a4a:	4628      	mov	r0, r5
  404a4c:	6179      	str	r1, [r7, #20]
  404a4e:	6139      	str	r1, [r7, #16]
  404a50:	f8c1 e00c 	str.w	lr, [r1, #12]
  404a54:	f8c1 e008 	str.w	lr, [r1, #8]
  404a58:	604e      	str	r6, [r1, #4]
  404a5a:	50e2      	str	r2, [r4, r3]
  404a5c:	f000 f9c0 	bl	404de0 <__malloc_unlock>
  404a60:	3408      	adds	r4, #8
  404a62:	e6dd      	b.n	404820 <_malloc_r+0x18c>
  404a64:	687b      	ldr	r3, [r7, #4]
  404a66:	e679      	b.n	40475c <_malloc_r+0xc8>
  404a68:	f108 0801 	add.w	r8, r8, #1
  404a6c:	f018 0f03 	tst.w	r8, #3
  404a70:	f10c 0c08 	add.w	ip, ip, #8
  404a74:	f47f ae85 	bne.w	404782 <_malloc_r+0xee>
  404a78:	e02d      	b.n	404ad6 <_malloc_r+0x442>
  404a7a:	68dc      	ldr	r4, [r3, #12]
  404a7c:	42a3      	cmp	r3, r4
  404a7e:	bf08      	it	eq
  404a80:	3002      	addeq	r0, #2
  404a82:	f43f ae3e 	beq.w	404702 <_malloc_r+0x6e>
  404a86:	e6bb      	b.n	404800 <_malloc_r+0x16c>
  404a88:	4419      	add	r1, r3
  404a8a:	461c      	mov	r4, r3
  404a8c:	684a      	ldr	r2, [r1, #4]
  404a8e:	68db      	ldr	r3, [r3, #12]
  404a90:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404a94:	f042 0201 	orr.w	r2, r2, #1
  404a98:	604a      	str	r2, [r1, #4]
  404a9a:	4628      	mov	r0, r5
  404a9c:	60f3      	str	r3, [r6, #12]
  404a9e:	609e      	str	r6, [r3, #8]
  404aa0:	f000 f99e 	bl	404de0 <__malloc_unlock>
  404aa4:	e6bc      	b.n	404820 <_malloc_r+0x18c>
  404aa6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404aaa:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404aae:	00c3      	lsls	r3, r0, #3
  404ab0:	e612      	b.n	4046d8 <_malloc_r+0x44>
  404ab2:	099a      	lsrs	r2, r3, #6
  404ab4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404ab8:	00c9      	lsls	r1, r1, #3
  404aba:	3238      	adds	r2, #56	; 0x38
  404abc:	e7a4      	b.n	404a08 <_malloc_r+0x374>
  404abe:	42bc      	cmp	r4, r7
  404ac0:	d054      	beq.n	404b6c <_malloc_r+0x4d8>
  404ac2:	68bc      	ldr	r4, [r7, #8]
  404ac4:	6862      	ldr	r2, [r4, #4]
  404ac6:	f022 0203 	bic.w	r2, r2, #3
  404aca:	e75d      	b.n	404988 <_malloc_r+0x2f4>
  404acc:	f859 3908 	ldr.w	r3, [r9], #-8
  404ad0:	4599      	cmp	r9, r3
  404ad2:	f040 8086 	bne.w	404be2 <_malloc_r+0x54e>
  404ad6:	f010 0f03 	tst.w	r0, #3
  404ada:	f100 30ff 	add.w	r0, r0, #4294967295
  404ade:	d1f5      	bne.n	404acc <_malloc_r+0x438>
  404ae0:	687b      	ldr	r3, [r7, #4]
  404ae2:	ea23 0304 	bic.w	r3, r3, r4
  404ae6:	607b      	str	r3, [r7, #4]
  404ae8:	0064      	lsls	r4, r4, #1
  404aea:	429c      	cmp	r4, r3
  404aec:	f63f aec7 	bhi.w	40487e <_malloc_r+0x1ea>
  404af0:	2c00      	cmp	r4, #0
  404af2:	f43f aec4 	beq.w	40487e <_malloc_r+0x1ea>
  404af6:	421c      	tst	r4, r3
  404af8:	4640      	mov	r0, r8
  404afa:	f47f ae3e 	bne.w	40477a <_malloc_r+0xe6>
  404afe:	0064      	lsls	r4, r4, #1
  404b00:	421c      	tst	r4, r3
  404b02:	f100 0004 	add.w	r0, r0, #4
  404b06:	d0fa      	beq.n	404afe <_malloc_r+0x46a>
  404b08:	e637      	b.n	40477a <_malloc_r+0xe6>
  404b0a:	468c      	mov	ip, r1
  404b0c:	e78c      	b.n	404a28 <_malloc_r+0x394>
  404b0e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404b12:	d815      	bhi.n	404b40 <_malloc_r+0x4ac>
  404b14:	0bf3      	lsrs	r3, r6, #15
  404b16:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404b1a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404b1e:	00c3      	lsls	r3, r0, #3
  404b20:	e5da      	b.n	4046d8 <_malloc_r+0x44>
  404b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404b26:	e6ed      	b.n	404904 <_malloc_r+0x270>
  404b28:	687b      	ldr	r3, [r7, #4]
  404b2a:	1092      	asrs	r2, r2, #2
  404b2c:	2101      	movs	r1, #1
  404b2e:	fa01 f202 	lsl.w	r2, r1, r2
  404b32:	4313      	orrs	r3, r2
  404b34:	607b      	str	r3, [r7, #4]
  404b36:	4662      	mov	r2, ip
  404b38:	e779      	b.n	404a2e <_malloc_r+0x39a>
  404b3a:	2301      	movs	r3, #1
  404b3c:	6053      	str	r3, [r2, #4]
  404b3e:	e729      	b.n	404994 <_malloc_r+0x300>
  404b40:	f240 5254 	movw	r2, #1364	; 0x554
  404b44:	4293      	cmp	r3, r2
  404b46:	d822      	bhi.n	404b8e <_malloc_r+0x4fa>
  404b48:	0cb3      	lsrs	r3, r6, #18
  404b4a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404b4e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404b52:	00c3      	lsls	r3, r0, #3
  404b54:	e5c0      	b.n	4046d8 <_malloc_r+0x44>
  404b56:	f103 0b10 	add.w	fp, r3, #16
  404b5a:	e6ae      	b.n	4048ba <_malloc_r+0x226>
  404b5c:	2a54      	cmp	r2, #84	; 0x54
  404b5e:	d829      	bhi.n	404bb4 <_malloc_r+0x520>
  404b60:	0b1a      	lsrs	r2, r3, #12
  404b62:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404b66:	00c9      	lsls	r1, r1, #3
  404b68:	326e      	adds	r2, #110	; 0x6e
  404b6a:	e74d      	b.n	404a08 <_malloc_r+0x374>
  404b6c:	4b20      	ldr	r3, [pc, #128]	; (404bf0 <_malloc_r+0x55c>)
  404b6e:	6819      	ldr	r1, [r3, #0]
  404b70:	4459      	add	r1, fp
  404b72:	6019      	str	r1, [r3, #0]
  404b74:	e6b2      	b.n	4048dc <_malloc_r+0x248>
  404b76:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404b7a:	2800      	cmp	r0, #0
  404b7c:	f47f aeae 	bne.w	4048dc <_malloc_r+0x248>
  404b80:	eb08 030b 	add.w	r3, r8, fp
  404b84:	68ba      	ldr	r2, [r7, #8]
  404b86:	f043 0301 	orr.w	r3, r3, #1
  404b8a:	6053      	str	r3, [r2, #4]
  404b8c:	e6ee      	b.n	40496c <_malloc_r+0x2d8>
  404b8e:	207f      	movs	r0, #127	; 0x7f
  404b90:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404b94:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404b98:	e59e      	b.n	4046d8 <_malloc_r+0x44>
  404b9a:	f104 0108 	add.w	r1, r4, #8
  404b9e:	4628      	mov	r0, r5
  404ba0:	9300      	str	r3, [sp, #0]
  404ba2:	f000 fe1b 	bl	4057dc <_free_r>
  404ba6:	9b00      	ldr	r3, [sp, #0]
  404ba8:	6819      	ldr	r1, [r3, #0]
  404baa:	e6df      	b.n	40496c <_malloc_r+0x2d8>
  404bac:	2001      	movs	r0, #1
  404bae:	f04f 0900 	mov.w	r9, #0
  404bb2:	e6bc      	b.n	40492e <_malloc_r+0x29a>
  404bb4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404bb8:	d805      	bhi.n	404bc6 <_malloc_r+0x532>
  404bba:	0bda      	lsrs	r2, r3, #15
  404bbc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404bc0:	00c9      	lsls	r1, r1, #3
  404bc2:	3277      	adds	r2, #119	; 0x77
  404bc4:	e720      	b.n	404a08 <_malloc_r+0x374>
  404bc6:	f240 5154 	movw	r1, #1364	; 0x554
  404bca:	428a      	cmp	r2, r1
  404bcc:	d805      	bhi.n	404bda <_malloc_r+0x546>
  404bce:	0c9a      	lsrs	r2, r3, #18
  404bd0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404bd4:	00c9      	lsls	r1, r1, #3
  404bd6:	327c      	adds	r2, #124	; 0x7c
  404bd8:	e716      	b.n	404a08 <_malloc_r+0x374>
  404bda:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404bde:	227e      	movs	r2, #126	; 0x7e
  404be0:	e712      	b.n	404a08 <_malloc_r+0x374>
  404be2:	687b      	ldr	r3, [r7, #4]
  404be4:	e780      	b.n	404ae8 <_malloc_r+0x454>
  404be6:	08f0      	lsrs	r0, r6, #3
  404be8:	f106 0308 	add.w	r3, r6, #8
  404bec:	e600      	b.n	4047f0 <_malloc_r+0x15c>
  404bee:	bf00      	nop
  404bf0:	20400c7c 	.word	0x20400c7c
	...

00404c00 <memchr>:
  404c00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404c04:	2a10      	cmp	r2, #16
  404c06:	db2b      	blt.n	404c60 <memchr+0x60>
  404c08:	f010 0f07 	tst.w	r0, #7
  404c0c:	d008      	beq.n	404c20 <memchr+0x20>
  404c0e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404c12:	3a01      	subs	r2, #1
  404c14:	428b      	cmp	r3, r1
  404c16:	d02d      	beq.n	404c74 <memchr+0x74>
  404c18:	f010 0f07 	tst.w	r0, #7
  404c1c:	b342      	cbz	r2, 404c70 <memchr+0x70>
  404c1e:	d1f6      	bne.n	404c0e <memchr+0xe>
  404c20:	b4f0      	push	{r4, r5, r6, r7}
  404c22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404c26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404c2a:	f022 0407 	bic.w	r4, r2, #7
  404c2e:	f07f 0700 	mvns.w	r7, #0
  404c32:	2300      	movs	r3, #0
  404c34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404c38:	3c08      	subs	r4, #8
  404c3a:	ea85 0501 	eor.w	r5, r5, r1
  404c3e:	ea86 0601 	eor.w	r6, r6, r1
  404c42:	fa85 f547 	uadd8	r5, r5, r7
  404c46:	faa3 f587 	sel	r5, r3, r7
  404c4a:	fa86 f647 	uadd8	r6, r6, r7
  404c4e:	faa5 f687 	sel	r6, r5, r7
  404c52:	b98e      	cbnz	r6, 404c78 <memchr+0x78>
  404c54:	d1ee      	bne.n	404c34 <memchr+0x34>
  404c56:	bcf0      	pop	{r4, r5, r6, r7}
  404c58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404c5c:	f002 0207 	and.w	r2, r2, #7
  404c60:	b132      	cbz	r2, 404c70 <memchr+0x70>
  404c62:	f810 3b01 	ldrb.w	r3, [r0], #1
  404c66:	3a01      	subs	r2, #1
  404c68:	ea83 0301 	eor.w	r3, r3, r1
  404c6c:	b113      	cbz	r3, 404c74 <memchr+0x74>
  404c6e:	d1f8      	bne.n	404c62 <memchr+0x62>
  404c70:	2000      	movs	r0, #0
  404c72:	4770      	bx	lr
  404c74:	3801      	subs	r0, #1
  404c76:	4770      	bx	lr
  404c78:	2d00      	cmp	r5, #0
  404c7a:	bf06      	itte	eq
  404c7c:	4635      	moveq	r5, r6
  404c7e:	3803      	subeq	r0, #3
  404c80:	3807      	subne	r0, #7
  404c82:	f015 0f01 	tst.w	r5, #1
  404c86:	d107      	bne.n	404c98 <memchr+0x98>
  404c88:	3001      	adds	r0, #1
  404c8a:	f415 7f80 	tst.w	r5, #256	; 0x100
  404c8e:	bf02      	ittt	eq
  404c90:	3001      	addeq	r0, #1
  404c92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404c96:	3001      	addeq	r0, #1
  404c98:	bcf0      	pop	{r4, r5, r6, r7}
  404c9a:	3801      	subs	r0, #1
  404c9c:	4770      	bx	lr
  404c9e:	bf00      	nop

00404ca0 <memcpy>:
  404ca0:	4684      	mov	ip, r0
  404ca2:	ea41 0300 	orr.w	r3, r1, r0
  404ca6:	f013 0303 	ands.w	r3, r3, #3
  404caa:	d16d      	bne.n	404d88 <memcpy+0xe8>
  404cac:	3a40      	subs	r2, #64	; 0x40
  404cae:	d341      	bcc.n	404d34 <memcpy+0x94>
  404cb0:	f851 3b04 	ldr.w	r3, [r1], #4
  404cb4:	f840 3b04 	str.w	r3, [r0], #4
  404cb8:	f851 3b04 	ldr.w	r3, [r1], #4
  404cbc:	f840 3b04 	str.w	r3, [r0], #4
  404cc0:	f851 3b04 	ldr.w	r3, [r1], #4
  404cc4:	f840 3b04 	str.w	r3, [r0], #4
  404cc8:	f851 3b04 	ldr.w	r3, [r1], #4
  404ccc:	f840 3b04 	str.w	r3, [r0], #4
  404cd0:	f851 3b04 	ldr.w	r3, [r1], #4
  404cd4:	f840 3b04 	str.w	r3, [r0], #4
  404cd8:	f851 3b04 	ldr.w	r3, [r1], #4
  404cdc:	f840 3b04 	str.w	r3, [r0], #4
  404ce0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ce4:	f840 3b04 	str.w	r3, [r0], #4
  404ce8:	f851 3b04 	ldr.w	r3, [r1], #4
  404cec:	f840 3b04 	str.w	r3, [r0], #4
  404cf0:	f851 3b04 	ldr.w	r3, [r1], #4
  404cf4:	f840 3b04 	str.w	r3, [r0], #4
  404cf8:	f851 3b04 	ldr.w	r3, [r1], #4
  404cfc:	f840 3b04 	str.w	r3, [r0], #4
  404d00:	f851 3b04 	ldr.w	r3, [r1], #4
  404d04:	f840 3b04 	str.w	r3, [r0], #4
  404d08:	f851 3b04 	ldr.w	r3, [r1], #4
  404d0c:	f840 3b04 	str.w	r3, [r0], #4
  404d10:	f851 3b04 	ldr.w	r3, [r1], #4
  404d14:	f840 3b04 	str.w	r3, [r0], #4
  404d18:	f851 3b04 	ldr.w	r3, [r1], #4
  404d1c:	f840 3b04 	str.w	r3, [r0], #4
  404d20:	f851 3b04 	ldr.w	r3, [r1], #4
  404d24:	f840 3b04 	str.w	r3, [r0], #4
  404d28:	f851 3b04 	ldr.w	r3, [r1], #4
  404d2c:	f840 3b04 	str.w	r3, [r0], #4
  404d30:	3a40      	subs	r2, #64	; 0x40
  404d32:	d2bd      	bcs.n	404cb0 <memcpy+0x10>
  404d34:	3230      	adds	r2, #48	; 0x30
  404d36:	d311      	bcc.n	404d5c <memcpy+0xbc>
  404d38:	f851 3b04 	ldr.w	r3, [r1], #4
  404d3c:	f840 3b04 	str.w	r3, [r0], #4
  404d40:	f851 3b04 	ldr.w	r3, [r1], #4
  404d44:	f840 3b04 	str.w	r3, [r0], #4
  404d48:	f851 3b04 	ldr.w	r3, [r1], #4
  404d4c:	f840 3b04 	str.w	r3, [r0], #4
  404d50:	f851 3b04 	ldr.w	r3, [r1], #4
  404d54:	f840 3b04 	str.w	r3, [r0], #4
  404d58:	3a10      	subs	r2, #16
  404d5a:	d2ed      	bcs.n	404d38 <memcpy+0x98>
  404d5c:	320c      	adds	r2, #12
  404d5e:	d305      	bcc.n	404d6c <memcpy+0xcc>
  404d60:	f851 3b04 	ldr.w	r3, [r1], #4
  404d64:	f840 3b04 	str.w	r3, [r0], #4
  404d68:	3a04      	subs	r2, #4
  404d6a:	d2f9      	bcs.n	404d60 <memcpy+0xc0>
  404d6c:	3204      	adds	r2, #4
  404d6e:	d008      	beq.n	404d82 <memcpy+0xe2>
  404d70:	07d2      	lsls	r2, r2, #31
  404d72:	bf1c      	itt	ne
  404d74:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404d78:	f800 3b01 	strbne.w	r3, [r0], #1
  404d7c:	d301      	bcc.n	404d82 <memcpy+0xe2>
  404d7e:	880b      	ldrh	r3, [r1, #0]
  404d80:	8003      	strh	r3, [r0, #0]
  404d82:	4660      	mov	r0, ip
  404d84:	4770      	bx	lr
  404d86:	bf00      	nop
  404d88:	2a08      	cmp	r2, #8
  404d8a:	d313      	bcc.n	404db4 <memcpy+0x114>
  404d8c:	078b      	lsls	r3, r1, #30
  404d8e:	d08d      	beq.n	404cac <memcpy+0xc>
  404d90:	f010 0303 	ands.w	r3, r0, #3
  404d94:	d08a      	beq.n	404cac <memcpy+0xc>
  404d96:	f1c3 0304 	rsb	r3, r3, #4
  404d9a:	1ad2      	subs	r2, r2, r3
  404d9c:	07db      	lsls	r3, r3, #31
  404d9e:	bf1c      	itt	ne
  404da0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404da4:	f800 3b01 	strbne.w	r3, [r0], #1
  404da8:	d380      	bcc.n	404cac <memcpy+0xc>
  404daa:	f831 3b02 	ldrh.w	r3, [r1], #2
  404dae:	f820 3b02 	strh.w	r3, [r0], #2
  404db2:	e77b      	b.n	404cac <memcpy+0xc>
  404db4:	3a04      	subs	r2, #4
  404db6:	d3d9      	bcc.n	404d6c <memcpy+0xcc>
  404db8:	3a01      	subs	r2, #1
  404dba:	f811 3b01 	ldrb.w	r3, [r1], #1
  404dbe:	f800 3b01 	strb.w	r3, [r0], #1
  404dc2:	d2f9      	bcs.n	404db8 <memcpy+0x118>
  404dc4:	780b      	ldrb	r3, [r1, #0]
  404dc6:	7003      	strb	r3, [r0, #0]
  404dc8:	784b      	ldrb	r3, [r1, #1]
  404dca:	7043      	strb	r3, [r0, #1]
  404dcc:	788b      	ldrb	r3, [r1, #2]
  404dce:	7083      	strb	r3, [r0, #2]
  404dd0:	4660      	mov	r0, ip
  404dd2:	4770      	bx	lr

00404dd4 <__malloc_lock>:
  404dd4:	4801      	ldr	r0, [pc, #4]	; (404ddc <__malloc_lock+0x8>)
  404dd6:	f7ff bc59 	b.w	40468c <__retarget_lock_acquire_recursive>
  404dda:	bf00      	nop
  404ddc:	20400cc0 	.word	0x20400cc0

00404de0 <__malloc_unlock>:
  404de0:	4801      	ldr	r0, [pc, #4]	; (404de8 <__malloc_unlock+0x8>)
  404de2:	f7ff bc55 	b.w	404690 <__retarget_lock_release_recursive>
  404de6:	bf00      	nop
  404de8:	20400cc0 	.word	0x20400cc0

00404dec <_Balloc>:
  404dec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  404dee:	b570      	push	{r4, r5, r6, lr}
  404df0:	4605      	mov	r5, r0
  404df2:	460c      	mov	r4, r1
  404df4:	b14b      	cbz	r3, 404e0a <_Balloc+0x1e>
  404df6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  404dfa:	b180      	cbz	r0, 404e1e <_Balloc+0x32>
  404dfc:	6802      	ldr	r2, [r0, #0]
  404dfe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  404e02:	2300      	movs	r3, #0
  404e04:	6103      	str	r3, [r0, #16]
  404e06:	60c3      	str	r3, [r0, #12]
  404e08:	bd70      	pop	{r4, r5, r6, pc}
  404e0a:	2221      	movs	r2, #33	; 0x21
  404e0c:	2104      	movs	r1, #4
  404e0e:	f000 fc65 	bl	4056dc <_calloc_r>
  404e12:	64e8      	str	r0, [r5, #76]	; 0x4c
  404e14:	4603      	mov	r3, r0
  404e16:	2800      	cmp	r0, #0
  404e18:	d1ed      	bne.n	404df6 <_Balloc+0xa>
  404e1a:	2000      	movs	r0, #0
  404e1c:	bd70      	pop	{r4, r5, r6, pc}
  404e1e:	2101      	movs	r1, #1
  404e20:	fa01 f604 	lsl.w	r6, r1, r4
  404e24:	1d72      	adds	r2, r6, #5
  404e26:	4628      	mov	r0, r5
  404e28:	0092      	lsls	r2, r2, #2
  404e2a:	f000 fc57 	bl	4056dc <_calloc_r>
  404e2e:	2800      	cmp	r0, #0
  404e30:	d0f3      	beq.n	404e1a <_Balloc+0x2e>
  404e32:	6044      	str	r4, [r0, #4]
  404e34:	6086      	str	r6, [r0, #8]
  404e36:	e7e4      	b.n	404e02 <_Balloc+0x16>

00404e38 <_Bfree>:
  404e38:	b131      	cbz	r1, 404e48 <_Bfree+0x10>
  404e3a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  404e3c:	684a      	ldr	r2, [r1, #4]
  404e3e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  404e42:	6008      	str	r0, [r1, #0]
  404e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  404e48:	4770      	bx	lr
  404e4a:	bf00      	nop

00404e4c <__multadd>:
  404e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  404e4e:	690c      	ldr	r4, [r1, #16]
  404e50:	b083      	sub	sp, #12
  404e52:	460d      	mov	r5, r1
  404e54:	4606      	mov	r6, r0
  404e56:	f101 0e14 	add.w	lr, r1, #20
  404e5a:	2700      	movs	r7, #0
  404e5c:	f8de 0000 	ldr.w	r0, [lr]
  404e60:	b281      	uxth	r1, r0
  404e62:	fb02 3301 	mla	r3, r2, r1, r3
  404e66:	0c01      	lsrs	r1, r0, #16
  404e68:	0c18      	lsrs	r0, r3, #16
  404e6a:	fb02 0101 	mla	r1, r2, r1, r0
  404e6e:	b29b      	uxth	r3, r3
  404e70:	3701      	adds	r7, #1
  404e72:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  404e76:	42bc      	cmp	r4, r7
  404e78:	f84e 3b04 	str.w	r3, [lr], #4
  404e7c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  404e80:	dcec      	bgt.n	404e5c <__multadd+0x10>
  404e82:	b13b      	cbz	r3, 404e94 <__multadd+0x48>
  404e84:	68aa      	ldr	r2, [r5, #8]
  404e86:	4294      	cmp	r4, r2
  404e88:	da07      	bge.n	404e9a <__multadd+0x4e>
  404e8a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  404e8e:	3401      	adds	r4, #1
  404e90:	6153      	str	r3, [r2, #20]
  404e92:	612c      	str	r4, [r5, #16]
  404e94:	4628      	mov	r0, r5
  404e96:	b003      	add	sp, #12
  404e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404e9a:	6869      	ldr	r1, [r5, #4]
  404e9c:	9301      	str	r3, [sp, #4]
  404e9e:	3101      	adds	r1, #1
  404ea0:	4630      	mov	r0, r6
  404ea2:	f7ff ffa3 	bl	404dec <_Balloc>
  404ea6:	692a      	ldr	r2, [r5, #16]
  404ea8:	3202      	adds	r2, #2
  404eaa:	f105 010c 	add.w	r1, r5, #12
  404eae:	4607      	mov	r7, r0
  404eb0:	0092      	lsls	r2, r2, #2
  404eb2:	300c      	adds	r0, #12
  404eb4:	f7ff fef4 	bl	404ca0 <memcpy>
  404eb8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  404eba:	6869      	ldr	r1, [r5, #4]
  404ebc:	9b01      	ldr	r3, [sp, #4]
  404ebe:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  404ec2:	6028      	str	r0, [r5, #0]
  404ec4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  404ec8:	463d      	mov	r5, r7
  404eca:	e7de      	b.n	404e8a <__multadd+0x3e>

00404ecc <__hi0bits>:
  404ecc:	0c02      	lsrs	r2, r0, #16
  404ece:	0412      	lsls	r2, r2, #16
  404ed0:	4603      	mov	r3, r0
  404ed2:	b9b2      	cbnz	r2, 404f02 <__hi0bits+0x36>
  404ed4:	0403      	lsls	r3, r0, #16
  404ed6:	2010      	movs	r0, #16
  404ed8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  404edc:	bf04      	itt	eq
  404ede:	021b      	lsleq	r3, r3, #8
  404ee0:	3008      	addeq	r0, #8
  404ee2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  404ee6:	bf04      	itt	eq
  404ee8:	011b      	lsleq	r3, r3, #4
  404eea:	3004      	addeq	r0, #4
  404eec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  404ef0:	bf04      	itt	eq
  404ef2:	009b      	lsleq	r3, r3, #2
  404ef4:	3002      	addeq	r0, #2
  404ef6:	2b00      	cmp	r3, #0
  404ef8:	db02      	blt.n	404f00 <__hi0bits+0x34>
  404efa:	005b      	lsls	r3, r3, #1
  404efc:	d403      	bmi.n	404f06 <__hi0bits+0x3a>
  404efe:	2020      	movs	r0, #32
  404f00:	4770      	bx	lr
  404f02:	2000      	movs	r0, #0
  404f04:	e7e8      	b.n	404ed8 <__hi0bits+0xc>
  404f06:	3001      	adds	r0, #1
  404f08:	4770      	bx	lr
  404f0a:	bf00      	nop

00404f0c <__lo0bits>:
  404f0c:	6803      	ldr	r3, [r0, #0]
  404f0e:	f013 0207 	ands.w	r2, r3, #7
  404f12:	4601      	mov	r1, r0
  404f14:	d007      	beq.n	404f26 <__lo0bits+0x1a>
  404f16:	07da      	lsls	r2, r3, #31
  404f18:	d421      	bmi.n	404f5e <__lo0bits+0x52>
  404f1a:	0798      	lsls	r0, r3, #30
  404f1c:	d421      	bmi.n	404f62 <__lo0bits+0x56>
  404f1e:	089b      	lsrs	r3, r3, #2
  404f20:	600b      	str	r3, [r1, #0]
  404f22:	2002      	movs	r0, #2
  404f24:	4770      	bx	lr
  404f26:	b298      	uxth	r0, r3
  404f28:	b198      	cbz	r0, 404f52 <__lo0bits+0x46>
  404f2a:	4610      	mov	r0, r2
  404f2c:	f013 0fff 	tst.w	r3, #255	; 0xff
  404f30:	bf04      	itt	eq
  404f32:	0a1b      	lsreq	r3, r3, #8
  404f34:	3008      	addeq	r0, #8
  404f36:	071a      	lsls	r2, r3, #28
  404f38:	bf04      	itt	eq
  404f3a:	091b      	lsreq	r3, r3, #4
  404f3c:	3004      	addeq	r0, #4
  404f3e:	079a      	lsls	r2, r3, #30
  404f40:	bf04      	itt	eq
  404f42:	089b      	lsreq	r3, r3, #2
  404f44:	3002      	addeq	r0, #2
  404f46:	07da      	lsls	r2, r3, #31
  404f48:	d407      	bmi.n	404f5a <__lo0bits+0x4e>
  404f4a:	085b      	lsrs	r3, r3, #1
  404f4c:	d104      	bne.n	404f58 <__lo0bits+0x4c>
  404f4e:	2020      	movs	r0, #32
  404f50:	4770      	bx	lr
  404f52:	0c1b      	lsrs	r3, r3, #16
  404f54:	2010      	movs	r0, #16
  404f56:	e7e9      	b.n	404f2c <__lo0bits+0x20>
  404f58:	3001      	adds	r0, #1
  404f5a:	600b      	str	r3, [r1, #0]
  404f5c:	4770      	bx	lr
  404f5e:	2000      	movs	r0, #0
  404f60:	4770      	bx	lr
  404f62:	085b      	lsrs	r3, r3, #1
  404f64:	600b      	str	r3, [r1, #0]
  404f66:	2001      	movs	r0, #1
  404f68:	4770      	bx	lr
  404f6a:	bf00      	nop

00404f6c <__i2b>:
  404f6c:	b510      	push	{r4, lr}
  404f6e:	460c      	mov	r4, r1
  404f70:	2101      	movs	r1, #1
  404f72:	f7ff ff3b 	bl	404dec <_Balloc>
  404f76:	2201      	movs	r2, #1
  404f78:	6144      	str	r4, [r0, #20]
  404f7a:	6102      	str	r2, [r0, #16]
  404f7c:	bd10      	pop	{r4, pc}
  404f7e:	bf00      	nop

00404f80 <__multiply>:
  404f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404f84:	690c      	ldr	r4, [r1, #16]
  404f86:	6915      	ldr	r5, [r2, #16]
  404f88:	42ac      	cmp	r4, r5
  404f8a:	b083      	sub	sp, #12
  404f8c:	468b      	mov	fp, r1
  404f8e:	4616      	mov	r6, r2
  404f90:	da04      	bge.n	404f9c <__multiply+0x1c>
  404f92:	4622      	mov	r2, r4
  404f94:	46b3      	mov	fp, r6
  404f96:	462c      	mov	r4, r5
  404f98:	460e      	mov	r6, r1
  404f9a:	4615      	mov	r5, r2
  404f9c:	f8db 3008 	ldr.w	r3, [fp, #8]
  404fa0:	f8db 1004 	ldr.w	r1, [fp, #4]
  404fa4:	eb04 0805 	add.w	r8, r4, r5
  404fa8:	4598      	cmp	r8, r3
  404faa:	bfc8      	it	gt
  404fac:	3101      	addgt	r1, #1
  404fae:	f7ff ff1d 	bl	404dec <_Balloc>
  404fb2:	f100 0914 	add.w	r9, r0, #20
  404fb6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  404fba:	45d1      	cmp	r9, sl
  404fbc:	9000      	str	r0, [sp, #0]
  404fbe:	d205      	bcs.n	404fcc <__multiply+0x4c>
  404fc0:	464b      	mov	r3, r9
  404fc2:	2100      	movs	r1, #0
  404fc4:	f843 1b04 	str.w	r1, [r3], #4
  404fc8:	459a      	cmp	sl, r3
  404fca:	d8fb      	bhi.n	404fc4 <__multiply+0x44>
  404fcc:	f106 0c14 	add.w	ip, r6, #20
  404fd0:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  404fd4:	f10b 0b14 	add.w	fp, fp, #20
  404fd8:	459c      	cmp	ip, r3
  404fda:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  404fde:	d24c      	bcs.n	40507a <__multiply+0xfa>
  404fe0:	f8cd a004 	str.w	sl, [sp, #4]
  404fe4:	469a      	mov	sl, r3
  404fe6:	f8dc 5000 	ldr.w	r5, [ip]
  404fea:	b2af      	uxth	r7, r5
  404fec:	b1ef      	cbz	r7, 40502a <__multiply+0xaa>
  404fee:	2100      	movs	r1, #0
  404ff0:	464d      	mov	r5, r9
  404ff2:	465e      	mov	r6, fp
  404ff4:	460c      	mov	r4, r1
  404ff6:	f856 2b04 	ldr.w	r2, [r6], #4
  404ffa:	6828      	ldr	r0, [r5, #0]
  404ffc:	b293      	uxth	r3, r2
  404ffe:	b281      	uxth	r1, r0
  405000:	fb07 1303 	mla	r3, r7, r3, r1
  405004:	0c12      	lsrs	r2, r2, #16
  405006:	0c01      	lsrs	r1, r0, #16
  405008:	4423      	add	r3, r4
  40500a:	fb07 1102 	mla	r1, r7, r2, r1
  40500e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  405012:	b29b      	uxth	r3, r3
  405014:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  405018:	45b6      	cmp	lr, r6
  40501a:	f845 3b04 	str.w	r3, [r5], #4
  40501e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  405022:	d8e8      	bhi.n	404ff6 <__multiply+0x76>
  405024:	602c      	str	r4, [r5, #0]
  405026:	f8dc 5000 	ldr.w	r5, [ip]
  40502a:	0c2d      	lsrs	r5, r5, #16
  40502c:	d01d      	beq.n	40506a <__multiply+0xea>
  40502e:	f8d9 3000 	ldr.w	r3, [r9]
  405032:	4648      	mov	r0, r9
  405034:	461c      	mov	r4, r3
  405036:	4659      	mov	r1, fp
  405038:	2200      	movs	r2, #0
  40503a:	880e      	ldrh	r6, [r1, #0]
  40503c:	0c24      	lsrs	r4, r4, #16
  40503e:	fb05 4406 	mla	r4, r5, r6, r4
  405042:	4422      	add	r2, r4
  405044:	b29b      	uxth	r3, r3
  405046:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40504a:	f840 3b04 	str.w	r3, [r0], #4
  40504e:	f851 3b04 	ldr.w	r3, [r1], #4
  405052:	6804      	ldr	r4, [r0, #0]
  405054:	0c1b      	lsrs	r3, r3, #16
  405056:	b2a6      	uxth	r6, r4
  405058:	fb05 6303 	mla	r3, r5, r3, r6
  40505c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  405060:	458e      	cmp	lr, r1
  405062:	ea4f 4213 	mov.w	r2, r3, lsr #16
  405066:	d8e8      	bhi.n	40503a <__multiply+0xba>
  405068:	6003      	str	r3, [r0, #0]
  40506a:	f10c 0c04 	add.w	ip, ip, #4
  40506e:	45e2      	cmp	sl, ip
  405070:	f109 0904 	add.w	r9, r9, #4
  405074:	d8b7      	bhi.n	404fe6 <__multiply+0x66>
  405076:	f8dd a004 	ldr.w	sl, [sp, #4]
  40507a:	f1b8 0f00 	cmp.w	r8, #0
  40507e:	dd0b      	ble.n	405098 <__multiply+0x118>
  405080:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  405084:	f1aa 0a04 	sub.w	sl, sl, #4
  405088:	b11b      	cbz	r3, 405092 <__multiply+0x112>
  40508a:	e005      	b.n	405098 <__multiply+0x118>
  40508c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  405090:	b913      	cbnz	r3, 405098 <__multiply+0x118>
  405092:	f1b8 0801 	subs.w	r8, r8, #1
  405096:	d1f9      	bne.n	40508c <__multiply+0x10c>
  405098:	9800      	ldr	r0, [sp, #0]
  40509a:	f8c0 8010 	str.w	r8, [r0, #16]
  40509e:	b003      	add	sp, #12
  4050a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004050a4 <__pow5mult>:
  4050a4:	f012 0303 	ands.w	r3, r2, #3
  4050a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4050ac:	4614      	mov	r4, r2
  4050ae:	4607      	mov	r7, r0
  4050b0:	d12e      	bne.n	405110 <__pow5mult+0x6c>
  4050b2:	460d      	mov	r5, r1
  4050b4:	10a4      	asrs	r4, r4, #2
  4050b6:	d01c      	beq.n	4050f2 <__pow5mult+0x4e>
  4050b8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4050ba:	b396      	cbz	r6, 405122 <__pow5mult+0x7e>
  4050bc:	07e3      	lsls	r3, r4, #31
  4050be:	f04f 0800 	mov.w	r8, #0
  4050c2:	d406      	bmi.n	4050d2 <__pow5mult+0x2e>
  4050c4:	1064      	asrs	r4, r4, #1
  4050c6:	d014      	beq.n	4050f2 <__pow5mult+0x4e>
  4050c8:	6830      	ldr	r0, [r6, #0]
  4050ca:	b1a8      	cbz	r0, 4050f8 <__pow5mult+0x54>
  4050cc:	4606      	mov	r6, r0
  4050ce:	07e3      	lsls	r3, r4, #31
  4050d0:	d5f8      	bpl.n	4050c4 <__pow5mult+0x20>
  4050d2:	4632      	mov	r2, r6
  4050d4:	4629      	mov	r1, r5
  4050d6:	4638      	mov	r0, r7
  4050d8:	f7ff ff52 	bl	404f80 <__multiply>
  4050dc:	b1b5      	cbz	r5, 40510c <__pow5mult+0x68>
  4050de:	686a      	ldr	r2, [r5, #4]
  4050e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4050e2:	1064      	asrs	r4, r4, #1
  4050e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4050e8:	6029      	str	r1, [r5, #0]
  4050ea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4050ee:	4605      	mov	r5, r0
  4050f0:	d1ea      	bne.n	4050c8 <__pow5mult+0x24>
  4050f2:	4628      	mov	r0, r5
  4050f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050f8:	4632      	mov	r2, r6
  4050fa:	4631      	mov	r1, r6
  4050fc:	4638      	mov	r0, r7
  4050fe:	f7ff ff3f 	bl	404f80 <__multiply>
  405102:	6030      	str	r0, [r6, #0]
  405104:	f8c0 8000 	str.w	r8, [r0]
  405108:	4606      	mov	r6, r0
  40510a:	e7e0      	b.n	4050ce <__pow5mult+0x2a>
  40510c:	4605      	mov	r5, r0
  40510e:	e7d9      	b.n	4050c4 <__pow5mult+0x20>
  405110:	1e5a      	subs	r2, r3, #1
  405112:	4d0b      	ldr	r5, [pc, #44]	; (405140 <__pow5mult+0x9c>)
  405114:	2300      	movs	r3, #0
  405116:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40511a:	f7ff fe97 	bl	404e4c <__multadd>
  40511e:	4605      	mov	r5, r0
  405120:	e7c8      	b.n	4050b4 <__pow5mult+0x10>
  405122:	2101      	movs	r1, #1
  405124:	4638      	mov	r0, r7
  405126:	f7ff fe61 	bl	404dec <_Balloc>
  40512a:	f240 2171 	movw	r1, #625	; 0x271
  40512e:	2201      	movs	r2, #1
  405130:	2300      	movs	r3, #0
  405132:	6141      	str	r1, [r0, #20]
  405134:	6102      	str	r2, [r0, #16]
  405136:	4606      	mov	r6, r0
  405138:	64b8      	str	r0, [r7, #72]	; 0x48
  40513a:	6003      	str	r3, [r0, #0]
  40513c:	e7be      	b.n	4050bc <__pow5mult+0x18>
  40513e:	bf00      	nop
  405140:	004072e0 	.word	0x004072e0

00405144 <__lshift>:
  405144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405148:	4691      	mov	r9, r2
  40514a:	690a      	ldr	r2, [r1, #16]
  40514c:	688b      	ldr	r3, [r1, #8]
  40514e:	ea4f 1469 	mov.w	r4, r9, asr #5
  405152:	eb04 0802 	add.w	r8, r4, r2
  405156:	f108 0501 	add.w	r5, r8, #1
  40515a:	429d      	cmp	r5, r3
  40515c:	460e      	mov	r6, r1
  40515e:	4607      	mov	r7, r0
  405160:	6849      	ldr	r1, [r1, #4]
  405162:	dd04      	ble.n	40516e <__lshift+0x2a>
  405164:	005b      	lsls	r3, r3, #1
  405166:	429d      	cmp	r5, r3
  405168:	f101 0101 	add.w	r1, r1, #1
  40516c:	dcfa      	bgt.n	405164 <__lshift+0x20>
  40516e:	4638      	mov	r0, r7
  405170:	f7ff fe3c 	bl	404dec <_Balloc>
  405174:	2c00      	cmp	r4, #0
  405176:	f100 0314 	add.w	r3, r0, #20
  40517a:	dd06      	ble.n	40518a <__lshift+0x46>
  40517c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  405180:	2100      	movs	r1, #0
  405182:	f843 1b04 	str.w	r1, [r3], #4
  405186:	429a      	cmp	r2, r3
  405188:	d1fb      	bne.n	405182 <__lshift+0x3e>
  40518a:	6934      	ldr	r4, [r6, #16]
  40518c:	f106 0114 	add.w	r1, r6, #20
  405190:	f019 091f 	ands.w	r9, r9, #31
  405194:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  405198:	d01d      	beq.n	4051d6 <__lshift+0x92>
  40519a:	f1c9 0c20 	rsb	ip, r9, #32
  40519e:	2200      	movs	r2, #0
  4051a0:	680c      	ldr	r4, [r1, #0]
  4051a2:	fa04 f409 	lsl.w	r4, r4, r9
  4051a6:	4314      	orrs	r4, r2
  4051a8:	f843 4b04 	str.w	r4, [r3], #4
  4051ac:	f851 2b04 	ldr.w	r2, [r1], #4
  4051b0:	458e      	cmp	lr, r1
  4051b2:	fa22 f20c 	lsr.w	r2, r2, ip
  4051b6:	d8f3      	bhi.n	4051a0 <__lshift+0x5c>
  4051b8:	601a      	str	r2, [r3, #0]
  4051ba:	b10a      	cbz	r2, 4051c0 <__lshift+0x7c>
  4051bc:	f108 0502 	add.w	r5, r8, #2
  4051c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4051c2:	6872      	ldr	r2, [r6, #4]
  4051c4:	3d01      	subs	r5, #1
  4051c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4051ca:	6105      	str	r5, [r0, #16]
  4051cc:	6031      	str	r1, [r6, #0]
  4051ce:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4051d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4051d6:	3b04      	subs	r3, #4
  4051d8:	f851 2b04 	ldr.w	r2, [r1], #4
  4051dc:	f843 2f04 	str.w	r2, [r3, #4]!
  4051e0:	458e      	cmp	lr, r1
  4051e2:	d8f9      	bhi.n	4051d8 <__lshift+0x94>
  4051e4:	e7ec      	b.n	4051c0 <__lshift+0x7c>
  4051e6:	bf00      	nop

004051e8 <__mcmp>:
  4051e8:	b430      	push	{r4, r5}
  4051ea:	690b      	ldr	r3, [r1, #16]
  4051ec:	4605      	mov	r5, r0
  4051ee:	6900      	ldr	r0, [r0, #16]
  4051f0:	1ac0      	subs	r0, r0, r3
  4051f2:	d10f      	bne.n	405214 <__mcmp+0x2c>
  4051f4:	009b      	lsls	r3, r3, #2
  4051f6:	3514      	adds	r5, #20
  4051f8:	3114      	adds	r1, #20
  4051fa:	4419      	add	r1, r3
  4051fc:	442b      	add	r3, r5
  4051fe:	e001      	b.n	405204 <__mcmp+0x1c>
  405200:	429d      	cmp	r5, r3
  405202:	d207      	bcs.n	405214 <__mcmp+0x2c>
  405204:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  405208:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40520c:	4294      	cmp	r4, r2
  40520e:	d0f7      	beq.n	405200 <__mcmp+0x18>
  405210:	d302      	bcc.n	405218 <__mcmp+0x30>
  405212:	2001      	movs	r0, #1
  405214:	bc30      	pop	{r4, r5}
  405216:	4770      	bx	lr
  405218:	f04f 30ff 	mov.w	r0, #4294967295
  40521c:	e7fa      	b.n	405214 <__mcmp+0x2c>
  40521e:	bf00      	nop

00405220 <__mdiff>:
  405220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405224:	690f      	ldr	r7, [r1, #16]
  405226:	460e      	mov	r6, r1
  405228:	6911      	ldr	r1, [r2, #16]
  40522a:	1a7f      	subs	r7, r7, r1
  40522c:	2f00      	cmp	r7, #0
  40522e:	4690      	mov	r8, r2
  405230:	d117      	bne.n	405262 <__mdiff+0x42>
  405232:	0089      	lsls	r1, r1, #2
  405234:	f106 0514 	add.w	r5, r6, #20
  405238:	f102 0e14 	add.w	lr, r2, #20
  40523c:	186b      	adds	r3, r5, r1
  40523e:	4471      	add	r1, lr
  405240:	e001      	b.n	405246 <__mdiff+0x26>
  405242:	429d      	cmp	r5, r3
  405244:	d25c      	bcs.n	405300 <__mdiff+0xe0>
  405246:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40524a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40524e:	42a2      	cmp	r2, r4
  405250:	d0f7      	beq.n	405242 <__mdiff+0x22>
  405252:	d25e      	bcs.n	405312 <__mdiff+0xf2>
  405254:	4633      	mov	r3, r6
  405256:	462c      	mov	r4, r5
  405258:	4646      	mov	r6, r8
  40525a:	4675      	mov	r5, lr
  40525c:	4698      	mov	r8, r3
  40525e:	2701      	movs	r7, #1
  405260:	e005      	b.n	40526e <__mdiff+0x4e>
  405262:	db58      	blt.n	405316 <__mdiff+0xf6>
  405264:	f106 0514 	add.w	r5, r6, #20
  405268:	f108 0414 	add.w	r4, r8, #20
  40526c:	2700      	movs	r7, #0
  40526e:	6871      	ldr	r1, [r6, #4]
  405270:	f7ff fdbc 	bl	404dec <_Balloc>
  405274:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405278:	6936      	ldr	r6, [r6, #16]
  40527a:	60c7      	str	r7, [r0, #12]
  40527c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  405280:	46a6      	mov	lr, r4
  405282:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  405286:	f100 0414 	add.w	r4, r0, #20
  40528a:	2300      	movs	r3, #0
  40528c:	f85e 1b04 	ldr.w	r1, [lr], #4
  405290:	f855 8b04 	ldr.w	r8, [r5], #4
  405294:	b28a      	uxth	r2, r1
  405296:	fa13 f388 	uxtah	r3, r3, r8
  40529a:	0c09      	lsrs	r1, r1, #16
  40529c:	1a9a      	subs	r2, r3, r2
  40529e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4052a2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4052a6:	b292      	uxth	r2, r2
  4052a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4052ac:	45f4      	cmp	ip, lr
  4052ae:	f844 2b04 	str.w	r2, [r4], #4
  4052b2:	ea4f 4323 	mov.w	r3, r3, asr #16
  4052b6:	d8e9      	bhi.n	40528c <__mdiff+0x6c>
  4052b8:	42af      	cmp	r7, r5
  4052ba:	d917      	bls.n	4052ec <__mdiff+0xcc>
  4052bc:	46a4      	mov	ip, r4
  4052be:	46ae      	mov	lr, r5
  4052c0:	f85e 2b04 	ldr.w	r2, [lr], #4
  4052c4:	fa13 f382 	uxtah	r3, r3, r2
  4052c8:	1419      	asrs	r1, r3, #16
  4052ca:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  4052ce:	b29b      	uxth	r3, r3
  4052d0:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  4052d4:	4577      	cmp	r7, lr
  4052d6:	f84c 2b04 	str.w	r2, [ip], #4
  4052da:	ea4f 4321 	mov.w	r3, r1, asr #16
  4052de:	d8ef      	bhi.n	4052c0 <__mdiff+0xa0>
  4052e0:	43ed      	mvns	r5, r5
  4052e2:	442f      	add	r7, r5
  4052e4:	f027 0703 	bic.w	r7, r7, #3
  4052e8:	3704      	adds	r7, #4
  4052ea:	443c      	add	r4, r7
  4052ec:	3c04      	subs	r4, #4
  4052ee:	b922      	cbnz	r2, 4052fa <__mdiff+0xda>
  4052f0:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4052f4:	3e01      	subs	r6, #1
  4052f6:	2b00      	cmp	r3, #0
  4052f8:	d0fa      	beq.n	4052f0 <__mdiff+0xd0>
  4052fa:	6106      	str	r6, [r0, #16]
  4052fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405300:	2100      	movs	r1, #0
  405302:	f7ff fd73 	bl	404dec <_Balloc>
  405306:	2201      	movs	r2, #1
  405308:	2300      	movs	r3, #0
  40530a:	6102      	str	r2, [r0, #16]
  40530c:	6143      	str	r3, [r0, #20]
  40530e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405312:	4674      	mov	r4, lr
  405314:	e7ab      	b.n	40526e <__mdiff+0x4e>
  405316:	4633      	mov	r3, r6
  405318:	f106 0414 	add.w	r4, r6, #20
  40531c:	f102 0514 	add.w	r5, r2, #20
  405320:	4616      	mov	r6, r2
  405322:	2701      	movs	r7, #1
  405324:	4698      	mov	r8, r3
  405326:	e7a2      	b.n	40526e <__mdiff+0x4e>

00405328 <__d2b>:
  405328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40532c:	b082      	sub	sp, #8
  40532e:	2101      	movs	r1, #1
  405330:	461c      	mov	r4, r3
  405332:	f3c3 570a 	ubfx	r7, r3, #20, #11
  405336:	4615      	mov	r5, r2
  405338:	9e08      	ldr	r6, [sp, #32]
  40533a:	f7ff fd57 	bl	404dec <_Balloc>
  40533e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  405342:	4680      	mov	r8, r0
  405344:	b10f      	cbz	r7, 40534a <__d2b+0x22>
  405346:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40534a:	9401      	str	r4, [sp, #4]
  40534c:	b31d      	cbz	r5, 405396 <__d2b+0x6e>
  40534e:	a802      	add	r0, sp, #8
  405350:	f840 5d08 	str.w	r5, [r0, #-8]!
  405354:	f7ff fdda 	bl	404f0c <__lo0bits>
  405358:	2800      	cmp	r0, #0
  40535a:	d134      	bne.n	4053c6 <__d2b+0x9e>
  40535c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405360:	f8c8 2014 	str.w	r2, [r8, #20]
  405364:	2b00      	cmp	r3, #0
  405366:	bf0c      	ite	eq
  405368:	2101      	moveq	r1, #1
  40536a:	2102      	movne	r1, #2
  40536c:	f8c8 3018 	str.w	r3, [r8, #24]
  405370:	f8c8 1010 	str.w	r1, [r8, #16]
  405374:	b9df      	cbnz	r7, 4053ae <__d2b+0x86>
  405376:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40537a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40537e:	6030      	str	r0, [r6, #0]
  405380:	6918      	ldr	r0, [r3, #16]
  405382:	f7ff fda3 	bl	404ecc <__hi0bits>
  405386:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405388:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40538c:	6018      	str	r0, [r3, #0]
  40538e:	4640      	mov	r0, r8
  405390:	b002      	add	sp, #8
  405392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405396:	a801      	add	r0, sp, #4
  405398:	f7ff fdb8 	bl	404f0c <__lo0bits>
  40539c:	9b01      	ldr	r3, [sp, #4]
  40539e:	f8c8 3014 	str.w	r3, [r8, #20]
  4053a2:	2101      	movs	r1, #1
  4053a4:	3020      	adds	r0, #32
  4053a6:	f8c8 1010 	str.w	r1, [r8, #16]
  4053aa:	2f00      	cmp	r7, #0
  4053ac:	d0e3      	beq.n	405376 <__d2b+0x4e>
  4053ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4053b0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4053b4:	4407      	add	r7, r0
  4053b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4053ba:	6037      	str	r7, [r6, #0]
  4053bc:	6018      	str	r0, [r3, #0]
  4053be:	4640      	mov	r0, r8
  4053c0:	b002      	add	sp, #8
  4053c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4053c6:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4053ca:	f1c0 0220 	rsb	r2, r0, #32
  4053ce:	fa03 f202 	lsl.w	r2, r3, r2
  4053d2:	430a      	orrs	r2, r1
  4053d4:	40c3      	lsrs	r3, r0
  4053d6:	9301      	str	r3, [sp, #4]
  4053d8:	f8c8 2014 	str.w	r2, [r8, #20]
  4053dc:	e7c2      	b.n	405364 <__d2b+0x3c>
  4053de:	bf00      	nop

004053e0 <_sbrk_r>:
  4053e0:	b538      	push	{r3, r4, r5, lr}
  4053e2:	4c07      	ldr	r4, [pc, #28]	; (405400 <_sbrk_r+0x20>)
  4053e4:	2300      	movs	r3, #0
  4053e6:	4605      	mov	r5, r0
  4053e8:	4608      	mov	r0, r1
  4053ea:	6023      	str	r3, [r4, #0]
  4053ec:	f7fc fad8 	bl	4019a0 <_sbrk>
  4053f0:	1c43      	adds	r3, r0, #1
  4053f2:	d000      	beq.n	4053f6 <_sbrk_r+0x16>
  4053f4:	bd38      	pop	{r3, r4, r5, pc}
  4053f6:	6823      	ldr	r3, [r4, #0]
  4053f8:	2b00      	cmp	r3, #0
  4053fa:	d0fb      	beq.n	4053f4 <_sbrk_r+0x14>
  4053fc:	602b      	str	r3, [r5, #0]
  4053fe:	bd38      	pop	{r3, r4, r5, pc}
  405400:	20400cd4 	.word	0x20400cd4
	...

00405440 <strlen>:
  405440:	f890 f000 	pld	[r0]
  405444:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405448:	f020 0107 	bic.w	r1, r0, #7
  40544c:	f06f 0c00 	mvn.w	ip, #0
  405450:	f010 0407 	ands.w	r4, r0, #7
  405454:	f891 f020 	pld	[r1, #32]
  405458:	f040 8049 	bne.w	4054ee <strlen+0xae>
  40545c:	f04f 0400 	mov.w	r4, #0
  405460:	f06f 0007 	mvn.w	r0, #7
  405464:	e9d1 2300 	ldrd	r2, r3, [r1]
  405468:	f891 f040 	pld	[r1, #64]	; 0x40
  40546c:	f100 0008 	add.w	r0, r0, #8
  405470:	fa82 f24c 	uadd8	r2, r2, ip
  405474:	faa4 f28c 	sel	r2, r4, ip
  405478:	fa83 f34c 	uadd8	r3, r3, ip
  40547c:	faa2 f38c 	sel	r3, r2, ip
  405480:	bb4b      	cbnz	r3, 4054d6 <strlen+0x96>
  405482:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405486:	fa82 f24c 	uadd8	r2, r2, ip
  40548a:	f100 0008 	add.w	r0, r0, #8
  40548e:	faa4 f28c 	sel	r2, r4, ip
  405492:	fa83 f34c 	uadd8	r3, r3, ip
  405496:	faa2 f38c 	sel	r3, r2, ip
  40549a:	b9e3      	cbnz	r3, 4054d6 <strlen+0x96>
  40549c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4054a0:	fa82 f24c 	uadd8	r2, r2, ip
  4054a4:	f100 0008 	add.w	r0, r0, #8
  4054a8:	faa4 f28c 	sel	r2, r4, ip
  4054ac:	fa83 f34c 	uadd8	r3, r3, ip
  4054b0:	faa2 f38c 	sel	r3, r2, ip
  4054b4:	b97b      	cbnz	r3, 4054d6 <strlen+0x96>
  4054b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4054ba:	f101 0120 	add.w	r1, r1, #32
  4054be:	fa82 f24c 	uadd8	r2, r2, ip
  4054c2:	f100 0008 	add.w	r0, r0, #8
  4054c6:	faa4 f28c 	sel	r2, r4, ip
  4054ca:	fa83 f34c 	uadd8	r3, r3, ip
  4054ce:	faa2 f38c 	sel	r3, r2, ip
  4054d2:	2b00      	cmp	r3, #0
  4054d4:	d0c6      	beq.n	405464 <strlen+0x24>
  4054d6:	2a00      	cmp	r2, #0
  4054d8:	bf04      	itt	eq
  4054da:	3004      	addeq	r0, #4
  4054dc:	461a      	moveq	r2, r3
  4054de:	ba12      	rev	r2, r2
  4054e0:	fab2 f282 	clz	r2, r2
  4054e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4054e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4054ec:	4770      	bx	lr
  4054ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4054f2:	f004 0503 	and.w	r5, r4, #3
  4054f6:	f1c4 0000 	rsb	r0, r4, #0
  4054fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4054fe:	f014 0f04 	tst.w	r4, #4
  405502:	f891 f040 	pld	[r1, #64]	; 0x40
  405506:	fa0c f505 	lsl.w	r5, ip, r5
  40550a:	ea62 0205 	orn	r2, r2, r5
  40550e:	bf1c      	itt	ne
  405510:	ea63 0305 	ornne	r3, r3, r5
  405514:	4662      	movne	r2, ip
  405516:	f04f 0400 	mov.w	r4, #0
  40551a:	e7a9      	b.n	405470 <strlen+0x30>

0040551c <__ssprint_r>:
  40551c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405520:	6893      	ldr	r3, [r2, #8]
  405522:	b083      	sub	sp, #12
  405524:	4690      	mov	r8, r2
  405526:	2b00      	cmp	r3, #0
  405528:	d070      	beq.n	40560c <__ssprint_r+0xf0>
  40552a:	4682      	mov	sl, r0
  40552c:	460c      	mov	r4, r1
  40552e:	6817      	ldr	r7, [r2, #0]
  405530:	688d      	ldr	r5, [r1, #8]
  405532:	6808      	ldr	r0, [r1, #0]
  405534:	e042      	b.n	4055bc <__ssprint_r+0xa0>
  405536:	89a3      	ldrh	r3, [r4, #12]
  405538:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40553c:	d02e      	beq.n	40559c <__ssprint_r+0x80>
  40553e:	6965      	ldr	r5, [r4, #20]
  405540:	6921      	ldr	r1, [r4, #16]
  405542:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  405546:	eba0 0b01 	sub.w	fp, r0, r1
  40554a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40554e:	f10b 0001 	add.w	r0, fp, #1
  405552:	106d      	asrs	r5, r5, #1
  405554:	4430      	add	r0, r6
  405556:	42a8      	cmp	r0, r5
  405558:	462a      	mov	r2, r5
  40555a:	bf84      	itt	hi
  40555c:	4605      	movhi	r5, r0
  40555e:	462a      	movhi	r2, r5
  405560:	055b      	lsls	r3, r3, #21
  405562:	d538      	bpl.n	4055d6 <__ssprint_r+0xba>
  405564:	4611      	mov	r1, r2
  405566:	4650      	mov	r0, sl
  405568:	f7ff f894 	bl	404694 <_malloc_r>
  40556c:	2800      	cmp	r0, #0
  40556e:	d03c      	beq.n	4055ea <__ssprint_r+0xce>
  405570:	465a      	mov	r2, fp
  405572:	6921      	ldr	r1, [r4, #16]
  405574:	9001      	str	r0, [sp, #4]
  405576:	f7ff fb93 	bl	404ca0 <memcpy>
  40557a:	89a2      	ldrh	r2, [r4, #12]
  40557c:	9b01      	ldr	r3, [sp, #4]
  40557e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  405582:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  405586:	81a2      	strh	r2, [r4, #12]
  405588:	eba5 020b 	sub.w	r2, r5, fp
  40558c:	eb03 000b 	add.w	r0, r3, fp
  405590:	6165      	str	r5, [r4, #20]
  405592:	6123      	str	r3, [r4, #16]
  405594:	6020      	str	r0, [r4, #0]
  405596:	60a2      	str	r2, [r4, #8]
  405598:	4635      	mov	r5, r6
  40559a:	46b3      	mov	fp, r6
  40559c:	465a      	mov	r2, fp
  40559e:	4649      	mov	r1, r9
  4055a0:	f000 fa18 	bl	4059d4 <memmove>
  4055a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4055a8:	68a2      	ldr	r2, [r4, #8]
  4055aa:	6820      	ldr	r0, [r4, #0]
  4055ac:	1b55      	subs	r5, r2, r5
  4055ae:	4458      	add	r0, fp
  4055b0:	1b9e      	subs	r6, r3, r6
  4055b2:	60a5      	str	r5, [r4, #8]
  4055b4:	6020      	str	r0, [r4, #0]
  4055b6:	f8c8 6008 	str.w	r6, [r8, #8]
  4055ba:	b33e      	cbz	r6, 40560c <__ssprint_r+0xf0>
  4055bc:	687e      	ldr	r6, [r7, #4]
  4055be:	463b      	mov	r3, r7
  4055c0:	3708      	adds	r7, #8
  4055c2:	2e00      	cmp	r6, #0
  4055c4:	d0fa      	beq.n	4055bc <__ssprint_r+0xa0>
  4055c6:	42ae      	cmp	r6, r5
  4055c8:	f8d3 9000 	ldr.w	r9, [r3]
  4055cc:	46ab      	mov	fp, r5
  4055ce:	d2b2      	bcs.n	405536 <__ssprint_r+0x1a>
  4055d0:	4635      	mov	r5, r6
  4055d2:	46b3      	mov	fp, r6
  4055d4:	e7e2      	b.n	40559c <__ssprint_r+0x80>
  4055d6:	4650      	mov	r0, sl
  4055d8:	f000 fa60 	bl	405a9c <_realloc_r>
  4055dc:	4603      	mov	r3, r0
  4055de:	2800      	cmp	r0, #0
  4055e0:	d1d2      	bne.n	405588 <__ssprint_r+0x6c>
  4055e2:	6921      	ldr	r1, [r4, #16]
  4055e4:	4650      	mov	r0, sl
  4055e6:	f000 f8f9 	bl	4057dc <_free_r>
  4055ea:	230c      	movs	r3, #12
  4055ec:	f8ca 3000 	str.w	r3, [sl]
  4055f0:	89a3      	ldrh	r3, [r4, #12]
  4055f2:	2200      	movs	r2, #0
  4055f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4055f8:	f04f 30ff 	mov.w	r0, #4294967295
  4055fc:	81a3      	strh	r3, [r4, #12]
  4055fe:	f8c8 2008 	str.w	r2, [r8, #8]
  405602:	f8c8 2004 	str.w	r2, [r8, #4]
  405606:	b003      	add	sp, #12
  405608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40560c:	2000      	movs	r0, #0
  40560e:	f8c8 0004 	str.w	r0, [r8, #4]
  405612:	b003      	add	sp, #12
  405614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405618 <__register_exitproc>:
  405618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40561c:	4d2c      	ldr	r5, [pc, #176]	; (4056d0 <__register_exitproc+0xb8>)
  40561e:	4606      	mov	r6, r0
  405620:	6828      	ldr	r0, [r5, #0]
  405622:	4698      	mov	r8, r3
  405624:	460f      	mov	r7, r1
  405626:	4691      	mov	r9, r2
  405628:	f7ff f830 	bl	40468c <__retarget_lock_acquire_recursive>
  40562c:	4b29      	ldr	r3, [pc, #164]	; (4056d4 <__register_exitproc+0xbc>)
  40562e:	681c      	ldr	r4, [r3, #0]
  405630:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405634:	2b00      	cmp	r3, #0
  405636:	d03e      	beq.n	4056b6 <__register_exitproc+0x9e>
  405638:	685a      	ldr	r2, [r3, #4]
  40563a:	2a1f      	cmp	r2, #31
  40563c:	dc1c      	bgt.n	405678 <__register_exitproc+0x60>
  40563e:	f102 0e01 	add.w	lr, r2, #1
  405642:	b176      	cbz	r6, 405662 <__register_exitproc+0x4a>
  405644:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405648:	2401      	movs	r4, #1
  40564a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40564e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  405652:	4094      	lsls	r4, r2
  405654:	4320      	orrs	r0, r4
  405656:	2e02      	cmp	r6, #2
  405658:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40565c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  405660:	d023      	beq.n	4056aa <__register_exitproc+0x92>
  405662:	3202      	adds	r2, #2
  405664:	f8c3 e004 	str.w	lr, [r3, #4]
  405668:	6828      	ldr	r0, [r5, #0]
  40566a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40566e:	f7ff f80f 	bl	404690 <__retarget_lock_release_recursive>
  405672:	2000      	movs	r0, #0
  405674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405678:	4b17      	ldr	r3, [pc, #92]	; (4056d8 <__register_exitproc+0xc0>)
  40567a:	b30b      	cbz	r3, 4056c0 <__register_exitproc+0xa8>
  40567c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405680:	f3af 8000 	nop.w
  405684:	4603      	mov	r3, r0
  405686:	b1d8      	cbz	r0, 4056c0 <__register_exitproc+0xa8>
  405688:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40568c:	6002      	str	r2, [r0, #0]
  40568e:	2100      	movs	r1, #0
  405690:	6041      	str	r1, [r0, #4]
  405692:	460a      	mov	r2, r1
  405694:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405698:	f04f 0e01 	mov.w	lr, #1
  40569c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4056a0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4056a4:	2e00      	cmp	r6, #0
  4056a6:	d0dc      	beq.n	405662 <__register_exitproc+0x4a>
  4056a8:	e7cc      	b.n	405644 <__register_exitproc+0x2c>
  4056aa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4056ae:	430c      	orrs	r4, r1
  4056b0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4056b4:	e7d5      	b.n	405662 <__register_exitproc+0x4a>
  4056b6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4056ba:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4056be:	e7bb      	b.n	405638 <__register_exitproc+0x20>
  4056c0:	6828      	ldr	r0, [r5, #0]
  4056c2:	f7fe ffe5 	bl	404690 <__retarget_lock_release_recursive>
  4056c6:	f04f 30ff 	mov.w	r0, #4294967295
  4056ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4056ce:	bf00      	nop
  4056d0:	20400450 	.word	0x20400450
  4056d4:	00407178 	.word	0x00407178
  4056d8:	00000000 	.word	0x00000000

004056dc <_calloc_r>:
  4056dc:	b510      	push	{r4, lr}
  4056de:	fb02 f101 	mul.w	r1, r2, r1
  4056e2:	f7fe ffd7 	bl	404694 <_malloc_r>
  4056e6:	4604      	mov	r4, r0
  4056e8:	b1d8      	cbz	r0, 405722 <_calloc_r+0x46>
  4056ea:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4056ee:	f022 0203 	bic.w	r2, r2, #3
  4056f2:	3a04      	subs	r2, #4
  4056f4:	2a24      	cmp	r2, #36	; 0x24
  4056f6:	d818      	bhi.n	40572a <_calloc_r+0x4e>
  4056f8:	2a13      	cmp	r2, #19
  4056fa:	d914      	bls.n	405726 <_calloc_r+0x4a>
  4056fc:	2300      	movs	r3, #0
  4056fe:	2a1b      	cmp	r2, #27
  405700:	6003      	str	r3, [r0, #0]
  405702:	6043      	str	r3, [r0, #4]
  405704:	d916      	bls.n	405734 <_calloc_r+0x58>
  405706:	2a24      	cmp	r2, #36	; 0x24
  405708:	6083      	str	r3, [r0, #8]
  40570a:	60c3      	str	r3, [r0, #12]
  40570c:	bf11      	iteee	ne
  40570e:	f100 0210 	addne.w	r2, r0, #16
  405712:	6103      	streq	r3, [r0, #16]
  405714:	6143      	streq	r3, [r0, #20]
  405716:	f100 0218 	addeq.w	r2, r0, #24
  40571a:	2300      	movs	r3, #0
  40571c:	6013      	str	r3, [r2, #0]
  40571e:	6053      	str	r3, [r2, #4]
  405720:	6093      	str	r3, [r2, #8]
  405722:	4620      	mov	r0, r4
  405724:	bd10      	pop	{r4, pc}
  405726:	4602      	mov	r2, r0
  405728:	e7f7      	b.n	40571a <_calloc_r+0x3e>
  40572a:	2100      	movs	r1, #0
  40572c:	f7fc fd14 	bl	402158 <memset>
  405730:	4620      	mov	r0, r4
  405732:	bd10      	pop	{r4, pc}
  405734:	f100 0208 	add.w	r2, r0, #8
  405738:	e7ef      	b.n	40571a <_calloc_r+0x3e>
  40573a:	bf00      	nop

0040573c <_malloc_trim_r>:
  40573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40573e:	4f24      	ldr	r7, [pc, #144]	; (4057d0 <_malloc_trim_r+0x94>)
  405740:	460c      	mov	r4, r1
  405742:	4606      	mov	r6, r0
  405744:	f7ff fb46 	bl	404dd4 <__malloc_lock>
  405748:	68bb      	ldr	r3, [r7, #8]
  40574a:	685d      	ldr	r5, [r3, #4]
  40574c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405750:	310f      	adds	r1, #15
  405752:	f025 0503 	bic.w	r5, r5, #3
  405756:	4429      	add	r1, r5
  405758:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40575c:	f021 010f 	bic.w	r1, r1, #15
  405760:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405764:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405768:	db07      	blt.n	40577a <_malloc_trim_r+0x3e>
  40576a:	2100      	movs	r1, #0
  40576c:	4630      	mov	r0, r6
  40576e:	f7ff fe37 	bl	4053e0 <_sbrk_r>
  405772:	68bb      	ldr	r3, [r7, #8]
  405774:	442b      	add	r3, r5
  405776:	4298      	cmp	r0, r3
  405778:	d004      	beq.n	405784 <_malloc_trim_r+0x48>
  40577a:	4630      	mov	r0, r6
  40577c:	f7ff fb30 	bl	404de0 <__malloc_unlock>
  405780:	2000      	movs	r0, #0
  405782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405784:	4261      	negs	r1, r4
  405786:	4630      	mov	r0, r6
  405788:	f7ff fe2a 	bl	4053e0 <_sbrk_r>
  40578c:	3001      	adds	r0, #1
  40578e:	d00d      	beq.n	4057ac <_malloc_trim_r+0x70>
  405790:	4b10      	ldr	r3, [pc, #64]	; (4057d4 <_malloc_trim_r+0x98>)
  405792:	68ba      	ldr	r2, [r7, #8]
  405794:	6819      	ldr	r1, [r3, #0]
  405796:	1b2d      	subs	r5, r5, r4
  405798:	f045 0501 	orr.w	r5, r5, #1
  40579c:	4630      	mov	r0, r6
  40579e:	1b09      	subs	r1, r1, r4
  4057a0:	6055      	str	r5, [r2, #4]
  4057a2:	6019      	str	r1, [r3, #0]
  4057a4:	f7ff fb1c 	bl	404de0 <__malloc_unlock>
  4057a8:	2001      	movs	r0, #1
  4057aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4057ac:	2100      	movs	r1, #0
  4057ae:	4630      	mov	r0, r6
  4057b0:	f7ff fe16 	bl	4053e0 <_sbrk_r>
  4057b4:	68ba      	ldr	r2, [r7, #8]
  4057b6:	1a83      	subs	r3, r0, r2
  4057b8:	2b0f      	cmp	r3, #15
  4057ba:	ddde      	ble.n	40577a <_malloc_trim_r+0x3e>
  4057bc:	4c06      	ldr	r4, [pc, #24]	; (4057d8 <_malloc_trim_r+0x9c>)
  4057be:	4905      	ldr	r1, [pc, #20]	; (4057d4 <_malloc_trim_r+0x98>)
  4057c0:	6824      	ldr	r4, [r4, #0]
  4057c2:	f043 0301 	orr.w	r3, r3, #1
  4057c6:	1b00      	subs	r0, r0, r4
  4057c8:	6053      	str	r3, [r2, #4]
  4057ca:	6008      	str	r0, [r1, #0]
  4057cc:	e7d5      	b.n	40577a <_malloc_trim_r+0x3e>
  4057ce:	bf00      	nop
  4057d0:	20400454 	.word	0x20400454
  4057d4:	20400c7c 	.word	0x20400c7c
  4057d8:	2040085c 	.word	0x2040085c

004057dc <_free_r>:
  4057dc:	2900      	cmp	r1, #0
  4057de:	d044      	beq.n	40586a <_free_r+0x8e>
  4057e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4057e4:	460d      	mov	r5, r1
  4057e6:	4680      	mov	r8, r0
  4057e8:	f7ff faf4 	bl	404dd4 <__malloc_lock>
  4057ec:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4057f0:	4969      	ldr	r1, [pc, #420]	; (405998 <_free_r+0x1bc>)
  4057f2:	f027 0301 	bic.w	r3, r7, #1
  4057f6:	f1a5 0408 	sub.w	r4, r5, #8
  4057fa:	18e2      	adds	r2, r4, r3
  4057fc:	688e      	ldr	r6, [r1, #8]
  4057fe:	6850      	ldr	r0, [r2, #4]
  405800:	42b2      	cmp	r2, r6
  405802:	f020 0003 	bic.w	r0, r0, #3
  405806:	d05e      	beq.n	4058c6 <_free_r+0xea>
  405808:	07fe      	lsls	r6, r7, #31
  40580a:	6050      	str	r0, [r2, #4]
  40580c:	d40b      	bmi.n	405826 <_free_r+0x4a>
  40580e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405812:	1be4      	subs	r4, r4, r7
  405814:	f101 0e08 	add.w	lr, r1, #8
  405818:	68a5      	ldr	r5, [r4, #8]
  40581a:	4575      	cmp	r5, lr
  40581c:	443b      	add	r3, r7
  40581e:	d06d      	beq.n	4058fc <_free_r+0x120>
  405820:	68e7      	ldr	r7, [r4, #12]
  405822:	60ef      	str	r7, [r5, #12]
  405824:	60bd      	str	r5, [r7, #8]
  405826:	1815      	adds	r5, r2, r0
  405828:	686d      	ldr	r5, [r5, #4]
  40582a:	07ed      	lsls	r5, r5, #31
  40582c:	d53e      	bpl.n	4058ac <_free_r+0xd0>
  40582e:	f043 0201 	orr.w	r2, r3, #1
  405832:	6062      	str	r2, [r4, #4]
  405834:	50e3      	str	r3, [r4, r3]
  405836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40583a:	d217      	bcs.n	40586c <_free_r+0x90>
  40583c:	08db      	lsrs	r3, r3, #3
  40583e:	1c58      	adds	r0, r3, #1
  405840:	109a      	asrs	r2, r3, #2
  405842:	684d      	ldr	r5, [r1, #4]
  405844:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405848:	60a7      	str	r7, [r4, #8]
  40584a:	2301      	movs	r3, #1
  40584c:	4093      	lsls	r3, r2
  40584e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405852:	432b      	orrs	r3, r5
  405854:	3a08      	subs	r2, #8
  405856:	60e2      	str	r2, [r4, #12]
  405858:	604b      	str	r3, [r1, #4]
  40585a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40585e:	60fc      	str	r4, [r7, #12]
  405860:	4640      	mov	r0, r8
  405862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405866:	f7ff babb 	b.w	404de0 <__malloc_unlock>
  40586a:	4770      	bx	lr
  40586c:	0a5a      	lsrs	r2, r3, #9
  40586e:	2a04      	cmp	r2, #4
  405870:	d852      	bhi.n	405918 <_free_r+0x13c>
  405872:	099a      	lsrs	r2, r3, #6
  405874:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405878:	00ff      	lsls	r7, r7, #3
  40587a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40587e:	19c8      	adds	r0, r1, r7
  405880:	59ca      	ldr	r2, [r1, r7]
  405882:	3808      	subs	r0, #8
  405884:	4290      	cmp	r0, r2
  405886:	d04f      	beq.n	405928 <_free_r+0x14c>
  405888:	6851      	ldr	r1, [r2, #4]
  40588a:	f021 0103 	bic.w	r1, r1, #3
  40588e:	428b      	cmp	r3, r1
  405890:	d232      	bcs.n	4058f8 <_free_r+0x11c>
  405892:	6892      	ldr	r2, [r2, #8]
  405894:	4290      	cmp	r0, r2
  405896:	d1f7      	bne.n	405888 <_free_r+0xac>
  405898:	68c3      	ldr	r3, [r0, #12]
  40589a:	60a0      	str	r0, [r4, #8]
  40589c:	60e3      	str	r3, [r4, #12]
  40589e:	609c      	str	r4, [r3, #8]
  4058a0:	60c4      	str	r4, [r0, #12]
  4058a2:	4640      	mov	r0, r8
  4058a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4058a8:	f7ff ba9a 	b.w	404de0 <__malloc_unlock>
  4058ac:	6895      	ldr	r5, [r2, #8]
  4058ae:	4f3b      	ldr	r7, [pc, #236]	; (40599c <_free_r+0x1c0>)
  4058b0:	42bd      	cmp	r5, r7
  4058b2:	4403      	add	r3, r0
  4058b4:	d040      	beq.n	405938 <_free_r+0x15c>
  4058b6:	68d0      	ldr	r0, [r2, #12]
  4058b8:	60e8      	str	r0, [r5, #12]
  4058ba:	f043 0201 	orr.w	r2, r3, #1
  4058be:	6085      	str	r5, [r0, #8]
  4058c0:	6062      	str	r2, [r4, #4]
  4058c2:	50e3      	str	r3, [r4, r3]
  4058c4:	e7b7      	b.n	405836 <_free_r+0x5a>
  4058c6:	07ff      	lsls	r7, r7, #31
  4058c8:	4403      	add	r3, r0
  4058ca:	d407      	bmi.n	4058dc <_free_r+0x100>
  4058cc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4058d0:	1aa4      	subs	r4, r4, r2
  4058d2:	4413      	add	r3, r2
  4058d4:	68a0      	ldr	r0, [r4, #8]
  4058d6:	68e2      	ldr	r2, [r4, #12]
  4058d8:	60c2      	str	r2, [r0, #12]
  4058da:	6090      	str	r0, [r2, #8]
  4058dc:	4a30      	ldr	r2, [pc, #192]	; (4059a0 <_free_r+0x1c4>)
  4058de:	6812      	ldr	r2, [r2, #0]
  4058e0:	f043 0001 	orr.w	r0, r3, #1
  4058e4:	4293      	cmp	r3, r2
  4058e6:	6060      	str	r0, [r4, #4]
  4058e8:	608c      	str	r4, [r1, #8]
  4058ea:	d3b9      	bcc.n	405860 <_free_r+0x84>
  4058ec:	4b2d      	ldr	r3, [pc, #180]	; (4059a4 <_free_r+0x1c8>)
  4058ee:	4640      	mov	r0, r8
  4058f0:	6819      	ldr	r1, [r3, #0]
  4058f2:	f7ff ff23 	bl	40573c <_malloc_trim_r>
  4058f6:	e7b3      	b.n	405860 <_free_r+0x84>
  4058f8:	4610      	mov	r0, r2
  4058fa:	e7cd      	b.n	405898 <_free_r+0xbc>
  4058fc:	1811      	adds	r1, r2, r0
  4058fe:	6849      	ldr	r1, [r1, #4]
  405900:	07c9      	lsls	r1, r1, #31
  405902:	d444      	bmi.n	40598e <_free_r+0x1b2>
  405904:	6891      	ldr	r1, [r2, #8]
  405906:	68d2      	ldr	r2, [r2, #12]
  405908:	60ca      	str	r2, [r1, #12]
  40590a:	4403      	add	r3, r0
  40590c:	f043 0001 	orr.w	r0, r3, #1
  405910:	6091      	str	r1, [r2, #8]
  405912:	6060      	str	r0, [r4, #4]
  405914:	50e3      	str	r3, [r4, r3]
  405916:	e7a3      	b.n	405860 <_free_r+0x84>
  405918:	2a14      	cmp	r2, #20
  40591a:	d816      	bhi.n	40594a <_free_r+0x16e>
  40591c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405920:	00ff      	lsls	r7, r7, #3
  405922:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405926:	e7aa      	b.n	40587e <_free_r+0xa2>
  405928:	10aa      	asrs	r2, r5, #2
  40592a:	2301      	movs	r3, #1
  40592c:	684d      	ldr	r5, [r1, #4]
  40592e:	4093      	lsls	r3, r2
  405930:	432b      	orrs	r3, r5
  405932:	604b      	str	r3, [r1, #4]
  405934:	4603      	mov	r3, r0
  405936:	e7b0      	b.n	40589a <_free_r+0xbe>
  405938:	f043 0201 	orr.w	r2, r3, #1
  40593c:	614c      	str	r4, [r1, #20]
  40593e:	610c      	str	r4, [r1, #16]
  405940:	60e5      	str	r5, [r4, #12]
  405942:	60a5      	str	r5, [r4, #8]
  405944:	6062      	str	r2, [r4, #4]
  405946:	50e3      	str	r3, [r4, r3]
  405948:	e78a      	b.n	405860 <_free_r+0x84>
  40594a:	2a54      	cmp	r2, #84	; 0x54
  40594c:	d806      	bhi.n	40595c <_free_r+0x180>
  40594e:	0b1a      	lsrs	r2, r3, #12
  405950:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405954:	00ff      	lsls	r7, r7, #3
  405956:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40595a:	e790      	b.n	40587e <_free_r+0xa2>
  40595c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405960:	d806      	bhi.n	405970 <_free_r+0x194>
  405962:	0bda      	lsrs	r2, r3, #15
  405964:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405968:	00ff      	lsls	r7, r7, #3
  40596a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40596e:	e786      	b.n	40587e <_free_r+0xa2>
  405970:	f240 5054 	movw	r0, #1364	; 0x554
  405974:	4282      	cmp	r2, r0
  405976:	d806      	bhi.n	405986 <_free_r+0x1aa>
  405978:	0c9a      	lsrs	r2, r3, #18
  40597a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40597e:	00ff      	lsls	r7, r7, #3
  405980:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405984:	e77b      	b.n	40587e <_free_r+0xa2>
  405986:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40598a:	257e      	movs	r5, #126	; 0x7e
  40598c:	e777      	b.n	40587e <_free_r+0xa2>
  40598e:	f043 0101 	orr.w	r1, r3, #1
  405992:	6061      	str	r1, [r4, #4]
  405994:	6013      	str	r3, [r2, #0]
  405996:	e763      	b.n	405860 <_free_r+0x84>
  405998:	20400454 	.word	0x20400454
  40599c:	2040045c 	.word	0x2040045c
  4059a0:	20400860 	.word	0x20400860
  4059a4:	20400cac 	.word	0x20400cac

004059a8 <__ascii_mbtowc>:
  4059a8:	b082      	sub	sp, #8
  4059aa:	b149      	cbz	r1, 4059c0 <__ascii_mbtowc+0x18>
  4059ac:	b15a      	cbz	r2, 4059c6 <__ascii_mbtowc+0x1e>
  4059ae:	b16b      	cbz	r3, 4059cc <__ascii_mbtowc+0x24>
  4059b0:	7813      	ldrb	r3, [r2, #0]
  4059b2:	600b      	str	r3, [r1, #0]
  4059b4:	7812      	ldrb	r2, [r2, #0]
  4059b6:	1c10      	adds	r0, r2, #0
  4059b8:	bf18      	it	ne
  4059ba:	2001      	movne	r0, #1
  4059bc:	b002      	add	sp, #8
  4059be:	4770      	bx	lr
  4059c0:	a901      	add	r1, sp, #4
  4059c2:	2a00      	cmp	r2, #0
  4059c4:	d1f3      	bne.n	4059ae <__ascii_mbtowc+0x6>
  4059c6:	4610      	mov	r0, r2
  4059c8:	b002      	add	sp, #8
  4059ca:	4770      	bx	lr
  4059cc:	f06f 0001 	mvn.w	r0, #1
  4059d0:	e7f4      	b.n	4059bc <__ascii_mbtowc+0x14>
  4059d2:	bf00      	nop

004059d4 <memmove>:
  4059d4:	4288      	cmp	r0, r1
  4059d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4059d8:	d90d      	bls.n	4059f6 <memmove+0x22>
  4059da:	188b      	adds	r3, r1, r2
  4059dc:	4298      	cmp	r0, r3
  4059de:	d20a      	bcs.n	4059f6 <memmove+0x22>
  4059e0:	1884      	adds	r4, r0, r2
  4059e2:	2a00      	cmp	r2, #0
  4059e4:	d051      	beq.n	405a8a <memmove+0xb6>
  4059e6:	4622      	mov	r2, r4
  4059e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4059ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4059f0:	4299      	cmp	r1, r3
  4059f2:	d1f9      	bne.n	4059e8 <memmove+0x14>
  4059f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4059f6:	2a0f      	cmp	r2, #15
  4059f8:	d948      	bls.n	405a8c <memmove+0xb8>
  4059fa:	ea41 0300 	orr.w	r3, r1, r0
  4059fe:	079b      	lsls	r3, r3, #30
  405a00:	d146      	bne.n	405a90 <memmove+0xbc>
  405a02:	f100 0410 	add.w	r4, r0, #16
  405a06:	f101 0310 	add.w	r3, r1, #16
  405a0a:	4615      	mov	r5, r2
  405a0c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405a10:	f844 6c10 	str.w	r6, [r4, #-16]
  405a14:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405a18:	f844 6c0c 	str.w	r6, [r4, #-12]
  405a1c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405a20:	f844 6c08 	str.w	r6, [r4, #-8]
  405a24:	3d10      	subs	r5, #16
  405a26:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405a2a:	f844 6c04 	str.w	r6, [r4, #-4]
  405a2e:	2d0f      	cmp	r5, #15
  405a30:	f103 0310 	add.w	r3, r3, #16
  405a34:	f104 0410 	add.w	r4, r4, #16
  405a38:	d8e8      	bhi.n	405a0c <memmove+0x38>
  405a3a:	f1a2 0310 	sub.w	r3, r2, #16
  405a3e:	f023 030f 	bic.w	r3, r3, #15
  405a42:	f002 0e0f 	and.w	lr, r2, #15
  405a46:	3310      	adds	r3, #16
  405a48:	f1be 0f03 	cmp.w	lr, #3
  405a4c:	4419      	add	r1, r3
  405a4e:	4403      	add	r3, r0
  405a50:	d921      	bls.n	405a96 <memmove+0xc2>
  405a52:	1f1e      	subs	r6, r3, #4
  405a54:	460d      	mov	r5, r1
  405a56:	4674      	mov	r4, lr
  405a58:	3c04      	subs	r4, #4
  405a5a:	f855 7b04 	ldr.w	r7, [r5], #4
  405a5e:	f846 7f04 	str.w	r7, [r6, #4]!
  405a62:	2c03      	cmp	r4, #3
  405a64:	d8f8      	bhi.n	405a58 <memmove+0x84>
  405a66:	f1ae 0404 	sub.w	r4, lr, #4
  405a6a:	f024 0403 	bic.w	r4, r4, #3
  405a6e:	3404      	adds	r4, #4
  405a70:	4421      	add	r1, r4
  405a72:	4423      	add	r3, r4
  405a74:	f002 0203 	and.w	r2, r2, #3
  405a78:	b162      	cbz	r2, 405a94 <memmove+0xc0>
  405a7a:	3b01      	subs	r3, #1
  405a7c:	440a      	add	r2, r1
  405a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
  405a82:	f803 4f01 	strb.w	r4, [r3, #1]!
  405a86:	428a      	cmp	r2, r1
  405a88:	d1f9      	bne.n	405a7e <memmove+0xaa>
  405a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405a8c:	4603      	mov	r3, r0
  405a8e:	e7f3      	b.n	405a78 <memmove+0xa4>
  405a90:	4603      	mov	r3, r0
  405a92:	e7f2      	b.n	405a7a <memmove+0xa6>
  405a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405a96:	4672      	mov	r2, lr
  405a98:	e7ee      	b.n	405a78 <memmove+0xa4>
  405a9a:	bf00      	nop

00405a9c <_realloc_r>:
  405a9c:	2900      	cmp	r1, #0
  405a9e:	f000 8095 	beq.w	405bcc <_realloc_r+0x130>
  405aa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405aa6:	460d      	mov	r5, r1
  405aa8:	4616      	mov	r6, r2
  405aaa:	b083      	sub	sp, #12
  405aac:	4680      	mov	r8, r0
  405aae:	f106 070b 	add.w	r7, r6, #11
  405ab2:	f7ff f98f 	bl	404dd4 <__malloc_lock>
  405ab6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405aba:	2f16      	cmp	r7, #22
  405abc:	f02e 0403 	bic.w	r4, lr, #3
  405ac0:	f1a5 0908 	sub.w	r9, r5, #8
  405ac4:	d83c      	bhi.n	405b40 <_realloc_r+0xa4>
  405ac6:	2210      	movs	r2, #16
  405ac8:	4617      	mov	r7, r2
  405aca:	42be      	cmp	r6, r7
  405acc:	d83d      	bhi.n	405b4a <_realloc_r+0xae>
  405ace:	4294      	cmp	r4, r2
  405ad0:	da43      	bge.n	405b5a <_realloc_r+0xbe>
  405ad2:	4bc4      	ldr	r3, [pc, #784]	; (405de4 <_realloc_r+0x348>)
  405ad4:	6899      	ldr	r1, [r3, #8]
  405ad6:	eb09 0004 	add.w	r0, r9, r4
  405ada:	4288      	cmp	r0, r1
  405adc:	f000 80b4 	beq.w	405c48 <_realloc_r+0x1ac>
  405ae0:	6843      	ldr	r3, [r0, #4]
  405ae2:	f023 0101 	bic.w	r1, r3, #1
  405ae6:	4401      	add	r1, r0
  405ae8:	6849      	ldr	r1, [r1, #4]
  405aea:	07c9      	lsls	r1, r1, #31
  405aec:	d54c      	bpl.n	405b88 <_realloc_r+0xec>
  405aee:	f01e 0f01 	tst.w	lr, #1
  405af2:	f000 809b 	beq.w	405c2c <_realloc_r+0x190>
  405af6:	4631      	mov	r1, r6
  405af8:	4640      	mov	r0, r8
  405afa:	f7fe fdcb 	bl	404694 <_malloc_r>
  405afe:	4606      	mov	r6, r0
  405b00:	2800      	cmp	r0, #0
  405b02:	d03a      	beq.n	405b7a <_realloc_r+0xde>
  405b04:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405b08:	f023 0301 	bic.w	r3, r3, #1
  405b0c:	444b      	add	r3, r9
  405b0e:	f1a0 0208 	sub.w	r2, r0, #8
  405b12:	429a      	cmp	r2, r3
  405b14:	f000 8121 	beq.w	405d5a <_realloc_r+0x2be>
  405b18:	1f22      	subs	r2, r4, #4
  405b1a:	2a24      	cmp	r2, #36	; 0x24
  405b1c:	f200 8107 	bhi.w	405d2e <_realloc_r+0x292>
  405b20:	2a13      	cmp	r2, #19
  405b22:	f200 80db 	bhi.w	405cdc <_realloc_r+0x240>
  405b26:	4603      	mov	r3, r0
  405b28:	462a      	mov	r2, r5
  405b2a:	6811      	ldr	r1, [r2, #0]
  405b2c:	6019      	str	r1, [r3, #0]
  405b2e:	6851      	ldr	r1, [r2, #4]
  405b30:	6059      	str	r1, [r3, #4]
  405b32:	6892      	ldr	r2, [r2, #8]
  405b34:	609a      	str	r2, [r3, #8]
  405b36:	4629      	mov	r1, r5
  405b38:	4640      	mov	r0, r8
  405b3a:	f7ff fe4f 	bl	4057dc <_free_r>
  405b3e:	e01c      	b.n	405b7a <_realloc_r+0xde>
  405b40:	f027 0707 	bic.w	r7, r7, #7
  405b44:	2f00      	cmp	r7, #0
  405b46:	463a      	mov	r2, r7
  405b48:	dabf      	bge.n	405aca <_realloc_r+0x2e>
  405b4a:	2600      	movs	r6, #0
  405b4c:	230c      	movs	r3, #12
  405b4e:	4630      	mov	r0, r6
  405b50:	f8c8 3000 	str.w	r3, [r8]
  405b54:	b003      	add	sp, #12
  405b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b5a:	462e      	mov	r6, r5
  405b5c:	1be3      	subs	r3, r4, r7
  405b5e:	2b0f      	cmp	r3, #15
  405b60:	d81e      	bhi.n	405ba0 <_realloc_r+0x104>
  405b62:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405b66:	f003 0301 	and.w	r3, r3, #1
  405b6a:	4323      	orrs	r3, r4
  405b6c:	444c      	add	r4, r9
  405b6e:	f8c9 3004 	str.w	r3, [r9, #4]
  405b72:	6863      	ldr	r3, [r4, #4]
  405b74:	f043 0301 	orr.w	r3, r3, #1
  405b78:	6063      	str	r3, [r4, #4]
  405b7a:	4640      	mov	r0, r8
  405b7c:	f7ff f930 	bl	404de0 <__malloc_unlock>
  405b80:	4630      	mov	r0, r6
  405b82:	b003      	add	sp, #12
  405b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b88:	f023 0303 	bic.w	r3, r3, #3
  405b8c:	18e1      	adds	r1, r4, r3
  405b8e:	4291      	cmp	r1, r2
  405b90:	db1f      	blt.n	405bd2 <_realloc_r+0x136>
  405b92:	68c3      	ldr	r3, [r0, #12]
  405b94:	6882      	ldr	r2, [r0, #8]
  405b96:	462e      	mov	r6, r5
  405b98:	60d3      	str	r3, [r2, #12]
  405b9a:	460c      	mov	r4, r1
  405b9c:	609a      	str	r2, [r3, #8]
  405b9e:	e7dd      	b.n	405b5c <_realloc_r+0xc0>
  405ba0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405ba4:	eb09 0107 	add.w	r1, r9, r7
  405ba8:	f002 0201 	and.w	r2, r2, #1
  405bac:	444c      	add	r4, r9
  405bae:	f043 0301 	orr.w	r3, r3, #1
  405bb2:	4317      	orrs	r7, r2
  405bb4:	f8c9 7004 	str.w	r7, [r9, #4]
  405bb8:	604b      	str	r3, [r1, #4]
  405bba:	6863      	ldr	r3, [r4, #4]
  405bbc:	f043 0301 	orr.w	r3, r3, #1
  405bc0:	3108      	adds	r1, #8
  405bc2:	6063      	str	r3, [r4, #4]
  405bc4:	4640      	mov	r0, r8
  405bc6:	f7ff fe09 	bl	4057dc <_free_r>
  405bca:	e7d6      	b.n	405b7a <_realloc_r+0xde>
  405bcc:	4611      	mov	r1, r2
  405bce:	f7fe bd61 	b.w	404694 <_malloc_r>
  405bd2:	f01e 0f01 	tst.w	lr, #1
  405bd6:	d18e      	bne.n	405af6 <_realloc_r+0x5a>
  405bd8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405bdc:	eba9 0a01 	sub.w	sl, r9, r1
  405be0:	f8da 1004 	ldr.w	r1, [sl, #4]
  405be4:	f021 0103 	bic.w	r1, r1, #3
  405be8:	440b      	add	r3, r1
  405bea:	4423      	add	r3, r4
  405bec:	4293      	cmp	r3, r2
  405bee:	db25      	blt.n	405c3c <_realloc_r+0x1a0>
  405bf0:	68c2      	ldr	r2, [r0, #12]
  405bf2:	6881      	ldr	r1, [r0, #8]
  405bf4:	4656      	mov	r6, sl
  405bf6:	60ca      	str	r2, [r1, #12]
  405bf8:	6091      	str	r1, [r2, #8]
  405bfa:	f8da 100c 	ldr.w	r1, [sl, #12]
  405bfe:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405c02:	1f22      	subs	r2, r4, #4
  405c04:	2a24      	cmp	r2, #36	; 0x24
  405c06:	60c1      	str	r1, [r0, #12]
  405c08:	6088      	str	r0, [r1, #8]
  405c0a:	f200 8094 	bhi.w	405d36 <_realloc_r+0x29a>
  405c0e:	2a13      	cmp	r2, #19
  405c10:	d96f      	bls.n	405cf2 <_realloc_r+0x256>
  405c12:	6829      	ldr	r1, [r5, #0]
  405c14:	f8ca 1008 	str.w	r1, [sl, #8]
  405c18:	6869      	ldr	r1, [r5, #4]
  405c1a:	f8ca 100c 	str.w	r1, [sl, #12]
  405c1e:	2a1b      	cmp	r2, #27
  405c20:	f200 80a2 	bhi.w	405d68 <_realloc_r+0x2cc>
  405c24:	3508      	adds	r5, #8
  405c26:	f10a 0210 	add.w	r2, sl, #16
  405c2a:	e063      	b.n	405cf4 <_realloc_r+0x258>
  405c2c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405c30:	eba9 0a03 	sub.w	sl, r9, r3
  405c34:	f8da 1004 	ldr.w	r1, [sl, #4]
  405c38:	f021 0103 	bic.w	r1, r1, #3
  405c3c:	1863      	adds	r3, r4, r1
  405c3e:	4293      	cmp	r3, r2
  405c40:	f6ff af59 	blt.w	405af6 <_realloc_r+0x5a>
  405c44:	4656      	mov	r6, sl
  405c46:	e7d8      	b.n	405bfa <_realloc_r+0x15e>
  405c48:	6841      	ldr	r1, [r0, #4]
  405c4a:	f021 0b03 	bic.w	fp, r1, #3
  405c4e:	44a3      	add	fp, r4
  405c50:	f107 0010 	add.w	r0, r7, #16
  405c54:	4583      	cmp	fp, r0
  405c56:	da56      	bge.n	405d06 <_realloc_r+0x26a>
  405c58:	f01e 0f01 	tst.w	lr, #1
  405c5c:	f47f af4b 	bne.w	405af6 <_realloc_r+0x5a>
  405c60:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405c64:	eba9 0a01 	sub.w	sl, r9, r1
  405c68:	f8da 1004 	ldr.w	r1, [sl, #4]
  405c6c:	f021 0103 	bic.w	r1, r1, #3
  405c70:	448b      	add	fp, r1
  405c72:	4558      	cmp	r0, fp
  405c74:	dce2      	bgt.n	405c3c <_realloc_r+0x1a0>
  405c76:	4656      	mov	r6, sl
  405c78:	f8da 100c 	ldr.w	r1, [sl, #12]
  405c7c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405c80:	1f22      	subs	r2, r4, #4
  405c82:	2a24      	cmp	r2, #36	; 0x24
  405c84:	60c1      	str	r1, [r0, #12]
  405c86:	6088      	str	r0, [r1, #8]
  405c88:	f200 808f 	bhi.w	405daa <_realloc_r+0x30e>
  405c8c:	2a13      	cmp	r2, #19
  405c8e:	f240 808a 	bls.w	405da6 <_realloc_r+0x30a>
  405c92:	6829      	ldr	r1, [r5, #0]
  405c94:	f8ca 1008 	str.w	r1, [sl, #8]
  405c98:	6869      	ldr	r1, [r5, #4]
  405c9a:	f8ca 100c 	str.w	r1, [sl, #12]
  405c9e:	2a1b      	cmp	r2, #27
  405ca0:	f200 808a 	bhi.w	405db8 <_realloc_r+0x31c>
  405ca4:	3508      	adds	r5, #8
  405ca6:	f10a 0210 	add.w	r2, sl, #16
  405caa:	6829      	ldr	r1, [r5, #0]
  405cac:	6011      	str	r1, [r2, #0]
  405cae:	6869      	ldr	r1, [r5, #4]
  405cb0:	6051      	str	r1, [r2, #4]
  405cb2:	68a9      	ldr	r1, [r5, #8]
  405cb4:	6091      	str	r1, [r2, #8]
  405cb6:	eb0a 0107 	add.w	r1, sl, r7
  405cba:	ebab 0207 	sub.w	r2, fp, r7
  405cbe:	f042 0201 	orr.w	r2, r2, #1
  405cc2:	6099      	str	r1, [r3, #8]
  405cc4:	604a      	str	r2, [r1, #4]
  405cc6:	f8da 3004 	ldr.w	r3, [sl, #4]
  405cca:	f003 0301 	and.w	r3, r3, #1
  405cce:	431f      	orrs	r7, r3
  405cd0:	4640      	mov	r0, r8
  405cd2:	f8ca 7004 	str.w	r7, [sl, #4]
  405cd6:	f7ff f883 	bl	404de0 <__malloc_unlock>
  405cda:	e751      	b.n	405b80 <_realloc_r+0xe4>
  405cdc:	682b      	ldr	r3, [r5, #0]
  405cde:	6003      	str	r3, [r0, #0]
  405ce0:	686b      	ldr	r3, [r5, #4]
  405ce2:	6043      	str	r3, [r0, #4]
  405ce4:	2a1b      	cmp	r2, #27
  405ce6:	d82d      	bhi.n	405d44 <_realloc_r+0x2a8>
  405ce8:	f100 0308 	add.w	r3, r0, #8
  405cec:	f105 0208 	add.w	r2, r5, #8
  405cf0:	e71b      	b.n	405b2a <_realloc_r+0x8e>
  405cf2:	4632      	mov	r2, r6
  405cf4:	6829      	ldr	r1, [r5, #0]
  405cf6:	6011      	str	r1, [r2, #0]
  405cf8:	6869      	ldr	r1, [r5, #4]
  405cfa:	6051      	str	r1, [r2, #4]
  405cfc:	68a9      	ldr	r1, [r5, #8]
  405cfe:	6091      	str	r1, [r2, #8]
  405d00:	461c      	mov	r4, r3
  405d02:	46d1      	mov	r9, sl
  405d04:	e72a      	b.n	405b5c <_realloc_r+0xc0>
  405d06:	eb09 0107 	add.w	r1, r9, r7
  405d0a:	ebab 0b07 	sub.w	fp, fp, r7
  405d0e:	f04b 0201 	orr.w	r2, fp, #1
  405d12:	6099      	str	r1, [r3, #8]
  405d14:	604a      	str	r2, [r1, #4]
  405d16:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405d1a:	f003 0301 	and.w	r3, r3, #1
  405d1e:	431f      	orrs	r7, r3
  405d20:	4640      	mov	r0, r8
  405d22:	f845 7c04 	str.w	r7, [r5, #-4]
  405d26:	f7ff f85b 	bl	404de0 <__malloc_unlock>
  405d2a:	462e      	mov	r6, r5
  405d2c:	e728      	b.n	405b80 <_realloc_r+0xe4>
  405d2e:	4629      	mov	r1, r5
  405d30:	f7ff fe50 	bl	4059d4 <memmove>
  405d34:	e6ff      	b.n	405b36 <_realloc_r+0x9a>
  405d36:	4629      	mov	r1, r5
  405d38:	4630      	mov	r0, r6
  405d3a:	461c      	mov	r4, r3
  405d3c:	46d1      	mov	r9, sl
  405d3e:	f7ff fe49 	bl	4059d4 <memmove>
  405d42:	e70b      	b.n	405b5c <_realloc_r+0xc0>
  405d44:	68ab      	ldr	r3, [r5, #8]
  405d46:	6083      	str	r3, [r0, #8]
  405d48:	68eb      	ldr	r3, [r5, #12]
  405d4a:	60c3      	str	r3, [r0, #12]
  405d4c:	2a24      	cmp	r2, #36	; 0x24
  405d4e:	d017      	beq.n	405d80 <_realloc_r+0x2e4>
  405d50:	f100 0310 	add.w	r3, r0, #16
  405d54:	f105 0210 	add.w	r2, r5, #16
  405d58:	e6e7      	b.n	405b2a <_realloc_r+0x8e>
  405d5a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405d5e:	f023 0303 	bic.w	r3, r3, #3
  405d62:	441c      	add	r4, r3
  405d64:	462e      	mov	r6, r5
  405d66:	e6f9      	b.n	405b5c <_realloc_r+0xc0>
  405d68:	68a9      	ldr	r1, [r5, #8]
  405d6a:	f8ca 1010 	str.w	r1, [sl, #16]
  405d6e:	68e9      	ldr	r1, [r5, #12]
  405d70:	f8ca 1014 	str.w	r1, [sl, #20]
  405d74:	2a24      	cmp	r2, #36	; 0x24
  405d76:	d00c      	beq.n	405d92 <_realloc_r+0x2f6>
  405d78:	3510      	adds	r5, #16
  405d7a:	f10a 0218 	add.w	r2, sl, #24
  405d7e:	e7b9      	b.n	405cf4 <_realloc_r+0x258>
  405d80:	692b      	ldr	r3, [r5, #16]
  405d82:	6103      	str	r3, [r0, #16]
  405d84:	696b      	ldr	r3, [r5, #20]
  405d86:	6143      	str	r3, [r0, #20]
  405d88:	f105 0218 	add.w	r2, r5, #24
  405d8c:	f100 0318 	add.w	r3, r0, #24
  405d90:	e6cb      	b.n	405b2a <_realloc_r+0x8e>
  405d92:	692a      	ldr	r2, [r5, #16]
  405d94:	f8ca 2018 	str.w	r2, [sl, #24]
  405d98:	696a      	ldr	r2, [r5, #20]
  405d9a:	f8ca 201c 	str.w	r2, [sl, #28]
  405d9e:	3518      	adds	r5, #24
  405da0:	f10a 0220 	add.w	r2, sl, #32
  405da4:	e7a6      	b.n	405cf4 <_realloc_r+0x258>
  405da6:	4632      	mov	r2, r6
  405da8:	e77f      	b.n	405caa <_realloc_r+0x20e>
  405daa:	4629      	mov	r1, r5
  405dac:	4630      	mov	r0, r6
  405dae:	9301      	str	r3, [sp, #4]
  405db0:	f7ff fe10 	bl	4059d4 <memmove>
  405db4:	9b01      	ldr	r3, [sp, #4]
  405db6:	e77e      	b.n	405cb6 <_realloc_r+0x21a>
  405db8:	68a9      	ldr	r1, [r5, #8]
  405dba:	f8ca 1010 	str.w	r1, [sl, #16]
  405dbe:	68e9      	ldr	r1, [r5, #12]
  405dc0:	f8ca 1014 	str.w	r1, [sl, #20]
  405dc4:	2a24      	cmp	r2, #36	; 0x24
  405dc6:	d003      	beq.n	405dd0 <_realloc_r+0x334>
  405dc8:	3510      	adds	r5, #16
  405dca:	f10a 0218 	add.w	r2, sl, #24
  405dce:	e76c      	b.n	405caa <_realloc_r+0x20e>
  405dd0:	692a      	ldr	r2, [r5, #16]
  405dd2:	f8ca 2018 	str.w	r2, [sl, #24]
  405dd6:	696a      	ldr	r2, [r5, #20]
  405dd8:	f8ca 201c 	str.w	r2, [sl, #28]
  405ddc:	3518      	adds	r5, #24
  405dde:	f10a 0220 	add.w	r2, sl, #32
  405de2:	e762      	b.n	405caa <_realloc_r+0x20e>
  405de4:	20400454 	.word	0x20400454

00405de8 <__ascii_wctomb>:
  405de8:	b121      	cbz	r1, 405df4 <__ascii_wctomb+0xc>
  405dea:	2aff      	cmp	r2, #255	; 0xff
  405dec:	d804      	bhi.n	405df8 <__ascii_wctomb+0x10>
  405dee:	700a      	strb	r2, [r1, #0]
  405df0:	2001      	movs	r0, #1
  405df2:	4770      	bx	lr
  405df4:	4608      	mov	r0, r1
  405df6:	4770      	bx	lr
  405df8:	238a      	movs	r3, #138	; 0x8a
  405dfa:	6003      	str	r3, [r0, #0]
  405dfc:	f04f 30ff 	mov.w	r0, #4294967295
  405e00:	4770      	bx	lr
  405e02:	bf00      	nop

00405e04 <__aeabi_drsub>:
  405e04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405e08:	e002      	b.n	405e10 <__adddf3>
  405e0a:	bf00      	nop

00405e0c <__aeabi_dsub>:
  405e0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405e10 <__adddf3>:
  405e10:	b530      	push	{r4, r5, lr}
  405e12:	ea4f 0441 	mov.w	r4, r1, lsl #1
  405e16:	ea4f 0543 	mov.w	r5, r3, lsl #1
  405e1a:	ea94 0f05 	teq	r4, r5
  405e1e:	bf08      	it	eq
  405e20:	ea90 0f02 	teqeq	r0, r2
  405e24:	bf1f      	itttt	ne
  405e26:	ea54 0c00 	orrsne.w	ip, r4, r0
  405e2a:	ea55 0c02 	orrsne.w	ip, r5, r2
  405e2e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405e32:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405e36:	f000 80e2 	beq.w	405ffe <__adddf3+0x1ee>
  405e3a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405e3e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405e42:	bfb8      	it	lt
  405e44:	426d      	neglt	r5, r5
  405e46:	dd0c      	ble.n	405e62 <__adddf3+0x52>
  405e48:	442c      	add	r4, r5
  405e4a:	ea80 0202 	eor.w	r2, r0, r2
  405e4e:	ea81 0303 	eor.w	r3, r1, r3
  405e52:	ea82 0000 	eor.w	r0, r2, r0
  405e56:	ea83 0101 	eor.w	r1, r3, r1
  405e5a:	ea80 0202 	eor.w	r2, r0, r2
  405e5e:	ea81 0303 	eor.w	r3, r1, r3
  405e62:	2d36      	cmp	r5, #54	; 0x36
  405e64:	bf88      	it	hi
  405e66:	bd30      	pophi	{r4, r5, pc}
  405e68:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405e6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405e70:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405e74:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405e78:	d002      	beq.n	405e80 <__adddf3+0x70>
  405e7a:	4240      	negs	r0, r0
  405e7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405e80:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405e84:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405e88:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405e8c:	d002      	beq.n	405e94 <__adddf3+0x84>
  405e8e:	4252      	negs	r2, r2
  405e90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405e94:	ea94 0f05 	teq	r4, r5
  405e98:	f000 80a7 	beq.w	405fea <__adddf3+0x1da>
  405e9c:	f1a4 0401 	sub.w	r4, r4, #1
  405ea0:	f1d5 0e20 	rsbs	lr, r5, #32
  405ea4:	db0d      	blt.n	405ec2 <__adddf3+0xb2>
  405ea6:	fa02 fc0e 	lsl.w	ip, r2, lr
  405eaa:	fa22 f205 	lsr.w	r2, r2, r5
  405eae:	1880      	adds	r0, r0, r2
  405eb0:	f141 0100 	adc.w	r1, r1, #0
  405eb4:	fa03 f20e 	lsl.w	r2, r3, lr
  405eb8:	1880      	adds	r0, r0, r2
  405eba:	fa43 f305 	asr.w	r3, r3, r5
  405ebe:	4159      	adcs	r1, r3
  405ec0:	e00e      	b.n	405ee0 <__adddf3+0xd0>
  405ec2:	f1a5 0520 	sub.w	r5, r5, #32
  405ec6:	f10e 0e20 	add.w	lr, lr, #32
  405eca:	2a01      	cmp	r2, #1
  405ecc:	fa03 fc0e 	lsl.w	ip, r3, lr
  405ed0:	bf28      	it	cs
  405ed2:	f04c 0c02 	orrcs.w	ip, ip, #2
  405ed6:	fa43 f305 	asr.w	r3, r3, r5
  405eda:	18c0      	adds	r0, r0, r3
  405edc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405ee0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405ee4:	d507      	bpl.n	405ef6 <__adddf3+0xe6>
  405ee6:	f04f 0e00 	mov.w	lr, #0
  405eea:	f1dc 0c00 	rsbs	ip, ip, #0
  405eee:	eb7e 0000 	sbcs.w	r0, lr, r0
  405ef2:	eb6e 0101 	sbc.w	r1, lr, r1
  405ef6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405efa:	d31b      	bcc.n	405f34 <__adddf3+0x124>
  405efc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405f00:	d30c      	bcc.n	405f1c <__adddf3+0x10c>
  405f02:	0849      	lsrs	r1, r1, #1
  405f04:	ea5f 0030 	movs.w	r0, r0, rrx
  405f08:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405f0c:	f104 0401 	add.w	r4, r4, #1
  405f10:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405f14:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405f18:	f080 809a 	bcs.w	406050 <__adddf3+0x240>
  405f1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405f20:	bf08      	it	eq
  405f22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405f26:	f150 0000 	adcs.w	r0, r0, #0
  405f2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405f2e:	ea41 0105 	orr.w	r1, r1, r5
  405f32:	bd30      	pop	{r4, r5, pc}
  405f34:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405f38:	4140      	adcs	r0, r0
  405f3a:	eb41 0101 	adc.w	r1, r1, r1
  405f3e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405f42:	f1a4 0401 	sub.w	r4, r4, #1
  405f46:	d1e9      	bne.n	405f1c <__adddf3+0x10c>
  405f48:	f091 0f00 	teq	r1, #0
  405f4c:	bf04      	itt	eq
  405f4e:	4601      	moveq	r1, r0
  405f50:	2000      	moveq	r0, #0
  405f52:	fab1 f381 	clz	r3, r1
  405f56:	bf08      	it	eq
  405f58:	3320      	addeq	r3, #32
  405f5a:	f1a3 030b 	sub.w	r3, r3, #11
  405f5e:	f1b3 0220 	subs.w	r2, r3, #32
  405f62:	da0c      	bge.n	405f7e <__adddf3+0x16e>
  405f64:	320c      	adds	r2, #12
  405f66:	dd08      	ble.n	405f7a <__adddf3+0x16a>
  405f68:	f102 0c14 	add.w	ip, r2, #20
  405f6c:	f1c2 020c 	rsb	r2, r2, #12
  405f70:	fa01 f00c 	lsl.w	r0, r1, ip
  405f74:	fa21 f102 	lsr.w	r1, r1, r2
  405f78:	e00c      	b.n	405f94 <__adddf3+0x184>
  405f7a:	f102 0214 	add.w	r2, r2, #20
  405f7e:	bfd8      	it	le
  405f80:	f1c2 0c20 	rsble	ip, r2, #32
  405f84:	fa01 f102 	lsl.w	r1, r1, r2
  405f88:	fa20 fc0c 	lsr.w	ip, r0, ip
  405f8c:	bfdc      	itt	le
  405f8e:	ea41 010c 	orrle.w	r1, r1, ip
  405f92:	4090      	lslle	r0, r2
  405f94:	1ae4      	subs	r4, r4, r3
  405f96:	bfa2      	ittt	ge
  405f98:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405f9c:	4329      	orrge	r1, r5
  405f9e:	bd30      	popge	{r4, r5, pc}
  405fa0:	ea6f 0404 	mvn.w	r4, r4
  405fa4:	3c1f      	subs	r4, #31
  405fa6:	da1c      	bge.n	405fe2 <__adddf3+0x1d2>
  405fa8:	340c      	adds	r4, #12
  405faa:	dc0e      	bgt.n	405fca <__adddf3+0x1ba>
  405fac:	f104 0414 	add.w	r4, r4, #20
  405fb0:	f1c4 0220 	rsb	r2, r4, #32
  405fb4:	fa20 f004 	lsr.w	r0, r0, r4
  405fb8:	fa01 f302 	lsl.w	r3, r1, r2
  405fbc:	ea40 0003 	orr.w	r0, r0, r3
  405fc0:	fa21 f304 	lsr.w	r3, r1, r4
  405fc4:	ea45 0103 	orr.w	r1, r5, r3
  405fc8:	bd30      	pop	{r4, r5, pc}
  405fca:	f1c4 040c 	rsb	r4, r4, #12
  405fce:	f1c4 0220 	rsb	r2, r4, #32
  405fd2:	fa20 f002 	lsr.w	r0, r0, r2
  405fd6:	fa01 f304 	lsl.w	r3, r1, r4
  405fda:	ea40 0003 	orr.w	r0, r0, r3
  405fde:	4629      	mov	r1, r5
  405fe0:	bd30      	pop	{r4, r5, pc}
  405fe2:	fa21 f004 	lsr.w	r0, r1, r4
  405fe6:	4629      	mov	r1, r5
  405fe8:	bd30      	pop	{r4, r5, pc}
  405fea:	f094 0f00 	teq	r4, #0
  405fee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405ff2:	bf06      	itte	eq
  405ff4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405ff8:	3401      	addeq	r4, #1
  405ffa:	3d01      	subne	r5, #1
  405ffc:	e74e      	b.n	405e9c <__adddf3+0x8c>
  405ffe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406002:	bf18      	it	ne
  406004:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406008:	d029      	beq.n	40605e <__adddf3+0x24e>
  40600a:	ea94 0f05 	teq	r4, r5
  40600e:	bf08      	it	eq
  406010:	ea90 0f02 	teqeq	r0, r2
  406014:	d005      	beq.n	406022 <__adddf3+0x212>
  406016:	ea54 0c00 	orrs.w	ip, r4, r0
  40601a:	bf04      	itt	eq
  40601c:	4619      	moveq	r1, r3
  40601e:	4610      	moveq	r0, r2
  406020:	bd30      	pop	{r4, r5, pc}
  406022:	ea91 0f03 	teq	r1, r3
  406026:	bf1e      	ittt	ne
  406028:	2100      	movne	r1, #0
  40602a:	2000      	movne	r0, #0
  40602c:	bd30      	popne	{r4, r5, pc}
  40602e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  406032:	d105      	bne.n	406040 <__adddf3+0x230>
  406034:	0040      	lsls	r0, r0, #1
  406036:	4149      	adcs	r1, r1
  406038:	bf28      	it	cs
  40603a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40603e:	bd30      	pop	{r4, r5, pc}
  406040:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  406044:	bf3c      	itt	cc
  406046:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40604a:	bd30      	popcc	{r4, r5, pc}
  40604c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406050:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  406054:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406058:	f04f 0000 	mov.w	r0, #0
  40605c:	bd30      	pop	{r4, r5, pc}
  40605e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406062:	bf1a      	itte	ne
  406064:	4619      	movne	r1, r3
  406066:	4610      	movne	r0, r2
  406068:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40606c:	bf1c      	itt	ne
  40606e:	460b      	movne	r3, r1
  406070:	4602      	movne	r2, r0
  406072:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406076:	bf06      	itte	eq
  406078:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40607c:	ea91 0f03 	teqeq	r1, r3
  406080:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  406084:	bd30      	pop	{r4, r5, pc}
  406086:	bf00      	nop

00406088 <__aeabi_ui2d>:
  406088:	f090 0f00 	teq	r0, #0
  40608c:	bf04      	itt	eq
  40608e:	2100      	moveq	r1, #0
  406090:	4770      	bxeq	lr
  406092:	b530      	push	{r4, r5, lr}
  406094:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406098:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40609c:	f04f 0500 	mov.w	r5, #0
  4060a0:	f04f 0100 	mov.w	r1, #0
  4060a4:	e750      	b.n	405f48 <__adddf3+0x138>
  4060a6:	bf00      	nop

004060a8 <__aeabi_i2d>:
  4060a8:	f090 0f00 	teq	r0, #0
  4060ac:	bf04      	itt	eq
  4060ae:	2100      	moveq	r1, #0
  4060b0:	4770      	bxeq	lr
  4060b2:	b530      	push	{r4, r5, lr}
  4060b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4060b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4060bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4060c0:	bf48      	it	mi
  4060c2:	4240      	negmi	r0, r0
  4060c4:	f04f 0100 	mov.w	r1, #0
  4060c8:	e73e      	b.n	405f48 <__adddf3+0x138>
  4060ca:	bf00      	nop

004060cc <__aeabi_f2d>:
  4060cc:	0042      	lsls	r2, r0, #1
  4060ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4060d2:	ea4f 0131 	mov.w	r1, r1, rrx
  4060d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4060da:	bf1f      	itttt	ne
  4060dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4060e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4060e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4060e8:	4770      	bxne	lr
  4060ea:	f092 0f00 	teq	r2, #0
  4060ee:	bf14      	ite	ne
  4060f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4060f4:	4770      	bxeq	lr
  4060f6:	b530      	push	{r4, r5, lr}
  4060f8:	f44f 7460 	mov.w	r4, #896	; 0x380
  4060fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406100:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406104:	e720      	b.n	405f48 <__adddf3+0x138>
  406106:	bf00      	nop

00406108 <__aeabi_ul2d>:
  406108:	ea50 0201 	orrs.w	r2, r0, r1
  40610c:	bf08      	it	eq
  40610e:	4770      	bxeq	lr
  406110:	b530      	push	{r4, r5, lr}
  406112:	f04f 0500 	mov.w	r5, #0
  406116:	e00a      	b.n	40612e <__aeabi_l2d+0x16>

00406118 <__aeabi_l2d>:
  406118:	ea50 0201 	orrs.w	r2, r0, r1
  40611c:	bf08      	it	eq
  40611e:	4770      	bxeq	lr
  406120:	b530      	push	{r4, r5, lr}
  406122:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  406126:	d502      	bpl.n	40612e <__aeabi_l2d+0x16>
  406128:	4240      	negs	r0, r0
  40612a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40612e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406132:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406136:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40613a:	f43f aedc 	beq.w	405ef6 <__adddf3+0xe6>
  40613e:	f04f 0203 	mov.w	r2, #3
  406142:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  406146:	bf18      	it	ne
  406148:	3203      	addne	r2, #3
  40614a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40614e:	bf18      	it	ne
  406150:	3203      	addne	r2, #3
  406152:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  406156:	f1c2 0320 	rsb	r3, r2, #32
  40615a:	fa00 fc03 	lsl.w	ip, r0, r3
  40615e:	fa20 f002 	lsr.w	r0, r0, r2
  406162:	fa01 fe03 	lsl.w	lr, r1, r3
  406166:	ea40 000e 	orr.w	r0, r0, lr
  40616a:	fa21 f102 	lsr.w	r1, r1, r2
  40616e:	4414      	add	r4, r2
  406170:	e6c1      	b.n	405ef6 <__adddf3+0xe6>
  406172:	bf00      	nop

00406174 <__aeabi_dmul>:
  406174:	b570      	push	{r4, r5, r6, lr}
  406176:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40617a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40617e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406182:	bf1d      	ittte	ne
  406184:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  406188:	ea94 0f0c 	teqne	r4, ip
  40618c:	ea95 0f0c 	teqne	r5, ip
  406190:	f000 f8de 	bleq	406350 <__aeabi_dmul+0x1dc>
  406194:	442c      	add	r4, r5
  406196:	ea81 0603 	eor.w	r6, r1, r3
  40619a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40619e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4061a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4061a6:	bf18      	it	ne
  4061a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4061ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4061b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4061b4:	d038      	beq.n	406228 <__aeabi_dmul+0xb4>
  4061b6:	fba0 ce02 	umull	ip, lr, r0, r2
  4061ba:	f04f 0500 	mov.w	r5, #0
  4061be:	fbe1 e502 	umlal	lr, r5, r1, r2
  4061c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4061c6:	fbe0 e503 	umlal	lr, r5, r0, r3
  4061ca:	f04f 0600 	mov.w	r6, #0
  4061ce:	fbe1 5603 	umlal	r5, r6, r1, r3
  4061d2:	f09c 0f00 	teq	ip, #0
  4061d6:	bf18      	it	ne
  4061d8:	f04e 0e01 	orrne.w	lr, lr, #1
  4061dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4061e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4061e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4061e8:	d204      	bcs.n	4061f4 <__aeabi_dmul+0x80>
  4061ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4061ee:	416d      	adcs	r5, r5
  4061f0:	eb46 0606 	adc.w	r6, r6, r6
  4061f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4061f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4061fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  406200:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  406204:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  406208:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40620c:	bf88      	it	hi
  40620e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  406212:	d81e      	bhi.n	406252 <__aeabi_dmul+0xde>
  406214:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  406218:	bf08      	it	eq
  40621a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40621e:	f150 0000 	adcs.w	r0, r0, #0
  406222:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406226:	bd70      	pop	{r4, r5, r6, pc}
  406228:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40622c:	ea46 0101 	orr.w	r1, r6, r1
  406230:	ea40 0002 	orr.w	r0, r0, r2
  406234:	ea81 0103 	eor.w	r1, r1, r3
  406238:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40623c:	bfc2      	ittt	gt
  40623e:	ebd4 050c 	rsbsgt	r5, r4, ip
  406242:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  406246:	bd70      	popgt	{r4, r5, r6, pc}
  406248:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40624c:	f04f 0e00 	mov.w	lr, #0
  406250:	3c01      	subs	r4, #1
  406252:	f300 80ab 	bgt.w	4063ac <__aeabi_dmul+0x238>
  406256:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40625a:	bfde      	ittt	le
  40625c:	2000      	movle	r0, #0
  40625e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  406262:	bd70      	pople	{r4, r5, r6, pc}
  406264:	f1c4 0400 	rsb	r4, r4, #0
  406268:	3c20      	subs	r4, #32
  40626a:	da35      	bge.n	4062d8 <__aeabi_dmul+0x164>
  40626c:	340c      	adds	r4, #12
  40626e:	dc1b      	bgt.n	4062a8 <__aeabi_dmul+0x134>
  406270:	f104 0414 	add.w	r4, r4, #20
  406274:	f1c4 0520 	rsb	r5, r4, #32
  406278:	fa00 f305 	lsl.w	r3, r0, r5
  40627c:	fa20 f004 	lsr.w	r0, r0, r4
  406280:	fa01 f205 	lsl.w	r2, r1, r5
  406284:	ea40 0002 	orr.w	r0, r0, r2
  406288:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40628c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406290:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406294:	fa21 f604 	lsr.w	r6, r1, r4
  406298:	eb42 0106 	adc.w	r1, r2, r6
  40629c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4062a0:	bf08      	it	eq
  4062a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4062a6:	bd70      	pop	{r4, r5, r6, pc}
  4062a8:	f1c4 040c 	rsb	r4, r4, #12
  4062ac:	f1c4 0520 	rsb	r5, r4, #32
  4062b0:	fa00 f304 	lsl.w	r3, r0, r4
  4062b4:	fa20 f005 	lsr.w	r0, r0, r5
  4062b8:	fa01 f204 	lsl.w	r2, r1, r4
  4062bc:	ea40 0002 	orr.w	r0, r0, r2
  4062c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4062c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4062c8:	f141 0100 	adc.w	r1, r1, #0
  4062cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4062d0:	bf08      	it	eq
  4062d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4062d6:	bd70      	pop	{r4, r5, r6, pc}
  4062d8:	f1c4 0520 	rsb	r5, r4, #32
  4062dc:	fa00 f205 	lsl.w	r2, r0, r5
  4062e0:	ea4e 0e02 	orr.w	lr, lr, r2
  4062e4:	fa20 f304 	lsr.w	r3, r0, r4
  4062e8:	fa01 f205 	lsl.w	r2, r1, r5
  4062ec:	ea43 0302 	orr.w	r3, r3, r2
  4062f0:	fa21 f004 	lsr.w	r0, r1, r4
  4062f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4062f8:	fa21 f204 	lsr.w	r2, r1, r4
  4062fc:	ea20 0002 	bic.w	r0, r0, r2
  406300:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  406304:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406308:	bf08      	it	eq
  40630a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40630e:	bd70      	pop	{r4, r5, r6, pc}
  406310:	f094 0f00 	teq	r4, #0
  406314:	d10f      	bne.n	406336 <__aeabi_dmul+0x1c2>
  406316:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40631a:	0040      	lsls	r0, r0, #1
  40631c:	eb41 0101 	adc.w	r1, r1, r1
  406320:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406324:	bf08      	it	eq
  406326:	3c01      	subeq	r4, #1
  406328:	d0f7      	beq.n	40631a <__aeabi_dmul+0x1a6>
  40632a:	ea41 0106 	orr.w	r1, r1, r6
  40632e:	f095 0f00 	teq	r5, #0
  406332:	bf18      	it	ne
  406334:	4770      	bxne	lr
  406336:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40633a:	0052      	lsls	r2, r2, #1
  40633c:	eb43 0303 	adc.w	r3, r3, r3
  406340:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  406344:	bf08      	it	eq
  406346:	3d01      	subeq	r5, #1
  406348:	d0f7      	beq.n	40633a <__aeabi_dmul+0x1c6>
  40634a:	ea43 0306 	orr.w	r3, r3, r6
  40634e:	4770      	bx	lr
  406350:	ea94 0f0c 	teq	r4, ip
  406354:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406358:	bf18      	it	ne
  40635a:	ea95 0f0c 	teqne	r5, ip
  40635e:	d00c      	beq.n	40637a <__aeabi_dmul+0x206>
  406360:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406364:	bf18      	it	ne
  406366:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40636a:	d1d1      	bne.n	406310 <__aeabi_dmul+0x19c>
  40636c:	ea81 0103 	eor.w	r1, r1, r3
  406370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406374:	f04f 0000 	mov.w	r0, #0
  406378:	bd70      	pop	{r4, r5, r6, pc}
  40637a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40637e:	bf06      	itte	eq
  406380:	4610      	moveq	r0, r2
  406382:	4619      	moveq	r1, r3
  406384:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406388:	d019      	beq.n	4063be <__aeabi_dmul+0x24a>
  40638a:	ea94 0f0c 	teq	r4, ip
  40638e:	d102      	bne.n	406396 <__aeabi_dmul+0x222>
  406390:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  406394:	d113      	bne.n	4063be <__aeabi_dmul+0x24a>
  406396:	ea95 0f0c 	teq	r5, ip
  40639a:	d105      	bne.n	4063a8 <__aeabi_dmul+0x234>
  40639c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4063a0:	bf1c      	itt	ne
  4063a2:	4610      	movne	r0, r2
  4063a4:	4619      	movne	r1, r3
  4063a6:	d10a      	bne.n	4063be <__aeabi_dmul+0x24a>
  4063a8:	ea81 0103 	eor.w	r1, r1, r3
  4063ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4063b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4063b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4063b8:	f04f 0000 	mov.w	r0, #0
  4063bc:	bd70      	pop	{r4, r5, r6, pc}
  4063be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4063c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4063c6:	bd70      	pop	{r4, r5, r6, pc}

004063c8 <__aeabi_ddiv>:
  4063c8:	b570      	push	{r4, r5, r6, lr}
  4063ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4063ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4063d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4063d6:	bf1d      	ittte	ne
  4063d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4063dc:	ea94 0f0c 	teqne	r4, ip
  4063e0:	ea95 0f0c 	teqne	r5, ip
  4063e4:	f000 f8a7 	bleq	406536 <__aeabi_ddiv+0x16e>
  4063e8:	eba4 0405 	sub.w	r4, r4, r5
  4063ec:	ea81 0e03 	eor.w	lr, r1, r3
  4063f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4063f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4063f8:	f000 8088 	beq.w	40650c <__aeabi_ddiv+0x144>
  4063fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406400:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  406404:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  406408:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40640c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  406410:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  406414:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  406418:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40641c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  406420:	429d      	cmp	r5, r3
  406422:	bf08      	it	eq
  406424:	4296      	cmpeq	r6, r2
  406426:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40642a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40642e:	d202      	bcs.n	406436 <__aeabi_ddiv+0x6e>
  406430:	085b      	lsrs	r3, r3, #1
  406432:	ea4f 0232 	mov.w	r2, r2, rrx
  406436:	1ab6      	subs	r6, r6, r2
  406438:	eb65 0503 	sbc.w	r5, r5, r3
  40643c:	085b      	lsrs	r3, r3, #1
  40643e:	ea4f 0232 	mov.w	r2, r2, rrx
  406442:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  406446:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40644a:	ebb6 0e02 	subs.w	lr, r6, r2
  40644e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406452:	bf22      	ittt	cs
  406454:	1ab6      	subcs	r6, r6, r2
  406456:	4675      	movcs	r5, lr
  406458:	ea40 000c 	orrcs.w	r0, r0, ip
  40645c:	085b      	lsrs	r3, r3, #1
  40645e:	ea4f 0232 	mov.w	r2, r2, rrx
  406462:	ebb6 0e02 	subs.w	lr, r6, r2
  406466:	eb75 0e03 	sbcs.w	lr, r5, r3
  40646a:	bf22      	ittt	cs
  40646c:	1ab6      	subcs	r6, r6, r2
  40646e:	4675      	movcs	r5, lr
  406470:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  406474:	085b      	lsrs	r3, r3, #1
  406476:	ea4f 0232 	mov.w	r2, r2, rrx
  40647a:	ebb6 0e02 	subs.w	lr, r6, r2
  40647e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406482:	bf22      	ittt	cs
  406484:	1ab6      	subcs	r6, r6, r2
  406486:	4675      	movcs	r5, lr
  406488:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40648c:	085b      	lsrs	r3, r3, #1
  40648e:	ea4f 0232 	mov.w	r2, r2, rrx
  406492:	ebb6 0e02 	subs.w	lr, r6, r2
  406496:	eb75 0e03 	sbcs.w	lr, r5, r3
  40649a:	bf22      	ittt	cs
  40649c:	1ab6      	subcs	r6, r6, r2
  40649e:	4675      	movcs	r5, lr
  4064a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4064a4:	ea55 0e06 	orrs.w	lr, r5, r6
  4064a8:	d018      	beq.n	4064dc <__aeabi_ddiv+0x114>
  4064aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4064ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4064b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4064b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4064ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4064be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4064c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4064c6:	d1c0      	bne.n	40644a <__aeabi_ddiv+0x82>
  4064c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4064cc:	d10b      	bne.n	4064e6 <__aeabi_ddiv+0x11e>
  4064ce:	ea41 0100 	orr.w	r1, r1, r0
  4064d2:	f04f 0000 	mov.w	r0, #0
  4064d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4064da:	e7b6      	b.n	40644a <__aeabi_ddiv+0x82>
  4064dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4064e0:	bf04      	itt	eq
  4064e2:	4301      	orreq	r1, r0
  4064e4:	2000      	moveq	r0, #0
  4064e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4064ea:	bf88      	it	hi
  4064ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4064f0:	f63f aeaf 	bhi.w	406252 <__aeabi_dmul+0xde>
  4064f4:	ebb5 0c03 	subs.w	ip, r5, r3
  4064f8:	bf04      	itt	eq
  4064fa:	ebb6 0c02 	subseq.w	ip, r6, r2
  4064fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406502:	f150 0000 	adcs.w	r0, r0, #0
  406506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40650a:	bd70      	pop	{r4, r5, r6, pc}
  40650c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  406510:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  406514:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  406518:	bfc2      	ittt	gt
  40651a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40651e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  406522:	bd70      	popgt	{r4, r5, r6, pc}
  406524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406528:	f04f 0e00 	mov.w	lr, #0
  40652c:	3c01      	subs	r4, #1
  40652e:	e690      	b.n	406252 <__aeabi_dmul+0xde>
  406530:	ea45 0e06 	orr.w	lr, r5, r6
  406534:	e68d      	b.n	406252 <__aeabi_dmul+0xde>
  406536:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40653a:	ea94 0f0c 	teq	r4, ip
  40653e:	bf08      	it	eq
  406540:	ea95 0f0c 	teqeq	r5, ip
  406544:	f43f af3b 	beq.w	4063be <__aeabi_dmul+0x24a>
  406548:	ea94 0f0c 	teq	r4, ip
  40654c:	d10a      	bne.n	406564 <__aeabi_ddiv+0x19c>
  40654e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406552:	f47f af34 	bne.w	4063be <__aeabi_dmul+0x24a>
  406556:	ea95 0f0c 	teq	r5, ip
  40655a:	f47f af25 	bne.w	4063a8 <__aeabi_dmul+0x234>
  40655e:	4610      	mov	r0, r2
  406560:	4619      	mov	r1, r3
  406562:	e72c      	b.n	4063be <__aeabi_dmul+0x24a>
  406564:	ea95 0f0c 	teq	r5, ip
  406568:	d106      	bne.n	406578 <__aeabi_ddiv+0x1b0>
  40656a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40656e:	f43f aefd 	beq.w	40636c <__aeabi_dmul+0x1f8>
  406572:	4610      	mov	r0, r2
  406574:	4619      	mov	r1, r3
  406576:	e722      	b.n	4063be <__aeabi_dmul+0x24a>
  406578:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40657c:	bf18      	it	ne
  40657e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406582:	f47f aec5 	bne.w	406310 <__aeabi_dmul+0x19c>
  406586:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40658a:	f47f af0d 	bne.w	4063a8 <__aeabi_dmul+0x234>
  40658e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  406592:	f47f aeeb 	bne.w	40636c <__aeabi_dmul+0x1f8>
  406596:	e712      	b.n	4063be <__aeabi_dmul+0x24a>

00406598 <__gedf2>:
  406598:	f04f 3cff 	mov.w	ip, #4294967295
  40659c:	e006      	b.n	4065ac <__cmpdf2+0x4>
  40659e:	bf00      	nop

004065a0 <__ledf2>:
  4065a0:	f04f 0c01 	mov.w	ip, #1
  4065a4:	e002      	b.n	4065ac <__cmpdf2+0x4>
  4065a6:	bf00      	nop

004065a8 <__cmpdf2>:
  4065a8:	f04f 0c01 	mov.w	ip, #1
  4065ac:	f84d cd04 	str.w	ip, [sp, #-4]!
  4065b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4065b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4065b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4065bc:	bf18      	it	ne
  4065be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4065c2:	d01b      	beq.n	4065fc <__cmpdf2+0x54>
  4065c4:	b001      	add	sp, #4
  4065c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4065ca:	bf0c      	ite	eq
  4065cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4065d0:	ea91 0f03 	teqne	r1, r3
  4065d4:	bf02      	ittt	eq
  4065d6:	ea90 0f02 	teqeq	r0, r2
  4065da:	2000      	moveq	r0, #0
  4065dc:	4770      	bxeq	lr
  4065de:	f110 0f00 	cmn.w	r0, #0
  4065e2:	ea91 0f03 	teq	r1, r3
  4065e6:	bf58      	it	pl
  4065e8:	4299      	cmppl	r1, r3
  4065ea:	bf08      	it	eq
  4065ec:	4290      	cmpeq	r0, r2
  4065ee:	bf2c      	ite	cs
  4065f0:	17d8      	asrcs	r0, r3, #31
  4065f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4065f6:	f040 0001 	orr.w	r0, r0, #1
  4065fa:	4770      	bx	lr
  4065fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406600:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406604:	d102      	bne.n	40660c <__cmpdf2+0x64>
  406606:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40660a:	d107      	bne.n	40661c <__cmpdf2+0x74>
  40660c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406614:	d1d6      	bne.n	4065c4 <__cmpdf2+0x1c>
  406616:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40661a:	d0d3      	beq.n	4065c4 <__cmpdf2+0x1c>
  40661c:	f85d 0b04 	ldr.w	r0, [sp], #4
  406620:	4770      	bx	lr
  406622:	bf00      	nop

00406624 <__aeabi_cdrcmple>:
  406624:	4684      	mov	ip, r0
  406626:	4610      	mov	r0, r2
  406628:	4662      	mov	r2, ip
  40662a:	468c      	mov	ip, r1
  40662c:	4619      	mov	r1, r3
  40662e:	4663      	mov	r3, ip
  406630:	e000      	b.n	406634 <__aeabi_cdcmpeq>
  406632:	bf00      	nop

00406634 <__aeabi_cdcmpeq>:
  406634:	b501      	push	{r0, lr}
  406636:	f7ff ffb7 	bl	4065a8 <__cmpdf2>
  40663a:	2800      	cmp	r0, #0
  40663c:	bf48      	it	mi
  40663e:	f110 0f00 	cmnmi.w	r0, #0
  406642:	bd01      	pop	{r0, pc}

00406644 <__aeabi_dcmpeq>:
  406644:	f84d ed08 	str.w	lr, [sp, #-8]!
  406648:	f7ff fff4 	bl	406634 <__aeabi_cdcmpeq>
  40664c:	bf0c      	ite	eq
  40664e:	2001      	moveq	r0, #1
  406650:	2000      	movne	r0, #0
  406652:	f85d fb08 	ldr.w	pc, [sp], #8
  406656:	bf00      	nop

00406658 <__aeabi_dcmplt>:
  406658:	f84d ed08 	str.w	lr, [sp, #-8]!
  40665c:	f7ff ffea 	bl	406634 <__aeabi_cdcmpeq>
  406660:	bf34      	ite	cc
  406662:	2001      	movcc	r0, #1
  406664:	2000      	movcs	r0, #0
  406666:	f85d fb08 	ldr.w	pc, [sp], #8
  40666a:	bf00      	nop

0040666c <__aeabi_dcmple>:
  40666c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406670:	f7ff ffe0 	bl	406634 <__aeabi_cdcmpeq>
  406674:	bf94      	ite	ls
  406676:	2001      	movls	r0, #1
  406678:	2000      	movhi	r0, #0
  40667a:	f85d fb08 	ldr.w	pc, [sp], #8
  40667e:	bf00      	nop

00406680 <__aeabi_dcmpge>:
  406680:	f84d ed08 	str.w	lr, [sp, #-8]!
  406684:	f7ff ffce 	bl	406624 <__aeabi_cdrcmple>
  406688:	bf94      	ite	ls
  40668a:	2001      	movls	r0, #1
  40668c:	2000      	movhi	r0, #0
  40668e:	f85d fb08 	ldr.w	pc, [sp], #8
  406692:	bf00      	nop

00406694 <__aeabi_dcmpgt>:
  406694:	f84d ed08 	str.w	lr, [sp, #-8]!
  406698:	f7ff ffc4 	bl	406624 <__aeabi_cdrcmple>
  40669c:	bf34      	ite	cc
  40669e:	2001      	movcc	r0, #1
  4066a0:	2000      	movcs	r0, #0
  4066a2:	f85d fb08 	ldr.w	pc, [sp], #8
  4066a6:	bf00      	nop

004066a8 <__aeabi_dcmpun>:
  4066a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4066ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4066b0:	d102      	bne.n	4066b8 <__aeabi_dcmpun+0x10>
  4066b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4066b6:	d10a      	bne.n	4066ce <__aeabi_dcmpun+0x26>
  4066b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4066bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4066c0:	d102      	bne.n	4066c8 <__aeabi_dcmpun+0x20>
  4066c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4066c6:	d102      	bne.n	4066ce <__aeabi_dcmpun+0x26>
  4066c8:	f04f 0000 	mov.w	r0, #0
  4066cc:	4770      	bx	lr
  4066ce:	f04f 0001 	mov.w	r0, #1
  4066d2:	4770      	bx	lr

004066d4 <__aeabi_d2iz>:
  4066d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4066d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4066dc:	d215      	bcs.n	40670a <__aeabi_d2iz+0x36>
  4066de:	d511      	bpl.n	406704 <__aeabi_d2iz+0x30>
  4066e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4066e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4066e8:	d912      	bls.n	406710 <__aeabi_d2iz+0x3c>
  4066ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4066ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4066f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4066f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4066fa:	fa23 f002 	lsr.w	r0, r3, r2
  4066fe:	bf18      	it	ne
  406700:	4240      	negne	r0, r0
  406702:	4770      	bx	lr
  406704:	f04f 0000 	mov.w	r0, #0
  406708:	4770      	bx	lr
  40670a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40670e:	d105      	bne.n	40671c <__aeabi_d2iz+0x48>
  406710:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  406714:	bf08      	it	eq
  406716:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40671a:	4770      	bx	lr
  40671c:	f04f 0000 	mov.w	r0, #0
  406720:	4770      	bx	lr
  406722:	bf00      	nop
  406724:	64323025 	.word	0x64323025
  406728:	3230253a 	.word	0x3230253a
  40672c:	00000064 	.word	0x00000064

00406730 <sysfont_glyphs>:
	...
  406750:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  406760:	00000030 00000000 00000000 006c006c     0...........l.l.
  406770:	006c006c 00000000 00000000 00000000     l.l.............
	...
  406788:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  406798:	00000028 00000000 00000000 003c0010     (.............<.
  4067a8:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  4067c0:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  4067d0:	00000088 00000000 00000000 00900060     ............`...
  4067e0:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  4067f8:	00100010 00000010 00000000 00000000     ................
	...
  406814:	00100008 00200020 00200020 00200020     .... . . . . . .
  406824:	00080010 00000000 00000000 00100020     ............ ...
  406834:	00080008 00080008 00080008 00200010     .............. .
  406844:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  40686c:	00100010 00fe0010 00100010 00000010     ................
	...
  406894:	00300010 00000020 00000000 00000000     ..0. ...........
  4068a4:	00000000 007c0000 00000000 00000000     ......|.........
	...
  4068c8:	00300000 00000030 00000000 00000000     ..0.0...........
  4068d8:	00080000 00100008 00200010 00400020     .......... . .@.
  4068e8:	00000040 00000000 00000000 00780000     @.............x.
  4068f8:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  406910:	00100000 00500030 00100010 00100010     ....0.P.........
  406920:	0000007c 00000000 00000000 00700000     |.............p.
  406930:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  406948:	00700000 00080088 00080030 00880008     ..p.....0.......
  406958:	00000070 00000000 00000000 00080000     p...............
  406968:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  406980:	00780000 00800080 000800f0 00080008     ..x.............
  406990:	000000f0 00000000 00000000 00300000     ..............0.
  4069a0:	00800040 008800f0 00880088 00000070     @...........p...
	...
  4069b8:	00f80000 00100008 00200010 00400020     .......... . .@.
  4069c8:	00000040 00000000 00000000 00700000     @.............p.
  4069d8:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  4069f0:	00700000 00880088 00780088 00100008     ..p.......x.....
  406a00:	00000060 00000000 00000000 00000000     `...............
  406a10:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  406a2c:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  406a3c:	00000040 00000000 00000000 00100008     @...............
  406a4c:	00400020 00100020 00000008 00000000      .@. ...........
	...
  406a68:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  406a80:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  406a98:	00300000 00080048 00200010 00000000     ..0.H..... .....
  406aa8:	00000020 00000000 00000000 00000000      ...............
  406ab8:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  406ad0:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  406ae0:	00000044 00000000 00000000 00f80000     D...............
  406af0:	00840084 008400f8 00840084 000000f8     ................
	...
  406b08:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  406b18:	0000003c 00000000 00000000 00f00000     <...............
  406b28:	00840088 00840084 00880084 000000f0     ................
	...
  406b40:	00f80000 00800080 008000f0 00800080     ................
  406b50:	000000f8 00000000 00000000 00f80000     ................
  406b60:	00800080 008000f8 00800080 00000080     ................
	...
  406b78:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  406b88:	00000038 00000000 00000000 00880000     8...............
  406b98:	00880088 008800f8 00880088 00000088     ................
	...
  406bb0:	00f80000 00200020 00200020 00200020     .... . . . . . .
  406bc0:	000000f8 00000000 00000000 00f80000     ................
  406bd0:	00080008 00080008 00080008 000000f0     ................
	...
  406be8:	00840000 00900088 00d000a0 00840088     ................
  406bf8:	00000084 00000000 00000000 00800000     ................
  406c08:	00800080 00800080 00800080 000000fc     ................
	...
  406c20:	00840000 00cc00cc 00b400b4 00840084     ................
  406c30:	00000084 00000000 00000000 00840000     ................
  406c40:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  406c58:	00780000 00840084 00840084 00840084     ..x.............
  406c68:	00000078 00000000 00000000 00f80000     x...............
  406c78:	00840084 00f80084 00800080 00000080     ................
	...
  406c90:	00780000 00840084 00840084 00840084     ..x.............
  406ca0:	00200078 00000018 00000000 00f80000     x. .............
  406cb0:	00840084 00f80084 00840088 00000084     ................
	...
  406cc8:	007c0000 00800080 00180060 00040004     ..|.....`.......
  406cd8:	000000f8 00000000 00000000 00f80000     ................
  406ce8:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  406d00:	00840000 00840084 00840084 00840084     ................
  406d10:	00000078 00000000 00000000 00840000     x...............
  406d20:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  406d38:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  406d48:	00000050 00000000 00000000 00880000     P...............
  406d58:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  406d70:	00880000 00880088 00500050 00200020     ........P.P. . .
  406d80:	00000020 00000000 00000000 00fc0000      ...............
  406d90:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  406da8:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  406db8:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  406dc8:	00200020 00100020 00100010 00080008      . . ...........
	...
  406de0:	00080038 00080008 00080008 00080008     8...............
  406df0:	00080008 00000038 00000000 00280010     ....8.........(.
  406e00:	00000044 00000000 00000000 00000000     D...............
	...
  406e28:	00000038 00000000 00000000 00200000     8............. .
  406e38:	00000010 00000000 00000000 00000000     ................
	...
  406e54:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  406e6c:	00800080 00f80080 00840084 00840084     ................
  406e7c:	000000f8 00000000 00000000 00000000     ................
  406e8c:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  406ea4:	00040004 007c0004 00840084 008c0084     ......|.........
  406eb4:	00000074 00000000 00000000 00000000     t...............
  406ec4:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  406edc:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  406eec:	000000fc 00000000 00000000 00000000     ................
  406efc:	007c0000 00840084 00840084 0004007c     ..|.........|...
  406f0c:	00000078 00000000 00800080 00b80080     x...............
  406f1c:	008400c4 00840084 00000084 00000000     ................
  406f2c:	00000000 00100000 00700000 00100010     ..........p.....
  406f3c:	00100010 0000007c 00000000 00000000     ....|...........
  406f4c:	00080000 00780000 00080008 00080008     ......x.........
  406f5c:	00080008 00700008 00000000 00800080     ......p.........
  406f6c:	00880080 00a00090 008800d0 00000088     ................
	...
  406f84:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  406f94:	000000f8 00000000 00000000 00000000     ................
  406fa4:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  406fc0:	00b80000 008400c4 00840084 00000084     ................
	...
  406fdc:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  406ff8:	00b80000 008400c4 00840084 008000f8     ................
  407008:	00000080 00000000 00000000 007c0000     ..............|.
  407018:	00840084 00840084 0004007c 00000004     ........|.......
	...
  407030:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  40704c:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  407068:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  407084:	00880000 00880088 00880088 0000007c     ............|...
	...
  4070a0:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  4070bc:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  4070d8:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  4070f4:	00840000 00480084 00300048 00200010     ......H.H.0... .
  407104:	00000040 00000000 00000000 00f80000     @...............
  407114:	00100008 00400020 000000f8 00000000     .... .@.........
  407124:	00000000 00200010 00100020 00200020     ...... . ... . .
  407134:	00200010 00100020 00000000 00000000     .. . ...........
  407144:	00100010 00100010 00000000 00100010     ................
  407154:	00100010 00000000 00000000 00100020     ............ ...
  407164:	00200010 00100010 00100020 00200010     .. ..... ..... .
  407174:	00000000                                ....

00407178 <_global_impure_ptr>:
  407178:	20400028 00464e49 00666e69 004e414e     (.@ INF.inf.NAN.
  407188:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  407198:	46454443 00000000 33323130 37363534     CDEF....01234567
  4071a8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4071b8:	0000296c 00000030                       l)..0...

004071c0 <blanks.7223>:
  4071c0:	20202020 20202020 20202020 20202020                     

004071d0 <zeroes.7224>:
  4071d0:	30303030 30303030 30303030 30303030     0000000000000000
  4071e0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

004071f0 <__mprec_bigtens>:
  4071f0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  407200:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  407210:	7f73bf3c 75154fdd                       <.s..O.u

00407218 <__mprec_tens>:
  407218:	00000000 3ff00000 00000000 40240000     .......?......$@
  407228:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  407238:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  407248:	00000000 412e8480 00000000 416312d0     .......A......cA
  407258:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  407268:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  407278:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  407288:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  407298:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4072a8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  4072b8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4072c8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4072d8:	79d99db4 44ea7843                       ...yCx.D

004072e0 <p05.6055>:
  4072e0:	00000005 00000019 0000007d 00000043     ........}...C...
  4072f0:	49534f50 00000058 0000002e              POSIX.......

004072fc <_ctype_>:
  4072fc:	20202000 20202020 28282020 20282828     .         ((((( 
  40730c:	20202020 20202020 20202020 20202020                     
  40731c:	10108820 10101010 10101010 10101010      ...............
  40732c:	04040410 04040404 10040404 10101010     ................
  40733c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40734c:	01010101 01010101 01010101 10101010     ................
  40735c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40736c:	02020202 02020202 02020202 10101010     ................
  40737c:	00000020 00000000 00000000 00000000      ...............
	...

00407400 <_init>:
  407400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407402:	bf00      	nop
  407404:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407406:	bc08      	pop	{r3}
  407408:	469e      	mov	lr, r3
  40740a:	4770      	bx	lr

0040740c <__init_array_start>:
  40740c:	0040369d 	.word	0x0040369d

00407410 <__frame_dummy_init_array_entry>:
  407410:	00400165                                e.@.

00407414 <_fini>:
  407414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407416:	bf00      	nop
  407418:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40741a:	bc08      	pop	{r3}
  40741c:	469e      	mov	lr, r3
  40741e:	4770      	bx	lr

00407420 <__fini_array_start>:
  407420:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 6730 0040 0e0a 7d20               ....0g@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <start>:
20400020:	0001 0000                                   ....

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	0cb0 2040                                   ..@ 

20400454 <__malloc_av_>:
	...
2040045c:	0454 2040 0454 2040 045c 2040 045c 2040     T.@ T.@ \.@ \.@ 
2040046c:	0464 2040 0464 2040 046c 2040 046c 2040     d.@ d.@ l.@ l.@ 
2040047c:	0474 2040 0474 2040 047c 2040 047c 2040     t.@ t.@ |.@ |.@ 
2040048c:	0484 2040 0484 2040 048c 2040 048c 2040     ..@ ..@ ..@ ..@ 
2040049c:	0494 2040 0494 2040 049c 2040 049c 2040     ..@ ..@ ..@ ..@ 
204004ac:	04a4 2040 04a4 2040 04ac 2040 04ac 2040     ..@ ..@ ..@ ..@ 
204004bc:	04b4 2040 04b4 2040 04bc 2040 04bc 2040     ..@ ..@ ..@ ..@ 
204004cc:	04c4 2040 04c4 2040 04cc 2040 04cc 2040     ..@ ..@ ..@ ..@ 
204004dc:	04d4 2040 04d4 2040 04dc 2040 04dc 2040     ..@ ..@ ..@ ..@ 
204004ec:	04e4 2040 04e4 2040 04ec 2040 04ec 2040     ..@ ..@ ..@ ..@ 
204004fc:	04f4 2040 04f4 2040 04fc 2040 04fc 2040     ..@ ..@ ..@ ..@ 
2040050c:	0504 2040 0504 2040 050c 2040 050c 2040     ..@ ..@ ..@ ..@ 
2040051c:	0514 2040 0514 2040 051c 2040 051c 2040     ..@ ..@ ..@ ..@ 
2040052c:	0524 2040 0524 2040 052c 2040 052c 2040     $.@ $.@ ,.@ ,.@ 
2040053c:	0534 2040 0534 2040 053c 2040 053c 2040     4.@ 4.@ <.@ <.@ 
2040054c:	0544 2040 0544 2040 054c 2040 054c 2040     D.@ D.@ L.@ L.@ 
2040055c:	0554 2040 0554 2040 055c 2040 055c 2040     T.@ T.@ \.@ \.@ 
2040056c:	0564 2040 0564 2040 056c 2040 056c 2040     d.@ d.@ l.@ l.@ 
2040057c:	0574 2040 0574 2040 057c 2040 057c 2040     t.@ t.@ |.@ |.@ 
2040058c:	0584 2040 0584 2040 058c 2040 058c 2040     ..@ ..@ ..@ ..@ 
2040059c:	0594 2040 0594 2040 059c 2040 059c 2040     ..@ ..@ ..@ ..@ 
204005ac:	05a4 2040 05a4 2040 05ac 2040 05ac 2040     ..@ ..@ ..@ ..@ 
204005bc:	05b4 2040 05b4 2040 05bc 2040 05bc 2040     ..@ ..@ ..@ ..@ 
204005cc:	05c4 2040 05c4 2040 05cc 2040 05cc 2040     ..@ ..@ ..@ ..@ 
204005dc:	05d4 2040 05d4 2040 05dc 2040 05dc 2040     ..@ ..@ ..@ ..@ 
204005ec:	05e4 2040 05e4 2040 05ec 2040 05ec 2040     ..@ ..@ ..@ ..@ 
204005fc:	05f4 2040 05f4 2040 05fc 2040 05fc 2040     ..@ ..@ ..@ ..@ 
2040060c:	0604 2040 0604 2040 060c 2040 060c 2040     ..@ ..@ ..@ ..@ 
2040061c:	0614 2040 0614 2040 061c 2040 061c 2040     ..@ ..@ ..@ ..@ 
2040062c:	0624 2040 0624 2040 062c 2040 062c 2040     $.@ $.@ ,.@ ,.@ 
2040063c:	0634 2040 0634 2040 063c 2040 063c 2040     4.@ 4.@ <.@ <.@ 
2040064c:	0644 2040 0644 2040 064c 2040 064c 2040     D.@ D.@ L.@ L.@ 
2040065c:	0654 2040 0654 2040 065c 2040 065c 2040     T.@ T.@ \.@ \.@ 
2040066c:	0664 2040 0664 2040 066c 2040 066c 2040     d.@ d.@ l.@ l.@ 
2040067c:	0674 2040 0674 2040 067c 2040 067c 2040     t.@ t.@ |.@ |.@ 
2040068c:	0684 2040 0684 2040 068c 2040 068c 2040     ..@ ..@ ..@ ..@ 
2040069c:	0694 2040 0694 2040 069c 2040 069c 2040     ..@ ..@ ..@ ..@ 
204006ac:	06a4 2040 06a4 2040 06ac 2040 06ac 2040     ..@ ..@ ..@ ..@ 
204006bc:	06b4 2040 06b4 2040 06bc 2040 06bc 2040     ..@ ..@ ..@ ..@ 
204006cc:	06c4 2040 06c4 2040 06cc 2040 06cc 2040     ..@ ..@ ..@ ..@ 
204006dc:	06d4 2040 06d4 2040 06dc 2040 06dc 2040     ..@ ..@ ..@ ..@ 
204006ec:	06e4 2040 06e4 2040 06ec 2040 06ec 2040     ..@ ..@ ..@ ..@ 
204006fc:	06f4 2040 06f4 2040 06fc 2040 06fc 2040     ..@ ..@ ..@ ..@ 
2040070c:	0704 2040 0704 2040 070c 2040 070c 2040     ..@ ..@ ..@ ..@ 
2040071c:	0714 2040 0714 2040 071c 2040 071c 2040     ..@ ..@ ..@ ..@ 
2040072c:	0724 2040 0724 2040 072c 2040 072c 2040     $.@ $.@ ,.@ ,.@ 
2040073c:	0734 2040 0734 2040 073c 2040 073c 2040     4.@ 4.@ <.@ <.@ 
2040074c:	0744 2040 0744 2040 074c 2040 074c 2040     D.@ D.@ L.@ L.@ 
2040075c:	0754 2040 0754 2040 075c 2040 075c 2040     T.@ T.@ \.@ \.@ 
2040076c:	0764 2040 0764 2040 076c 2040 076c 2040     d.@ d.@ l.@ l.@ 
2040077c:	0774 2040 0774 2040 077c 2040 077c 2040     t.@ t.@ |.@ |.@ 
2040078c:	0784 2040 0784 2040 078c 2040 078c 2040     ..@ ..@ ..@ ..@ 
2040079c:	0794 2040 0794 2040 079c 2040 079c 2040     ..@ ..@ ..@ ..@ 
204007ac:	07a4 2040 07a4 2040 07ac 2040 07ac 2040     ..@ ..@ ..@ ..@ 
204007bc:	07b4 2040 07b4 2040 07bc 2040 07bc 2040     ..@ ..@ ..@ ..@ 
204007cc:	07c4 2040 07c4 2040 07cc 2040 07cc 2040     ..@ ..@ ..@ ..@ 
204007dc:	07d4 2040 07d4 2040 07dc 2040 07dc 2040     ..@ ..@ ..@ ..@ 
204007ec:	07e4 2040 07e4 2040 07ec 2040 07ec 2040     ..@ ..@ ..@ ..@ 
204007fc:	07f4 2040 07f4 2040 07fc 2040 07fc 2040     ..@ ..@ ..@ ..@ 
2040080c:	0804 2040 0804 2040 080c 2040 080c 2040     ..@ ..@ ..@ ..@ 
2040081c:	0814 2040 0814 2040 081c 2040 081c 2040     ..@ ..@ ..@ ..@ 
2040082c:	0824 2040 0824 2040 082c 2040 082c 2040     $.@ $.@ ,.@ ,.@ 
2040083c:	0834 2040 0834 2040 083c 2040 083c 2040     4.@ 4.@ <.@ <.@ 
2040084c:	0844 2040 0844 2040 084c 2040 084c 2040     D.@ D.@ L.@ L.@ 

2040085c <__malloc_sbrk_base>:
2040085c:	ffff ffff                                   ....

20400860 <__malloc_trim_threshold>:
20400860:	0000 0002                                   ....

20400864 <__global_locale>:
20400864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	5de9 0040 59a9 0040 0000 0000 72fc 0040     .]@..Y@......r@.
20400954:	72f8 0040 719c 0040 719c 0040 719c 0040     .r@..q@..q@..q@.
20400964:	719c 0040 719c 0040 719c 0040 719c 0040     .q@..q@..q@..q@.
20400974:	719c 0040 719c 0040 ffff ffff ffff ffff     .q@..q@.........
20400984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
