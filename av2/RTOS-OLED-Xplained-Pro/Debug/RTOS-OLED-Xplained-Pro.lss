
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007b78  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407b78  00407b78  00017b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00407b80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000052c  204009c0  00408540  000209c0  2**2
                  ALLOC
  4 .stack        00002004  20400eec  00408a6c  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402ef0  0040aa70  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002c414  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005c25  00000000  00000000  0004ce5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001320  00000000  00000000  00052a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00027640  00000000  00000000  00053da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000198ff  00000000  00000000  0007b3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00097b95  00000000  00000000  00094cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d0ee  00000000  00000000  0012c874  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001480  00000000  00000000  00139962  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003b4c  00000000  00000000  0013ade4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 2e 40 20 81 17 40 00 7f 17 40 00 7f 17 40 00     ..@ ..@...@...@.
  400010:	7f 17 40 00 7f 17 40 00 7f 17 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	59 1b 40 00 7f 17 40 00 00 00 00 00 f9 1b 40 00     Y.@...@.......@.
  40003c:	61 1c 40 00 7f 17 40 00 7f 17 40 00 7d 3f 40 00     a.@...@...@.}?@.
  40004c:	6d 42 40 00 7f 17 40 00 7f 17 40 00 7f 17 40 00     mB@...@...@...@.
  40005c:	7f 17 40 00 7f 17 40 00 00 00 00 00 71 14 40 00     ..@...@.....q.@.
  40006c:	85 14 40 00 99 14 40 00 7f 17 40 00 7f 17 40 00     ..@...@...@...@.
  40007c:	7f 17 40 00 ad 14 40 00 c1 14 40 00 7f 17 40 00     ..@...@...@...@.
  40008c:	7f 17 40 00 7f 17 40 00 7f 17 40 00 7f 17 40 00     ..@...@...@...@.
  40009c:	f5 3e 40 00 21 3f 40 00 4d 3f 40 00 7f 17 40 00     .>@.!?@.M?@...@.
  4000ac:	7f 17 40 00 7f 17 40 00 21 04 40 00 7f 17 40 00     ..@...@.!.@...@.
  4000bc:	7f 17 40 00 7f 17 40 00 7f 17 40 00 7f 17 40 00     ..@...@...@...@.
  4000cc:	7f 17 40 00 00 00 00 00 7f 17 40 00 00 00 00 00     ..@.......@.....
  4000dc:	7f 17 40 00 35 04 40 00 7f 17 40 00 7f 17 40 00     ..@.5.@...@...@.
  4000ec:	7f 17 40 00 7f 17 40 00 7f 17 40 00 7f 17 40 00     ..@...@...@...@.
  4000fc:	7f 17 40 00 7f 17 40 00 7f 17 40 00 7f 17 40 00     ..@...@...@...@.
  40010c:	7f 17 40 00 7f 17 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 7f 17 40 00 7f 17 40 00 7f 17 40 00     ......@...@...@.
  40012c:	7f 17 40 00 7f 17 40 00 00 00 00 00 7f 17 40 00     ..@...@.......@.
  40013c:	7f 17 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c0 	.word	0x204009c0
  40015c:	00000000 	.word	0x00000000
  400160:	00407b80 	.word	0x00407b80

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00407b80 	.word	0x00407b80
  4001a0:	204009c4 	.word	0x204009c4
  4001a4:	00407b80 	.word	0x00407b80
  4001a8:	00000000 	.word	0x00000000

004001ac <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001ac:	b570      	push	{r4, r5, r6, lr}
  4001ae:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001b4:	4013      	ands	r3, r2
  4001b6:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001b8:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001ba:	4e1c      	ldr	r6, [pc, #112]	; (40022c <afec_process_callback+0x80>)
  4001bc:	4d1c      	ldr	r5, [pc, #112]	; (400230 <afec_process_callback+0x84>)
  4001be:	42a8      	cmp	r0, r5
  4001c0:	bf14      	ite	ne
  4001c2:	2000      	movne	r0, #0
  4001c4:	2001      	moveq	r0, #1
  4001c6:	0105      	lsls	r5, r0, #4
  4001c8:	e00b      	b.n	4001e2 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001ca:	2c0e      	cmp	r4, #14
  4001cc:	d81e      	bhi.n	40020c <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001ce:	9a01      	ldr	r2, [sp, #4]
  4001d0:	f104 010c 	add.w	r1, r4, #12
  4001d4:	2301      	movs	r3, #1
  4001d6:	408b      	lsls	r3, r1
  4001d8:	4213      	tst	r3, r2
  4001da:	d110      	bne.n	4001fe <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001dc:	3401      	adds	r4, #1
  4001de:	2c10      	cmp	r4, #16
  4001e0:	d022      	beq.n	400228 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4001e2:	2c0b      	cmp	r4, #11
  4001e4:	d8f1      	bhi.n	4001ca <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4001e6:	9a01      	ldr	r2, [sp, #4]
  4001e8:	2301      	movs	r3, #1
  4001ea:	40a3      	lsls	r3, r4
  4001ec:	4213      	tst	r3, r2
  4001ee:	d0f5      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001f0:	192b      	adds	r3, r5, r4
  4001f2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4001f6:	2b00      	cmp	r3, #0
  4001f8:	d0f0      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4001fa:	4798      	blx	r3
  4001fc:	e7ee      	b.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001fe:	192b      	adds	r3, r5, r4
  400200:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400204:	2b00      	cmp	r3, #0
  400206:	d0e9      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400208:	4798      	blx	r3
  40020a:	e7e7      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40020c:	9a01      	ldr	r2, [sp, #4]
  40020e:	f104 010f 	add.w	r1, r4, #15
  400212:	2301      	movs	r3, #1
  400214:	408b      	lsls	r3, r1
  400216:	4213      	tst	r3, r2
  400218:	d0e0      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40021a:	192b      	adds	r3, r5, r4
  40021c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400220:	2b00      	cmp	r3, #0
  400222:	d0db      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400224:	4798      	blx	r3
  400226:	e7d9      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400228:	b002      	add	sp, #8
  40022a:	bd70      	pop	{r4, r5, r6, pc}
  40022c:	20400de0 	.word	0x20400de0
  400230:	40064000 	.word	0x40064000

00400234 <afec_ch_set_config>:
{
  400234:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400236:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400238:	2301      	movs	r3, #1
  40023a:	408b      	lsls	r3, r1
  40023c:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400240:	7815      	ldrb	r5, [r2, #0]
  400242:	2d00      	cmp	r5, #0
  400244:	bf08      	it	eq
  400246:	2300      	moveq	r3, #0
  400248:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40024a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40024c:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40024e:	004b      	lsls	r3, r1, #1
  400250:	2103      	movs	r1, #3
  400252:	4099      	lsls	r1, r3
  400254:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400258:	7851      	ldrb	r1, [r2, #1]
  40025a:	4099      	lsls	r1, r3
  40025c:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  40025e:	6541      	str	r1, [r0, #84]	; 0x54
}
  400260:	bc30      	pop	{r4, r5}
  400262:	4770      	bx	lr

00400264 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  400264:	784b      	ldrb	r3, [r1, #1]
  400266:	780a      	ldrb	r2, [r1, #0]
  400268:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  40026a:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  40026c:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  40026e:	884b      	ldrh	r3, [r1, #2]
  400270:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400274:	6743      	str	r3, [r0, #116]	; 0x74
  400276:	4770      	bx	lr

00400278 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400278:	2200      	movs	r2, #0
  40027a:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  40027c:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <afec_get_config_defaults+0x28>)
  40027e:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400280:	4b08      	ldr	r3, [pc, #32]	; (4002a4 <afec_get_config_defaults+0x2c>)
  400282:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400288:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  40028a:	2302      	movs	r3, #2
  40028c:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40028e:	2301      	movs	r3, #1
  400290:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  400292:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400294:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400296:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400298:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  40029a:	7583      	strb	r3, [r0, #22]
  40029c:	4770      	bx	lr
  40029e:	bf00      	nop
  4002a0:	11e1a300 	.word	0x11e1a300
  4002a4:	005b8d80 	.word	0x005b8d80

004002a8 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4002a8:	2300      	movs	r3, #0
  4002aa:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4002ac:	2301      	movs	r3, #1
  4002ae:	7043      	strb	r3, [r0, #1]
  4002b0:	4770      	bx	lr

004002b2 <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  4002b2:	2300      	movs	r3, #0
  4002b4:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  4002b6:	2320      	movs	r3, #32
  4002b8:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  4002ba:	23ff      	movs	r3, #255	; 0xff
  4002bc:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  4002be:	f640 73ff 	movw	r3, #4095	; 0xfff
  4002c2:	8083      	strh	r3, [r0, #4]
  4002c4:	4770      	bx	lr
	...

004002c8 <afec_init>:
	return afec->AFEC_ISR;
  4002c8:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4002ca:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  4002ce:	d001      	beq.n	4002d4 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4002d0:	2019      	movs	r0, #25
  4002d2:	4770      	bx	lr
{
  4002d4:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4002d6:	2301      	movs	r3, #1
  4002d8:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002da:	7ccb      	ldrb	r3, [r1, #19]
  4002dc:	2b00      	cmp	r3, #0
  4002de:	bf18      	it	ne
  4002e0:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4002e4:	684b      	ldr	r3, [r1, #4]
  4002e6:	688c      	ldr	r4, [r1, #8]
  4002e8:	fbb3 f3f4 	udiv	r3, r3, r4
  4002ec:	3b01      	subs	r3, #1
  4002ee:	021b      	lsls	r3, r3, #8
  4002f0:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002f2:	68cc      	ldr	r4, [r1, #12]
  4002f4:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  4002f8:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002fa:	7c0c      	ldrb	r4, [r1, #16]
  4002fc:	0624      	lsls	r4, r4, #24
  4002fe:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400302:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400304:	7c4c      	ldrb	r4, [r1, #17]
  400306:	0724      	lsls	r4, r4, #28
  400308:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40030c:	4323      	orrs	r3, r4
  40030e:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400310:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400312:	7d0b      	ldrb	r3, [r1, #20]
  400314:	2b00      	cmp	r3, #0
  400316:	bf14      	ite	ne
  400318:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  40031c:	2300      	moveq	r3, #0
  40031e:	680a      	ldr	r2, [r1, #0]
  400320:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400322:	7d4a      	ldrb	r2, [r1, #21]
  400324:	2a00      	cmp	r2, #0
  400326:	bf14      	ite	ne
  400328:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  40032c:	2200      	moveq	r2, #0
			(config->resolution) |
  40032e:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400330:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400332:	7d8b      	ldrb	r3, [r1, #22]
  400334:	021b      	lsls	r3, r3, #8
  400336:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40033a:	f043 030c 	orr.w	r3, r3, #12
  40033e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400342:	4b0f      	ldr	r3, [pc, #60]	; (400380 <afec_init+0xb8>)
  400344:	4298      	cmp	r0, r3
  400346:	d006      	beq.n	400356 <afec_init+0x8e>
	if(afec == AFEC1) {
  400348:	4b0e      	ldr	r3, [pc, #56]	; (400384 <afec_init+0xbc>)
  40034a:	4298      	cmp	r0, r3
  40034c:	d00d      	beq.n	40036a <afec_init+0xa2>
	return STATUS_OK;
  40034e:	2000      	movs	r0, #0
}
  400350:	f85d 4b04 	ldr.w	r4, [sp], #4
  400354:	4770      	bx	lr
  400356:	4b0c      	ldr	r3, [pc, #48]	; (400388 <afec_init+0xc0>)
  400358:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  40035c:	2200      	movs	r2, #0
  40035e:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400362:	428b      	cmp	r3, r1
  400364:	d1fb      	bne.n	40035e <afec_init+0x96>
	return STATUS_OK;
  400366:	2000      	movs	r0, #0
  400368:	e7f2      	b.n	400350 <afec_init+0x88>
  40036a:	4b08      	ldr	r3, [pc, #32]	; (40038c <afec_init+0xc4>)
  40036c:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400370:	2200      	movs	r2, #0
  400372:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400376:	428b      	cmp	r3, r1
  400378:	d1fb      	bne.n	400372 <afec_init+0xaa>
	return STATUS_OK;
  40037a:	2000      	movs	r0, #0
  40037c:	e7e8      	b.n	400350 <afec_init+0x88>
  40037e:	bf00      	nop
  400380:	4003c000 	.word	0x4003c000
  400384:	40064000 	.word	0x40064000
  400388:	20400ddc 	.word	0x20400ddc
  40038c:	20400e20 	.word	0x20400e20

00400390 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400390:	4b0c      	ldr	r3, [pc, #48]	; (4003c4 <afec_enable_interrupt+0x34>)
  400392:	4299      	cmp	r1, r3
  400394:	d007      	beq.n	4003a6 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400396:	290b      	cmp	r1, #11
  400398:	d80b      	bhi.n	4003b2 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40039a:	d006      	beq.n	4003aa <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  40039c:	2301      	movs	r3, #1
  40039e:	fa03 f101 	lsl.w	r1, r3, r1
  4003a2:	6241      	str	r1, [r0, #36]	; 0x24
  4003a4:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4003a6:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4003a8:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  4003aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003ae:	6243      	str	r3, [r0, #36]	; 0x24
  4003b0:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4003b2:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4003b4:	bf94      	ite	ls
  4003b6:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  4003b8:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4003ba:	2301      	movs	r3, #1
  4003bc:	fa03 f101 	lsl.w	r1, r3, r1
  4003c0:	6241      	str	r1, [r0, #36]	; 0x24
  4003c2:	4770      	bx	lr
  4003c4:	47000fff 	.word	0x47000fff

004003c8 <afec_set_callback>:
{
  4003c8:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4003ca:	4c11      	ldr	r4, [pc, #68]	; (400410 <afec_set_callback+0x48>)
  4003cc:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4003ce:	bf0c      	ite	eq
  4003d0:	2410      	moveq	r4, #16
  4003d2:	2400      	movne	r4, #0
  4003d4:	440c      	add	r4, r1
  4003d6:	4d0f      	ldr	r5, [pc, #60]	; (400414 <afec_set_callback+0x4c>)
  4003d8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4003dc:	d10a      	bne.n	4003f4 <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003de:	4a0e      	ldr	r2, [pc, #56]	; (400418 <afec_set_callback+0x50>)
  4003e0:	f44f 7480 	mov.w	r4, #256	; 0x100
  4003e4:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003e8:	015b      	lsls	r3, r3, #5
  4003ea:	b2db      	uxtb	r3, r3
  4003ec:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4003f0:	6054      	str	r4, [r2, #4]
  4003f2:	e009      	b.n	400408 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003f4:	4a08      	ldr	r2, [pc, #32]	; (400418 <afec_set_callback+0x50>)
  4003f6:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  4003fa:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003fe:	015b      	lsls	r3, r3, #5
  400400:	b2db      	uxtb	r3, r3
  400402:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400406:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400408:	4b04      	ldr	r3, [pc, #16]	; (40041c <afec_set_callback+0x54>)
  40040a:	4798      	blx	r3
  40040c:	bd38      	pop	{r3, r4, r5, pc}
  40040e:	bf00      	nop
  400410:	40064000 	.word	0x40064000
  400414:	20400de0 	.word	0x20400de0
  400418:	e000e100 	.word	0xe000e100
  40041c:	00400391 	.word	0x00400391

00400420 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400420:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400422:	4802      	ldr	r0, [pc, #8]	; (40042c <AFEC0_Handler+0xc>)
  400424:	4b02      	ldr	r3, [pc, #8]	; (400430 <AFEC0_Handler+0x10>)
  400426:	4798      	blx	r3
  400428:	bd08      	pop	{r3, pc}
  40042a:	bf00      	nop
  40042c:	4003c000 	.word	0x4003c000
  400430:	004001ad 	.word	0x004001ad

00400434 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400434:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400436:	4802      	ldr	r0, [pc, #8]	; (400440 <AFEC1_Handler+0xc>)
  400438:	4b02      	ldr	r3, [pc, #8]	; (400444 <AFEC1_Handler+0x10>)
  40043a:	4798      	blx	r3
  40043c:	bd08      	pop	{r3, pc}
  40043e:	bf00      	nop
  400440:	40064000 	.word	0x40064000
  400444:	004001ad 	.word	0x004001ad

00400448 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400448:	b500      	push	{lr}
  40044a:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  40044c:	4b13      	ldr	r3, [pc, #76]	; (40049c <afec_enable+0x54>)
  40044e:	4298      	cmp	r0, r3
  400450:	bf0c      	ite	eq
  400452:	2028      	moveq	r0, #40	; 0x28
  400454:	201d      	movne	r0, #29
  400456:	4b12      	ldr	r3, [pc, #72]	; (4004a0 <afec_enable+0x58>)
  400458:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40045a:	4b12      	ldr	r3, [pc, #72]	; (4004a4 <afec_enable+0x5c>)
  40045c:	789b      	ldrb	r3, [r3, #2]
  40045e:	2bff      	cmp	r3, #255	; 0xff
  400460:	d01a      	beq.n	400498 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400462:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400466:	fab3 f383 	clz	r3, r3
  40046a:	095b      	lsrs	r3, r3, #5
  40046c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40046e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400470:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400474:	2200      	movs	r2, #0
  400476:	4b0c      	ldr	r3, [pc, #48]	; (4004a8 <afec_enable+0x60>)
  400478:	701a      	strb	r2, [r3, #0]
	return flags;
  40047a:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40047c:	4a09      	ldr	r2, [pc, #36]	; (4004a4 <afec_enable+0x5c>)
  40047e:	7893      	ldrb	r3, [r2, #2]
  400480:	3301      	adds	r3, #1
  400482:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400484:	b129      	cbz	r1, 400492 <afec_enable+0x4a>
		cpu_irq_enable();
  400486:	2201      	movs	r2, #1
  400488:	4b07      	ldr	r3, [pc, #28]	; (4004a8 <afec_enable+0x60>)
  40048a:	701a      	strb	r2, [r3, #0]
  40048c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400490:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400492:	b003      	add	sp, #12
  400494:	f85d fb04 	ldr.w	pc, [sp], #4
  400498:	e7fe      	b.n	400498 <afec_enable+0x50>
  40049a:	bf00      	nop
  40049c:	40064000 	.word	0x40064000
  4004a0:	004015f5 	.word	0x004015f5
  4004a4:	20400dd8 	.word	0x20400dd8
  4004a8:	2040000a 	.word	0x2040000a

004004ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4004ac:	b921      	cbnz	r1, 4004b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4004ae:	6843      	ldr	r3, [r0, #4]
  4004b0:	f023 0301 	bic.w	r3, r3, #1
  4004b4:	6043      	str	r3, [r0, #4]
  4004b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4004b8:	6843      	ldr	r3, [r0, #4]
  4004ba:	f043 0301 	orr.w	r3, r3, #1
  4004be:	6043      	str	r3, [r0, #4]
  4004c0:	4770      	bx	lr

004004c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4004c2:	6201      	str	r1, [r0, #32]
  4004c4:	4770      	bx	lr

004004c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4004c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4004c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4004ca:	6884      	ldr	r4, [r0, #8]
  4004cc:	42a5      	cmp	r5, r4
  4004ce:	d003      	beq.n	4004d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4004d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4004d2:	6884      	ldr	r4, [r0, #8]
  4004d4:	42ac      	cmp	r4, r5
  4004d6:	d1fb      	bne.n	4004d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4004d8:	b161      	cbz	r1, 4004f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4004da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4004de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4004e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4004e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4004ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4004ee:	bf18      	it	ne
  4004f0:	300c      	addne	r0, #12
  4004f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4004f4:	b142      	cbz	r2, 400508 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4004f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4004fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4004fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400502:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400506:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400508:	b143      	cbz	r3, 40051c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40050a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40050e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400512:	f004 040f 	and.w	r4, r4, #15
  400516:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40051a:	601c      	str	r4, [r3, #0]
	}
}
  40051c:	bc30      	pop	{r4, r5}
  40051e:	4770      	bx	lr

00400520 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400520:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400522:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400524:	f014 0f01 	tst.w	r4, #1
  400528:	d005      	beq.n	400536 <rtc_set_time+0x16>
  40052a:	290c      	cmp	r1, #12
  40052c:	d903      	bls.n	400536 <rtc_set_time+0x16>
			ul_hour -= 12;
  40052e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400530:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400534:	e000      	b.n	400538 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400536:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400538:	4c1c      	ldr	r4, [pc, #112]	; (4005ac <rtc_set_time+0x8c>)
  40053a:	fba4 5603 	umull	r5, r6, r4, r3
  40053e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400540:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400544:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400548:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40054c:	fba4 6502 	umull	r6, r5, r4, r2
  400550:	08ed      	lsrs	r5, r5, #3
  400552:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400556:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40055a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40055e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400562:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400564:	fba4 4201 	umull	r4, r2, r4, r1
  400568:	08d2      	lsrs	r2, r2, #3
  40056a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40056e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400572:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400576:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40057a:	6983      	ldr	r3, [r0, #24]
  40057c:	f013 0f04 	tst.w	r3, #4
  400580:	d0fb      	beq.n	40057a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400582:	6803      	ldr	r3, [r0, #0]
  400584:	f043 0301 	orr.w	r3, r3, #1
  400588:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40058a:	6983      	ldr	r3, [r0, #24]
  40058c:	f013 0f01 	tst.w	r3, #1
  400590:	d0fb      	beq.n	40058a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400592:	2301      	movs	r3, #1
  400594:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400596:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400598:	6803      	ldr	r3, [r0, #0]
  40059a:	f023 0301 	bic.w	r3, r3, #1
  40059e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4005a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4005a2:	f000 0001 	and.w	r0, r0, #1
  4005a6:	bcf0      	pop	{r4, r5, r6, r7}
  4005a8:	4770      	bx	lr
  4005aa:	bf00      	nop
  4005ac:	cccccccd 	.word	0xcccccccd

004005b0 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  4005b0:	b4f0      	push	{r4, r5, r6, r7}
  4005b2:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  4005b4:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4005b6:	68c4      	ldr	r4, [r0, #12]
  4005b8:	42a5      	cmp	r5, r4
  4005ba:	d003      	beq.n	4005c4 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  4005bc:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4005be:	68c4      	ldr	r4, [r0, #12]
  4005c0:	42ac      	cmp	r4, r5
  4005c2:	d1fb      	bne.n	4005bc <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  4005c4:	b199      	cbz	r1, 4005ee <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4005c6:	f3c4 3003 	ubfx	r0, r4, #12, #4
  4005ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4005ce:	f3c4 2703 	ubfx	r7, r4, #8, #4
  4005d2:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4005d6:	f3c4 1002 	ubfx	r0, r4, #4, #3
  4005da:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4005de:	f004 000f 	and.w	r0, r4, #15
  4005e2:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4005e6:	2564      	movs	r5, #100	; 0x64
  4005e8:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  4005ec:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  4005ee:	b142      	cbz	r2, 400602 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4005f0:	f3c4 5000 	ubfx	r0, r4, #20, #1
  4005f4:	0081      	lsls	r1, r0, #2
  4005f6:	4408      	add	r0, r1
  4005f8:	f3c4 4103 	ubfx	r1, r4, #16, #4
  4005fc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  400600:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  400602:	b143      	cbz	r3, 400616 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400604:	f3c4 7201 	ubfx	r2, r4, #28, #2
  400608:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40060c:	f3c4 6103 	ubfx	r1, r4, #24, #4
  400610:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  400614:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  400616:	b116      	cbz	r6, 40061e <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  400618:	f3c4 5442 	ubfx	r4, r4, #21, #3
  40061c:	6034      	str	r4, [r6, #0]
	}
}
  40061e:	bcf0      	pop	{r4, r5, r6, r7}
  400620:	4770      	bx	lr
	...

00400624 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  400624:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400626:	4d2a      	ldr	r5, [pc, #168]	; (4006d0 <rtc_set_date+0xac>)
  400628:	fba5 4603 	umull	r4, r6, r5, r3
  40062c:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  40062e:	9c03      	ldr	r4, [sp, #12]
  400630:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400632:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400636:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40063a:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40063e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400642:	fba5 6402 	umull	r6, r4, r5, r2
  400646:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400648:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40064c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400650:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400654:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400658:	4b1e      	ldr	r3, [pc, #120]	; (4006d4 <rtc_set_date+0xb0>)
  40065a:	fba3 4301 	umull	r4, r3, r3, r1
  40065e:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400660:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  400664:	4b1c      	ldr	r3, [pc, #112]	; (4006d8 <rtc_set_date+0xb4>)
  400666:	fba3 4301 	umull	r4, r3, r3, r1
  40066a:	095b      	lsrs	r3, r3, #5
  40066c:	fba5 6403 	umull	r6, r4, r5, r3
  400670:	08e4      	lsrs	r4, r4, #3
  400672:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400676:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40067a:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  40067c:	fba5 4301 	umull	r4, r3, r5, r1
  400680:	08db      	lsrs	r3, r3, #3
  400682:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  400686:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40068a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40068e:	fba5 1503 	umull	r1, r5, r5, r3
  400692:	08ed      	lsrs	r5, r5, #3
  400694:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400698:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40069c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4006a0:	6983      	ldr	r3, [r0, #24]
  4006a2:	f013 0f04 	tst.w	r3, #4
  4006a6:	d0fb      	beq.n	4006a0 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4006a8:	6803      	ldr	r3, [r0, #0]
  4006aa:	f043 0302 	orr.w	r3, r3, #2
  4006ae:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4006b0:	6983      	ldr	r3, [r0, #24]
  4006b2:	f013 0f01 	tst.w	r3, #1
  4006b6:	d0fb      	beq.n	4006b0 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4006b8:	2301      	movs	r3, #1
  4006ba:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4006bc:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4006be:	6803      	ldr	r3, [r0, #0]
  4006c0:	f023 0302 	bic.w	r3, r3, #2
  4006c4:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4006c6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4006c8:	f000 0002 	and.w	r0, r0, #2
  4006cc:	bc70      	pop	{r4, r5, r6}
  4006ce:	4770      	bx	lr
  4006d0:	cccccccd 	.word	0xcccccccd
  4006d4:	10624dd3 	.word	0x10624dd3
  4006d8:	51eb851f 	.word	0x51eb851f

004006dc <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  4006dc:	6980      	ldr	r0, [r0, #24]
}
  4006de:	4770      	bx	lr

004006e0 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  4006e0:	61c1      	str	r1, [r0, #28]
  4006e2:	4770      	bx	lr

004006e4 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4006e4:	4b03      	ldr	r3, [pc, #12]	; (4006f4 <rtt_init+0x10>)
  4006e6:	681b      	ldr	r3, [r3, #0]
  4006e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4006ec:	4319      	orrs	r1, r3
  4006ee:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4006f0:	2000      	movs	r0, #0
  4006f2:	4770      	bx	lr
  4006f4:	204009dc 	.word	0x204009dc

004006f8 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4006f8:	b941      	cbnz	r1, 40070c <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4006fa:	4a09      	ldr	r2, [pc, #36]	; (400720 <rtt_sel_source+0x28>)
  4006fc:	6813      	ldr	r3, [r2, #0]
  4006fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  400702:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400704:	6802      	ldr	r2, [r0, #0]
  400706:	4313      	orrs	r3, r2
  400708:	6003      	str	r3, [r0, #0]
  40070a:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  40070c:	4a04      	ldr	r2, [pc, #16]	; (400720 <rtt_sel_source+0x28>)
  40070e:	6813      	ldr	r3, [r2, #0]
  400710:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400714:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400716:	6802      	ldr	r2, [r0, #0]
  400718:	4313      	orrs	r3, r2
  40071a:	6003      	str	r3, [r0, #0]
  40071c:	4770      	bx	lr
  40071e:	bf00      	nop
  400720:	204009dc 	.word	0x204009dc

00400724 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  400724:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400726:	4b03      	ldr	r3, [pc, #12]	; (400734 <rtt_enable_interrupt+0x10>)
  400728:	681b      	ldr	r3, [r3, #0]
  40072a:	4319      	orrs	r1, r3
  40072c:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  40072e:	6001      	str	r1, [r0, #0]
  400730:	4770      	bx	lr
  400732:	bf00      	nop
  400734:	204009dc 	.word	0x204009dc

00400738 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400738:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  40073a:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40073e:	4b02      	ldr	r3, [pc, #8]	; (400748 <rtt_disable_interrupt+0x10>)
  400740:	681b      	ldr	r3, [r3, #0]
  400742:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400744:	6001      	str	r1, [r0, #0]
  400746:	4770      	bx	lr
  400748:	204009dc 	.word	0x204009dc

0040074c <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  40074c:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  40074e:	6883      	ldr	r3, [r0, #8]
  400750:	429a      	cmp	r2, r3
  400752:	d003      	beq.n	40075c <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  400754:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  400756:	6883      	ldr	r3, [r0, #8]
  400758:	4293      	cmp	r3, r2
  40075a:	d1fb      	bne.n	400754 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  40075c:	4618      	mov	r0, r3
  40075e:	4770      	bx	lr

00400760 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400760:	68c0      	ldr	r0, [r0, #12]
}
  400762:	4770      	bx	lr

00400764 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  400764:	b570      	push	{r4, r5, r6, lr}
  400766:	4606      	mov	r6, r0
  400768:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  40076a:	6804      	ldr	r4, [r0, #0]
  40076c:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400770:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400774:	4809      	ldr	r0, [pc, #36]	; (40079c <rtt_write_alarm_time+0x38>)
  400776:	4b0a      	ldr	r3, [pc, #40]	; (4007a0 <rtt_write_alarm_time+0x3c>)
  400778:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  40077a:	b92d      	cbnz	r5, 400788 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  40077c:	f04f 33ff 	mov.w	r3, #4294967295
  400780:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  400782:	b924      	cbnz	r4, 40078e <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400784:	2000      	movs	r0, #0
  400786:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400788:	3d01      	subs	r5, #1
  40078a:	6075      	str	r5, [r6, #4]
  40078c:	e7f9      	b.n	400782 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  40078e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400792:	4802      	ldr	r0, [pc, #8]	; (40079c <rtt_write_alarm_time+0x38>)
  400794:	4b03      	ldr	r3, [pc, #12]	; (4007a4 <rtt_write_alarm_time+0x40>)
  400796:	4798      	blx	r3
  400798:	e7f4      	b.n	400784 <rtt_write_alarm_time+0x20>
  40079a:	bf00      	nop
  40079c:	400e1830 	.word	0x400e1830
  4007a0:	00400739 	.word	0x00400739
  4007a4:	00400725 	.word	0x00400725

004007a8 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4007a8:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4007aa:	4b07      	ldr	r3, [pc, #28]	; (4007c8 <spi_enable_clock+0x20>)
  4007ac:	4298      	cmp	r0, r3
  4007ae:	d003      	beq.n	4007b8 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4007b0:	4b06      	ldr	r3, [pc, #24]	; (4007cc <spi_enable_clock+0x24>)
  4007b2:	4298      	cmp	r0, r3
  4007b4:	d004      	beq.n	4007c0 <spi_enable_clock+0x18>
  4007b6:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4007b8:	2015      	movs	r0, #21
  4007ba:	4b05      	ldr	r3, [pc, #20]	; (4007d0 <spi_enable_clock+0x28>)
  4007bc:	4798      	blx	r3
  4007be:	bd08      	pop	{r3, pc}
  4007c0:	202a      	movs	r0, #42	; 0x2a
  4007c2:	4b03      	ldr	r3, [pc, #12]	; (4007d0 <spi_enable_clock+0x28>)
  4007c4:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4007c6:	e7f6      	b.n	4007b6 <spi_enable_clock+0xe>
  4007c8:	40008000 	.word	0x40008000
  4007cc:	40058000 	.word	0x40058000
  4007d0:	004015f5 	.word	0x004015f5

004007d4 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4007d4:	6843      	ldr	r3, [r0, #4]
  4007d6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4007da:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4007dc:	6843      	ldr	r3, [r0, #4]
  4007de:	0409      	lsls	r1, r1, #16
  4007e0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4007e4:	4319      	orrs	r1, r3
  4007e6:	6041      	str	r1, [r0, #4]
  4007e8:	4770      	bx	lr

004007ea <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4007ea:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4007ec:	f643 2499 	movw	r4, #15001	; 0x3a99
  4007f0:	6905      	ldr	r5, [r0, #16]
  4007f2:	f015 0f02 	tst.w	r5, #2
  4007f6:	d103      	bne.n	400800 <spi_write+0x16>
		if (!timeout--) {
  4007f8:	3c01      	subs	r4, #1
  4007fa:	d1f9      	bne.n	4007f0 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4007fc:	2001      	movs	r0, #1
  4007fe:	e00c      	b.n	40081a <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400800:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400802:	f014 0f02 	tst.w	r4, #2
  400806:	d006      	beq.n	400816 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400808:	0412      	lsls	r2, r2, #16
  40080a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40080e:	4311      	orrs	r1, r2
		if (uc_last) {
  400810:	b10b      	cbz	r3, 400816 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400812:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400816:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400818:	2000      	movs	r0, #0
}
  40081a:	bc30      	pop	{r4, r5}
  40081c:	4770      	bx	lr

0040081e <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40081e:	b932      	cbnz	r2, 40082e <spi_set_clock_polarity+0x10>
  400820:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400824:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400826:	f023 0301 	bic.w	r3, r3, #1
  40082a:	6303      	str	r3, [r0, #48]	; 0x30
  40082c:	4770      	bx	lr
  40082e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400832:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400834:	f043 0301 	orr.w	r3, r3, #1
  400838:	6303      	str	r3, [r0, #48]	; 0x30
  40083a:	4770      	bx	lr

0040083c <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  40083c:	b932      	cbnz	r2, 40084c <spi_set_clock_phase+0x10>
  40083e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400842:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400844:	f023 0302 	bic.w	r3, r3, #2
  400848:	6303      	str	r3, [r0, #48]	; 0x30
  40084a:	4770      	bx	lr
  40084c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400850:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400852:	f043 0302 	orr.w	r3, r3, #2
  400856:	6303      	str	r3, [r0, #48]	; 0x30
  400858:	4770      	bx	lr

0040085a <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40085a:	2a04      	cmp	r2, #4
  40085c:	d003      	beq.n	400866 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  40085e:	b16a      	cbz	r2, 40087c <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400860:	2a08      	cmp	r2, #8
  400862:	d016      	beq.n	400892 <spi_configure_cs_behavior+0x38>
  400864:	4770      	bx	lr
  400866:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40086a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40086c:	f023 0308 	bic.w	r3, r3, #8
  400870:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400872:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400874:	f043 0304 	orr.w	r3, r3, #4
  400878:	6303      	str	r3, [r0, #48]	; 0x30
  40087a:	4770      	bx	lr
  40087c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400880:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400882:	f023 0308 	bic.w	r3, r3, #8
  400886:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400888:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40088a:	f023 0304 	bic.w	r3, r3, #4
  40088e:	6303      	str	r3, [r0, #48]	; 0x30
  400890:	4770      	bx	lr
  400892:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400896:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400898:	f043 0308 	orr.w	r3, r3, #8
  40089c:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  40089e:	e7e1      	b.n	400864 <spi_configure_cs_behavior+0xa>

004008a0 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4008a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4008a4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4008a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4008aa:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4008ac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4008ae:	431a      	orrs	r2, r3
  4008b0:	630a      	str	r2, [r1, #48]	; 0x30
  4008b2:	4770      	bx	lr

004008b4 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4008b4:	1e43      	subs	r3, r0, #1
  4008b6:	4419      	add	r1, r3
  4008b8:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4008bc:	1e43      	subs	r3, r0, #1
  4008be:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4008c0:	bf94      	ite	ls
  4008c2:	b200      	sxthls	r0, r0
		return -1;
  4008c4:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4008c8:	4770      	bx	lr

004008ca <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  4008ca:	b17a      	cbz	r2, 4008ec <spi_set_baudrate_div+0x22>
{
  4008cc:	b410      	push	{r4}
  4008ce:	4614      	mov	r4, r2
  4008d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4008d4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4008d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4008da:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4008dc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4008de:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4008e2:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4008e4:	2000      	movs	r0, #0
}
  4008e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008ea:	4770      	bx	lr
        return -1;
  4008ec:	f04f 30ff 	mov.w	r0, #4294967295
  4008f0:	4770      	bx	lr

004008f2 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4008f2:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4008f4:	0189      	lsls	r1, r1, #6
  4008f6:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4008f8:	2402      	movs	r4, #2
  4008fa:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4008fc:	f04f 31ff 	mov.w	r1, #4294967295
  400900:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400902:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400904:	605a      	str	r2, [r3, #4]
}
  400906:	f85d 4b04 	ldr.w	r4, [sp], #4
  40090a:	4770      	bx	lr

0040090c <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40090c:	0189      	lsls	r1, r1, #6
  40090e:	2305      	movs	r3, #5
  400910:	5043      	str	r3, [r0, r1]
  400912:	4770      	bx	lr

00400914 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400914:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400918:	61ca      	str	r2, [r1, #28]
  40091a:	4770      	bx	lr

0040091c <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40091c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400920:	624a      	str	r2, [r1, #36]	; 0x24
  400922:	4770      	bx	lr

00400924 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400924:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400928:	6a08      	ldr	r0, [r1, #32]
}
  40092a:	4770      	bx	lr

0040092c <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  40092c:	b4f0      	push	{r4, r5, r6, r7}
  40092e:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400930:	2402      	movs	r4, #2
  400932:	9401      	str	r4, [sp, #4]
  400934:	2408      	movs	r4, #8
  400936:	9402      	str	r4, [sp, #8]
  400938:	2420      	movs	r4, #32
  40093a:	9403      	str	r4, [sp, #12]
  40093c:	2480      	movs	r4, #128	; 0x80
  40093e:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400940:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400942:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400944:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400946:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40094a:	d814      	bhi.n	400976 <tc_find_mck_divisor+0x4a>
  40094c:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  40094e:	42a0      	cmp	r0, r4
  400950:	d217      	bcs.n	400982 <tc_find_mck_divisor+0x56>
  400952:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400954:	af01      	add	r7, sp, #4
  400956:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40095a:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  40095e:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400960:	4284      	cmp	r4, r0
  400962:	d30a      	bcc.n	40097a <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400964:	4286      	cmp	r6, r0
  400966:	d90d      	bls.n	400984 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400968:	3501      	adds	r5, #1
	for (ul_index = 0;
  40096a:	2d05      	cmp	r5, #5
  40096c:	d1f3      	bne.n	400956 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  40096e:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400970:	b006      	add	sp, #24
  400972:	bcf0      	pop	{r4, r5, r6, r7}
  400974:	4770      	bx	lr
			return 0;
  400976:	2000      	movs	r0, #0
  400978:	e7fa      	b.n	400970 <tc_find_mck_divisor+0x44>
  40097a:	2000      	movs	r0, #0
  40097c:	e7f8      	b.n	400970 <tc_find_mck_divisor+0x44>
	return 1;
  40097e:	2001      	movs	r0, #1
  400980:	e7f6      	b.n	400970 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400982:	2500      	movs	r5, #0
	if (p_uldiv) {
  400984:	b12a      	cbz	r2, 400992 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400986:	a906      	add	r1, sp, #24
  400988:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  40098c:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400990:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400992:	2b00      	cmp	r3, #0
  400994:	d0f3      	beq.n	40097e <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400996:	601d      	str	r5, [r3, #0]
	return 1;
  400998:	2001      	movs	r0, #1
  40099a:	e7e9      	b.n	400970 <tc_find_mck_divisor+0x44>

0040099c <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  40099c:	4b01      	ldr	r3, [pc, #4]	; (4009a4 <gfx_mono_set_framebuffer+0x8>)
  40099e:	6018      	str	r0, [r3, #0]
  4009a0:	4770      	bx	lr
  4009a2:	bf00      	nop
  4009a4:	204009e0 	.word	0x204009e0

004009a8 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4009a8:	4b02      	ldr	r3, [pc, #8]	; (4009b4 <gfx_mono_framebuffer_put_byte+0xc>)
  4009aa:	681b      	ldr	r3, [r3, #0]
  4009ac:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4009b0:	5442      	strb	r2, [r0, r1]
  4009b2:	4770      	bx	lr
  4009b4:	204009e0 	.word	0x204009e0

004009b8 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4009b8:	4b02      	ldr	r3, [pc, #8]	; (4009c4 <gfx_mono_framebuffer_get_byte+0xc>)
  4009ba:	681b      	ldr	r3, [r3, #0]
  4009bc:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4009c0:	5c40      	ldrb	r0, [r0, r1]
  4009c2:	4770      	bx	lr
  4009c4:	204009e0 	.word	0x204009e0

004009c8 <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
	if (length == 0) {
  4009c8:	2a00      	cmp	r2, #0
  4009ca:	d048      	beq.n	400a5e <gfx_mono_generic_draw_vertical_line+0x96>
{
  4009cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4009d0:	4614      	mov	r4, r2
  4009d2:	461f      	mov	r7, r3
  4009d4:	4606      	mov	r6, r0
		return;
	}

	gfx_coord_t y2 = y + length - 1;
  4009d6:	1e4a      	subs	r2, r1, #1
  4009d8:	4422      	add	r2, r4
  4009da:	b2d2      	uxtb	r2, r2

	if (y == y2) {
  4009dc:	4291      	cmp	r1, r2
  4009de:	d031      	beq.n	400a44 <gfx_mono_generic_draw_vertical_line+0x7c>
  4009e0:	2a1f      	cmp	r2, #31
  4009e2:	bf28      	it	cs
  4009e4:	221f      	movcs	r2, #31
  4009e6:	4615      	mov	r5, r2

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
		y2 = GFX_MONO_LCD_HEIGHT - 1;
	}

	gfx_coord_t y1page = y / 8;
  4009e8:	08cc      	lsrs	r4, r1, #3
	gfx_coord_t y2page = y2 / 8;
  4009ea:	ea4f 08d2 	mov.w	r8, r2, lsr #3

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
  4009ee:	f001 0207 	and.w	r2, r1, #7
  4009f2:	23ff      	movs	r3, #255	; 0xff
  4009f4:	fa03 f202 	lsl.w	r2, r3, r2
  4009f8:	b2d2      	uxtb	r2, r2
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
  4009fa:	f005 0507 	and.w	r5, r5, #7
  4009fe:	f1c5 0507 	rsb	r5, r5, #7
  400a02:	fa43 f505 	asr.w	r5, r3, r5
  400a06:	b2ed      	uxtb	r5, r5

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
  400a08:	4544      	cmp	r4, r8
  400a0a:	d020      	beq.n	400a4e <gfx_mono_generic_draw_vertical_line+0x86>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
  400a0c:	463b      	mov	r3, r7
  400a0e:	4601      	mov	r1, r0
  400a10:	4620      	mov	r0, r4
  400a12:	f8df 904c 	ldr.w	r9, [pc, #76]	; 400a60 <gfx_mono_generic_draw_vertical_line+0x98>
  400a16:	47c8      	blx	r9

		while (++y1page < y2page) {
  400a18:	3401      	adds	r4, #1
  400a1a:	45a0      	cmp	r8, r4
  400a1c:	d90a      	bls.n	400a34 <gfx_mono_generic_draw_vertical_line+0x6c>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
  400a1e:	f04f 0aff 	mov.w	sl, #255	; 0xff
  400a22:	463b      	mov	r3, r7
  400a24:	4652      	mov	r2, sl
  400a26:	4631      	mov	r1, r6
  400a28:	4620      	mov	r0, r4
  400a2a:	47c8      	blx	r9
		while (++y1page < y2page) {
  400a2c:	3401      	adds	r4, #1
  400a2e:	b2e4      	uxtb	r4, r4
  400a30:	45a0      	cmp	r8, r4
  400a32:	d8f6      	bhi.n	400a22 <gfx_mono_generic_draw_vertical_line+0x5a>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
  400a34:	463b      	mov	r3, r7
  400a36:	462a      	mov	r2, r5
  400a38:	4631      	mov	r1, r6
  400a3a:	4640      	mov	r0, r8
  400a3c:	4c08      	ldr	r4, [pc, #32]	; (400a60 <gfx_mono_generic_draw_vertical_line+0x98>)
  400a3e:	47a0      	blx	r4
  400a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_draw_pixel(x, y, color);
  400a44:	461a      	mov	r2, r3
  400a46:	4b07      	ldr	r3, [pc, #28]	; (400a64 <gfx_mono_generic_draw_vertical_line+0x9c>)
  400a48:	4798      	blx	r3
		return;
  400a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
  400a4e:	463b      	mov	r3, r7
  400a50:	402a      	ands	r2, r5
  400a52:	4601      	mov	r1, r0
  400a54:	4620      	mov	r0, r4
  400a56:	4c02      	ldr	r4, [pc, #8]	; (400a60 <gfx_mono_generic_draw_vertical_line+0x98>)
  400a58:	47a0      	blx	r4
  400a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400a5e:	4770      	bx	lr
  400a60:	00400c89 	.word	0x00400c89
  400a64:	00400c25 	.word	0x00400c25

00400a68 <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
  400a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a6c:	b085      	sub	sp, #20
  400a6e:	4681      	mov	r9, r0
  400a70:	9100      	str	r1, [sp, #0]
  400a72:	9301      	str	r3, [sp, #4]
  400a74:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
  400a78:	b17a      	cbz	r2, 400a9a <gfx_mono_generic_draw_filled_circle+0x32>
  400a7a:	4616      	mov	r6, r2
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
  400a7c:	0055      	lsls	r5, r2, #1
  400a7e:	f1c5 0503 	rsb	r5, r5, #3
  400a82:	2701      	movs	r7, #1
  400a84:	f04f 0800 	mov.w	r8, #0

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
  400a88:	f00b 0303 	and.w	r3, fp, #3
  400a8c:	9302      	str	r3, [sp, #8]
			gfx_mono_draw_vertical_line(x + offset_y,
  400a8e:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 400b80 <gfx_mono_generic_draw_filled_circle+0x118>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
  400a92:	f00b 030c 	and.w	r3, fp, #12
  400a96:	9303      	str	r3, [sp, #12]
  400a98:	e04d      	b.n	400b36 <gfx_mono_generic_draw_filled_circle+0xce>
		gfx_mono_draw_pixel(x, y, color);
  400a9a:	461a      	mov	r2, r3
  400a9c:	4b37      	ldr	r3, [pc, #220]	; (400b7c <gfx_mono_generic_draw_filled_circle+0x114>)
  400a9e:	4798      	blx	r3
		}

		/* Next X. */
		++offset_x;
	}
}
  400aa0:	b005      	add	sp, #20
  400aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			gfx_mono_draw_vertical_line(x + offset_y,
  400aa6:	9b00      	ldr	r3, [sp, #0]
  400aa8:	1b19      	subs	r1, r3, r4
  400aaa:	eb09 0006 	add.w	r0, r9, r6
  400aae:	9b01      	ldr	r3, [sp, #4]
  400ab0:	463a      	mov	r2, r7
  400ab2:	b2c9      	uxtb	r1, r1
  400ab4:	b2c0      	uxtb	r0, r0
  400ab6:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  400ab8:	1c72      	adds	r2, r6, #1
  400aba:	9900      	ldr	r1, [sp, #0]
  400abc:	1b89      	subs	r1, r1, r6
  400abe:	eb09 0004 	add.w	r0, r9, r4
  400ac2:	9b01      	ldr	r3, [sp, #4]
  400ac4:	b2d2      	uxtb	r2, r2
  400ac6:	b2c9      	uxtb	r1, r1
  400ac8:	b2c0      	uxtb	r0, r0
  400aca:	47d0      	blx	sl
  400acc:	e038      	b.n	400b40 <gfx_mono_generic_draw_filled_circle+0xd8>
			gfx_mono_draw_vertical_line(x - offset_y,
  400ace:	9b00      	ldr	r3, [sp, #0]
  400ad0:	1b19      	subs	r1, r3, r4
  400ad2:	eba9 0006 	sub.w	r0, r9, r6
  400ad6:	9b01      	ldr	r3, [sp, #4]
  400ad8:	463a      	mov	r2, r7
  400ada:	b2c9      	uxtb	r1, r1
  400adc:	b2c0      	uxtb	r0, r0
  400ade:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  400ae0:	1c72      	adds	r2, r6, #1
  400ae2:	9900      	ldr	r1, [sp, #0]
  400ae4:	1b89      	subs	r1, r1, r6
  400ae6:	eba9 0004 	sub.w	r0, r9, r4
  400aea:	9b01      	ldr	r3, [sp, #4]
  400aec:	b2d2      	uxtb	r2, r2
  400aee:	b2c9      	uxtb	r1, r1
  400af0:	b2c0      	uxtb	r0, r0
  400af2:	47d0      	blx	sl
  400af4:	e027      	b.n	400b46 <gfx_mono_generic_draw_filled_circle+0xde>
			gfx_mono_draw_vertical_line(x - offset_y,
  400af6:	eba9 0006 	sub.w	r0, r9, r6
  400afa:	9b01      	ldr	r3, [sp, #4]
  400afc:	463a      	mov	r2, r7
  400afe:	9900      	ldr	r1, [sp, #0]
  400b00:	b2c0      	uxtb	r0, r0
  400b02:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  400b04:	1c72      	adds	r2, r6, #1
  400b06:	eba9 0004 	sub.w	r0, r9, r4
  400b0a:	9b01      	ldr	r3, [sp, #4]
  400b0c:	b2d2      	uxtb	r2, r2
  400b0e:	9900      	ldr	r1, [sp, #0]
  400b10:	b2c0      	uxtb	r0, r0
  400b12:	47d0      	blx	sl
  400b14:	e01a      	b.n	400b4c <gfx_mono_generic_draw_filled_circle+0xe4>
		if (error < 0) {
  400b16:	2d00      	cmp	r5, #0
  400b18:	db2b      	blt.n	400b72 <gfx_mono_generic_draw_filled_circle+0x10a>
			error += (((offset_x - offset_y) << 2) + 10);
  400b1a:	1ba4      	subs	r4, r4, r6
  400b1c:	350a      	adds	r5, #10
  400b1e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  400b22:	b225      	sxth	r5, r4
			--offset_y;
  400b24:	3e01      	subs	r6, #1
  400b26:	b2f6      	uxtb	r6, r6
  400b28:	f108 0801 	add.w	r8, r8, #1
  400b2c:	1c7b      	adds	r3, r7, #1
  400b2e:	b2db      	uxtb	r3, r3
	while (offset_x <= offset_y) {
  400b30:	42be      	cmp	r6, r7
  400b32:	d3b5      	bcc.n	400aa0 <gfx_mono_generic_draw_filled_circle+0x38>
  400b34:	461f      	mov	r7, r3
  400b36:	fa5f f488 	uxtb.w	r4, r8
		if (quadrant_mask & GFX_QUADRANT0) {
  400b3a:	9b02      	ldr	r3, [sp, #8]
  400b3c:	2b00      	cmp	r3, #0
  400b3e:	d1b2      	bne.n	400aa6 <gfx_mono_generic_draw_filled_circle+0x3e>
		if (quadrant_mask & GFX_QUADRANT1) {
  400b40:	9b03      	ldr	r3, [sp, #12]
  400b42:	2b00      	cmp	r3, #0
  400b44:	d1c3      	bne.n	400ace <gfx_mono_generic_draw_filled_circle+0x66>
		if (quadrant_mask & GFX_QUADRANT2) {
  400b46:	f01b 0f30 	tst.w	fp, #48	; 0x30
  400b4a:	d1d4      	bne.n	400af6 <gfx_mono_generic_draw_filled_circle+0x8e>
		if (quadrant_mask & GFX_QUADRANT3) {
  400b4c:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
  400b50:	d0e1      	beq.n	400b16 <gfx_mono_generic_draw_filled_circle+0xae>
			gfx_mono_draw_vertical_line(x + offset_y,
  400b52:	eb09 0006 	add.w	r0, r9, r6
  400b56:	9b01      	ldr	r3, [sp, #4]
  400b58:	463a      	mov	r2, r7
  400b5a:	9900      	ldr	r1, [sp, #0]
  400b5c:	b2c0      	uxtb	r0, r0
  400b5e:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  400b60:	1c72      	adds	r2, r6, #1
  400b62:	eb09 0004 	add.w	r0, r9, r4
  400b66:	9b01      	ldr	r3, [sp, #4]
  400b68:	b2d2      	uxtb	r2, r2
  400b6a:	9900      	ldr	r1, [sp, #0]
  400b6c:	b2c0      	uxtb	r0, r0
  400b6e:	47d0      	blx	sl
  400b70:	e7d1      	b.n	400b16 <gfx_mono_generic_draw_filled_circle+0xae>
			error += ((offset_x << 2) + 6);
  400b72:	3506      	adds	r5, #6
  400b74:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  400b78:	b22d      	sxth	r5, r5
  400b7a:	e7d5      	b.n	400b28 <gfx_mono_generic_draw_filled_circle+0xc0>
  400b7c:	00400c25 	.word	0x00400c25
  400b80:	004009c9 	.word	0x004009c9

00400b84 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400b84:	b570      	push	{r4, r5, r6, lr}
  400b86:	4604      	mov	r4, r0
  400b88:	460d      	mov	r5, r1
  400b8a:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400b8c:	b91b      	cbnz	r3, 400b96 <gfx_mono_ssd1306_put_byte+0x12>
  400b8e:	4b0d      	ldr	r3, [pc, #52]	; (400bc4 <gfx_mono_ssd1306_put_byte+0x40>)
  400b90:	4798      	blx	r3
  400b92:	42b0      	cmp	r0, r6
  400b94:	d015      	beq.n	400bc2 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400b96:	4632      	mov	r2, r6
  400b98:	4629      	mov	r1, r5
  400b9a:	4620      	mov	r0, r4
  400b9c:	4b0a      	ldr	r3, [pc, #40]	; (400bc8 <gfx_mono_ssd1306_put_byte+0x44>)
  400b9e:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400ba0:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400ba4:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400ba8:	4c08      	ldr	r4, [pc, #32]	; (400bcc <gfx_mono_ssd1306_put_byte+0x48>)
  400baa:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400bac:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400bb0:	f040 0010 	orr.w	r0, r0, #16
  400bb4:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400bb6:	f005 000f 	and.w	r0, r5, #15
  400bba:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400bbc:	4630      	mov	r0, r6
  400bbe:	4b04      	ldr	r3, [pc, #16]	; (400bd0 <gfx_mono_ssd1306_put_byte+0x4c>)
  400bc0:	4798      	blx	r3
  400bc2:	bd70      	pop	{r4, r5, r6, pc}
  400bc4:	004009b9 	.word	0x004009b9
  400bc8:	004009a9 	.word	0x004009a9
  400bcc:	00400ccd 	.word	0x00400ccd
  400bd0:	00400eed 	.word	0x00400eed

00400bd4 <gfx_mono_ssd1306_init>:
{
  400bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400bd8:	480d      	ldr	r0, [pc, #52]	; (400c10 <gfx_mono_ssd1306_init+0x3c>)
  400bda:	4b0e      	ldr	r3, [pc, #56]	; (400c14 <gfx_mono_ssd1306_init+0x40>)
  400bdc:	4798      	blx	r3
	ssd1306_init();
  400bde:	4b0e      	ldr	r3, [pc, #56]	; (400c18 <gfx_mono_ssd1306_init+0x44>)
  400be0:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400be2:	2040      	movs	r0, #64	; 0x40
  400be4:	4b0d      	ldr	r3, [pc, #52]	; (400c1c <gfx_mono_ssd1306_init+0x48>)
  400be6:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400be8:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400bea:	f04f 0801 	mov.w	r8, #1
  400bee:	462f      	mov	r7, r5
  400bf0:	4e0b      	ldr	r6, [pc, #44]	; (400c20 <gfx_mono_ssd1306_init+0x4c>)
{
  400bf2:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400bf4:	4643      	mov	r3, r8
  400bf6:	463a      	mov	r2, r7
  400bf8:	b2e1      	uxtb	r1, r4
  400bfa:	4628      	mov	r0, r5
  400bfc:	47b0      	blx	r6
  400bfe:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400c00:	2c80      	cmp	r4, #128	; 0x80
  400c02:	d1f7      	bne.n	400bf4 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400c04:	3501      	adds	r5, #1
  400c06:	b2ed      	uxtb	r5, r5
  400c08:	2d04      	cmp	r5, #4
  400c0a:	d1f2      	bne.n	400bf2 <gfx_mono_ssd1306_init+0x1e>
  400c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400c10:	204009e4 	.word	0x204009e4
  400c14:	0040099d 	.word	0x0040099d
  400c18:	00400d0d 	.word	0x00400d0d
  400c1c:	00400ccd 	.word	0x00400ccd
  400c20:	00400b85 	.word	0x00400b85

00400c24 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400c24:	09c3      	lsrs	r3, r0, #7
  400c26:	d12a      	bne.n	400c7e <gfx_mono_ssd1306_draw_pixel+0x5a>
  400c28:	291f      	cmp	r1, #31
  400c2a:	d828      	bhi.n	400c7e <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c30:	4614      	mov	r4, r2
  400c32:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400c34:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400c36:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400c3a:	2201      	movs	r2, #1
  400c3c:	fa02 f701 	lsl.w	r7, r2, r1
  400c40:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400c44:	4601      	mov	r1, r0
  400c46:	4630      	mov	r0, r6
  400c48:	4b0d      	ldr	r3, [pc, #52]	; (400c80 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400c4a:	4798      	blx	r3
  400c4c:	4602      	mov	r2, r0
	switch (color) {
  400c4e:	2c01      	cmp	r4, #1
  400c50:	d009      	beq.n	400c66 <gfx_mono_ssd1306_draw_pixel+0x42>
  400c52:	b164      	cbz	r4, 400c6e <gfx_mono_ssd1306_draw_pixel+0x4a>
  400c54:	2c02      	cmp	r4, #2
  400c56:	d00e      	beq.n	400c76 <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400c58:	2300      	movs	r3, #0
  400c5a:	4629      	mov	r1, r5
  400c5c:	4630      	mov	r0, r6
  400c5e:	4c09      	ldr	r4, [pc, #36]	; (400c84 <gfx_mono_ssd1306_draw_pixel+0x60>)
  400c60:	47a0      	blx	r4
  400c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400c66:	ea48 0200 	orr.w	r2, r8, r0
  400c6a:	b2d2      	uxtb	r2, r2
		break;
  400c6c:	e7f4      	b.n	400c58 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  400c6e:	ea20 0207 	bic.w	r2, r0, r7
  400c72:	b2d2      	uxtb	r2, r2
		break;
  400c74:	e7f0      	b.n	400c58 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400c76:	ea88 0200 	eor.w	r2, r8, r0
  400c7a:	b2d2      	uxtb	r2, r2
		break;
  400c7c:	e7ec      	b.n	400c58 <gfx_mono_ssd1306_draw_pixel+0x34>
  400c7e:	4770      	bx	lr
  400c80:	004009b9 	.word	0x004009b9
  400c84:	00400b85 	.word	0x00400b85

00400c88 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
  400c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400c8a:	4605      	mov	r5, r0
  400c8c:	460e      	mov	r6, r1
  400c8e:	4617      	mov	r7, r2
  400c90:	461c      	mov	r4, r3
	return gfx_mono_framebuffer_get_byte(page, column);
  400c92:	4b0c      	ldr	r3, [pc, #48]	; (400cc4 <gfx_mono_ssd1306_mask_byte+0x3c>)
  400c94:	4798      	blx	r3
  400c96:	4602      	mov	r2, r0
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
  400c98:	2c01      	cmp	r4, #1
  400c9a:	d008      	beq.n	400cae <gfx_mono_ssd1306_mask_byte+0x26>
  400c9c:	b154      	cbz	r4, 400cb4 <gfx_mono_ssd1306_mask_byte+0x2c>
  400c9e:	2c02      	cmp	r4, #2
  400ca0:	d00c      	beq.n	400cbc <gfx_mono_ssd1306_mask_byte+0x34>

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
  400ca2:	2300      	movs	r3, #0
  400ca4:	4631      	mov	r1, r6
  400ca6:	4628      	mov	r0, r5
  400ca8:	4c07      	ldr	r4, [pc, #28]	; (400cc8 <gfx_mono_ssd1306_mask_byte+0x40>)
  400caa:	47a0      	blx	r4
  400cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp |= pixel_mask;
  400cae:	433a      	orrs	r2, r7
  400cb0:	b2d2      	uxtb	r2, r2
		break;
  400cb2:	e7f6      	b.n	400ca2 <gfx_mono_ssd1306_mask_byte+0x1a>
		temp &= ~pixel_mask;
  400cb4:	ea20 0207 	bic.w	r2, r0, r7
  400cb8:	b2d2      	uxtb	r2, r2
		break;
  400cba:	e7f2      	b.n	400ca2 <gfx_mono_ssd1306_mask_byte+0x1a>
		temp ^= pixel_mask;
  400cbc:	407a      	eors	r2, r7
  400cbe:	b2d2      	uxtb	r2, r2
		break;
  400cc0:	e7ef      	b.n	400ca2 <gfx_mono_ssd1306_mask_byte+0x1a>
  400cc2:	bf00      	nop
  400cc4:	004009b9 	.word	0x004009b9
  400cc8:	00400b85 	.word	0x00400b85

00400ccc <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400ccc:	b538      	push	{r3, r4, r5, lr}
  400cce:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400cd0:	2208      	movs	r2, #8
  400cd2:	4b09      	ldr	r3, [pc, #36]	; (400cf8 <ssd1306_write_command+0x2c>)
  400cd4:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400cd6:	4c09      	ldr	r4, [pc, #36]	; (400cfc <ssd1306_write_command+0x30>)
  400cd8:	2101      	movs	r1, #1
  400cda:	4620      	mov	r0, r4
  400cdc:	4b08      	ldr	r3, [pc, #32]	; (400d00 <ssd1306_write_command+0x34>)
  400cde:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400ce0:	2301      	movs	r3, #1
  400ce2:	461a      	mov	r2, r3
  400ce4:	4629      	mov	r1, r5
  400ce6:	4620      	mov	r0, r4
  400ce8:	4c06      	ldr	r4, [pc, #24]	; (400d04 <ssd1306_write_command+0x38>)
  400cea:	47a0      	blx	r4
	delay_us(10);
  400cec:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400cf0:	4b05      	ldr	r3, [pc, #20]	; (400d08 <ssd1306_write_command+0x3c>)
  400cf2:	4798      	blx	r3
  400cf4:	bd38      	pop	{r3, r4, r5, pc}
  400cf6:	bf00      	nop
  400cf8:	400e1000 	.word	0x400e1000
  400cfc:	40008000 	.word	0x40008000
  400d00:	004007d5 	.word	0x004007d5
  400d04:	004007eb 	.word	0x004007eb
  400d08:	20400001 	.word	0x20400001

00400d0c <ssd1306_init>:
{
  400d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d10:	4d66      	ldr	r5, [pc, #408]	; (400eac <ssd1306_init+0x1a0>)
  400d12:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400d16:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d18:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d1c:	4b64      	ldr	r3, [pc, #400]	; (400eb0 <ssd1306_init+0x1a4>)
  400d1e:	2708      	movs	r7, #8
  400d20:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d22:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400d26:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400d28:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400d2c:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400d2e:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400d30:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400d34:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400d36:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400d3a:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400d3c:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400d3e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400d42:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400d44:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400d46:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400d4a:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400d4c:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400d4e:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400d52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d54:	f022 0208 	bic.w	r2, r2, #8
  400d58:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400d5a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d5c:	f022 0208 	bic.w	r2, r2, #8
  400d60:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400d62:	601f      	str	r7, [r3, #0]
  400d64:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d66:	631f      	str	r7, [r3, #48]	; 0x30
  400d68:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400d6a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400ee8 <ssd1306_init+0x1dc>
  400d6e:	2300      	movs	r3, #0
  400d70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400d74:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d78:	4640      	mov	r0, r8
  400d7a:	4c4e      	ldr	r4, [pc, #312]	; (400eb4 <ssd1306_init+0x1a8>)
  400d7c:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400d7e:	2300      	movs	r3, #0
  400d80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400d84:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d88:	4640      	mov	r0, r8
  400d8a:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400d8c:	2300      	movs	r3, #0
  400d8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400d92:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d96:	4640      	mov	r0, r8
  400d98:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400d9a:	2300      	movs	r3, #0
  400d9c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400da0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400da4:	4640      	mov	r0, r8
  400da6:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400da8:	2300      	movs	r3, #0
  400daa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400dae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400db2:	4640      	mov	r0, r8
  400db4:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400db6:	2300      	movs	r3, #0
  400db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400dbc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400dc0:	4640      	mov	r0, r8
  400dc2:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400dc4:	4c3c      	ldr	r4, [pc, #240]	; (400eb8 <ssd1306_init+0x1ac>)
  400dc6:	f04f 0902 	mov.w	r9, #2
  400dca:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400dce:	f04f 0880 	mov.w	r8, #128	; 0x80
  400dd2:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400dd6:	6863      	ldr	r3, [r4, #4]
  400dd8:	f043 0301 	orr.w	r3, r3, #1
  400ddc:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400dde:	463a      	mov	r2, r7
  400de0:	2101      	movs	r1, #1
  400de2:	4620      	mov	r0, r4
  400de4:	4b35      	ldr	r3, [pc, #212]	; (400ebc <ssd1306_init+0x1b0>)
  400de6:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400de8:	2200      	movs	r2, #0
  400dea:	2101      	movs	r1, #1
  400dec:	4620      	mov	r0, r4
  400dee:	4b34      	ldr	r3, [pc, #208]	; (400ec0 <ssd1306_init+0x1b4>)
  400df0:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400df2:	2200      	movs	r2, #0
  400df4:	2101      	movs	r1, #1
  400df6:	4620      	mov	r0, r4
  400df8:	4b32      	ldr	r3, [pc, #200]	; (400ec4 <ssd1306_init+0x1b8>)
  400dfa:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400dfc:	6863      	ldr	r3, [r4, #4]
  400dfe:	f023 0302 	bic.w	r3, r3, #2
  400e02:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400e04:	2200      	movs	r2, #0
  400e06:	2101      	movs	r1, #1
  400e08:	4620      	mov	r0, r4
  400e0a:	4b2f      	ldr	r3, [pc, #188]	; (400ec8 <ssd1306_init+0x1bc>)
  400e0c:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400e0e:	6863      	ldr	r3, [r4, #4]
  400e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400e14:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400e16:	6863      	ldr	r3, [r4, #4]
  400e18:	f043 0310 	orr.w	r3, r3, #16
  400e1c:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400e1e:	492b      	ldr	r1, [pc, #172]	; (400ecc <ssd1306_init+0x1c0>)
  400e20:	482b      	ldr	r0, [pc, #172]	; (400ed0 <ssd1306_init+0x1c4>)
  400e22:	4b2c      	ldr	r3, [pc, #176]	; (400ed4 <ssd1306_init+0x1c8>)
  400e24:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400e26:	b2c2      	uxtb	r2, r0
  400e28:	2101      	movs	r1, #1
  400e2a:	4620      	mov	r0, r4
  400e2c:	4b2a      	ldr	r3, [pc, #168]	; (400ed8 <ssd1306_init+0x1cc>)
  400e2e:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400e30:	4620      	mov	r0, r4
  400e32:	4b2a      	ldr	r3, [pc, #168]	; (400edc <ssd1306_init+0x1d0>)
  400e34:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400e36:	2301      	movs	r3, #1
  400e38:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400e3a:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400e3c:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400e40:	4c27      	ldr	r4, [pc, #156]	; (400ee0 <ssd1306_init+0x1d4>)
  400e42:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400e44:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400e46:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400e4a:	47a0      	blx	r4
  400e4c:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400e4e:	20a8      	movs	r0, #168	; 0xa8
  400e50:	4c24      	ldr	r4, [pc, #144]	; (400ee4 <ssd1306_init+0x1d8>)
  400e52:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400e54:	201f      	movs	r0, #31
  400e56:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400e58:	20d3      	movs	r0, #211	; 0xd3
  400e5a:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400e5c:	2000      	movs	r0, #0
  400e5e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400e60:	2040      	movs	r0, #64	; 0x40
  400e62:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400e64:	20a1      	movs	r0, #161	; 0xa1
  400e66:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400e68:	20c8      	movs	r0, #200	; 0xc8
  400e6a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400e6c:	20da      	movs	r0, #218	; 0xda
  400e6e:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400e70:	4648      	mov	r0, r9
  400e72:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400e74:	2081      	movs	r0, #129	; 0x81
  400e76:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400e78:	208f      	movs	r0, #143	; 0x8f
  400e7a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400e7c:	20a4      	movs	r0, #164	; 0xa4
  400e7e:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400e80:	20a6      	movs	r0, #166	; 0xa6
  400e82:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400e84:	20d5      	movs	r0, #213	; 0xd5
  400e86:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400e88:	4640      	mov	r0, r8
  400e8a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400e8c:	208d      	movs	r0, #141	; 0x8d
  400e8e:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400e90:	2014      	movs	r0, #20
  400e92:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400e94:	20db      	movs	r0, #219	; 0xdb
  400e96:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400e98:	2040      	movs	r0, #64	; 0x40
  400e9a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400e9c:	20d9      	movs	r0, #217	; 0xd9
  400e9e:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400ea0:	20f1      	movs	r0, #241	; 0xf1
  400ea2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400ea4:	20af      	movs	r0, #175	; 0xaf
  400ea6:	47a0      	blx	r4
  400ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400eac:	400e1200 	.word	0x400e1200
  400eb0:	400e1000 	.word	0x400e1000
  400eb4:	004012d5 	.word	0x004012d5
  400eb8:	40008000 	.word	0x40008000
  400ebc:	0040085b 	.word	0x0040085b
  400ec0:	0040081f 	.word	0x0040081f
  400ec4:	0040083d 	.word	0x0040083d
  400ec8:	004008a1 	.word	0x004008a1
  400ecc:	08f0d180 	.word	0x08f0d180
  400ed0:	001e8480 	.word	0x001e8480
  400ed4:	004008b5 	.word	0x004008b5
  400ed8:	004008cb 	.word	0x004008cb
  400edc:	004007a9 	.word	0x004007a9
  400ee0:	20400001 	.word	0x20400001
  400ee4:	00400ccd 	.word	0x00400ccd
  400ee8:	400e1400 	.word	0x400e1400

00400eec <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400eec:	b538      	push	{r3, r4, r5, lr}
  400eee:	4605      	mov	r5, r0
  400ef0:	2208      	movs	r2, #8
  400ef2:	4b09      	ldr	r3, [pc, #36]	; (400f18 <ssd1306_write_data+0x2c>)
  400ef4:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400ef6:	4c09      	ldr	r4, [pc, #36]	; (400f1c <ssd1306_write_data+0x30>)
  400ef8:	2101      	movs	r1, #1
  400efa:	4620      	mov	r0, r4
  400efc:	4b08      	ldr	r3, [pc, #32]	; (400f20 <ssd1306_write_data+0x34>)
  400efe:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400f00:	2301      	movs	r3, #1
  400f02:	461a      	mov	r2, r3
  400f04:	4629      	mov	r1, r5
  400f06:	4620      	mov	r0, r4
  400f08:	4c06      	ldr	r4, [pc, #24]	; (400f24 <ssd1306_write_data+0x38>)
  400f0a:	47a0      	blx	r4
	delay_us(10);
  400f0c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400f10:	4b05      	ldr	r3, [pc, #20]	; (400f28 <ssd1306_write_data+0x3c>)
  400f12:	4798      	blx	r3
  400f14:	bd38      	pop	{r3, r4, r5, pc}
  400f16:	bf00      	nop
  400f18:	400e1000 	.word	0x400e1000
  400f1c:	40008000 	.word	0x40008000
  400f20:	004007d5 	.word	0x004007d5
  400f24:	004007eb 	.word	0x004007eb
  400f28:	20400001 	.word	0x20400001

00400f2c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400f2c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400f2e:	4810      	ldr	r0, [pc, #64]	; (400f70 <sysclk_init+0x44>)
  400f30:	4b10      	ldr	r3, [pc, #64]	; (400f74 <sysclk_init+0x48>)
  400f32:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400f34:	213e      	movs	r1, #62	; 0x3e
  400f36:	2000      	movs	r0, #0
  400f38:	4b0f      	ldr	r3, [pc, #60]	; (400f78 <sysclk_init+0x4c>)
  400f3a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400f3c:	4c0f      	ldr	r4, [pc, #60]	; (400f7c <sysclk_init+0x50>)
  400f3e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400f40:	2800      	cmp	r0, #0
  400f42:	d0fc      	beq.n	400f3e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400f44:	4b0e      	ldr	r3, [pc, #56]	; (400f80 <sysclk_init+0x54>)
  400f46:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400f48:	4a0e      	ldr	r2, [pc, #56]	; (400f84 <sysclk_init+0x58>)
  400f4a:	4b0f      	ldr	r3, [pc, #60]	; (400f88 <sysclk_init+0x5c>)
  400f4c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400f4e:	4c0f      	ldr	r4, [pc, #60]	; (400f8c <sysclk_init+0x60>)
  400f50:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400f52:	2800      	cmp	r0, #0
  400f54:	d0fc      	beq.n	400f50 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400f56:	2002      	movs	r0, #2
  400f58:	4b0d      	ldr	r3, [pc, #52]	; (400f90 <sysclk_init+0x64>)
  400f5a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400f5c:	2000      	movs	r0, #0
  400f5e:	4b0d      	ldr	r3, [pc, #52]	; (400f94 <sysclk_init+0x68>)
  400f60:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400f62:	4b0d      	ldr	r3, [pc, #52]	; (400f98 <sysclk_init+0x6c>)
  400f64:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400f66:	4802      	ldr	r0, [pc, #8]	; (400f70 <sysclk_init+0x44>)
  400f68:	4b02      	ldr	r3, [pc, #8]	; (400f74 <sysclk_init+0x48>)
  400f6a:	4798      	blx	r3
  400f6c:	bd10      	pop	{r4, pc}
  400f6e:	bf00      	nop
  400f70:	11e1a300 	.word	0x11e1a300
  400f74:	00401955 	.word	0x00401955
  400f78:	00401571 	.word	0x00401571
  400f7c:	004015c5 	.word	0x004015c5
  400f80:	004015d5 	.word	0x004015d5
  400f84:	20183f01 	.word	0x20183f01
  400f88:	400e0600 	.word	0x400e0600
  400f8c:	004015e5 	.word	0x004015e5
  400f90:	004014d5 	.word	0x004014d5
  400f94:	0040150d 	.word	0x0040150d
  400f98:	00401849 	.word	0x00401849

00400f9c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400fa0:	b980      	cbnz	r0, 400fc4 <_read+0x28>
  400fa2:	460c      	mov	r4, r1
  400fa4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400fa6:	2a00      	cmp	r2, #0
  400fa8:	dd0f      	ble.n	400fca <_read+0x2e>
  400faa:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400fac:	4e08      	ldr	r6, [pc, #32]	; (400fd0 <_read+0x34>)
  400fae:	4d09      	ldr	r5, [pc, #36]	; (400fd4 <_read+0x38>)
  400fb0:	6830      	ldr	r0, [r6, #0]
  400fb2:	4621      	mov	r1, r4
  400fb4:	682b      	ldr	r3, [r5, #0]
  400fb6:	4798      	blx	r3
		ptr++;
  400fb8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400fba:	42bc      	cmp	r4, r7
  400fbc:	d1f8      	bne.n	400fb0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400fbe:	4640      	mov	r0, r8
  400fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400fc4:	f04f 38ff 	mov.w	r8, #4294967295
  400fc8:	e7f9      	b.n	400fbe <_read+0x22>
	for (; len > 0; --len) {
  400fca:	4680      	mov	r8, r0
  400fcc:	e7f7      	b.n	400fbe <_read+0x22>
  400fce:	bf00      	nop
  400fd0:	20400e68 	.word	0x20400e68
  400fd4:	20400e60 	.word	0x20400e60

00400fd8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400fd8:	3801      	subs	r0, #1
  400fda:	2802      	cmp	r0, #2
  400fdc:	d815      	bhi.n	40100a <_write+0x32>
{
  400fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400fe2:	460e      	mov	r6, r1
  400fe4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400fe6:	b19a      	cbz	r2, 401010 <_write+0x38>
  400fe8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400fea:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401024 <_write+0x4c>
  400fee:	4f0c      	ldr	r7, [pc, #48]	; (401020 <_write+0x48>)
  400ff0:	f8d8 0000 	ldr.w	r0, [r8]
  400ff4:	f815 1b01 	ldrb.w	r1, [r5], #1
  400ff8:	683b      	ldr	r3, [r7, #0]
  400ffa:	4798      	blx	r3
  400ffc:	2800      	cmp	r0, #0
  400ffe:	db0a      	blt.n	401016 <_write+0x3e>
  401000:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  401002:	3c01      	subs	r4, #1
  401004:	d1f4      	bne.n	400ff0 <_write+0x18>
  401006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40100a:	f04f 30ff 	mov.w	r0, #4294967295
  40100e:	4770      	bx	lr
	for (; len != 0; --len) {
  401010:	4610      	mov	r0, r2
  401012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  401016:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40101a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40101e:	bf00      	nop
  401020:	20400e64 	.word	0x20400e64
  401024:	20400e68 	.word	0x20400e68

00401028 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40102a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40102e:	4b5c      	ldr	r3, [pc, #368]	; (4011a0 <board_init+0x178>)
  401030:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  401032:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401036:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40103a:	4b5a      	ldr	r3, [pc, #360]	; (4011a4 <board_init+0x17c>)
  40103c:	2200      	movs	r2, #0
  40103e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401042:	695a      	ldr	r2, [r3, #20]
  401044:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  401048:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  40104a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40104e:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401052:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401056:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40105a:	f007 0007 	and.w	r0, r7, #7
  40105e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401060:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401064:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  401068:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  40106c:	f3bf 8f4f 	dsb	sy
  401070:	f04f 34ff 	mov.w	r4, #4294967295
  401074:	fa04 fc00 	lsl.w	ip, r4, r0
  401078:	fa06 f000 	lsl.w	r0, r6, r0
  40107c:	fa04 f40e 	lsl.w	r4, r4, lr
  401080:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  401084:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  401086:	463a      	mov	r2, r7
  401088:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40108a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  40108e:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  401092:	3a01      	subs	r2, #1
  401094:	4423      	add	r3, r4
  401096:	f1b2 3fff 	cmp.w	r2, #4294967295
  40109a:	d1f6      	bne.n	40108a <board_init+0x62>
        } while(sets--);
  40109c:	3e01      	subs	r6, #1
  40109e:	4460      	add	r0, ip
  4010a0:	f1b6 3fff 	cmp.w	r6, #4294967295
  4010a4:	d1ef      	bne.n	401086 <board_init+0x5e>
  4010a6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4010aa:	4b3e      	ldr	r3, [pc, #248]	; (4011a4 <board_init+0x17c>)
  4010ac:	695a      	ldr	r2, [r3, #20]
  4010ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4010b2:	615a      	str	r2, [r3, #20]
  4010b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4010b8:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4010bc:	4a3a      	ldr	r2, [pc, #232]	; (4011a8 <board_init+0x180>)
  4010be:	493b      	ldr	r1, [pc, #236]	; (4011ac <board_init+0x184>)
  4010c0:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4010c2:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4010c6:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  4010c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4010cc:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4010d0:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4010d4:	f022 0201 	bic.w	r2, r2, #1
  4010d8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4010dc:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4010e0:	f022 0201 	bic.w	r2, r2, #1
  4010e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4010e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4010ec:	f3bf 8f6f 	isb	sy
  4010f0:	200a      	movs	r0, #10
  4010f2:	4c2f      	ldr	r4, [pc, #188]	; (4011b0 <board_init+0x188>)
  4010f4:	47a0      	blx	r4
  4010f6:	200b      	movs	r0, #11
  4010f8:	47a0      	blx	r4
  4010fa:	200c      	movs	r0, #12
  4010fc:	47a0      	blx	r4
  4010fe:	2010      	movs	r0, #16
  401100:	47a0      	blx	r4
  401102:	2011      	movs	r0, #17
  401104:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401106:	4b2b      	ldr	r3, [pc, #172]	; (4011b4 <board_init+0x18c>)
  401108:	f44f 7280 	mov.w	r2, #256	; 0x100
  40110c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40110e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401112:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401114:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  401118:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40111c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40111e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  401122:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401124:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401128:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40112a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40112c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401130:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401132:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401136:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401138:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40113a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40113e:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401140:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401144:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401148:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  40114c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401150:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401152:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401156:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401158:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40115a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40115e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401160:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  401164:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401166:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401168:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40116c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40116e:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401170:	4a11      	ldr	r2, [pc, #68]	; (4011b8 <board_init+0x190>)
  401172:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  401176:	f043 0310 	orr.w	r3, r3, #16
  40117a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  40117e:	4b0f      	ldr	r3, [pc, #60]	; (4011bc <board_init+0x194>)
  401180:	2210      	movs	r2, #16
  401182:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401184:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401188:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40118a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40118c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401190:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401192:	4311      	orrs	r1, r2
  401194:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401196:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401198:	4311      	orrs	r1, r2
  40119a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40119c:	605a      	str	r2, [r3, #4]
  40119e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4011a0:	400e1850 	.word	0x400e1850
  4011a4:	e000ed00 	.word	0xe000ed00
  4011a8:	400e0c00 	.word	0x400e0c00
  4011ac:	5a00080c 	.word	0x5a00080c
  4011b0:	004015f5 	.word	0x004015f5
  4011b4:	400e1200 	.word	0x400e1200
  4011b8:	40088000 	.word	0x40088000
  4011bc:	400e1000 	.word	0x400e1000

004011c0 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4011c0:	6301      	str	r1, [r0, #48]	; 0x30
  4011c2:	4770      	bx	lr

004011c4 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4011c4:	6341      	str	r1, [r0, #52]	; 0x34
  4011c6:	4770      	bx	lr

004011c8 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  4011c8:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  4011cc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4011d0:	d105      	bne.n	4011de <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  4011d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  4011d4:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  4011d6:	bf14      	ite	ne
  4011d8:	2001      	movne	r0, #1
  4011da:	2000      	moveq	r0, #0
  4011dc:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  4011de:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  4011e0:	e7f8      	b.n	4011d4 <pio_get+0xc>

004011e2 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4011e2:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4011e4:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4011e8:	d03a      	beq.n	401260 <pio_set_peripheral+0x7e>
  4011ea:	d813      	bhi.n	401214 <pio_set_peripheral+0x32>
  4011ec:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4011f0:	d025      	beq.n	40123e <pio_set_peripheral+0x5c>
  4011f2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4011f6:	d10a      	bne.n	40120e <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4011f8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4011fa:	4313      	orrs	r3, r2
  4011fc:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4011fe:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401200:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401202:	400b      	ands	r3, r1
  401204:	ea23 0302 	bic.w	r3, r3, r2
  401208:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40120a:	6042      	str	r2, [r0, #4]
  40120c:	4770      	bx	lr
	switch (ul_type) {
  40120e:	2900      	cmp	r1, #0
  401210:	d1fb      	bne.n	40120a <pio_set_peripheral+0x28>
  401212:	4770      	bx	lr
  401214:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401218:	d021      	beq.n	40125e <pio_set_peripheral+0x7c>
  40121a:	d809      	bhi.n	401230 <pio_set_peripheral+0x4e>
  40121c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401220:	d1f3      	bne.n	40120a <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401222:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401224:	4313      	orrs	r3, r2
  401226:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401228:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40122a:	4313      	orrs	r3, r2
  40122c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40122e:	e7ec      	b.n	40120a <pio_set_peripheral+0x28>
	switch (ul_type) {
  401230:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401234:	d013      	beq.n	40125e <pio_set_peripheral+0x7c>
  401236:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40123a:	d010      	beq.n	40125e <pio_set_peripheral+0x7c>
  40123c:	e7e5      	b.n	40120a <pio_set_peripheral+0x28>
{
  40123e:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401240:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401242:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401244:	43d3      	mvns	r3, r2
  401246:	4021      	ands	r1, r4
  401248:	461c      	mov	r4, r3
  40124a:	4019      	ands	r1, r3
  40124c:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40124e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401250:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401252:	400b      	ands	r3, r1
  401254:	4023      	ands	r3, r4
  401256:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401258:	6042      	str	r2, [r0, #4]
}
  40125a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40125e:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401260:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401262:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401264:	400b      	ands	r3, r1
  401266:	ea23 0302 	bic.w	r3, r3, r2
  40126a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40126c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40126e:	4313      	orrs	r3, r2
  401270:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401272:	e7ca      	b.n	40120a <pio_set_peripheral+0x28>

00401274 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401274:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401276:	f012 0f01 	tst.w	r2, #1
  40127a:	d10d      	bne.n	401298 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  40127c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40127e:	f012 0f0a 	tst.w	r2, #10
  401282:	d00b      	beq.n	40129c <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  401284:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401286:	f012 0f02 	tst.w	r2, #2
  40128a:	d109      	bne.n	4012a0 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  40128c:	f012 0f08 	tst.w	r2, #8
  401290:	d008      	beq.n	4012a4 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401292:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401296:	e005      	b.n	4012a4 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  401298:	6641      	str	r1, [r0, #100]	; 0x64
  40129a:	e7f0      	b.n	40127e <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40129c:	6241      	str	r1, [r0, #36]	; 0x24
  40129e:	e7f2      	b.n	401286 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4012a0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4012a4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4012a6:	6001      	str	r1, [r0, #0]
  4012a8:	4770      	bx	lr

004012aa <pio_set_output>:
{
  4012aa:	b410      	push	{r4}
  4012ac:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4012ae:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4012b0:	b94c      	cbnz	r4, 4012c6 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4012b2:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4012b4:	b14b      	cbz	r3, 4012ca <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4012b6:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4012b8:	b94a      	cbnz	r2, 4012ce <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4012ba:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4012bc:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4012be:	6001      	str	r1, [r0, #0]
}
  4012c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4012c4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4012c6:	6641      	str	r1, [r0, #100]	; 0x64
  4012c8:	e7f4      	b.n	4012b4 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4012ca:	6541      	str	r1, [r0, #84]	; 0x54
  4012cc:	e7f4      	b.n	4012b8 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4012ce:	6301      	str	r1, [r0, #48]	; 0x30
  4012d0:	e7f4      	b.n	4012bc <pio_set_output+0x12>
	...

004012d4 <pio_configure>:
{
  4012d4:	b570      	push	{r4, r5, r6, lr}
  4012d6:	b082      	sub	sp, #8
  4012d8:	4605      	mov	r5, r0
  4012da:	4616      	mov	r6, r2
  4012dc:	461c      	mov	r4, r3
	switch (ul_type) {
  4012de:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4012e2:	d014      	beq.n	40130e <pio_configure+0x3a>
  4012e4:	d90a      	bls.n	4012fc <pio_configure+0x28>
  4012e6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4012ea:	d024      	beq.n	401336 <pio_configure+0x62>
  4012ec:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4012f0:	d021      	beq.n	401336 <pio_configure+0x62>
  4012f2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4012f6:	d017      	beq.n	401328 <pio_configure+0x54>
		return 0;
  4012f8:	2000      	movs	r0, #0
  4012fa:	e01a      	b.n	401332 <pio_configure+0x5e>
	switch (ul_type) {
  4012fc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401300:	d005      	beq.n	40130e <pio_configure+0x3a>
  401302:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401306:	d002      	beq.n	40130e <pio_configure+0x3a>
  401308:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40130c:	d1f4      	bne.n	4012f8 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40130e:	4632      	mov	r2, r6
  401310:	4628      	mov	r0, r5
  401312:	4b11      	ldr	r3, [pc, #68]	; (401358 <pio_configure+0x84>)
  401314:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401316:	f014 0f01 	tst.w	r4, #1
  40131a:	d102      	bne.n	401322 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  40131c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40131e:	2001      	movs	r0, #1
  401320:	e007      	b.n	401332 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  401322:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401324:	2001      	movs	r0, #1
  401326:	e004      	b.n	401332 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401328:	461a      	mov	r2, r3
  40132a:	4631      	mov	r1, r6
  40132c:	4b0b      	ldr	r3, [pc, #44]	; (40135c <pio_configure+0x88>)
  40132e:	4798      	blx	r3
	return 1;
  401330:	2001      	movs	r0, #1
}
  401332:	b002      	add	sp, #8
  401334:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401336:	f004 0301 	and.w	r3, r4, #1
  40133a:	9300      	str	r3, [sp, #0]
  40133c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401340:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401344:	bf14      	ite	ne
  401346:	2200      	movne	r2, #0
  401348:	2201      	moveq	r2, #1
  40134a:	4631      	mov	r1, r6
  40134c:	4628      	mov	r0, r5
  40134e:	4c04      	ldr	r4, [pc, #16]	; (401360 <pio_configure+0x8c>)
  401350:	47a0      	blx	r4
	return 1;
  401352:	2001      	movs	r0, #1
		break;
  401354:	e7ed      	b.n	401332 <pio_configure+0x5e>
  401356:	bf00      	nop
  401358:	004011e3 	.word	0x004011e3
  40135c:	00401275 	.word	0x00401275
  401360:	004012ab 	.word	0x004012ab

00401364 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  401364:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401366:	420b      	tst	r3, r1
}
  401368:	bf14      	ite	ne
  40136a:	2001      	movne	r0, #1
  40136c:	2000      	moveq	r0, #0
  40136e:	4770      	bx	lr

00401370 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  401370:	f012 0f10 	tst.w	r2, #16
  401374:	d012      	beq.n	40139c <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  401376:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40137a:	f012 0f20 	tst.w	r2, #32
  40137e:	d007      	beq.n	401390 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  401380:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  401384:	f012 0f40 	tst.w	r2, #64	; 0x40
  401388:	d005      	beq.n	401396 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  40138a:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  40138e:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  401390:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  401394:	e7f6      	b.n	401384 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  401396:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  40139a:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  40139c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4013a0:	4770      	bx	lr

004013a2 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4013a2:	6401      	str	r1, [r0, #64]	; 0x40
  4013a4:	4770      	bx	lr

004013a6 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4013a6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4013a8:	4770      	bx	lr

004013aa <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4013aa:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4013ac:	4770      	bx	lr
	...

004013b0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4013b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4013b4:	4604      	mov	r4, r0
  4013b6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4013b8:	4b0e      	ldr	r3, [pc, #56]	; (4013f4 <pio_handler_process+0x44>)
  4013ba:	4798      	blx	r3
  4013bc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4013be:	4620      	mov	r0, r4
  4013c0:	4b0d      	ldr	r3, [pc, #52]	; (4013f8 <pio_handler_process+0x48>)
  4013c2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4013c4:	4005      	ands	r5, r0
  4013c6:	d013      	beq.n	4013f0 <pio_handler_process+0x40>
  4013c8:	4c0c      	ldr	r4, [pc, #48]	; (4013fc <pio_handler_process+0x4c>)
  4013ca:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4013ce:	e003      	b.n	4013d8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4013d0:	42b4      	cmp	r4, r6
  4013d2:	d00d      	beq.n	4013f0 <pio_handler_process+0x40>
  4013d4:	3410      	adds	r4, #16
		while (status != 0) {
  4013d6:	b15d      	cbz	r5, 4013f0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4013d8:	6820      	ldr	r0, [r4, #0]
  4013da:	4540      	cmp	r0, r8
  4013dc:	d1f8      	bne.n	4013d0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4013de:	6861      	ldr	r1, [r4, #4]
  4013e0:	4229      	tst	r1, r5
  4013e2:	d0f5      	beq.n	4013d0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4013e4:	68e3      	ldr	r3, [r4, #12]
  4013e6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4013e8:	6863      	ldr	r3, [r4, #4]
  4013ea:	ea25 0503 	bic.w	r5, r5, r3
  4013ee:	e7ef      	b.n	4013d0 <pio_handler_process+0x20>
  4013f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4013f4:	004013a7 	.word	0x004013a7
  4013f8:	004013ab 	.word	0x004013ab
  4013fc:	20400be4 	.word	0x20400be4

00401400 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  401400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  401402:	4c18      	ldr	r4, [pc, #96]	; (401464 <pio_handler_set+0x64>)
  401404:	6826      	ldr	r6, [r4, #0]
  401406:	2e06      	cmp	r6, #6
  401408:	d82a      	bhi.n	401460 <pio_handler_set+0x60>
  40140a:	f04f 0c00 	mov.w	ip, #0
  40140e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401410:	4f15      	ldr	r7, [pc, #84]	; (401468 <pio_handler_set+0x68>)
  401412:	e004      	b.n	40141e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401414:	3401      	adds	r4, #1
  401416:	b2e4      	uxtb	r4, r4
  401418:	46a4      	mov	ip, r4
  40141a:	42a6      	cmp	r6, r4
  40141c:	d309      	bcc.n	401432 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40141e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401420:	0125      	lsls	r5, r4, #4
  401422:	597d      	ldr	r5, [r7, r5]
  401424:	428d      	cmp	r5, r1
  401426:	d1f5      	bne.n	401414 <pio_handler_set+0x14>
  401428:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  40142c:	686d      	ldr	r5, [r5, #4]
  40142e:	4295      	cmp	r5, r2
  401430:	d1f0      	bne.n	401414 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  401432:	4d0d      	ldr	r5, [pc, #52]	; (401468 <pio_handler_set+0x68>)
  401434:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  401438:	eb05 040e 	add.w	r4, r5, lr
  40143c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  401440:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  401442:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  401444:	9906      	ldr	r1, [sp, #24]
  401446:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  401448:	3601      	adds	r6, #1
  40144a:	4566      	cmp	r6, ip
  40144c:	d005      	beq.n	40145a <pio_handler_set+0x5a>
  40144e:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401450:	461a      	mov	r2, r3
  401452:	4b06      	ldr	r3, [pc, #24]	; (40146c <pio_handler_set+0x6c>)
  401454:	4798      	blx	r3

	return 0;
  401456:	2000      	movs	r0, #0
  401458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  40145a:	4902      	ldr	r1, [pc, #8]	; (401464 <pio_handler_set+0x64>)
  40145c:	600e      	str	r6, [r1, #0]
  40145e:	e7f6      	b.n	40144e <pio_handler_set+0x4e>
		return 1;
  401460:	2001      	movs	r0, #1
}
  401462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401464:	20400c54 	.word	0x20400c54
  401468:	20400be4 	.word	0x20400be4
  40146c:	00401371 	.word	0x00401371

00401470 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401470:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401472:	210a      	movs	r1, #10
  401474:	4801      	ldr	r0, [pc, #4]	; (40147c <PIOA_Handler+0xc>)
  401476:	4b02      	ldr	r3, [pc, #8]	; (401480 <PIOA_Handler+0x10>)
  401478:	4798      	blx	r3
  40147a:	bd08      	pop	{r3, pc}
  40147c:	400e0e00 	.word	0x400e0e00
  401480:	004013b1 	.word	0x004013b1

00401484 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401484:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401486:	210b      	movs	r1, #11
  401488:	4801      	ldr	r0, [pc, #4]	; (401490 <PIOB_Handler+0xc>)
  40148a:	4b02      	ldr	r3, [pc, #8]	; (401494 <PIOB_Handler+0x10>)
  40148c:	4798      	blx	r3
  40148e:	bd08      	pop	{r3, pc}
  401490:	400e1000 	.word	0x400e1000
  401494:	004013b1 	.word	0x004013b1

00401498 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401498:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40149a:	210c      	movs	r1, #12
  40149c:	4801      	ldr	r0, [pc, #4]	; (4014a4 <PIOC_Handler+0xc>)
  40149e:	4b02      	ldr	r3, [pc, #8]	; (4014a8 <PIOC_Handler+0x10>)
  4014a0:	4798      	blx	r3
  4014a2:	bd08      	pop	{r3, pc}
  4014a4:	400e1200 	.word	0x400e1200
  4014a8:	004013b1 	.word	0x004013b1

004014ac <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4014ac:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4014ae:	2110      	movs	r1, #16
  4014b0:	4801      	ldr	r0, [pc, #4]	; (4014b8 <PIOD_Handler+0xc>)
  4014b2:	4b02      	ldr	r3, [pc, #8]	; (4014bc <PIOD_Handler+0x10>)
  4014b4:	4798      	blx	r3
  4014b6:	bd08      	pop	{r3, pc}
  4014b8:	400e1400 	.word	0x400e1400
  4014bc:	004013b1 	.word	0x004013b1

004014c0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4014c0:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4014c2:	2111      	movs	r1, #17
  4014c4:	4801      	ldr	r0, [pc, #4]	; (4014cc <PIOE_Handler+0xc>)
  4014c6:	4b02      	ldr	r3, [pc, #8]	; (4014d0 <PIOE_Handler+0x10>)
  4014c8:	4798      	blx	r3
  4014ca:	bd08      	pop	{r3, pc}
  4014cc:	400e1600 	.word	0x400e1600
  4014d0:	004013b1 	.word	0x004013b1

004014d4 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4014d4:	2803      	cmp	r0, #3
  4014d6:	d011      	beq.n	4014fc <pmc_mck_set_division+0x28>
  4014d8:	2804      	cmp	r0, #4
  4014da:	d012      	beq.n	401502 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4014dc:	2802      	cmp	r0, #2
  4014de:	bf0c      	ite	eq
  4014e0:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4014e4:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4014e6:	4a08      	ldr	r2, [pc, #32]	; (401508 <pmc_mck_set_division+0x34>)
  4014e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4014ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4014ee:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4014f0:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4014f2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4014f4:	f013 0f08 	tst.w	r3, #8
  4014f8:	d0fb      	beq.n	4014f2 <pmc_mck_set_division+0x1e>
}
  4014fa:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4014fc:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401500:	e7f1      	b.n	4014e6 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401502:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401506:	e7ee      	b.n	4014e6 <pmc_mck_set_division+0x12>
  401508:	400e0600 	.word	0x400e0600

0040150c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40150c:	4a17      	ldr	r2, [pc, #92]	; (40156c <pmc_switch_mck_to_pllack+0x60>)
  40150e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401514:	4318      	orrs	r0, r3
  401516:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401518:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40151a:	f013 0f08 	tst.w	r3, #8
  40151e:	d10a      	bne.n	401536 <pmc_switch_mck_to_pllack+0x2a>
  401520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401524:	4911      	ldr	r1, [pc, #68]	; (40156c <pmc_switch_mck_to_pllack+0x60>)
  401526:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401528:	f012 0f08 	tst.w	r2, #8
  40152c:	d103      	bne.n	401536 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40152e:	3b01      	subs	r3, #1
  401530:	d1f9      	bne.n	401526 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401532:	2001      	movs	r0, #1
  401534:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401536:	4a0d      	ldr	r2, [pc, #52]	; (40156c <pmc_switch_mck_to_pllack+0x60>)
  401538:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40153a:	f023 0303 	bic.w	r3, r3, #3
  40153e:	f043 0302 	orr.w	r3, r3, #2
  401542:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401544:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401546:	f013 0f08 	tst.w	r3, #8
  40154a:	d10a      	bne.n	401562 <pmc_switch_mck_to_pllack+0x56>
  40154c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401550:	4906      	ldr	r1, [pc, #24]	; (40156c <pmc_switch_mck_to_pllack+0x60>)
  401552:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401554:	f012 0f08 	tst.w	r2, #8
  401558:	d105      	bne.n	401566 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40155a:	3b01      	subs	r3, #1
  40155c:	d1f9      	bne.n	401552 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40155e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401560:	4770      	bx	lr
	return 0;
  401562:	2000      	movs	r0, #0
  401564:	4770      	bx	lr
  401566:	2000      	movs	r0, #0
  401568:	4770      	bx	lr
  40156a:	bf00      	nop
  40156c:	400e0600 	.word	0x400e0600

00401570 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401570:	b9a0      	cbnz	r0, 40159c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401572:	480e      	ldr	r0, [pc, #56]	; (4015ac <pmc_switch_mainck_to_xtal+0x3c>)
  401574:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401576:	0209      	lsls	r1, r1, #8
  401578:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40157a:	4a0d      	ldr	r2, [pc, #52]	; (4015b0 <pmc_switch_mainck_to_xtal+0x40>)
  40157c:	401a      	ands	r2, r3
  40157e:	4b0d      	ldr	r3, [pc, #52]	; (4015b4 <pmc_switch_mainck_to_xtal+0x44>)
  401580:	4313      	orrs	r3, r2
  401582:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401584:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401586:	4602      	mov	r2, r0
  401588:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40158a:	f013 0f01 	tst.w	r3, #1
  40158e:	d0fb      	beq.n	401588 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401590:	4a06      	ldr	r2, [pc, #24]	; (4015ac <pmc_switch_mainck_to_xtal+0x3c>)
  401592:	6a11      	ldr	r1, [r2, #32]
  401594:	4b08      	ldr	r3, [pc, #32]	; (4015b8 <pmc_switch_mainck_to_xtal+0x48>)
  401596:	430b      	orrs	r3, r1
  401598:	6213      	str	r3, [r2, #32]
  40159a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40159c:	4903      	ldr	r1, [pc, #12]	; (4015ac <pmc_switch_mainck_to_xtal+0x3c>)
  40159e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4015a0:	4a06      	ldr	r2, [pc, #24]	; (4015bc <pmc_switch_mainck_to_xtal+0x4c>)
  4015a2:	401a      	ands	r2, r3
  4015a4:	4b06      	ldr	r3, [pc, #24]	; (4015c0 <pmc_switch_mainck_to_xtal+0x50>)
  4015a6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015a8:	620b      	str	r3, [r1, #32]
  4015aa:	4770      	bx	lr
  4015ac:	400e0600 	.word	0x400e0600
  4015b0:	ffc8fffc 	.word	0xffc8fffc
  4015b4:	00370001 	.word	0x00370001
  4015b8:	01370000 	.word	0x01370000
  4015bc:	fec8fffc 	.word	0xfec8fffc
  4015c0:	01370002 	.word	0x01370002

004015c4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4015c4:	4b02      	ldr	r3, [pc, #8]	; (4015d0 <pmc_osc_is_ready_mainck+0xc>)
  4015c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4015c8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4015cc:	4770      	bx	lr
  4015ce:	bf00      	nop
  4015d0:	400e0600 	.word	0x400e0600

004015d4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4015d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4015d8:	4b01      	ldr	r3, [pc, #4]	; (4015e0 <pmc_disable_pllack+0xc>)
  4015da:	629a      	str	r2, [r3, #40]	; 0x28
  4015dc:	4770      	bx	lr
  4015de:	bf00      	nop
  4015e0:	400e0600 	.word	0x400e0600

004015e4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4015e4:	4b02      	ldr	r3, [pc, #8]	; (4015f0 <pmc_is_locked_pllack+0xc>)
  4015e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4015e8:	f000 0002 	and.w	r0, r0, #2
  4015ec:	4770      	bx	lr
  4015ee:	bf00      	nop
  4015f0:	400e0600 	.word	0x400e0600

004015f4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4015f4:	283f      	cmp	r0, #63	; 0x3f
  4015f6:	d81e      	bhi.n	401636 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4015f8:	281f      	cmp	r0, #31
  4015fa:	d80c      	bhi.n	401616 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4015fc:	4b11      	ldr	r3, [pc, #68]	; (401644 <pmc_enable_periph_clk+0x50>)
  4015fe:	699a      	ldr	r2, [r3, #24]
  401600:	2301      	movs	r3, #1
  401602:	4083      	lsls	r3, r0
  401604:	4393      	bics	r3, r2
  401606:	d018      	beq.n	40163a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401608:	2301      	movs	r3, #1
  40160a:	fa03 f000 	lsl.w	r0, r3, r0
  40160e:	4b0d      	ldr	r3, [pc, #52]	; (401644 <pmc_enable_periph_clk+0x50>)
  401610:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401612:	2000      	movs	r0, #0
  401614:	4770      	bx	lr
		ul_id -= 32;
  401616:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401618:	4b0a      	ldr	r3, [pc, #40]	; (401644 <pmc_enable_periph_clk+0x50>)
  40161a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40161e:	2301      	movs	r3, #1
  401620:	4083      	lsls	r3, r0
  401622:	4393      	bics	r3, r2
  401624:	d00b      	beq.n	40163e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401626:	2301      	movs	r3, #1
  401628:	fa03 f000 	lsl.w	r0, r3, r0
  40162c:	4b05      	ldr	r3, [pc, #20]	; (401644 <pmc_enable_periph_clk+0x50>)
  40162e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401632:	2000      	movs	r0, #0
  401634:	4770      	bx	lr
		return 1;
  401636:	2001      	movs	r0, #1
  401638:	4770      	bx	lr
	return 0;
  40163a:	2000      	movs	r0, #0
  40163c:	4770      	bx	lr
  40163e:	2000      	movs	r0, #0
}
  401640:	4770      	bx	lr
  401642:	bf00      	nop
  401644:	400e0600 	.word	0x400e0600

00401648 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401648:	6943      	ldr	r3, [r0, #20]
  40164a:	f013 0f02 	tst.w	r3, #2
  40164e:	d002      	beq.n	401656 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401650:	61c1      	str	r1, [r0, #28]
	return 0;
  401652:	2000      	movs	r0, #0
  401654:	4770      	bx	lr
		return 1;
  401656:	2001      	movs	r0, #1
}
  401658:	4770      	bx	lr

0040165a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40165a:	6943      	ldr	r3, [r0, #20]
  40165c:	f013 0f01 	tst.w	r3, #1
  401660:	d003      	beq.n	40166a <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401662:	6983      	ldr	r3, [r0, #24]
  401664:	700b      	strb	r3, [r1, #0]
	return 0;
  401666:	2000      	movs	r0, #0
  401668:	4770      	bx	lr
		return 1;
  40166a:	2001      	movs	r0, #1
}
  40166c:	4770      	bx	lr

0040166e <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40166e:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401670:	010b      	lsls	r3, r1, #4
  401672:	4293      	cmp	r3, r2
  401674:	d914      	bls.n	4016a0 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401676:	00c9      	lsls	r1, r1, #3
  401678:	084b      	lsrs	r3, r1, #1
  40167a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40167e:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401682:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401684:	1e5c      	subs	r4, r3, #1
  401686:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40168a:	428c      	cmp	r4, r1
  40168c:	d901      	bls.n	401692 <usart_set_async_baudrate+0x24>
		return 1;
  40168e:	2001      	movs	r0, #1
  401690:	e017      	b.n	4016c2 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401692:	6841      	ldr	r1, [r0, #4]
  401694:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401698:	6041      	str	r1, [r0, #4]
  40169a:	e00c      	b.n	4016b6 <usart_set_async_baudrate+0x48>
		return 1;
  40169c:	2001      	movs	r0, #1
  40169e:	e010      	b.n	4016c2 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4016a0:	0859      	lsrs	r1, r3, #1
  4016a2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4016a6:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4016aa:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4016ac:	1e5c      	subs	r4, r3, #1
  4016ae:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4016b2:	428c      	cmp	r4, r1
  4016b4:	d8f2      	bhi.n	40169c <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4016b6:	0412      	lsls	r2, r2, #16
  4016b8:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4016bc:	431a      	orrs	r2, r3
  4016be:	6202      	str	r2, [r0, #32]

	return 0;
  4016c0:	2000      	movs	r0, #0
}
  4016c2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4016c6:	4770      	bx	lr

004016c8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4016c8:	4b08      	ldr	r3, [pc, #32]	; (4016ec <usart_reset+0x24>)
  4016ca:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4016ce:	2300      	movs	r3, #0
  4016d0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4016d2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4016d4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4016d6:	2388      	movs	r3, #136	; 0x88
  4016d8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4016da:	2324      	movs	r3, #36	; 0x24
  4016dc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4016de:	f44f 7380 	mov.w	r3, #256	; 0x100
  4016e2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4016e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4016e8:	6003      	str	r3, [r0, #0]
  4016ea:	4770      	bx	lr
  4016ec:	55534100 	.word	0x55534100

004016f0 <usart_init_rs232>:
{
  4016f0:	b570      	push	{r4, r5, r6, lr}
  4016f2:	4605      	mov	r5, r0
  4016f4:	460c      	mov	r4, r1
  4016f6:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4016f8:	4b0f      	ldr	r3, [pc, #60]	; (401738 <usart_init_rs232+0x48>)
  4016fa:	4798      	blx	r3
	ul_reg_val = 0;
  4016fc:	2200      	movs	r2, #0
  4016fe:	4b0f      	ldr	r3, [pc, #60]	; (40173c <usart_init_rs232+0x4c>)
  401700:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401702:	b1a4      	cbz	r4, 40172e <usart_init_rs232+0x3e>
  401704:	4632      	mov	r2, r6
  401706:	6821      	ldr	r1, [r4, #0]
  401708:	4628      	mov	r0, r5
  40170a:	4b0d      	ldr	r3, [pc, #52]	; (401740 <usart_init_rs232+0x50>)
  40170c:	4798      	blx	r3
  40170e:	4602      	mov	r2, r0
  401710:	b978      	cbnz	r0, 401732 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401712:	6863      	ldr	r3, [r4, #4]
  401714:	68a1      	ldr	r1, [r4, #8]
  401716:	430b      	orrs	r3, r1
  401718:	6921      	ldr	r1, [r4, #16]
  40171a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40171c:	68e1      	ldr	r1, [r4, #12]
  40171e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401720:	4906      	ldr	r1, [pc, #24]	; (40173c <usart_init_rs232+0x4c>)
  401722:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401724:	6869      	ldr	r1, [r5, #4]
  401726:	430b      	orrs	r3, r1
  401728:	606b      	str	r3, [r5, #4]
}
  40172a:	4610      	mov	r0, r2
  40172c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40172e:	2201      	movs	r2, #1
  401730:	e7fb      	b.n	40172a <usart_init_rs232+0x3a>
  401732:	2201      	movs	r2, #1
  401734:	e7f9      	b.n	40172a <usart_init_rs232+0x3a>
  401736:	bf00      	nop
  401738:	004016c9 	.word	0x004016c9
  40173c:	20400c58 	.word	0x20400c58
  401740:	0040166f 	.word	0x0040166f

00401744 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401744:	2340      	movs	r3, #64	; 0x40
  401746:	6003      	str	r3, [r0, #0]
  401748:	4770      	bx	lr

0040174a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40174a:	2310      	movs	r3, #16
  40174c:	6003      	str	r3, [r0, #0]
  40174e:	4770      	bx	lr

00401750 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401750:	6943      	ldr	r3, [r0, #20]
  401752:	f013 0f02 	tst.w	r3, #2
  401756:	d004      	beq.n	401762 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401758:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40175c:	61c1      	str	r1, [r0, #28]
	return 0;
  40175e:	2000      	movs	r0, #0
  401760:	4770      	bx	lr
		return 1;
  401762:	2001      	movs	r0, #1
}
  401764:	4770      	bx	lr

00401766 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401766:	6943      	ldr	r3, [r0, #20]
  401768:	f013 0f01 	tst.w	r3, #1
  40176c:	d005      	beq.n	40177a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40176e:	6983      	ldr	r3, [r0, #24]
  401770:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401774:	600b      	str	r3, [r1, #0]
	return 0;
  401776:	2000      	movs	r0, #0
  401778:	4770      	bx	lr
		return 1;
  40177a:	2001      	movs	r0, #1
}
  40177c:	4770      	bx	lr

0040177e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40177e:	e7fe      	b.n	40177e <Dummy_Handler>

00401780 <Reset_Handler>:
{
  401780:	b500      	push	{lr}
  401782:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401784:	4b25      	ldr	r3, [pc, #148]	; (40181c <Reset_Handler+0x9c>)
  401786:	4a26      	ldr	r2, [pc, #152]	; (401820 <Reset_Handler+0xa0>)
  401788:	429a      	cmp	r2, r3
  40178a:	d010      	beq.n	4017ae <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40178c:	4b25      	ldr	r3, [pc, #148]	; (401824 <Reset_Handler+0xa4>)
  40178e:	4a23      	ldr	r2, [pc, #140]	; (40181c <Reset_Handler+0x9c>)
  401790:	429a      	cmp	r2, r3
  401792:	d20c      	bcs.n	4017ae <Reset_Handler+0x2e>
  401794:	3b01      	subs	r3, #1
  401796:	1a9b      	subs	r3, r3, r2
  401798:	f023 0303 	bic.w	r3, r3, #3
  40179c:	3304      	adds	r3, #4
  40179e:	4413      	add	r3, r2
  4017a0:	491f      	ldr	r1, [pc, #124]	; (401820 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4017a2:	f851 0b04 	ldr.w	r0, [r1], #4
  4017a6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4017aa:	429a      	cmp	r2, r3
  4017ac:	d1f9      	bne.n	4017a2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4017ae:	4b1e      	ldr	r3, [pc, #120]	; (401828 <Reset_Handler+0xa8>)
  4017b0:	4a1e      	ldr	r2, [pc, #120]	; (40182c <Reset_Handler+0xac>)
  4017b2:	429a      	cmp	r2, r3
  4017b4:	d20a      	bcs.n	4017cc <Reset_Handler+0x4c>
  4017b6:	3b01      	subs	r3, #1
  4017b8:	1a9b      	subs	r3, r3, r2
  4017ba:	f023 0303 	bic.w	r3, r3, #3
  4017be:	3304      	adds	r3, #4
  4017c0:	4413      	add	r3, r2
                *pDest++ = 0;
  4017c2:	2100      	movs	r1, #0
  4017c4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4017c8:	4293      	cmp	r3, r2
  4017ca:	d1fb      	bne.n	4017c4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4017cc:	4a18      	ldr	r2, [pc, #96]	; (401830 <Reset_Handler+0xb0>)
  4017ce:	4b19      	ldr	r3, [pc, #100]	; (401834 <Reset_Handler+0xb4>)
  4017d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4017d4:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4017d6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4017da:	fab3 f383 	clz	r3, r3
  4017de:	095b      	lsrs	r3, r3, #5
  4017e0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4017e2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4017e4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4017e8:	2200      	movs	r2, #0
  4017ea:	4b13      	ldr	r3, [pc, #76]	; (401838 <Reset_Handler+0xb8>)
  4017ec:	701a      	strb	r2, [r3, #0]
	return flags;
  4017ee:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4017f0:	4a12      	ldr	r2, [pc, #72]	; (40183c <Reset_Handler+0xbc>)
  4017f2:	6813      	ldr	r3, [r2, #0]
  4017f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4017f8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4017fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4017fe:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  401802:	b129      	cbz	r1, 401810 <Reset_Handler+0x90>
		cpu_irq_enable();
  401804:	2201      	movs	r2, #1
  401806:	4b0c      	ldr	r3, [pc, #48]	; (401838 <Reset_Handler+0xb8>)
  401808:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40180a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40180e:	b662      	cpsie	i
        __libc_init_array();
  401810:	4b0b      	ldr	r3, [pc, #44]	; (401840 <Reset_Handler+0xc0>)
  401812:	4798      	blx	r3
        main();
  401814:	4b0b      	ldr	r3, [pc, #44]	; (401844 <Reset_Handler+0xc4>)
  401816:	4798      	blx	r3
  401818:	e7fe      	b.n	401818 <Reset_Handler+0x98>
  40181a:	bf00      	nop
  40181c:	20400000 	.word	0x20400000
  401820:	00407b80 	.word	0x00407b80
  401824:	204009c0 	.word	0x204009c0
  401828:	20400eec 	.word	0x20400eec
  40182c:	204009c0 	.word	0x204009c0
  401830:	e000ed00 	.word	0xe000ed00
  401834:	00400000 	.word	0x00400000
  401838:	2040000a 	.word	0x2040000a
  40183c:	e000ed88 	.word	0xe000ed88
  401840:	00404835 	.word	0x00404835
  401844:	00404585 	.word	0x00404585

00401848 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401848:	4b3b      	ldr	r3, [pc, #236]	; (401938 <SystemCoreClockUpdate+0xf0>)
  40184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40184c:	f003 0303 	and.w	r3, r3, #3
  401850:	2b01      	cmp	r3, #1
  401852:	d01d      	beq.n	401890 <SystemCoreClockUpdate+0x48>
  401854:	b183      	cbz	r3, 401878 <SystemCoreClockUpdate+0x30>
  401856:	2b02      	cmp	r3, #2
  401858:	d036      	beq.n	4018c8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40185a:	4b37      	ldr	r3, [pc, #220]	; (401938 <SystemCoreClockUpdate+0xf0>)
  40185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40185e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401862:	2b70      	cmp	r3, #112	; 0x70
  401864:	d05f      	beq.n	401926 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401866:	4b34      	ldr	r3, [pc, #208]	; (401938 <SystemCoreClockUpdate+0xf0>)
  401868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40186a:	4934      	ldr	r1, [pc, #208]	; (40193c <SystemCoreClockUpdate+0xf4>)
  40186c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401870:	680b      	ldr	r3, [r1, #0]
  401872:	40d3      	lsrs	r3, r2
  401874:	600b      	str	r3, [r1, #0]
  401876:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401878:	4b31      	ldr	r3, [pc, #196]	; (401940 <SystemCoreClockUpdate+0xf8>)
  40187a:	695b      	ldr	r3, [r3, #20]
  40187c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401880:	bf14      	ite	ne
  401882:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401886:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40188a:	4b2c      	ldr	r3, [pc, #176]	; (40193c <SystemCoreClockUpdate+0xf4>)
  40188c:	601a      	str	r2, [r3, #0]
  40188e:	e7e4      	b.n	40185a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401890:	4b29      	ldr	r3, [pc, #164]	; (401938 <SystemCoreClockUpdate+0xf0>)
  401892:	6a1b      	ldr	r3, [r3, #32]
  401894:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401898:	d003      	beq.n	4018a2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40189a:	4a2a      	ldr	r2, [pc, #168]	; (401944 <SystemCoreClockUpdate+0xfc>)
  40189c:	4b27      	ldr	r3, [pc, #156]	; (40193c <SystemCoreClockUpdate+0xf4>)
  40189e:	601a      	str	r2, [r3, #0]
  4018a0:	e7db      	b.n	40185a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4018a2:	4a29      	ldr	r2, [pc, #164]	; (401948 <SystemCoreClockUpdate+0x100>)
  4018a4:	4b25      	ldr	r3, [pc, #148]	; (40193c <SystemCoreClockUpdate+0xf4>)
  4018a6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4018a8:	4b23      	ldr	r3, [pc, #140]	; (401938 <SystemCoreClockUpdate+0xf0>)
  4018aa:	6a1b      	ldr	r3, [r3, #32]
  4018ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018b0:	2b10      	cmp	r3, #16
  4018b2:	d005      	beq.n	4018c0 <SystemCoreClockUpdate+0x78>
  4018b4:	2b20      	cmp	r3, #32
  4018b6:	d1d0      	bne.n	40185a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4018b8:	4a22      	ldr	r2, [pc, #136]	; (401944 <SystemCoreClockUpdate+0xfc>)
  4018ba:	4b20      	ldr	r3, [pc, #128]	; (40193c <SystemCoreClockUpdate+0xf4>)
  4018bc:	601a      	str	r2, [r3, #0]
          break;
  4018be:	e7cc      	b.n	40185a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4018c0:	4a22      	ldr	r2, [pc, #136]	; (40194c <SystemCoreClockUpdate+0x104>)
  4018c2:	4b1e      	ldr	r3, [pc, #120]	; (40193c <SystemCoreClockUpdate+0xf4>)
  4018c4:	601a      	str	r2, [r3, #0]
          break;
  4018c6:	e7c8      	b.n	40185a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4018c8:	4b1b      	ldr	r3, [pc, #108]	; (401938 <SystemCoreClockUpdate+0xf0>)
  4018ca:	6a1b      	ldr	r3, [r3, #32]
  4018cc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4018d0:	d016      	beq.n	401900 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4018d2:	4a1c      	ldr	r2, [pc, #112]	; (401944 <SystemCoreClockUpdate+0xfc>)
  4018d4:	4b19      	ldr	r3, [pc, #100]	; (40193c <SystemCoreClockUpdate+0xf4>)
  4018d6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4018d8:	4b17      	ldr	r3, [pc, #92]	; (401938 <SystemCoreClockUpdate+0xf0>)
  4018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4018dc:	f003 0303 	and.w	r3, r3, #3
  4018e0:	2b02      	cmp	r3, #2
  4018e2:	d1ba      	bne.n	40185a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4018e4:	4a14      	ldr	r2, [pc, #80]	; (401938 <SystemCoreClockUpdate+0xf0>)
  4018e6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4018e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4018ea:	4814      	ldr	r0, [pc, #80]	; (40193c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4018ec:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4018f0:	6803      	ldr	r3, [r0, #0]
  4018f2:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4018f6:	b2d2      	uxtb	r2, r2
  4018f8:	fbb3 f3f2 	udiv	r3, r3, r2
  4018fc:	6003      	str	r3, [r0, #0]
  4018fe:	e7ac      	b.n	40185a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401900:	4a11      	ldr	r2, [pc, #68]	; (401948 <SystemCoreClockUpdate+0x100>)
  401902:	4b0e      	ldr	r3, [pc, #56]	; (40193c <SystemCoreClockUpdate+0xf4>)
  401904:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401906:	4b0c      	ldr	r3, [pc, #48]	; (401938 <SystemCoreClockUpdate+0xf0>)
  401908:	6a1b      	ldr	r3, [r3, #32]
  40190a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40190e:	2b10      	cmp	r3, #16
  401910:	d005      	beq.n	40191e <SystemCoreClockUpdate+0xd6>
  401912:	2b20      	cmp	r3, #32
  401914:	d1e0      	bne.n	4018d8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401916:	4a0b      	ldr	r2, [pc, #44]	; (401944 <SystemCoreClockUpdate+0xfc>)
  401918:	4b08      	ldr	r3, [pc, #32]	; (40193c <SystemCoreClockUpdate+0xf4>)
  40191a:	601a      	str	r2, [r3, #0]
          break;
  40191c:	e7dc      	b.n	4018d8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40191e:	4a0b      	ldr	r2, [pc, #44]	; (40194c <SystemCoreClockUpdate+0x104>)
  401920:	4b06      	ldr	r3, [pc, #24]	; (40193c <SystemCoreClockUpdate+0xf4>)
  401922:	601a      	str	r2, [r3, #0]
          break;
  401924:	e7d8      	b.n	4018d8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401926:	4a05      	ldr	r2, [pc, #20]	; (40193c <SystemCoreClockUpdate+0xf4>)
  401928:	6813      	ldr	r3, [r2, #0]
  40192a:	4909      	ldr	r1, [pc, #36]	; (401950 <SystemCoreClockUpdate+0x108>)
  40192c:	fba1 1303 	umull	r1, r3, r1, r3
  401930:	085b      	lsrs	r3, r3, #1
  401932:	6013      	str	r3, [r2, #0]
  401934:	4770      	bx	lr
  401936:	bf00      	nop
  401938:	400e0600 	.word	0x400e0600
  40193c:	2040000c 	.word	0x2040000c
  401940:	400e1810 	.word	0x400e1810
  401944:	00b71b00 	.word	0x00b71b00
  401948:	003d0900 	.word	0x003d0900
  40194c:	007a1200 	.word	0x007a1200
  401950:	aaaaaaab 	.word	0xaaaaaaab

00401954 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401954:	4b16      	ldr	r3, [pc, #88]	; (4019b0 <system_init_flash+0x5c>)
  401956:	4298      	cmp	r0, r3
  401958:	d913      	bls.n	401982 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40195a:	4b16      	ldr	r3, [pc, #88]	; (4019b4 <system_init_flash+0x60>)
  40195c:	4298      	cmp	r0, r3
  40195e:	d915      	bls.n	40198c <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401960:	4b15      	ldr	r3, [pc, #84]	; (4019b8 <system_init_flash+0x64>)
  401962:	4298      	cmp	r0, r3
  401964:	d916      	bls.n	401994 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401966:	4b15      	ldr	r3, [pc, #84]	; (4019bc <system_init_flash+0x68>)
  401968:	4298      	cmp	r0, r3
  40196a:	d917      	bls.n	40199c <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40196c:	4b14      	ldr	r3, [pc, #80]	; (4019c0 <system_init_flash+0x6c>)
  40196e:	4298      	cmp	r0, r3
  401970:	d918      	bls.n	4019a4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401972:	4b14      	ldr	r3, [pc, #80]	; (4019c4 <system_init_flash+0x70>)
  401974:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401976:	bf94      	ite	ls
  401978:	4a13      	ldrls	r2, [pc, #76]	; (4019c8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40197a:	4a14      	ldrhi	r2, [pc, #80]	; (4019cc <system_init_flash+0x78>)
  40197c:	4b14      	ldr	r3, [pc, #80]	; (4019d0 <system_init_flash+0x7c>)
  40197e:	601a      	str	r2, [r3, #0]
  401980:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401982:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401986:	4b12      	ldr	r3, [pc, #72]	; (4019d0 <system_init_flash+0x7c>)
  401988:	601a      	str	r2, [r3, #0]
  40198a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40198c:	4a11      	ldr	r2, [pc, #68]	; (4019d4 <system_init_flash+0x80>)
  40198e:	4b10      	ldr	r3, [pc, #64]	; (4019d0 <system_init_flash+0x7c>)
  401990:	601a      	str	r2, [r3, #0]
  401992:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401994:	4a10      	ldr	r2, [pc, #64]	; (4019d8 <system_init_flash+0x84>)
  401996:	4b0e      	ldr	r3, [pc, #56]	; (4019d0 <system_init_flash+0x7c>)
  401998:	601a      	str	r2, [r3, #0]
  40199a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40199c:	4a0f      	ldr	r2, [pc, #60]	; (4019dc <system_init_flash+0x88>)
  40199e:	4b0c      	ldr	r3, [pc, #48]	; (4019d0 <system_init_flash+0x7c>)
  4019a0:	601a      	str	r2, [r3, #0]
  4019a2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4019a4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4019a8:	4b09      	ldr	r3, [pc, #36]	; (4019d0 <system_init_flash+0x7c>)
  4019aa:	601a      	str	r2, [r3, #0]
  4019ac:	4770      	bx	lr
  4019ae:	bf00      	nop
  4019b0:	015ef3bf 	.word	0x015ef3bf
  4019b4:	02bde77f 	.word	0x02bde77f
  4019b8:	041cdb3f 	.word	0x041cdb3f
  4019bc:	057bceff 	.word	0x057bceff
  4019c0:	06dac2bf 	.word	0x06dac2bf
  4019c4:	0839b67f 	.word	0x0839b67f
  4019c8:	04000500 	.word	0x04000500
  4019cc:	04000600 	.word	0x04000600
  4019d0:	400e0c00 	.word	0x400e0c00
  4019d4:	04000100 	.word	0x04000100
  4019d8:	04000200 	.word	0x04000200
  4019dc:	04000300 	.word	0x04000300

004019e0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4019e0:	4b0a      	ldr	r3, [pc, #40]	; (401a0c <_sbrk+0x2c>)
  4019e2:	681b      	ldr	r3, [r3, #0]
  4019e4:	b153      	cbz	r3, 4019fc <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4019e6:	4b09      	ldr	r3, [pc, #36]	; (401a0c <_sbrk+0x2c>)
  4019e8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4019ea:	181a      	adds	r2, r3, r0
  4019ec:	4908      	ldr	r1, [pc, #32]	; (401a10 <_sbrk+0x30>)
  4019ee:	4291      	cmp	r1, r2
  4019f0:	db08      	blt.n	401a04 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4019f2:	4610      	mov	r0, r2
  4019f4:	4a05      	ldr	r2, [pc, #20]	; (401a0c <_sbrk+0x2c>)
  4019f6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4019f8:	4618      	mov	r0, r3
  4019fa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4019fc:	4a05      	ldr	r2, [pc, #20]	; (401a14 <_sbrk+0x34>)
  4019fe:	4b03      	ldr	r3, [pc, #12]	; (401a0c <_sbrk+0x2c>)
  401a00:	601a      	str	r2, [r3, #0]
  401a02:	e7f0      	b.n	4019e6 <_sbrk+0x6>
		return (caddr_t) -1;	
  401a04:	f04f 30ff 	mov.w	r0, #4294967295
}
  401a08:	4770      	bx	lr
  401a0a:	bf00      	nop
  401a0c:	20400c5c 	.word	0x20400c5c
  401a10:	2045fffc 	.word	0x2045fffc
  401a14:	204030f0 	.word	0x204030f0

00401a18 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401a18:	f04f 30ff 	mov.w	r0, #4294967295
  401a1c:	4770      	bx	lr

00401a1e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401a1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401a22:	604b      	str	r3, [r1, #4]

	return 0;
}
  401a24:	2000      	movs	r0, #0
  401a26:	4770      	bx	lr

00401a28 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401a28:	2001      	movs	r0, #1
  401a2a:	4770      	bx	lr

00401a2c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401a2c:	2000      	movs	r0, #0
  401a2e:	4770      	bx	lr

00401a30 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401a30:	f100 0308 	add.w	r3, r0, #8
  401a34:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401a36:	f04f 32ff 	mov.w	r2, #4294967295
  401a3a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401a3c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401a3e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401a40:	2300      	movs	r3, #0
  401a42:	6003      	str	r3, [r0, #0]
  401a44:	4770      	bx	lr

00401a46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401a46:	2300      	movs	r3, #0
  401a48:	6103      	str	r3, [r0, #16]
  401a4a:	4770      	bx	lr

00401a4c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401a4c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401a4e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401a50:	689a      	ldr	r2, [r3, #8]
  401a52:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401a54:	689a      	ldr	r2, [r3, #8]
  401a56:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401a58:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401a5a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401a5c:	6803      	ldr	r3, [r0, #0]
  401a5e:	3301      	adds	r3, #1
  401a60:	6003      	str	r3, [r0, #0]
  401a62:	4770      	bx	lr

00401a64 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401a64:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  401a66:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401a68:	f1b5 3fff 	cmp.w	r5, #4294967295
  401a6c:	d002      	beq.n	401a74 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401a6e:	f100 0208 	add.w	r2, r0, #8
  401a72:	e002      	b.n	401a7a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401a74:	6902      	ldr	r2, [r0, #16]
  401a76:	e004      	b.n	401a82 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401a78:	461a      	mov	r2, r3
  401a7a:	6853      	ldr	r3, [r2, #4]
  401a7c:	681c      	ldr	r4, [r3, #0]
  401a7e:	42a5      	cmp	r5, r4
  401a80:	d2fa      	bcs.n	401a78 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401a82:	6853      	ldr	r3, [r2, #4]
  401a84:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  401a86:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401a88:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  401a8a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401a8c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401a8e:	6803      	ldr	r3, [r0, #0]
  401a90:	3301      	adds	r3, #1
  401a92:	6003      	str	r3, [r0, #0]
}
  401a94:	bc30      	pop	{r4, r5}
  401a96:	4770      	bx	lr

00401a98 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401a98:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  401a9a:	6842      	ldr	r2, [r0, #4]
  401a9c:	6881      	ldr	r1, [r0, #8]
  401a9e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401aa0:	6882      	ldr	r2, [r0, #8]
  401aa2:	6841      	ldr	r1, [r0, #4]
  401aa4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401aa6:	685a      	ldr	r2, [r3, #4]
  401aa8:	4290      	cmp	r0, r2
  401aaa:	d005      	beq.n	401ab8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401aac:	2200      	movs	r2, #0
  401aae:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  401ab0:	6818      	ldr	r0, [r3, #0]
  401ab2:	3801      	subs	r0, #1
  401ab4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  401ab6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401ab8:	6882      	ldr	r2, [r0, #8]
  401aba:	605a      	str	r2, [r3, #4]
  401abc:	e7f6      	b.n	401aac <uxListRemove+0x14>
	...

00401ac0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401ac0:	4b0d      	ldr	r3, [pc, #52]	; (401af8 <prvTaskExitError+0x38>)
  401ac2:	681b      	ldr	r3, [r3, #0]
  401ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ac8:	d00a      	beq.n	401ae0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401aca:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ace:	b672      	cpsid	i
  401ad0:	f383 8811 	msr	BASEPRI, r3
  401ad4:	f3bf 8f6f 	isb	sy
  401ad8:	f3bf 8f4f 	dsb	sy
  401adc:	b662      	cpsie	i
  401ade:	e7fe      	b.n	401ade <prvTaskExitError+0x1e>
  401ae0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ae4:	b672      	cpsid	i
  401ae6:	f383 8811 	msr	BASEPRI, r3
  401aea:	f3bf 8f6f 	isb	sy
  401aee:	f3bf 8f4f 	dsb	sy
  401af2:	b662      	cpsie	i
  401af4:	e7fe      	b.n	401af4 <prvTaskExitError+0x34>
  401af6:	bf00      	nop
  401af8:	20400010 	.word	0x20400010

00401afc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401afc:	4806      	ldr	r0, [pc, #24]	; (401b18 <prvPortStartFirstTask+0x1c>)
  401afe:	6800      	ldr	r0, [r0, #0]
  401b00:	6800      	ldr	r0, [r0, #0]
  401b02:	f380 8808 	msr	MSP, r0
  401b06:	b662      	cpsie	i
  401b08:	b661      	cpsie	f
  401b0a:	f3bf 8f4f 	dsb	sy
  401b0e:	f3bf 8f6f 	isb	sy
  401b12:	df00      	svc	0
  401b14:	bf00      	nop
  401b16:	0000      	.short	0x0000
  401b18:	e000ed08 	.word	0xe000ed08

00401b1c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401b1c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401b2c <vPortEnableVFP+0x10>
  401b20:	6801      	ldr	r1, [r0, #0]
  401b22:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401b26:	6001      	str	r1, [r0, #0]
  401b28:	4770      	bx	lr
  401b2a:	0000      	.short	0x0000
  401b2c:	e000ed88 	.word	0xe000ed88

00401b30 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401b30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401b34:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401b38:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401b3c:	4b05      	ldr	r3, [pc, #20]	; (401b54 <pxPortInitialiseStack+0x24>)
  401b3e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401b42:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  401b46:	f06f 0302 	mvn.w	r3, #2
  401b4a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401b4e:	3844      	subs	r0, #68	; 0x44
  401b50:	4770      	bx	lr
  401b52:	bf00      	nop
  401b54:	00401ac1 	.word	0x00401ac1

00401b58 <SVC_Handler>:
	__asm volatile (
  401b58:	4b06      	ldr	r3, [pc, #24]	; (401b74 <pxCurrentTCBConst2>)
  401b5a:	6819      	ldr	r1, [r3, #0]
  401b5c:	6808      	ldr	r0, [r1, #0]
  401b5e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b62:	f380 8809 	msr	PSP, r0
  401b66:	f3bf 8f6f 	isb	sy
  401b6a:	f04f 0000 	mov.w	r0, #0
  401b6e:	f380 8811 	msr	BASEPRI, r0
  401b72:	4770      	bx	lr

00401b74 <pxCurrentTCBConst2>:
  401b74:	20400c68 	.word	0x20400c68
  401b78:	4770      	bx	lr
  401b7a:	bf00      	nop

00401b7c <vPortEnterCritical>:
  401b7c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b80:	b672      	cpsid	i
  401b82:	f383 8811 	msr	BASEPRI, r3
  401b86:	f3bf 8f6f 	isb	sy
  401b8a:	f3bf 8f4f 	dsb	sy
  401b8e:	b662      	cpsie	i
	uxCriticalNesting++;
  401b90:	4a0b      	ldr	r2, [pc, #44]	; (401bc0 <vPortEnterCritical+0x44>)
  401b92:	6813      	ldr	r3, [r2, #0]
  401b94:	3301      	adds	r3, #1
  401b96:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401b98:	2b01      	cmp	r3, #1
  401b9a:	d10f      	bne.n	401bbc <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  401b9c:	4b09      	ldr	r3, [pc, #36]	; (401bc4 <vPortEnterCritical+0x48>)
  401b9e:	681b      	ldr	r3, [r3, #0]
  401ba0:	f013 0fff 	tst.w	r3, #255	; 0xff
  401ba4:	d00a      	beq.n	401bbc <vPortEnterCritical+0x40>
  401ba6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401baa:	b672      	cpsid	i
  401bac:	f383 8811 	msr	BASEPRI, r3
  401bb0:	f3bf 8f6f 	isb	sy
  401bb4:	f3bf 8f4f 	dsb	sy
  401bb8:	b662      	cpsie	i
  401bba:	e7fe      	b.n	401bba <vPortEnterCritical+0x3e>
  401bbc:	4770      	bx	lr
  401bbe:	bf00      	nop
  401bc0:	20400010 	.word	0x20400010
  401bc4:	e000ed04 	.word	0xe000ed04

00401bc8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401bc8:	4b0a      	ldr	r3, [pc, #40]	; (401bf4 <vPortExitCritical+0x2c>)
  401bca:	681b      	ldr	r3, [r3, #0]
  401bcc:	b953      	cbnz	r3, 401be4 <vPortExitCritical+0x1c>
  401bce:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bd2:	b672      	cpsid	i
  401bd4:	f383 8811 	msr	BASEPRI, r3
  401bd8:	f3bf 8f6f 	isb	sy
  401bdc:	f3bf 8f4f 	dsb	sy
  401be0:	b662      	cpsie	i
  401be2:	e7fe      	b.n	401be2 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  401be4:	3b01      	subs	r3, #1
  401be6:	4a03      	ldr	r2, [pc, #12]	; (401bf4 <vPortExitCritical+0x2c>)
  401be8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401bea:	b90b      	cbnz	r3, 401bf0 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401bec:	f383 8811 	msr	BASEPRI, r3
  401bf0:	4770      	bx	lr
  401bf2:	bf00      	nop
  401bf4:	20400010 	.word	0x20400010

00401bf8 <PendSV_Handler>:
	__asm volatile
  401bf8:	f3ef 8009 	mrs	r0, PSP
  401bfc:	f3bf 8f6f 	isb	sy
  401c00:	4b15      	ldr	r3, [pc, #84]	; (401c58 <pxCurrentTCBConst>)
  401c02:	681a      	ldr	r2, [r3, #0]
  401c04:	f01e 0f10 	tst.w	lr, #16
  401c08:	bf08      	it	eq
  401c0a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401c0e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c12:	6010      	str	r0, [r2, #0]
  401c14:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401c18:	f04f 0080 	mov.w	r0, #128	; 0x80
  401c1c:	b672      	cpsid	i
  401c1e:	f380 8811 	msr	BASEPRI, r0
  401c22:	f3bf 8f4f 	dsb	sy
  401c26:	f3bf 8f6f 	isb	sy
  401c2a:	b662      	cpsie	i
  401c2c:	f001 f92a 	bl	402e84 <vTaskSwitchContext>
  401c30:	f04f 0000 	mov.w	r0, #0
  401c34:	f380 8811 	msr	BASEPRI, r0
  401c38:	bc08      	pop	{r3}
  401c3a:	6819      	ldr	r1, [r3, #0]
  401c3c:	6808      	ldr	r0, [r1, #0]
  401c3e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c42:	f01e 0f10 	tst.w	lr, #16
  401c46:	bf08      	it	eq
  401c48:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401c4c:	f380 8809 	msr	PSP, r0
  401c50:	f3bf 8f6f 	isb	sy
  401c54:	4770      	bx	lr
  401c56:	bf00      	nop

00401c58 <pxCurrentTCBConst>:
  401c58:	20400c68 	.word	0x20400c68
  401c5c:	4770      	bx	lr
  401c5e:	bf00      	nop

00401c60 <SysTick_Handler>:
{
  401c60:	b508      	push	{r3, lr}
	__asm volatile
  401c62:	f3ef 8311 	mrs	r3, BASEPRI
  401c66:	f04f 0280 	mov.w	r2, #128	; 0x80
  401c6a:	b672      	cpsid	i
  401c6c:	f382 8811 	msr	BASEPRI, r2
  401c70:	f3bf 8f6f 	isb	sy
  401c74:	f3bf 8f4f 	dsb	sy
  401c78:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  401c7a:	4b05      	ldr	r3, [pc, #20]	; (401c90 <SysTick_Handler+0x30>)
  401c7c:	4798      	blx	r3
  401c7e:	b118      	cbz	r0, 401c88 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c84:	4b03      	ldr	r3, [pc, #12]	; (401c94 <SysTick_Handler+0x34>)
  401c86:	601a      	str	r2, [r3, #0]
	__asm volatile
  401c88:	2300      	movs	r3, #0
  401c8a:	f383 8811 	msr	BASEPRI, r3
  401c8e:	bd08      	pop	{r3, pc}
  401c90:	00402af1 	.word	0x00402af1
  401c94:	e000ed04 	.word	0xe000ed04

00401c98 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401c98:	4a03      	ldr	r2, [pc, #12]	; (401ca8 <vPortSetupTimerInterrupt+0x10>)
  401c9a:	4b04      	ldr	r3, [pc, #16]	; (401cac <vPortSetupTimerInterrupt+0x14>)
  401c9c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  401c9e:	2207      	movs	r2, #7
  401ca0:	3b04      	subs	r3, #4
  401ca2:	601a      	str	r2, [r3, #0]
  401ca4:	4770      	bx	lr
  401ca6:	bf00      	nop
  401ca8:	000927bf 	.word	0x000927bf
  401cac:	e000e014 	.word	0xe000e014

00401cb0 <xPortStartScheduler>:
{
  401cb0:	b500      	push	{lr}
  401cb2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401cb4:	4b25      	ldr	r3, [pc, #148]	; (401d4c <xPortStartScheduler+0x9c>)
  401cb6:	781a      	ldrb	r2, [r3, #0]
  401cb8:	b2d2      	uxtb	r2, r2
  401cba:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  401cbc:	22ff      	movs	r2, #255	; 0xff
  401cbe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401cc0:	781b      	ldrb	r3, [r3, #0]
  401cc2:	b2db      	uxtb	r3, r3
  401cc4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401cc8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401cd0:	4a1f      	ldr	r2, [pc, #124]	; (401d50 <xPortStartScheduler+0xa0>)
  401cd2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401cd4:	2207      	movs	r2, #7
  401cd6:	4b1f      	ldr	r3, [pc, #124]	; (401d54 <xPortStartScheduler+0xa4>)
  401cd8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401cda:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401cde:	f013 0f80 	tst.w	r3, #128	; 0x80
  401ce2:	d010      	beq.n	401d06 <xPortStartScheduler+0x56>
  401ce4:	2206      	movs	r2, #6
  401ce6:	e000      	b.n	401cea <xPortStartScheduler+0x3a>
  401ce8:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  401cea:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401cee:	005b      	lsls	r3, r3, #1
  401cf0:	b2db      	uxtb	r3, r3
  401cf2:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401cf6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401cfa:	1e51      	subs	r1, r2, #1
  401cfc:	f013 0f80 	tst.w	r3, #128	; 0x80
  401d00:	d1f2      	bne.n	401ce8 <xPortStartScheduler+0x38>
  401d02:	4b14      	ldr	r3, [pc, #80]	; (401d54 <xPortStartScheduler+0xa4>)
  401d04:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401d06:	4a13      	ldr	r2, [pc, #76]	; (401d54 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401d08:	6813      	ldr	r3, [r2, #0]
  401d0a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401d10:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401d12:	9b01      	ldr	r3, [sp, #4]
  401d14:	b2db      	uxtb	r3, r3
  401d16:	4a0d      	ldr	r2, [pc, #52]	; (401d4c <xPortStartScheduler+0x9c>)
  401d18:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401d1a:	4b0f      	ldr	r3, [pc, #60]	; (401d58 <xPortStartScheduler+0xa8>)
  401d1c:	681a      	ldr	r2, [r3, #0]
  401d1e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401d22:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401d24:	681a      	ldr	r2, [r3, #0]
  401d26:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401d2a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401d2c:	4b0b      	ldr	r3, [pc, #44]	; (401d5c <xPortStartScheduler+0xac>)
  401d2e:	4798      	blx	r3
	uxCriticalNesting = 0;
  401d30:	2200      	movs	r2, #0
  401d32:	4b0b      	ldr	r3, [pc, #44]	; (401d60 <xPortStartScheduler+0xb0>)
  401d34:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  401d36:	4b0b      	ldr	r3, [pc, #44]	; (401d64 <xPortStartScheduler+0xb4>)
  401d38:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401d3a:	4a0b      	ldr	r2, [pc, #44]	; (401d68 <xPortStartScheduler+0xb8>)
  401d3c:	6813      	ldr	r3, [r2, #0]
  401d3e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401d42:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401d44:	4b09      	ldr	r3, [pc, #36]	; (401d6c <xPortStartScheduler+0xbc>)
  401d46:	4798      	blx	r3
	prvTaskExitError();
  401d48:	4b09      	ldr	r3, [pc, #36]	; (401d70 <xPortStartScheduler+0xc0>)
  401d4a:	4798      	blx	r3
  401d4c:	e000e400 	.word	0xe000e400
  401d50:	20400c60 	.word	0x20400c60
  401d54:	20400c64 	.word	0x20400c64
  401d58:	e000ed20 	.word	0xe000ed20
  401d5c:	00401c99 	.word	0x00401c99
  401d60:	20400010 	.word	0x20400010
  401d64:	00401b1d 	.word	0x00401b1d
  401d68:	e000ef34 	.word	0xe000ef34
  401d6c:	00401afd 	.word	0x00401afd
  401d70:	00401ac1 	.word	0x00401ac1

00401d74 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401d74:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401d78:	2b0f      	cmp	r3, #15
  401d7a:	d911      	bls.n	401da0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401d7c:	4a12      	ldr	r2, [pc, #72]	; (401dc8 <vPortValidateInterruptPriority+0x54>)
  401d7e:	5c9b      	ldrb	r3, [r3, r2]
  401d80:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401d82:	4a12      	ldr	r2, [pc, #72]	; (401dcc <vPortValidateInterruptPriority+0x58>)
  401d84:	7812      	ldrb	r2, [r2, #0]
  401d86:	429a      	cmp	r2, r3
  401d88:	d90a      	bls.n	401da0 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  401d8a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d8e:	b672      	cpsid	i
  401d90:	f383 8811 	msr	BASEPRI, r3
  401d94:	f3bf 8f6f 	isb	sy
  401d98:	f3bf 8f4f 	dsb	sy
  401d9c:	b662      	cpsie	i
  401d9e:	e7fe      	b.n	401d9e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401da0:	4b0b      	ldr	r3, [pc, #44]	; (401dd0 <vPortValidateInterruptPriority+0x5c>)
  401da2:	681b      	ldr	r3, [r3, #0]
  401da4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401da8:	4a0a      	ldr	r2, [pc, #40]	; (401dd4 <vPortValidateInterruptPriority+0x60>)
  401daa:	6812      	ldr	r2, [r2, #0]
  401dac:	4293      	cmp	r3, r2
  401dae:	d90a      	bls.n	401dc6 <vPortValidateInterruptPriority+0x52>
  401db0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401db4:	b672      	cpsid	i
  401db6:	f383 8811 	msr	BASEPRI, r3
  401dba:	f3bf 8f6f 	isb	sy
  401dbe:	f3bf 8f4f 	dsb	sy
  401dc2:	b662      	cpsie	i
  401dc4:	e7fe      	b.n	401dc4 <vPortValidateInterruptPriority+0x50>
  401dc6:	4770      	bx	lr
  401dc8:	e000e3f0 	.word	0xe000e3f0
  401dcc:	20400c60 	.word	0x20400c60
  401dd0:	e000ed0c 	.word	0xe000ed0c
  401dd4:	20400c64 	.word	0x20400c64

00401dd8 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401dd8:	b510      	push	{r4, lr}
  401dda:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401ddc:	4b06      	ldr	r3, [pc, #24]	; (401df8 <pvPortMalloc+0x20>)
  401dde:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401de0:	4620      	mov	r0, r4
  401de2:	4b06      	ldr	r3, [pc, #24]	; (401dfc <pvPortMalloc+0x24>)
  401de4:	4798      	blx	r3
  401de6:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401de8:	4b05      	ldr	r3, [pc, #20]	; (401e00 <pvPortMalloc+0x28>)
  401dea:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401dec:	b10c      	cbz	r4, 401df2 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401dee:	4620      	mov	r0, r4
  401df0:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401df2:	4b04      	ldr	r3, [pc, #16]	; (401e04 <pvPortMalloc+0x2c>)
  401df4:	4798      	blx	r3
	return pvReturn;
  401df6:	e7fa      	b.n	401dee <pvPortMalloc+0x16>
  401df8:	00402ad5 	.word	0x00402ad5
  401dfc:	004048ad 	.word	0x004048ad
  401e00:	00402c3d 	.word	0x00402c3d
  401e04:	00403eb3 	.word	0x00403eb3

00401e08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401e08:	b148      	cbz	r0, 401e1e <vPortFree+0x16>
{
  401e0a:	b510      	push	{r4, lr}
  401e0c:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401e0e:	4b04      	ldr	r3, [pc, #16]	; (401e20 <vPortFree+0x18>)
  401e10:	4798      	blx	r3
		{
			free( pv );
  401e12:	4620      	mov	r0, r4
  401e14:	4b03      	ldr	r3, [pc, #12]	; (401e24 <vPortFree+0x1c>)
  401e16:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401e18:	4b03      	ldr	r3, [pc, #12]	; (401e28 <vPortFree+0x20>)
  401e1a:	4798      	blx	r3
  401e1c:	bd10      	pop	{r4, pc}
  401e1e:	4770      	bx	lr
  401e20:	00402ad5 	.word	0x00402ad5
  401e24:	004048bd 	.word	0x004048bd
  401e28:	00402c3d 	.word	0x00402c3d

00401e2c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401e2c:	b538      	push	{r3, r4, r5, lr}
  401e2e:	4604      	mov	r4, r0
  401e30:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401e32:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401e34:	b95a      	cbnz	r2, 401e4e <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401e36:	6803      	ldr	r3, [r0, #0]
  401e38:	2b00      	cmp	r3, #0
  401e3a:	d12e      	bne.n	401e9a <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401e3c:	6840      	ldr	r0, [r0, #4]
  401e3e:	4b1b      	ldr	r3, [pc, #108]	; (401eac <prvCopyDataToQueue+0x80>)
  401e40:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401e42:	2300      	movs	r3, #0
  401e44:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401e46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401e48:	3301      	adds	r3, #1
  401e4a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401e4c:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401e4e:	b96d      	cbnz	r5, 401e6c <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401e50:	6880      	ldr	r0, [r0, #8]
  401e52:	4b17      	ldr	r3, [pc, #92]	; (401eb0 <prvCopyDataToQueue+0x84>)
  401e54:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401e56:	68a3      	ldr	r3, [r4, #8]
  401e58:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401e5a:	4413      	add	r3, r2
  401e5c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401e5e:	6862      	ldr	r2, [r4, #4]
  401e60:	4293      	cmp	r3, r2
  401e62:	d31c      	bcc.n	401e9e <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401e64:	6823      	ldr	r3, [r4, #0]
  401e66:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401e68:	2000      	movs	r0, #0
  401e6a:	e7ec      	b.n	401e46 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e6c:	68c0      	ldr	r0, [r0, #12]
  401e6e:	4b10      	ldr	r3, [pc, #64]	; (401eb0 <prvCopyDataToQueue+0x84>)
  401e70:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401e72:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401e74:	425b      	negs	r3, r3
  401e76:	68e2      	ldr	r2, [r4, #12]
  401e78:	441a      	add	r2, r3
  401e7a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401e7c:	6821      	ldr	r1, [r4, #0]
  401e7e:	428a      	cmp	r2, r1
  401e80:	d202      	bcs.n	401e88 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401e82:	6862      	ldr	r2, [r4, #4]
  401e84:	4413      	add	r3, r2
  401e86:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401e88:	2d02      	cmp	r5, #2
  401e8a:	d10a      	bne.n	401ea2 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401e8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401e8e:	b153      	cbz	r3, 401ea6 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  401e90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401e92:	3b01      	subs	r3, #1
  401e94:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401e96:	2000      	movs	r0, #0
  401e98:	e7d5      	b.n	401e46 <prvCopyDataToQueue+0x1a>
  401e9a:	2000      	movs	r0, #0
  401e9c:	e7d3      	b.n	401e46 <prvCopyDataToQueue+0x1a>
  401e9e:	2000      	movs	r0, #0
  401ea0:	e7d1      	b.n	401e46 <prvCopyDataToQueue+0x1a>
  401ea2:	2000      	movs	r0, #0
  401ea4:	e7cf      	b.n	401e46 <prvCopyDataToQueue+0x1a>
  401ea6:	2000      	movs	r0, #0
  401ea8:	e7cd      	b.n	401e46 <prvCopyDataToQueue+0x1a>
  401eaa:	bf00      	nop
  401eac:	00403285 	.word	0x00403285
  401eb0:	00404e2d 	.word	0x00404e2d

00401eb4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401eb4:	b530      	push	{r4, r5, lr}
  401eb6:	b083      	sub	sp, #12
  401eb8:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401eba:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401ebc:	b174      	cbz	r4, 401edc <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401ebe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401ec0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401ec2:	429a      	cmp	r2, r3
  401ec4:	d315      	bcc.n	401ef2 <prvNotifyQueueSetContainer+0x3e>
  401ec6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401eca:	b672      	cpsid	i
  401ecc:	f383 8811 	msr	BASEPRI, r3
  401ed0:	f3bf 8f6f 	isb	sy
  401ed4:	f3bf 8f4f 	dsb	sy
  401ed8:	b662      	cpsie	i
  401eda:	e7fe      	b.n	401eda <prvNotifyQueueSetContainer+0x26>
  401edc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ee0:	b672      	cpsid	i
  401ee2:	f383 8811 	msr	BASEPRI, r3
  401ee6:	f3bf 8f6f 	isb	sy
  401eea:	f3bf 8f4f 	dsb	sy
  401eee:	b662      	cpsie	i
  401ef0:	e7fe      	b.n	401ef0 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401ef2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401ef4:	4293      	cmp	r3, r2
  401ef6:	d803      	bhi.n	401f00 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401ef8:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401efa:	4628      	mov	r0, r5
  401efc:	b003      	add	sp, #12
  401efe:	bd30      	pop	{r4, r5, pc}
  401f00:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401f02:	a901      	add	r1, sp, #4
  401f04:	4620      	mov	r0, r4
  401f06:	4b0b      	ldr	r3, [pc, #44]	; (401f34 <prvNotifyQueueSetContainer+0x80>)
  401f08:	4798      	blx	r3
  401f0a:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401f0c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f12:	d10a      	bne.n	401f2a <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401f14:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401f16:	2b00      	cmp	r3, #0
  401f18:	d0ef      	beq.n	401efa <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401f1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401f1e:	4b06      	ldr	r3, [pc, #24]	; (401f38 <prvNotifyQueueSetContainer+0x84>)
  401f20:	4798      	blx	r3
  401f22:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401f24:	bf18      	it	ne
  401f26:	2501      	movne	r5, #1
  401f28:	e7e7      	b.n	401efa <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  401f2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401f2c:	3301      	adds	r3, #1
  401f2e:	64a3      	str	r3, [r4, #72]	; 0x48
  401f30:	e7e3      	b.n	401efa <prvNotifyQueueSetContainer+0x46>
  401f32:	bf00      	nop
  401f34:	00401e2d 	.word	0x00401e2d
  401f38:	00403059 	.word	0x00403059

00401f3c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401f3c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401f3e:	b172      	cbz	r2, 401f5e <prvCopyDataFromQueue+0x22>
{
  401f40:	b510      	push	{r4, lr}
  401f42:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401f44:	68c4      	ldr	r4, [r0, #12]
  401f46:	4414      	add	r4, r2
  401f48:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401f4a:	6840      	ldr	r0, [r0, #4]
  401f4c:	4284      	cmp	r4, r0
  401f4e:	d301      	bcc.n	401f54 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401f50:	6818      	ldr	r0, [r3, #0]
  401f52:	60d8      	str	r0, [r3, #12]
  401f54:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401f56:	68d9      	ldr	r1, [r3, #12]
  401f58:	4b01      	ldr	r3, [pc, #4]	; (401f60 <prvCopyDataFromQueue+0x24>)
  401f5a:	4798      	blx	r3
  401f5c:	bd10      	pop	{r4, pc}
  401f5e:	4770      	bx	lr
  401f60:	00404e2d 	.word	0x00404e2d

00401f64 <prvUnlockQueue>:
{
  401f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401f66:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401f68:	4b22      	ldr	r3, [pc, #136]	; (401ff4 <prvUnlockQueue+0x90>)
  401f6a:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401f6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401f6e:	2b00      	cmp	r3, #0
  401f70:	dd1b      	ble.n	401faa <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401f72:	4d21      	ldr	r5, [pc, #132]	; (401ff8 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401f74:	4f21      	ldr	r7, [pc, #132]	; (401ffc <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401f76:	4e22      	ldr	r6, [pc, #136]	; (402000 <prvUnlockQueue+0x9c>)
  401f78:	e00b      	b.n	401f92 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401f7c:	b1ab      	cbz	r3, 401faa <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401f7e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401f82:	47b0      	blx	r6
  401f84:	b978      	cbnz	r0, 401fa6 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  401f86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401f88:	3b01      	subs	r3, #1
  401f8a:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401f8c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401f8e:	2b00      	cmp	r3, #0
  401f90:	dd0b      	ble.n	401faa <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  401f92:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401f94:	2b00      	cmp	r3, #0
  401f96:	d0f0      	beq.n	401f7a <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401f98:	2100      	movs	r1, #0
  401f9a:	4620      	mov	r0, r4
  401f9c:	47a8      	blx	r5
  401f9e:	2801      	cmp	r0, #1
  401fa0:	d1f1      	bne.n	401f86 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  401fa2:	47b8      	blx	r7
  401fa4:	e7ef      	b.n	401f86 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  401fa6:	47b8      	blx	r7
  401fa8:	e7ed      	b.n	401f86 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  401faa:	f04f 33ff 	mov.w	r3, #4294967295
  401fae:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401fb0:	4b14      	ldr	r3, [pc, #80]	; (402004 <prvUnlockQueue+0xa0>)
  401fb2:	4798      	blx	r3
	taskENTER_CRITICAL();
  401fb4:	4b0f      	ldr	r3, [pc, #60]	; (401ff4 <prvUnlockQueue+0x90>)
  401fb6:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401fb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401fba:	2b00      	cmp	r3, #0
  401fbc:	dd14      	ble.n	401fe8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401fbe:	6923      	ldr	r3, [r4, #16]
  401fc0:	b193      	cbz	r3, 401fe8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401fc2:	f104 0610 	add.w	r6, r4, #16
  401fc6:	4d0e      	ldr	r5, [pc, #56]	; (402000 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401fc8:	4f0c      	ldr	r7, [pc, #48]	; (401ffc <prvUnlockQueue+0x98>)
  401fca:	e007      	b.n	401fdc <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  401fcc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401fce:	3b01      	subs	r3, #1
  401fd0:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401fd2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401fd4:	2b00      	cmp	r3, #0
  401fd6:	dd07      	ble.n	401fe8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401fd8:	6923      	ldr	r3, [r4, #16]
  401fda:	b12b      	cbz	r3, 401fe8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401fdc:	4630      	mov	r0, r6
  401fde:	47a8      	blx	r5
  401fe0:	2800      	cmp	r0, #0
  401fe2:	d0f3      	beq.n	401fcc <prvUnlockQueue+0x68>
					vTaskMissedYield();
  401fe4:	47b8      	blx	r7
  401fe6:	e7f1      	b.n	401fcc <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  401fe8:	f04f 33ff 	mov.w	r3, #4294967295
  401fec:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401fee:	4b05      	ldr	r3, [pc, #20]	; (402004 <prvUnlockQueue+0xa0>)
  401ff0:	4798      	blx	r3
  401ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401ff4:	00401b7d 	.word	0x00401b7d
  401ff8:	00401eb5 	.word	0x00401eb5
  401ffc:	004031b5 	.word	0x004031b5
  402000:	00403059 	.word	0x00403059
  402004:	00401bc9 	.word	0x00401bc9

00402008 <xQueueGenericReset>:
{
  402008:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  40200a:	b308      	cbz	r0, 402050 <xQueueGenericReset+0x48>
  40200c:	4604      	mov	r4, r0
  40200e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402010:	4b1d      	ldr	r3, [pc, #116]	; (402088 <xQueueGenericReset+0x80>)
  402012:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  402014:	6822      	ldr	r2, [r4, #0]
  402016:	6c21      	ldr	r1, [r4, #64]	; 0x40
  402018:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40201a:	fb03 f301 	mul.w	r3, r3, r1
  40201e:	18d0      	adds	r0, r2, r3
  402020:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  402022:	2000      	movs	r0, #0
  402024:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  402026:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  402028:	1a5b      	subs	r3, r3, r1
  40202a:	4413      	add	r3, r2
  40202c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40202e:	f04f 33ff 	mov.w	r3, #4294967295
  402032:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  402034:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  402036:	b9fd      	cbnz	r5, 402078 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402038:	6923      	ldr	r3, [r4, #16]
  40203a:	b12b      	cbz	r3, 402048 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40203c:	f104 0010 	add.w	r0, r4, #16
  402040:	4b12      	ldr	r3, [pc, #72]	; (40208c <xQueueGenericReset+0x84>)
  402042:	4798      	blx	r3
  402044:	2801      	cmp	r0, #1
  402046:	d00e      	beq.n	402066 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  402048:	4b11      	ldr	r3, [pc, #68]	; (402090 <xQueueGenericReset+0x88>)
  40204a:	4798      	blx	r3
}
  40204c:	2001      	movs	r0, #1
  40204e:	bd38      	pop	{r3, r4, r5, pc}
  402050:	f04f 0380 	mov.w	r3, #128	; 0x80
  402054:	b672      	cpsid	i
  402056:	f383 8811 	msr	BASEPRI, r3
  40205a:	f3bf 8f6f 	isb	sy
  40205e:	f3bf 8f4f 	dsb	sy
  402062:	b662      	cpsie	i
  402064:	e7fe      	b.n	402064 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  402066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40206a:	4b0a      	ldr	r3, [pc, #40]	; (402094 <xQueueGenericReset+0x8c>)
  40206c:	601a      	str	r2, [r3, #0]
  40206e:	f3bf 8f4f 	dsb	sy
  402072:	f3bf 8f6f 	isb	sy
  402076:	e7e7      	b.n	402048 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  402078:	f104 0010 	add.w	r0, r4, #16
  40207c:	4d06      	ldr	r5, [pc, #24]	; (402098 <xQueueGenericReset+0x90>)
  40207e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  402080:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402084:	47a8      	blx	r5
  402086:	e7df      	b.n	402048 <xQueueGenericReset+0x40>
  402088:	00401b7d 	.word	0x00401b7d
  40208c:	00403059 	.word	0x00403059
  402090:	00401bc9 	.word	0x00401bc9
  402094:	e000ed04 	.word	0xe000ed04
  402098:	00401a31 	.word	0x00401a31

0040209c <xQueueGenericCreate>:
{
  40209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40209e:	b950      	cbnz	r0, 4020b6 <xQueueGenericCreate+0x1a>
  4020a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020a4:	b672      	cpsid	i
  4020a6:	f383 8811 	msr	BASEPRI, r3
  4020aa:	f3bf 8f6f 	isb	sy
  4020ae:	f3bf 8f4f 	dsb	sy
  4020b2:	b662      	cpsie	i
  4020b4:	e7fe      	b.n	4020b4 <xQueueGenericCreate+0x18>
  4020b6:	4606      	mov	r6, r0
  4020b8:	4617      	mov	r7, r2
  4020ba:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  4020bc:	b189      	cbz	r1, 4020e2 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4020be:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4020c2:	3059      	adds	r0, #89	; 0x59
  4020c4:	4b12      	ldr	r3, [pc, #72]	; (402110 <xQueueGenericCreate+0x74>)
  4020c6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4020c8:	4604      	mov	r4, r0
  4020ca:	b9e8      	cbnz	r0, 402108 <xQueueGenericCreate+0x6c>
  4020cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020d0:	b672      	cpsid	i
  4020d2:	f383 8811 	msr	BASEPRI, r3
  4020d6:	f3bf 8f6f 	isb	sy
  4020da:	f3bf 8f4f 	dsb	sy
  4020de:	b662      	cpsie	i
  4020e0:	e7fe      	b.n	4020e0 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4020e2:	2058      	movs	r0, #88	; 0x58
  4020e4:	4b0a      	ldr	r3, [pc, #40]	; (402110 <xQueueGenericCreate+0x74>)
  4020e6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4020e8:	4604      	mov	r4, r0
  4020ea:	2800      	cmp	r0, #0
  4020ec:	d0ee      	beq.n	4020cc <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4020ee:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  4020f0:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4020f2:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4020f4:	2101      	movs	r1, #1
  4020f6:	4620      	mov	r0, r4
  4020f8:	4b06      	ldr	r3, [pc, #24]	; (402114 <xQueueGenericCreate+0x78>)
  4020fa:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  4020fc:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  402100:	2300      	movs	r3, #0
  402102:	6563      	str	r3, [r4, #84]	; 0x54
}
  402104:	4620      	mov	r0, r4
  402106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  402108:	f100 0358 	add.w	r3, r0, #88	; 0x58
  40210c:	6003      	str	r3, [r0, #0]
  40210e:	e7ef      	b.n	4020f0 <xQueueGenericCreate+0x54>
  402110:	00401dd9 	.word	0x00401dd9
  402114:	00402009 	.word	0x00402009

00402118 <xQueueGenericSend>:
{
  402118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40211c:	b085      	sub	sp, #20
  40211e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402120:	b1b8      	cbz	r0, 402152 <xQueueGenericSend+0x3a>
  402122:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402124:	b301      	cbz	r1, 402168 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402126:	2b02      	cmp	r3, #2
  402128:	d02c      	beq.n	402184 <xQueueGenericSend+0x6c>
  40212a:	461d      	mov	r5, r3
  40212c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40212e:	4b66      	ldr	r3, [pc, #408]	; (4022c8 <xQueueGenericSend+0x1b0>)
  402130:	4798      	blx	r3
  402132:	2800      	cmp	r0, #0
  402134:	d134      	bne.n	4021a0 <xQueueGenericSend+0x88>
  402136:	9b01      	ldr	r3, [sp, #4]
  402138:	2b00      	cmp	r3, #0
  40213a:	d038      	beq.n	4021ae <xQueueGenericSend+0x96>
  40213c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402140:	b672      	cpsid	i
  402142:	f383 8811 	msr	BASEPRI, r3
  402146:	f3bf 8f6f 	isb	sy
  40214a:	f3bf 8f4f 	dsb	sy
  40214e:	b662      	cpsie	i
  402150:	e7fe      	b.n	402150 <xQueueGenericSend+0x38>
  402152:	f04f 0380 	mov.w	r3, #128	; 0x80
  402156:	b672      	cpsid	i
  402158:	f383 8811 	msr	BASEPRI, r3
  40215c:	f3bf 8f6f 	isb	sy
  402160:	f3bf 8f4f 	dsb	sy
  402164:	b662      	cpsie	i
  402166:	e7fe      	b.n	402166 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402168:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40216a:	2a00      	cmp	r2, #0
  40216c:	d0db      	beq.n	402126 <xQueueGenericSend+0xe>
  40216e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402172:	b672      	cpsid	i
  402174:	f383 8811 	msr	BASEPRI, r3
  402178:	f3bf 8f6f 	isb	sy
  40217c:	f3bf 8f4f 	dsb	sy
  402180:	b662      	cpsie	i
  402182:	e7fe      	b.n	402182 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402184:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  402186:	2a01      	cmp	r2, #1
  402188:	d0cf      	beq.n	40212a <xQueueGenericSend+0x12>
  40218a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40218e:	b672      	cpsid	i
  402190:	f383 8811 	msr	BASEPRI, r3
  402194:	f3bf 8f6f 	isb	sy
  402198:	f3bf 8f4f 	dsb	sy
  40219c:	b662      	cpsie	i
  40219e:	e7fe      	b.n	40219e <xQueueGenericSend+0x86>
  4021a0:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4021a2:	4e4a      	ldr	r6, [pc, #296]	; (4022cc <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  4021a4:	f8df a150 	ldr.w	sl, [pc, #336]	; 4022f8 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  4021a8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4022d8 <xQueueGenericSend+0x1c0>
  4021ac:	e042      	b.n	402234 <xQueueGenericSend+0x11c>
  4021ae:	2700      	movs	r7, #0
  4021b0:	e7f7      	b.n	4021a2 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4021b2:	462a      	mov	r2, r5
  4021b4:	4641      	mov	r1, r8
  4021b6:	4620      	mov	r0, r4
  4021b8:	4b45      	ldr	r3, [pc, #276]	; (4022d0 <xQueueGenericSend+0x1b8>)
  4021ba:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  4021bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4021be:	b19b      	cbz	r3, 4021e8 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4021c0:	4629      	mov	r1, r5
  4021c2:	4620      	mov	r0, r4
  4021c4:	4b43      	ldr	r3, [pc, #268]	; (4022d4 <xQueueGenericSend+0x1bc>)
  4021c6:	4798      	blx	r3
  4021c8:	2801      	cmp	r0, #1
  4021ca:	d107      	bne.n	4021dc <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4021cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4021d0:	4b41      	ldr	r3, [pc, #260]	; (4022d8 <xQueueGenericSend+0x1c0>)
  4021d2:	601a      	str	r2, [r3, #0]
  4021d4:	f3bf 8f4f 	dsb	sy
  4021d8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4021dc:	4b3f      	ldr	r3, [pc, #252]	; (4022dc <xQueueGenericSend+0x1c4>)
  4021de:	4798      	blx	r3
				return pdPASS;
  4021e0:	2001      	movs	r0, #1
}
  4021e2:	b005      	add	sp, #20
  4021e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4021e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4021ea:	b173      	cbz	r3, 40220a <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4021ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4021f0:	4b3b      	ldr	r3, [pc, #236]	; (4022e0 <xQueueGenericSend+0x1c8>)
  4021f2:	4798      	blx	r3
  4021f4:	2801      	cmp	r0, #1
  4021f6:	d1f1      	bne.n	4021dc <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  4021f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4021fc:	4b36      	ldr	r3, [pc, #216]	; (4022d8 <xQueueGenericSend+0x1c0>)
  4021fe:	601a      	str	r2, [r3, #0]
  402200:	f3bf 8f4f 	dsb	sy
  402204:	f3bf 8f6f 	isb	sy
  402208:	e7e8      	b.n	4021dc <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40220a:	2800      	cmp	r0, #0
  40220c:	d0e6      	beq.n	4021dc <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  40220e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402212:	4b31      	ldr	r3, [pc, #196]	; (4022d8 <xQueueGenericSend+0x1c0>)
  402214:	601a      	str	r2, [r3, #0]
  402216:	f3bf 8f4f 	dsb	sy
  40221a:	f3bf 8f6f 	isb	sy
  40221e:	e7dd      	b.n	4021dc <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  402220:	4b2e      	ldr	r3, [pc, #184]	; (4022dc <xQueueGenericSend+0x1c4>)
  402222:	4798      	blx	r3
					return errQUEUE_FULL;
  402224:	2000      	movs	r0, #0
  402226:	e7dc      	b.n	4021e2 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  402228:	4620      	mov	r0, r4
  40222a:	4b2e      	ldr	r3, [pc, #184]	; (4022e4 <xQueueGenericSend+0x1cc>)
  40222c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40222e:	4b2e      	ldr	r3, [pc, #184]	; (4022e8 <xQueueGenericSend+0x1d0>)
  402230:	4798      	blx	r3
  402232:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  402234:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402236:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402238:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40223a:	429a      	cmp	r2, r3
  40223c:	d3b9      	bcc.n	4021b2 <xQueueGenericSend+0x9a>
  40223e:	2d02      	cmp	r5, #2
  402240:	d0b7      	beq.n	4021b2 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  402242:	9b01      	ldr	r3, [sp, #4]
  402244:	2b00      	cmp	r3, #0
  402246:	d0eb      	beq.n	402220 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  402248:	b90f      	cbnz	r7, 40224e <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  40224a:	a802      	add	r0, sp, #8
  40224c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40224e:	4b23      	ldr	r3, [pc, #140]	; (4022dc <xQueueGenericSend+0x1c4>)
  402250:	4798      	blx	r3
		vTaskSuspendAll();
  402252:	4b26      	ldr	r3, [pc, #152]	; (4022ec <xQueueGenericSend+0x1d4>)
  402254:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402256:	47b0      	blx	r6
  402258:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40225a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40225e:	d101      	bne.n	402264 <xQueueGenericSend+0x14c>
  402260:	2300      	movs	r3, #0
  402262:	6463      	str	r3, [r4, #68]	; 0x44
  402264:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402266:	f1b3 3fff 	cmp.w	r3, #4294967295
  40226a:	d101      	bne.n	402270 <xQueueGenericSend+0x158>
  40226c:	2300      	movs	r3, #0
  40226e:	64a3      	str	r3, [r4, #72]	; 0x48
  402270:	4b1a      	ldr	r3, [pc, #104]	; (4022dc <xQueueGenericSend+0x1c4>)
  402272:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402274:	a901      	add	r1, sp, #4
  402276:	a802      	add	r0, sp, #8
  402278:	4b1d      	ldr	r3, [pc, #116]	; (4022f0 <xQueueGenericSend+0x1d8>)
  40227a:	4798      	blx	r3
  40227c:	b9e0      	cbnz	r0, 4022b8 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  40227e:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  402280:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  402284:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  402286:	4b15      	ldr	r3, [pc, #84]	; (4022dc <xQueueGenericSend+0x1c4>)
  402288:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40228a:	45bb      	cmp	fp, r7
  40228c:	d1cc      	bne.n	402228 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40228e:	9901      	ldr	r1, [sp, #4]
  402290:	f104 0010 	add.w	r0, r4, #16
  402294:	4b17      	ldr	r3, [pc, #92]	; (4022f4 <xQueueGenericSend+0x1dc>)
  402296:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402298:	4620      	mov	r0, r4
  40229a:	4b12      	ldr	r3, [pc, #72]	; (4022e4 <xQueueGenericSend+0x1cc>)
  40229c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40229e:	4b12      	ldr	r3, [pc, #72]	; (4022e8 <xQueueGenericSend+0x1d0>)
  4022a0:	4798      	blx	r3
  4022a2:	2800      	cmp	r0, #0
  4022a4:	d1c5      	bne.n	402232 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  4022a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4022aa:	f8c9 3000 	str.w	r3, [r9]
  4022ae:	f3bf 8f4f 	dsb	sy
  4022b2:	f3bf 8f6f 	isb	sy
  4022b6:	e7bc      	b.n	402232 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  4022b8:	4620      	mov	r0, r4
  4022ba:	4b0a      	ldr	r3, [pc, #40]	; (4022e4 <xQueueGenericSend+0x1cc>)
  4022bc:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4022be:	4b0a      	ldr	r3, [pc, #40]	; (4022e8 <xQueueGenericSend+0x1d0>)
  4022c0:	4798      	blx	r3
			return errQUEUE_FULL;
  4022c2:	2000      	movs	r0, #0
  4022c4:	e78d      	b.n	4021e2 <xQueueGenericSend+0xca>
  4022c6:	bf00      	nop
  4022c8:	004031c1 	.word	0x004031c1
  4022cc:	00401b7d 	.word	0x00401b7d
  4022d0:	00401e2d 	.word	0x00401e2d
  4022d4:	00401eb5 	.word	0x00401eb5
  4022d8:	e000ed04 	.word	0xe000ed04
  4022dc:	00401bc9 	.word	0x00401bc9
  4022e0:	00403059 	.word	0x00403059
  4022e4:	00401f65 	.word	0x00401f65
  4022e8:	00402c3d 	.word	0x00402c3d
  4022ec:	00402ad5 	.word	0x00402ad5
  4022f0:	00403121 	.word	0x00403121
  4022f4:	00402f55 	.word	0x00402f55
  4022f8:	004030f1 	.word	0x004030f1

004022fc <xQueueCreateMutex>:
	{
  4022fc:	b570      	push	{r4, r5, r6, lr}
  4022fe:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
  402300:	2058      	movs	r0, #88	; 0x58
  402302:	4b11      	ldr	r3, [pc, #68]	; (402348 <xQueueCreateMutex+0x4c>)
  402304:	4798      	blx	r3
		if( pxNewQueue != NULL )
  402306:	4604      	mov	r4, r0
  402308:	b1d8      	cbz	r0, 402342 <xQueueCreateMutex+0x46>
			pxNewQueue->pxMutexHolder = NULL;
  40230a:	2500      	movs	r5, #0
  40230c:	6045      	str	r5, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
  40230e:	6005      	str	r5, [r0, #0]
			pxNewQueue->pcWriteTo = NULL;
  402310:	6085      	str	r5, [r0, #8]
			pxNewQueue->u.pcReadFrom = NULL;
  402312:	60c5      	str	r5, [r0, #12]
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  402314:	6385      	str	r5, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
  402316:	2301      	movs	r3, #1
  402318:	63c3      	str	r3, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
  40231a:	6405      	str	r5, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
  40231c:	f04f 33ff 	mov.w	r3, #4294967295
  402320:	6443      	str	r3, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
  402322:	6483      	str	r3, [r0, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
  402324:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
				pxNewQueue->pxQueueSetContainer = NULL;
  402328:	6545      	str	r5, [r0, #84]	; 0x54
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
  40232a:	3010      	adds	r0, #16
  40232c:	4e07      	ldr	r6, [pc, #28]	; (40234c <xQueueCreateMutex+0x50>)
  40232e:	47b0      	blx	r6
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
  402330:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402334:	47b0      	blx	r6
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
  402336:	462b      	mov	r3, r5
  402338:	462a      	mov	r2, r5
  40233a:	4629      	mov	r1, r5
  40233c:	4620      	mov	r0, r4
  40233e:	4d04      	ldr	r5, [pc, #16]	; (402350 <xQueueCreateMutex+0x54>)
  402340:	47a8      	blx	r5
	}
  402342:	4620      	mov	r0, r4
  402344:	bd70      	pop	{r4, r5, r6, pc}
  402346:	bf00      	nop
  402348:	00401dd9 	.word	0x00401dd9
  40234c:	00401a31 	.word	0x00401a31
  402350:	00402119 	.word	0x00402119

00402354 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  402354:	2800      	cmp	r0, #0
  402356:	d036      	beq.n	4023c6 <xQueueGenericSendFromISR+0x72>
{
  402358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40235c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40235e:	2900      	cmp	r1, #0
  402360:	d03c      	beq.n	4023dc <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402362:	2b02      	cmp	r3, #2
  402364:	d048      	beq.n	4023f8 <xQueueGenericSendFromISR+0xa4>
  402366:	461e      	mov	r6, r3
  402368:	4615      	mov	r5, r2
  40236a:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  40236c:	4b35      	ldr	r3, [pc, #212]	; (402444 <xQueueGenericSendFromISR+0xf0>)
  40236e:	4798      	blx	r3
	__asm volatile
  402370:	f3ef 8711 	mrs	r7, BASEPRI
  402374:	f04f 0380 	mov.w	r3, #128	; 0x80
  402378:	b672      	cpsid	i
  40237a:	f383 8811 	msr	BASEPRI, r3
  40237e:	f3bf 8f6f 	isb	sy
  402382:	f3bf 8f4f 	dsb	sy
  402386:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402388:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40238a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40238c:	429a      	cmp	r2, r3
  40238e:	d301      	bcc.n	402394 <xQueueGenericSendFromISR+0x40>
  402390:	2e02      	cmp	r6, #2
  402392:	d14f      	bne.n	402434 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402394:	4632      	mov	r2, r6
  402396:	4641      	mov	r1, r8
  402398:	4620      	mov	r0, r4
  40239a:	4b2b      	ldr	r3, [pc, #172]	; (402448 <xQueueGenericSendFromISR+0xf4>)
  40239c:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  40239e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4023a4:	d141      	bne.n	40242a <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  4023a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4023a8:	2b00      	cmp	r3, #0
  4023aa:	d033      	beq.n	402414 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4023ac:	4631      	mov	r1, r6
  4023ae:	4620      	mov	r0, r4
  4023b0:	4b26      	ldr	r3, [pc, #152]	; (40244c <xQueueGenericSendFromISR+0xf8>)
  4023b2:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4023b4:	2d00      	cmp	r5, #0
  4023b6:	d03f      	beq.n	402438 <xQueueGenericSendFromISR+0xe4>
  4023b8:	2801      	cmp	r0, #1
  4023ba:	d13d      	bne.n	402438 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4023bc:	6028      	str	r0, [r5, #0]
	__asm volatile
  4023be:	f387 8811 	msr	BASEPRI, r7
}
  4023c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4023c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023ca:	b672      	cpsid	i
  4023cc:	f383 8811 	msr	BASEPRI, r3
  4023d0:	f3bf 8f6f 	isb	sy
  4023d4:	f3bf 8f4f 	dsb	sy
  4023d8:	b662      	cpsie	i
  4023da:	e7fe      	b.n	4023da <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4023dc:	6c00      	ldr	r0, [r0, #64]	; 0x40
  4023de:	2800      	cmp	r0, #0
  4023e0:	d0bf      	beq.n	402362 <xQueueGenericSendFromISR+0xe>
  4023e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023e6:	b672      	cpsid	i
  4023e8:	f383 8811 	msr	BASEPRI, r3
  4023ec:	f3bf 8f6f 	isb	sy
  4023f0:	f3bf 8f4f 	dsb	sy
  4023f4:	b662      	cpsie	i
  4023f6:	e7fe      	b.n	4023f6 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4023f8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4023fa:	2801      	cmp	r0, #1
  4023fc:	d0b3      	beq.n	402366 <xQueueGenericSendFromISR+0x12>
  4023fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402402:	b672      	cpsid	i
  402404:	f383 8811 	msr	BASEPRI, r3
  402408:	f3bf 8f6f 	isb	sy
  40240c:	f3bf 8f4f 	dsb	sy
  402410:	b662      	cpsie	i
  402412:	e7fe      	b.n	402412 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402414:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402416:	b18b      	cbz	r3, 40243c <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402418:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40241c:	4b0c      	ldr	r3, [pc, #48]	; (402450 <xQueueGenericSendFromISR+0xfc>)
  40241e:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402420:	b175      	cbz	r5, 402440 <xQueueGenericSendFromISR+0xec>
  402422:	b168      	cbz	r0, 402440 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402424:	2001      	movs	r0, #1
  402426:	6028      	str	r0, [r5, #0]
  402428:	e7c9      	b.n	4023be <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  40242a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40242c:	3301      	adds	r3, #1
  40242e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402430:	2001      	movs	r0, #1
  402432:	e7c4      	b.n	4023be <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  402434:	2000      	movs	r0, #0
  402436:	e7c2      	b.n	4023be <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  402438:	2001      	movs	r0, #1
  40243a:	e7c0      	b.n	4023be <xQueueGenericSendFromISR+0x6a>
  40243c:	2001      	movs	r0, #1
  40243e:	e7be      	b.n	4023be <xQueueGenericSendFromISR+0x6a>
  402440:	2001      	movs	r0, #1
  402442:	e7bc      	b.n	4023be <xQueueGenericSendFromISR+0x6a>
  402444:	00401d75 	.word	0x00401d75
  402448:	00401e2d 	.word	0x00401e2d
  40244c:	00401eb5 	.word	0x00401eb5
  402450:	00403059 	.word	0x00403059

00402454 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  402454:	b170      	cbz	r0, 402474 <xQueueGiveFromISR+0x20>
{
  402456:	b570      	push	{r4, r5, r6, lr}
  402458:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  40245a:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40245c:	b1ab      	cbz	r3, 40248a <xQueueGiveFromISR+0x36>
  40245e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402462:	b672      	cpsid	i
  402464:	f383 8811 	msr	BASEPRI, r3
  402468:	f3bf 8f6f 	isb	sy
  40246c:	f3bf 8f4f 	dsb	sy
  402470:	b662      	cpsie	i
  402472:	e7fe      	b.n	402472 <xQueueGiveFromISR+0x1e>
  402474:	f04f 0380 	mov.w	r3, #128	; 0x80
  402478:	b672      	cpsid	i
  40247a:	f383 8811 	msr	BASEPRI, r3
  40247e:	f3bf 8f6f 	isb	sy
  402482:	f3bf 8f4f 	dsb	sy
  402486:	b662      	cpsie	i
  402488:	e7fe      	b.n	402488 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  40248a:	6803      	ldr	r3, [r0, #0]
  40248c:	b333      	cbz	r3, 4024dc <xQueueGiveFromISR+0x88>
  40248e:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  402490:	4b25      	ldr	r3, [pc, #148]	; (402528 <xQueueGiveFromISR+0xd4>)
  402492:	4798      	blx	r3
	__asm volatile
  402494:	f3ef 8611 	mrs	r6, BASEPRI
  402498:	f04f 0380 	mov.w	r3, #128	; 0x80
  40249c:	b672      	cpsid	i
  40249e:	f383 8811 	msr	BASEPRI, r3
  4024a2:	f3bf 8f6f 	isb	sy
  4024a6:	f3bf 8f4f 	dsb	sy
  4024aa:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4024ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4024ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4024b0:	429a      	cmp	r2, r3
  4024b2:	d231      	bcs.n	402518 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  4024b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4024b6:	3301      	adds	r3, #1
  4024b8:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  4024ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4024c0:	d125      	bne.n	40250e <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  4024c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4024c4:	b1c3      	cbz	r3, 4024f8 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4024c6:	2100      	movs	r1, #0
  4024c8:	4620      	mov	r0, r4
  4024ca:	4b18      	ldr	r3, [pc, #96]	; (40252c <xQueueGiveFromISR+0xd8>)
  4024cc:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4024ce:	b32d      	cbz	r5, 40251c <xQueueGiveFromISR+0xc8>
  4024d0:	2801      	cmp	r0, #1
  4024d2:	d123      	bne.n	40251c <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4024d4:	6028      	str	r0, [r5, #0]
	__asm volatile
  4024d6:	f386 8811 	msr	BASEPRI, r6
}
  4024da:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4024dc:	6843      	ldr	r3, [r0, #4]
  4024de:	2b00      	cmp	r3, #0
  4024e0:	d0d5      	beq.n	40248e <xQueueGiveFromISR+0x3a>
	__asm volatile
  4024e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024e6:	b672      	cpsid	i
  4024e8:	f383 8811 	msr	BASEPRI, r3
  4024ec:	f3bf 8f6f 	isb	sy
  4024f0:	f3bf 8f4f 	dsb	sy
  4024f4:	b662      	cpsie	i
  4024f6:	e7fe      	b.n	4024f6 <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4024f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4024fa:	b18b      	cbz	r3, 402520 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4024fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402500:	4b0b      	ldr	r3, [pc, #44]	; (402530 <xQueueGiveFromISR+0xdc>)
  402502:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402504:	b175      	cbz	r5, 402524 <xQueueGiveFromISR+0xd0>
  402506:	b168      	cbz	r0, 402524 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402508:	2001      	movs	r0, #1
  40250a:	6028      	str	r0, [r5, #0]
  40250c:	e7e3      	b.n	4024d6 <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  40250e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402510:	3301      	adds	r3, #1
  402512:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402514:	2001      	movs	r0, #1
  402516:	e7de      	b.n	4024d6 <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  402518:	2000      	movs	r0, #0
  40251a:	e7dc      	b.n	4024d6 <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  40251c:	2001      	movs	r0, #1
  40251e:	e7da      	b.n	4024d6 <xQueueGiveFromISR+0x82>
  402520:	2001      	movs	r0, #1
  402522:	e7d8      	b.n	4024d6 <xQueueGiveFromISR+0x82>
  402524:	2001      	movs	r0, #1
  402526:	e7d6      	b.n	4024d6 <xQueueGiveFromISR+0x82>
  402528:	00401d75 	.word	0x00401d75
  40252c:	00401eb5 	.word	0x00401eb5
  402530:	00403059 	.word	0x00403059

00402534 <xQueueGenericReceive>:
{
  402534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402538:	b084      	sub	sp, #16
  40253a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  40253c:	b198      	cbz	r0, 402566 <xQueueGenericReceive+0x32>
  40253e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402540:	b1e1      	cbz	r1, 40257c <xQueueGenericReceive+0x48>
  402542:	4698      	mov	r8, r3
  402544:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402546:	4b61      	ldr	r3, [pc, #388]	; (4026cc <xQueueGenericReceive+0x198>)
  402548:	4798      	blx	r3
  40254a:	bb28      	cbnz	r0, 402598 <xQueueGenericReceive+0x64>
  40254c:	9b01      	ldr	r3, [sp, #4]
  40254e:	b353      	cbz	r3, 4025a6 <xQueueGenericReceive+0x72>
  402550:	f04f 0380 	mov.w	r3, #128	; 0x80
  402554:	b672      	cpsid	i
  402556:	f383 8811 	msr	BASEPRI, r3
  40255a:	f3bf 8f6f 	isb	sy
  40255e:	f3bf 8f4f 	dsb	sy
  402562:	b662      	cpsie	i
  402564:	e7fe      	b.n	402564 <xQueueGenericReceive+0x30>
  402566:	f04f 0380 	mov.w	r3, #128	; 0x80
  40256a:	b672      	cpsid	i
  40256c:	f383 8811 	msr	BASEPRI, r3
  402570:	f3bf 8f6f 	isb	sy
  402574:	f3bf 8f4f 	dsb	sy
  402578:	b662      	cpsie	i
  40257a:	e7fe      	b.n	40257a <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40257c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40257e:	2a00      	cmp	r2, #0
  402580:	d0df      	beq.n	402542 <xQueueGenericReceive+0xe>
  402582:	f04f 0380 	mov.w	r3, #128	; 0x80
  402586:	b672      	cpsid	i
  402588:	f383 8811 	msr	BASEPRI, r3
  40258c:	f3bf 8f6f 	isb	sy
  402590:	f3bf 8f4f 	dsb	sy
  402594:	b662      	cpsie	i
  402596:	e7fe      	b.n	402596 <xQueueGenericReceive+0x62>
  402598:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  40259a:	4d4d      	ldr	r5, [pc, #308]	; (4026d0 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  40259c:	f8df a160 	ldr.w	sl, [pc, #352]	; 402700 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  4025a0:	f8df 913c 	ldr.w	r9, [pc, #316]	; 4026e0 <xQueueGenericReceive+0x1ac>
  4025a4:	e04b      	b.n	40263e <xQueueGenericReceive+0x10a>
  4025a6:	2600      	movs	r6, #0
  4025a8:	e7f7      	b.n	40259a <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4025aa:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4025ac:	4639      	mov	r1, r7
  4025ae:	4620      	mov	r0, r4
  4025b0:	4b48      	ldr	r3, [pc, #288]	; (4026d4 <xQueueGenericReceive+0x1a0>)
  4025b2:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  4025b4:	f1b8 0f00 	cmp.w	r8, #0
  4025b8:	d11d      	bne.n	4025f6 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  4025ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4025bc:	3b01      	subs	r3, #1
  4025be:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4025c0:	6823      	ldr	r3, [r4, #0]
  4025c2:	b913      	cbnz	r3, 4025ca <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4025c4:	4b44      	ldr	r3, [pc, #272]	; (4026d8 <xQueueGenericReceive+0x1a4>)
  4025c6:	4798      	blx	r3
  4025c8:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4025ca:	6923      	ldr	r3, [r4, #16]
  4025cc:	b16b      	cbz	r3, 4025ea <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4025ce:	f104 0010 	add.w	r0, r4, #16
  4025d2:	4b42      	ldr	r3, [pc, #264]	; (4026dc <xQueueGenericReceive+0x1a8>)
  4025d4:	4798      	blx	r3
  4025d6:	2801      	cmp	r0, #1
  4025d8:	d107      	bne.n	4025ea <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4025da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4025de:	4b40      	ldr	r3, [pc, #256]	; (4026e0 <xQueueGenericReceive+0x1ac>)
  4025e0:	601a      	str	r2, [r3, #0]
  4025e2:	f3bf 8f4f 	dsb	sy
  4025e6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4025ea:	4b3e      	ldr	r3, [pc, #248]	; (4026e4 <xQueueGenericReceive+0x1b0>)
  4025ec:	4798      	blx	r3
				return pdPASS;
  4025ee:	2001      	movs	r0, #1
}
  4025f0:	b004      	add	sp, #16
  4025f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  4025f6:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4025f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4025fa:	2b00      	cmp	r3, #0
  4025fc:	d0f5      	beq.n	4025ea <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4025fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402602:	4b36      	ldr	r3, [pc, #216]	; (4026dc <xQueueGenericReceive+0x1a8>)
  402604:	4798      	blx	r3
  402606:	2800      	cmp	r0, #0
  402608:	d0ef      	beq.n	4025ea <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  40260a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40260e:	4b34      	ldr	r3, [pc, #208]	; (4026e0 <xQueueGenericReceive+0x1ac>)
  402610:	601a      	str	r2, [r3, #0]
  402612:	f3bf 8f4f 	dsb	sy
  402616:	f3bf 8f6f 	isb	sy
  40261a:	e7e6      	b.n	4025ea <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  40261c:	4b31      	ldr	r3, [pc, #196]	; (4026e4 <xQueueGenericReceive+0x1b0>)
  40261e:	4798      	blx	r3
					return errQUEUE_EMPTY;
  402620:	2000      	movs	r0, #0
  402622:	e7e5      	b.n	4025f0 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  402624:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  402626:	6860      	ldr	r0, [r4, #4]
  402628:	4b2f      	ldr	r3, [pc, #188]	; (4026e8 <xQueueGenericReceive+0x1b4>)
  40262a:	4798      	blx	r3
						taskEXIT_CRITICAL();
  40262c:	4b2d      	ldr	r3, [pc, #180]	; (4026e4 <xQueueGenericReceive+0x1b0>)
  40262e:	4798      	blx	r3
  402630:	e030      	b.n	402694 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  402632:	4620      	mov	r0, r4
  402634:	4b2d      	ldr	r3, [pc, #180]	; (4026ec <xQueueGenericReceive+0x1b8>)
  402636:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402638:	4b2d      	ldr	r3, [pc, #180]	; (4026f0 <xQueueGenericReceive+0x1bc>)
  40263a:	4798      	blx	r3
  40263c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  40263e:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402640:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402642:	2b00      	cmp	r3, #0
  402644:	d1b1      	bne.n	4025aa <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  402646:	9b01      	ldr	r3, [sp, #4]
  402648:	2b00      	cmp	r3, #0
  40264a:	d0e7      	beq.n	40261c <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  40264c:	b90e      	cbnz	r6, 402652 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  40264e:	a802      	add	r0, sp, #8
  402650:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402652:	4b24      	ldr	r3, [pc, #144]	; (4026e4 <xQueueGenericReceive+0x1b0>)
  402654:	4798      	blx	r3
		vTaskSuspendAll();
  402656:	4b27      	ldr	r3, [pc, #156]	; (4026f4 <xQueueGenericReceive+0x1c0>)
  402658:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40265a:	47a8      	blx	r5
  40265c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40265e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402662:	d101      	bne.n	402668 <xQueueGenericReceive+0x134>
  402664:	2300      	movs	r3, #0
  402666:	6463      	str	r3, [r4, #68]	; 0x44
  402668:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40266a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40266e:	d101      	bne.n	402674 <xQueueGenericReceive+0x140>
  402670:	2300      	movs	r3, #0
  402672:	64a3      	str	r3, [r4, #72]	; 0x48
  402674:	4b1b      	ldr	r3, [pc, #108]	; (4026e4 <xQueueGenericReceive+0x1b0>)
  402676:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402678:	a901      	add	r1, sp, #4
  40267a:	a802      	add	r0, sp, #8
  40267c:	4b1e      	ldr	r3, [pc, #120]	; (4026f8 <xQueueGenericReceive+0x1c4>)
  40267e:	4798      	blx	r3
  402680:	b9e8      	cbnz	r0, 4026be <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  402682:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  402684:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  402686:	4b17      	ldr	r3, [pc, #92]	; (4026e4 <xQueueGenericReceive+0x1b0>)
  402688:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40268a:	2e00      	cmp	r6, #0
  40268c:	d1d1      	bne.n	402632 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40268e:	6823      	ldr	r3, [r4, #0]
  402690:	2b00      	cmp	r3, #0
  402692:	d0c7      	beq.n	402624 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402694:	9901      	ldr	r1, [sp, #4]
  402696:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40269a:	4b18      	ldr	r3, [pc, #96]	; (4026fc <xQueueGenericReceive+0x1c8>)
  40269c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40269e:	4620      	mov	r0, r4
  4026a0:	4b12      	ldr	r3, [pc, #72]	; (4026ec <xQueueGenericReceive+0x1b8>)
  4026a2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4026a4:	4b12      	ldr	r3, [pc, #72]	; (4026f0 <xQueueGenericReceive+0x1bc>)
  4026a6:	4798      	blx	r3
  4026a8:	2800      	cmp	r0, #0
  4026aa:	d1c7      	bne.n	40263c <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  4026ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4026b0:	f8c9 3000 	str.w	r3, [r9]
  4026b4:	f3bf 8f4f 	dsb	sy
  4026b8:	f3bf 8f6f 	isb	sy
  4026bc:	e7be      	b.n	40263c <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  4026be:	4620      	mov	r0, r4
  4026c0:	4b0a      	ldr	r3, [pc, #40]	; (4026ec <xQueueGenericReceive+0x1b8>)
  4026c2:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4026c4:	4b0a      	ldr	r3, [pc, #40]	; (4026f0 <xQueueGenericReceive+0x1bc>)
  4026c6:	4798      	blx	r3
			return errQUEUE_EMPTY;
  4026c8:	2000      	movs	r0, #0
  4026ca:	e791      	b.n	4025f0 <xQueueGenericReceive+0xbc>
  4026cc:	004031c1 	.word	0x004031c1
  4026d0:	00401b7d 	.word	0x00401b7d
  4026d4:	00401f3d 	.word	0x00401f3d
  4026d8:	00403341 	.word	0x00403341
  4026dc:	00403059 	.word	0x00403059
  4026e0:	e000ed04 	.word	0xe000ed04
  4026e4:	00401bc9 	.word	0x00401bc9
  4026e8:	004031e1 	.word	0x004031e1
  4026ec:	00401f65 	.word	0x00401f65
  4026f0:	00402c3d 	.word	0x00402c3d
  4026f4:	00402ad5 	.word	0x00402ad5
  4026f8:	00403121 	.word	0x00403121
  4026fc:	00402f55 	.word	0x00402f55
  402700:	004030f1 	.word	0x004030f1

00402704 <vQueueAddToRegistry>:
	{
  402704:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  402706:	4b0b      	ldr	r3, [pc, #44]	; (402734 <vQueueAddToRegistry+0x30>)
  402708:	681b      	ldr	r3, [r3, #0]
  40270a:	b153      	cbz	r3, 402722 <vQueueAddToRegistry+0x1e>
  40270c:	2301      	movs	r3, #1
  40270e:	4c09      	ldr	r4, [pc, #36]	; (402734 <vQueueAddToRegistry+0x30>)
  402710:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  402714:	b132      	cbz	r2, 402724 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402716:	3301      	adds	r3, #1
  402718:	2b08      	cmp	r3, #8
  40271a:	d1f9      	bne.n	402710 <vQueueAddToRegistry+0xc>
	}
  40271c:	f85d 4b04 	ldr.w	r4, [sp], #4
  402720:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402722:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  402724:	4a03      	ldr	r2, [pc, #12]	; (402734 <vQueueAddToRegistry+0x30>)
  402726:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  40272a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40272e:	6058      	str	r0, [r3, #4]
				break;
  402730:	e7f4      	b.n	40271c <vQueueAddToRegistry+0x18>
  402732:	bf00      	nop
  402734:	20400e6c 	.word	0x20400e6c

00402738 <vQueueWaitForMessageRestricted>:
	{
  402738:	b570      	push	{r4, r5, r6, lr}
  40273a:	4604      	mov	r4, r0
  40273c:	460d      	mov	r5, r1
  40273e:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402740:	4b0f      	ldr	r3, [pc, #60]	; (402780 <vQueueWaitForMessageRestricted+0x48>)
  402742:	4798      	blx	r3
  402744:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402746:	f1b3 3fff 	cmp.w	r3, #4294967295
  40274a:	d00b      	beq.n	402764 <vQueueWaitForMessageRestricted+0x2c>
  40274c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40274e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402752:	d00a      	beq.n	40276a <vQueueWaitForMessageRestricted+0x32>
  402754:	4b0b      	ldr	r3, [pc, #44]	; (402784 <vQueueWaitForMessageRestricted+0x4c>)
  402756:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402758:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40275a:	b14b      	cbz	r3, 402770 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  40275c:	4620      	mov	r0, r4
  40275e:	4b0a      	ldr	r3, [pc, #40]	; (402788 <vQueueWaitForMessageRestricted+0x50>)
  402760:	4798      	blx	r3
  402762:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402764:	2300      	movs	r3, #0
  402766:	6463      	str	r3, [r4, #68]	; 0x44
  402768:	e7f0      	b.n	40274c <vQueueWaitForMessageRestricted+0x14>
  40276a:	2300      	movs	r3, #0
  40276c:	64a3      	str	r3, [r4, #72]	; 0x48
  40276e:	e7f1      	b.n	402754 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402770:	4632      	mov	r2, r6
  402772:	4629      	mov	r1, r5
  402774:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402778:	4b04      	ldr	r3, [pc, #16]	; (40278c <vQueueWaitForMessageRestricted+0x54>)
  40277a:	4798      	blx	r3
  40277c:	e7ee      	b.n	40275c <vQueueWaitForMessageRestricted+0x24>
  40277e:	bf00      	nop
  402780:	00401b7d 	.word	0x00401b7d
  402784:	00401bc9 	.word	0x00401bc9
  402788:	00401f65 	.word	0x00401f65
  40278c:	00402fd9 	.word	0x00402fd9

00402790 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402790:	4b08      	ldr	r3, [pc, #32]	; (4027b4 <prvResetNextTaskUnblockTime+0x24>)
  402792:	681b      	ldr	r3, [r3, #0]
  402794:	681b      	ldr	r3, [r3, #0]
  402796:	b13b      	cbz	r3, 4027a8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402798:	4b06      	ldr	r3, [pc, #24]	; (4027b4 <prvResetNextTaskUnblockTime+0x24>)
  40279a:	681b      	ldr	r3, [r3, #0]
  40279c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40279e:	68db      	ldr	r3, [r3, #12]
  4027a0:	685a      	ldr	r2, [r3, #4]
  4027a2:	4b05      	ldr	r3, [pc, #20]	; (4027b8 <prvResetNextTaskUnblockTime+0x28>)
  4027a4:	601a      	str	r2, [r3, #0]
  4027a6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  4027a8:	f04f 32ff 	mov.w	r2, #4294967295
  4027ac:	4b02      	ldr	r3, [pc, #8]	; (4027b8 <prvResetNextTaskUnblockTime+0x28>)
  4027ae:	601a      	str	r2, [r3, #0]
  4027b0:	4770      	bx	lr
  4027b2:	bf00      	nop
  4027b4:	20400c6c 	.word	0x20400c6c
  4027b8:	20400d18 	.word	0x20400d18

004027bc <prvAddCurrentTaskToDelayedList>:
{
  4027bc:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4027be:	4b0f      	ldr	r3, [pc, #60]	; (4027fc <prvAddCurrentTaskToDelayedList+0x40>)
  4027c0:	681b      	ldr	r3, [r3, #0]
  4027c2:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  4027c4:	4b0e      	ldr	r3, [pc, #56]	; (402800 <prvAddCurrentTaskToDelayedList+0x44>)
  4027c6:	681b      	ldr	r3, [r3, #0]
  4027c8:	4298      	cmp	r0, r3
  4027ca:	d30e      	bcc.n	4027ea <prvAddCurrentTaskToDelayedList+0x2e>
  4027cc:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4027ce:	4b0d      	ldr	r3, [pc, #52]	; (402804 <prvAddCurrentTaskToDelayedList+0x48>)
  4027d0:	6818      	ldr	r0, [r3, #0]
  4027d2:	4b0a      	ldr	r3, [pc, #40]	; (4027fc <prvAddCurrentTaskToDelayedList+0x40>)
  4027d4:	6819      	ldr	r1, [r3, #0]
  4027d6:	3104      	adds	r1, #4
  4027d8:	4b0b      	ldr	r3, [pc, #44]	; (402808 <prvAddCurrentTaskToDelayedList+0x4c>)
  4027da:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  4027dc:	4b0b      	ldr	r3, [pc, #44]	; (40280c <prvAddCurrentTaskToDelayedList+0x50>)
  4027de:	681b      	ldr	r3, [r3, #0]
  4027e0:	429c      	cmp	r4, r3
  4027e2:	d201      	bcs.n	4027e8 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  4027e4:	4b09      	ldr	r3, [pc, #36]	; (40280c <prvAddCurrentTaskToDelayedList+0x50>)
  4027e6:	601c      	str	r4, [r3, #0]
  4027e8:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4027ea:	4b09      	ldr	r3, [pc, #36]	; (402810 <prvAddCurrentTaskToDelayedList+0x54>)
  4027ec:	6818      	ldr	r0, [r3, #0]
  4027ee:	4b03      	ldr	r3, [pc, #12]	; (4027fc <prvAddCurrentTaskToDelayedList+0x40>)
  4027f0:	6819      	ldr	r1, [r3, #0]
  4027f2:	3104      	adds	r1, #4
  4027f4:	4b04      	ldr	r3, [pc, #16]	; (402808 <prvAddCurrentTaskToDelayedList+0x4c>)
  4027f6:	4798      	blx	r3
  4027f8:	bd10      	pop	{r4, pc}
  4027fa:	bf00      	nop
  4027fc:	20400c68 	.word	0x20400c68
  402800:	20400d60 	.word	0x20400d60
  402804:	20400c6c 	.word	0x20400c6c
  402808:	00401a65 	.word	0x00401a65
  40280c:	20400d18 	.word	0x20400d18
  402810:	20400c70 	.word	0x20400c70

00402814 <xTaskGenericCreate>:
{
  402814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402818:	b083      	sub	sp, #12
  40281a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40281c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402820:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  402822:	b160      	cbz	r0, 40283e <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402824:	2d04      	cmp	r5, #4
  402826:	d915      	bls.n	402854 <xTaskGenericCreate+0x40>
  402828:	f04f 0380 	mov.w	r3, #128	; 0x80
  40282c:	b672      	cpsid	i
  40282e:	f383 8811 	msr	BASEPRI, r3
  402832:	f3bf 8f6f 	isb	sy
  402836:	f3bf 8f4f 	dsb	sy
  40283a:	b662      	cpsie	i
  40283c:	e7fe      	b.n	40283c <xTaskGenericCreate+0x28>
  40283e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402842:	b672      	cpsid	i
  402844:	f383 8811 	msr	BASEPRI, r3
  402848:	f3bf 8f6f 	isb	sy
  40284c:	f3bf 8f4f 	dsb	sy
  402850:	b662      	cpsie	i
  402852:	e7fe      	b.n	402852 <xTaskGenericCreate+0x3e>
  402854:	9001      	str	r0, [sp, #4]
  402856:	4698      	mov	r8, r3
  402858:	4691      	mov	r9, r2
  40285a:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40285c:	b936      	cbnz	r6, 40286c <xTaskGenericCreate+0x58>
  40285e:	0090      	lsls	r0, r2, #2
  402860:	4b62      	ldr	r3, [pc, #392]	; (4029ec <xTaskGenericCreate+0x1d8>)
  402862:	4798      	blx	r3
		if( pxStack != NULL )
  402864:	4606      	mov	r6, r0
  402866:	2800      	cmp	r0, #0
  402868:	f000 809e 	beq.w	4029a8 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  40286c:	2058      	movs	r0, #88	; 0x58
  40286e:	4b5f      	ldr	r3, [pc, #380]	; (4029ec <xTaskGenericCreate+0x1d8>)
  402870:	4798      	blx	r3
			if( pxNewTCB != NULL )
  402872:	4604      	mov	r4, r0
  402874:	2800      	cmp	r0, #0
  402876:	f000 8094 	beq.w	4029a2 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  40287a:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  40287c:	ea4f 0289 	mov.w	r2, r9, lsl #2
  402880:	21a5      	movs	r1, #165	; 0xa5
  402882:	4630      	mov	r0, r6
  402884:	4b5a      	ldr	r3, [pc, #360]	; (4029f0 <xTaskGenericCreate+0x1dc>)
  402886:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402888:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  40288c:	444e      	add	r6, r9
  40288e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402890:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402894:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402898:	783b      	ldrb	r3, [r7, #0]
  40289a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40289e:	783b      	ldrb	r3, [r7, #0]
  4028a0:	2b00      	cmp	r3, #0
  4028a2:	f040 8084 	bne.w	4029ae <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4028a6:	2700      	movs	r7, #0
  4028a8:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  4028ac:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  4028ae:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4028b0:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4028b2:	f104 0904 	add.w	r9, r4, #4
  4028b6:	4648      	mov	r0, r9
  4028b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 402a40 <xTaskGenericCreate+0x22c>
  4028bc:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4028be:	f104 0018 	add.w	r0, r4, #24
  4028c2:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4028c4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4028c6:	f1c5 0305 	rsb	r3, r5, #5
  4028ca:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4028cc:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  4028ce:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4028d0:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4028d4:	4642      	mov	r2, r8
  4028d6:	9901      	ldr	r1, [sp, #4]
  4028d8:	4630      	mov	r0, r6
  4028da:	4b46      	ldr	r3, [pc, #280]	; (4029f4 <xTaskGenericCreate+0x1e0>)
  4028dc:	4798      	blx	r3
  4028de:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  4028e0:	f1ba 0f00 	cmp.w	sl, #0
  4028e4:	d001      	beq.n	4028ea <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4028e6:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  4028ea:	4b43      	ldr	r3, [pc, #268]	; (4029f8 <xTaskGenericCreate+0x1e4>)
  4028ec:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4028ee:	4a43      	ldr	r2, [pc, #268]	; (4029fc <xTaskGenericCreate+0x1e8>)
  4028f0:	6813      	ldr	r3, [r2, #0]
  4028f2:	3301      	adds	r3, #1
  4028f4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4028f6:	4b42      	ldr	r3, [pc, #264]	; (402a00 <xTaskGenericCreate+0x1ec>)
  4028f8:	681b      	ldr	r3, [r3, #0]
  4028fa:	2b00      	cmp	r3, #0
  4028fc:	d166      	bne.n	4029cc <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  4028fe:	4b40      	ldr	r3, [pc, #256]	; (402a00 <xTaskGenericCreate+0x1ec>)
  402900:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  402902:	6813      	ldr	r3, [r2, #0]
  402904:	2b01      	cmp	r3, #1
  402906:	d121      	bne.n	40294c <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402908:	4f3e      	ldr	r7, [pc, #248]	; (402a04 <xTaskGenericCreate+0x1f0>)
  40290a:	4638      	mov	r0, r7
  40290c:	4e3e      	ldr	r6, [pc, #248]	; (402a08 <xTaskGenericCreate+0x1f4>)
  40290e:	47b0      	blx	r6
  402910:	f107 0014 	add.w	r0, r7, #20
  402914:	47b0      	blx	r6
  402916:	f107 0028 	add.w	r0, r7, #40	; 0x28
  40291a:	47b0      	blx	r6
  40291c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  402920:	47b0      	blx	r6
  402922:	f107 0050 	add.w	r0, r7, #80	; 0x50
  402926:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402928:	f8df 8118 	ldr.w	r8, [pc, #280]	; 402a44 <xTaskGenericCreate+0x230>
  40292c:	4640      	mov	r0, r8
  40292e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  402930:	4f36      	ldr	r7, [pc, #216]	; (402a0c <xTaskGenericCreate+0x1f8>)
  402932:	4638      	mov	r0, r7
  402934:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  402936:	4836      	ldr	r0, [pc, #216]	; (402a10 <xTaskGenericCreate+0x1fc>)
  402938:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  40293a:	4836      	ldr	r0, [pc, #216]	; (402a14 <xTaskGenericCreate+0x200>)
  40293c:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  40293e:	4836      	ldr	r0, [pc, #216]	; (402a18 <xTaskGenericCreate+0x204>)
  402940:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  402942:	4b36      	ldr	r3, [pc, #216]	; (402a1c <xTaskGenericCreate+0x208>)
  402944:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402948:	4b35      	ldr	r3, [pc, #212]	; (402a20 <xTaskGenericCreate+0x20c>)
  40294a:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  40294c:	4a35      	ldr	r2, [pc, #212]	; (402a24 <xTaskGenericCreate+0x210>)
  40294e:	6813      	ldr	r3, [r2, #0]
  402950:	3301      	adds	r3, #1
  402952:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  402954:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  402956:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402958:	4a33      	ldr	r2, [pc, #204]	; (402a28 <xTaskGenericCreate+0x214>)
  40295a:	6811      	ldr	r1, [r2, #0]
  40295c:	2301      	movs	r3, #1
  40295e:	4083      	lsls	r3, r0
  402960:	430b      	orrs	r3, r1
  402962:	6013      	str	r3, [r2, #0]
  402964:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402968:	4649      	mov	r1, r9
  40296a:	4b26      	ldr	r3, [pc, #152]	; (402a04 <xTaskGenericCreate+0x1f0>)
  40296c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402970:	4b2e      	ldr	r3, [pc, #184]	; (402a2c <xTaskGenericCreate+0x218>)
  402972:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402974:	4b2e      	ldr	r3, [pc, #184]	; (402a30 <xTaskGenericCreate+0x21c>)
  402976:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402978:	4b2e      	ldr	r3, [pc, #184]	; (402a34 <xTaskGenericCreate+0x220>)
  40297a:	681b      	ldr	r3, [r3, #0]
  40297c:	2b00      	cmp	r3, #0
  40297e:	d031      	beq.n	4029e4 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  402980:	4b1f      	ldr	r3, [pc, #124]	; (402a00 <xTaskGenericCreate+0x1ec>)
  402982:	681b      	ldr	r3, [r3, #0]
  402984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402986:	429d      	cmp	r5, r3
  402988:	d92e      	bls.n	4029e8 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  40298a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40298e:	4b2a      	ldr	r3, [pc, #168]	; (402a38 <xTaskGenericCreate+0x224>)
  402990:	601a      	str	r2, [r3, #0]
  402992:	f3bf 8f4f 	dsb	sy
  402996:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40299a:	2001      	movs	r0, #1
}
  40299c:	b003      	add	sp, #12
  40299e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  4029a2:	4630      	mov	r0, r6
  4029a4:	4b25      	ldr	r3, [pc, #148]	; (402a3c <xTaskGenericCreate+0x228>)
  4029a6:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4029a8:	f04f 30ff 	mov.w	r0, #4294967295
  4029ac:	e7f6      	b.n	40299c <xTaskGenericCreate+0x188>
  4029ae:	463b      	mov	r3, r7
  4029b0:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4029b4:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4029b6:	7859      	ldrb	r1, [r3, #1]
  4029b8:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  4029bc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4029c0:	2900      	cmp	r1, #0
  4029c2:	f43f af70 	beq.w	4028a6 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4029c6:	42bb      	cmp	r3, r7
  4029c8:	d1f5      	bne.n	4029b6 <xTaskGenericCreate+0x1a2>
  4029ca:	e76c      	b.n	4028a6 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  4029cc:	4b19      	ldr	r3, [pc, #100]	; (402a34 <xTaskGenericCreate+0x220>)
  4029ce:	681b      	ldr	r3, [r3, #0]
  4029d0:	2b00      	cmp	r3, #0
  4029d2:	d1bb      	bne.n	40294c <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4029d4:	4b0a      	ldr	r3, [pc, #40]	; (402a00 <xTaskGenericCreate+0x1ec>)
  4029d6:	681b      	ldr	r3, [r3, #0]
  4029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4029da:	429d      	cmp	r5, r3
  4029dc:	d3b6      	bcc.n	40294c <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  4029de:	4b08      	ldr	r3, [pc, #32]	; (402a00 <xTaskGenericCreate+0x1ec>)
  4029e0:	601c      	str	r4, [r3, #0]
  4029e2:	e7b3      	b.n	40294c <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  4029e4:	2001      	movs	r0, #1
  4029e6:	e7d9      	b.n	40299c <xTaskGenericCreate+0x188>
  4029e8:	2001      	movs	r0, #1
	return xReturn;
  4029ea:	e7d7      	b.n	40299c <xTaskGenericCreate+0x188>
  4029ec:	00401dd9 	.word	0x00401dd9
  4029f0:	00404f61 	.word	0x00404f61
  4029f4:	00401b31 	.word	0x00401b31
  4029f8:	00401b7d 	.word	0x00401b7d
  4029fc:	20400cd8 	.word	0x20400cd8
  402a00:	20400c68 	.word	0x20400c68
  402a04:	20400c74 	.word	0x20400c74
  402a08:	00401a31 	.word	0x00401a31
  402a0c:	20400d04 	.word	0x20400d04
  402a10:	20400d20 	.word	0x20400d20
  402a14:	20400d4c 	.word	0x20400d4c
  402a18:	20400d38 	.word	0x20400d38
  402a1c:	20400c6c 	.word	0x20400c6c
  402a20:	20400c70 	.word	0x20400c70
  402a24:	20400ce4 	.word	0x20400ce4
  402a28:	20400cec 	.word	0x20400cec
  402a2c:	00401a4d 	.word	0x00401a4d
  402a30:	00401bc9 	.word	0x00401bc9
  402a34:	20400d34 	.word	0x20400d34
  402a38:	e000ed04 	.word	0xe000ed04
  402a3c:	00401e09 	.word	0x00401e09
  402a40:	00401a47 	.word	0x00401a47
  402a44:	20400cf0 	.word	0x20400cf0

00402a48 <vTaskStartScheduler>:
{
  402a48:	b510      	push	{r4, lr}
  402a4a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402a4c:	2300      	movs	r3, #0
  402a4e:	9303      	str	r3, [sp, #12]
  402a50:	9302      	str	r3, [sp, #8]
  402a52:	9301      	str	r3, [sp, #4]
  402a54:	9300      	str	r3, [sp, #0]
  402a56:	2282      	movs	r2, #130	; 0x82
  402a58:	4916      	ldr	r1, [pc, #88]	; (402ab4 <vTaskStartScheduler+0x6c>)
  402a5a:	4817      	ldr	r0, [pc, #92]	; (402ab8 <vTaskStartScheduler+0x70>)
  402a5c:	4c17      	ldr	r4, [pc, #92]	; (402abc <vTaskStartScheduler+0x74>)
  402a5e:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402a60:	2801      	cmp	r0, #1
  402a62:	d00b      	beq.n	402a7c <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  402a64:	bb20      	cbnz	r0, 402ab0 <vTaskStartScheduler+0x68>
  402a66:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a6a:	b672      	cpsid	i
  402a6c:	f383 8811 	msr	BASEPRI, r3
  402a70:	f3bf 8f6f 	isb	sy
  402a74:	f3bf 8f4f 	dsb	sy
  402a78:	b662      	cpsie	i
  402a7a:	e7fe      	b.n	402a7a <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  402a7c:	4b10      	ldr	r3, [pc, #64]	; (402ac0 <vTaskStartScheduler+0x78>)
  402a7e:	4798      	blx	r3
	if( xReturn == pdPASS )
  402a80:	2801      	cmp	r0, #1
  402a82:	d1ef      	bne.n	402a64 <vTaskStartScheduler+0x1c>
  402a84:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a88:	b672      	cpsid	i
  402a8a:	f383 8811 	msr	BASEPRI, r3
  402a8e:	f3bf 8f6f 	isb	sy
  402a92:	f3bf 8f4f 	dsb	sy
  402a96:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402a98:	f04f 32ff 	mov.w	r2, #4294967295
  402a9c:	4b09      	ldr	r3, [pc, #36]	; (402ac4 <vTaskStartScheduler+0x7c>)
  402a9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402aa0:	2201      	movs	r2, #1
  402aa2:	4b09      	ldr	r3, [pc, #36]	; (402ac8 <vTaskStartScheduler+0x80>)
  402aa4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402aa6:	2200      	movs	r2, #0
  402aa8:	4b08      	ldr	r3, [pc, #32]	; (402acc <vTaskStartScheduler+0x84>)
  402aaa:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402aac:	4b08      	ldr	r3, [pc, #32]	; (402ad0 <vTaskStartScheduler+0x88>)
  402aae:	4798      	blx	r3
}
  402ab0:	b004      	add	sp, #16
  402ab2:	bd10      	pop	{r4, pc}
  402ab4:	004077d8 	.word	0x004077d8
  402ab8:	00402ded 	.word	0x00402ded
  402abc:	00402815 	.word	0x00402815
  402ac0:	0040342d 	.word	0x0040342d
  402ac4:	20400d18 	.word	0x20400d18
  402ac8:	20400d34 	.word	0x20400d34
  402acc:	20400d60 	.word	0x20400d60
  402ad0:	00401cb1 	.word	0x00401cb1

00402ad4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402ad4:	4a02      	ldr	r2, [pc, #8]	; (402ae0 <vTaskSuspendAll+0xc>)
  402ad6:	6813      	ldr	r3, [r2, #0]
  402ad8:	3301      	adds	r3, #1
  402ada:	6013      	str	r3, [r2, #0]
  402adc:	4770      	bx	lr
  402ade:	bf00      	nop
  402ae0:	20400ce0 	.word	0x20400ce0

00402ae4 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402ae4:	4b01      	ldr	r3, [pc, #4]	; (402aec <xTaskGetTickCount+0x8>)
  402ae6:	6818      	ldr	r0, [r3, #0]
}
  402ae8:	4770      	bx	lr
  402aea:	bf00      	nop
  402aec:	20400d60 	.word	0x20400d60

00402af0 <xTaskIncrementTick>:
{
  402af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402af4:	4b42      	ldr	r3, [pc, #264]	; (402c00 <xTaskIncrementTick+0x110>)
  402af6:	681b      	ldr	r3, [r3, #0]
  402af8:	2b00      	cmp	r3, #0
  402afa:	d178      	bne.n	402bee <xTaskIncrementTick+0xfe>
		++xTickCount;
  402afc:	4b41      	ldr	r3, [pc, #260]	; (402c04 <xTaskIncrementTick+0x114>)
  402afe:	681a      	ldr	r2, [r3, #0]
  402b00:	3201      	adds	r2, #1
  402b02:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  402b04:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  402b06:	b9d6      	cbnz	r6, 402b3e <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  402b08:	4b3f      	ldr	r3, [pc, #252]	; (402c08 <xTaskIncrementTick+0x118>)
  402b0a:	681b      	ldr	r3, [r3, #0]
  402b0c:	681b      	ldr	r3, [r3, #0]
  402b0e:	b153      	cbz	r3, 402b26 <xTaskIncrementTick+0x36>
  402b10:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b14:	b672      	cpsid	i
  402b16:	f383 8811 	msr	BASEPRI, r3
  402b1a:	f3bf 8f6f 	isb	sy
  402b1e:	f3bf 8f4f 	dsb	sy
  402b22:	b662      	cpsie	i
  402b24:	e7fe      	b.n	402b24 <xTaskIncrementTick+0x34>
  402b26:	4a38      	ldr	r2, [pc, #224]	; (402c08 <xTaskIncrementTick+0x118>)
  402b28:	6811      	ldr	r1, [r2, #0]
  402b2a:	4b38      	ldr	r3, [pc, #224]	; (402c0c <xTaskIncrementTick+0x11c>)
  402b2c:	6818      	ldr	r0, [r3, #0]
  402b2e:	6010      	str	r0, [r2, #0]
  402b30:	6019      	str	r1, [r3, #0]
  402b32:	4a37      	ldr	r2, [pc, #220]	; (402c10 <xTaskIncrementTick+0x120>)
  402b34:	6813      	ldr	r3, [r2, #0]
  402b36:	3301      	adds	r3, #1
  402b38:	6013      	str	r3, [r2, #0]
  402b3a:	4b36      	ldr	r3, [pc, #216]	; (402c14 <xTaskIncrementTick+0x124>)
  402b3c:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  402b3e:	4b36      	ldr	r3, [pc, #216]	; (402c18 <xTaskIncrementTick+0x128>)
  402b40:	681b      	ldr	r3, [r3, #0]
  402b42:	429e      	cmp	r6, r3
  402b44:	d218      	bcs.n	402b78 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  402b46:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402b48:	4b34      	ldr	r3, [pc, #208]	; (402c1c <xTaskIncrementTick+0x12c>)
  402b4a:	681b      	ldr	r3, [r3, #0]
  402b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402b4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402b52:	4a33      	ldr	r2, [pc, #204]	; (402c20 <xTaskIncrementTick+0x130>)
  402b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402b58:	2b02      	cmp	r3, #2
  402b5a:	bf28      	it	cs
  402b5c:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402b5e:	4b31      	ldr	r3, [pc, #196]	; (402c24 <xTaskIncrementTick+0x134>)
  402b60:	681b      	ldr	r3, [r3, #0]
  402b62:	b90b      	cbnz	r3, 402b68 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402b64:	4b30      	ldr	r3, [pc, #192]	; (402c28 <xTaskIncrementTick+0x138>)
  402b66:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402b68:	4b30      	ldr	r3, [pc, #192]	; (402c2c <xTaskIncrementTick+0x13c>)
  402b6a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402b6c:	2b00      	cmp	r3, #0
}
  402b6e:	bf0c      	ite	eq
  402b70:	4620      	moveq	r0, r4
  402b72:	2001      	movne	r0, #1
  402b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b78:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402b7a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 402c08 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402b7e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402c38 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  402b82:	4f2b      	ldr	r7, [pc, #172]	; (402c30 <xTaskIncrementTick+0x140>)
  402b84:	e01f      	b.n	402bc6 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  402b86:	f04f 32ff 	mov.w	r2, #4294967295
  402b8a:	4b23      	ldr	r3, [pc, #140]	; (402c18 <xTaskIncrementTick+0x128>)
  402b8c:	601a      	str	r2, [r3, #0]
						break;
  402b8e:	e7db      	b.n	402b48 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402b90:	4a21      	ldr	r2, [pc, #132]	; (402c18 <xTaskIncrementTick+0x128>)
  402b92:	6013      	str	r3, [r2, #0]
							break;
  402b94:	e7d8      	b.n	402b48 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402b96:	f105 0018 	add.w	r0, r5, #24
  402b9a:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402b9c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402b9e:	683a      	ldr	r2, [r7, #0]
  402ba0:	2301      	movs	r3, #1
  402ba2:	4083      	lsls	r3, r0
  402ba4:	4313      	orrs	r3, r2
  402ba6:	603b      	str	r3, [r7, #0]
  402ba8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402bac:	4651      	mov	r1, sl
  402bae:	4b1c      	ldr	r3, [pc, #112]	; (402c20 <xTaskIncrementTick+0x130>)
  402bb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402bb4:	4b1f      	ldr	r3, [pc, #124]	; (402c34 <xTaskIncrementTick+0x144>)
  402bb6:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402bb8:	4b18      	ldr	r3, [pc, #96]	; (402c1c <xTaskIncrementTick+0x12c>)
  402bba:	681b      	ldr	r3, [r3, #0]
  402bbc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402bc0:	429a      	cmp	r2, r3
  402bc2:	bf28      	it	cs
  402bc4:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402bc6:	f8d9 3000 	ldr.w	r3, [r9]
  402bca:	681b      	ldr	r3, [r3, #0]
  402bcc:	2b00      	cmp	r3, #0
  402bce:	d0da      	beq.n	402b86 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402bd0:	f8d9 3000 	ldr.w	r3, [r9]
  402bd4:	68db      	ldr	r3, [r3, #12]
  402bd6:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402bd8:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  402bda:	429e      	cmp	r6, r3
  402bdc:	d3d8      	bcc.n	402b90 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402bde:	f105 0a04 	add.w	sl, r5, #4
  402be2:	4650      	mov	r0, sl
  402be4:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402be6:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402be8:	2b00      	cmp	r3, #0
  402bea:	d1d4      	bne.n	402b96 <xTaskIncrementTick+0xa6>
  402bec:	e7d6      	b.n	402b9c <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  402bee:	4a0d      	ldr	r2, [pc, #52]	; (402c24 <xTaskIncrementTick+0x134>)
  402bf0:	6813      	ldr	r3, [r2, #0]
  402bf2:	3301      	adds	r3, #1
  402bf4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402bf6:	4b0c      	ldr	r3, [pc, #48]	; (402c28 <xTaskIncrementTick+0x138>)
  402bf8:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  402bfa:	2400      	movs	r4, #0
  402bfc:	e7b4      	b.n	402b68 <xTaskIncrementTick+0x78>
  402bfe:	bf00      	nop
  402c00:	20400ce0 	.word	0x20400ce0
  402c04:	20400d60 	.word	0x20400d60
  402c08:	20400c6c 	.word	0x20400c6c
  402c0c:	20400c70 	.word	0x20400c70
  402c10:	20400d1c 	.word	0x20400d1c
  402c14:	00402791 	.word	0x00402791
  402c18:	20400d18 	.word	0x20400d18
  402c1c:	20400c68 	.word	0x20400c68
  402c20:	20400c74 	.word	0x20400c74
  402c24:	20400cdc 	.word	0x20400cdc
  402c28:	00403eb1 	.word	0x00403eb1
  402c2c:	20400d64 	.word	0x20400d64
  402c30:	20400cec 	.word	0x20400cec
  402c34:	00401a4d 	.word	0x00401a4d
  402c38:	00401a99 	.word	0x00401a99

00402c3c <xTaskResumeAll>:
{
  402c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  402c40:	4b38      	ldr	r3, [pc, #224]	; (402d24 <xTaskResumeAll+0xe8>)
  402c42:	681b      	ldr	r3, [r3, #0]
  402c44:	b953      	cbnz	r3, 402c5c <xTaskResumeAll+0x20>
  402c46:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c4a:	b672      	cpsid	i
  402c4c:	f383 8811 	msr	BASEPRI, r3
  402c50:	f3bf 8f6f 	isb	sy
  402c54:	f3bf 8f4f 	dsb	sy
  402c58:	b662      	cpsie	i
  402c5a:	e7fe      	b.n	402c5a <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402c5c:	4b32      	ldr	r3, [pc, #200]	; (402d28 <xTaskResumeAll+0xec>)
  402c5e:	4798      	blx	r3
		--uxSchedulerSuspended;
  402c60:	4b30      	ldr	r3, [pc, #192]	; (402d24 <xTaskResumeAll+0xe8>)
  402c62:	681a      	ldr	r2, [r3, #0]
  402c64:	3a01      	subs	r2, #1
  402c66:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402c68:	681b      	ldr	r3, [r3, #0]
  402c6a:	2b00      	cmp	r3, #0
  402c6c:	d155      	bne.n	402d1a <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402c6e:	4b2f      	ldr	r3, [pc, #188]	; (402d2c <xTaskResumeAll+0xf0>)
  402c70:	681b      	ldr	r3, [r3, #0]
  402c72:	2b00      	cmp	r3, #0
  402c74:	d132      	bne.n	402cdc <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  402c76:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402c78:	4b2d      	ldr	r3, [pc, #180]	; (402d30 <xTaskResumeAll+0xf4>)
  402c7a:	4798      	blx	r3
}
  402c7c:	4620      	mov	r0, r4
  402c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  402c82:	68fb      	ldr	r3, [r7, #12]
  402c84:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402c86:	f104 0018 	add.w	r0, r4, #24
  402c8a:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402c8c:	f104 0804 	add.w	r8, r4, #4
  402c90:	4640      	mov	r0, r8
  402c92:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402c94:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402c96:	682a      	ldr	r2, [r5, #0]
  402c98:	2301      	movs	r3, #1
  402c9a:	4083      	lsls	r3, r0
  402c9c:	4313      	orrs	r3, r2
  402c9e:	602b      	str	r3, [r5, #0]
  402ca0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402ca4:	4641      	mov	r1, r8
  402ca6:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  402caa:	4b22      	ldr	r3, [pc, #136]	; (402d34 <xTaskResumeAll+0xf8>)
  402cac:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402cae:	4b22      	ldr	r3, [pc, #136]	; (402d38 <xTaskResumeAll+0xfc>)
  402cb0:	681b      	ldr	r3, [r3, #0]
  402cb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402cb6:	429a      	cmp	r2, r3
  402cb8:	d20c      	bcs.n	402cd4 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402cba:	683b      	ldr	r3, [r7, #0]
  402cbc:	2b00      	cmp	r3, #0
  402cbe:	d1e0      	bne.n	402c82 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402cc0:	4b1e      	ldr	r3, [pc, #120]	; (402d3c <xTaskResumeAll+0x100>)
  402cc2:	681b      	ldr	r3, [r3, #0]
  402cc4:	b1db      	cbz	r3, 402cfe <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402cc6:	4b1d      	ldr	r3, [pc, #116]	; (402d3c <xTaskResumeAll+0x100>)
  402cc8:	681b      	ldr	r3, [r3, #0]
  402cca:	b1c3      	cbz	r3, 402cfe <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402ccc:	4e1c      	ldr	r6, [pc, #112]	; (402d40 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  402cce:	4d1d      	ldr	r5, [pc, #116]	; (402d44 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  402cd0:	4c1a      	ldr	r4, [pc, #104]	; (402d3c <xTaskResumeAll+0x100>)
  402cd2:	e00e      	b.n	402cf2 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402cd4:	2201      	movs	r2, #1
  402cd6:	4b1b      	ldr	r3, [pc, #108]	; (402d44 <xTaskResumeAll+0x108>)
  402cd8:	601a      	str	r2, [r3, #0]
  402cda:	e7ee      	b.n	402cba <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402cdc:	4f1a      	ldr	r7, [pc, #104]	; (402d48 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402cde:	4e1b      	ldr	r6, [pc, #108]	; (402d4c <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  402ce0:	4d1b      	ldr	r5, [pc, #108]	; (402d50 <xTaskResumeAll+0x114>)
  402ce2:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402d58 <xTaskResumeAll+0x11c>
  402ce6:	e7e8      	b.n	402cba <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  402ce8:	6823      	ldr	r3, [r4, #0]
  402cea:	3b01      	subs	r3, #1
  402cec:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402cee:	6823      	ldr	r3, [r4, #0]
  402cf0:	b12b      	cbz	r3, 402cfe <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402cf2:	47b0      	blx	r6
  402cf4:	2800      	cmp	r0, #0
  402cf6:	d0f7      	beq.n	402ce8 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  402cf8:	2301      	movs	r3, #1
  402cfa:	602b      	str	r3, [r5, #0]
  402cfc:	e7f4      	b.n	402ce8 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  402cfe:	4b11      	ldr	r3, [pc, #68]	; (402d44 <xTaskResumeAll+0x108>)
  402d00:	681b      	ldr	r3, [r3, #0]
  402d02:	2b01      	cmp	r3, #1
  402d04:	d10b      	bne.n	402d1e <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  402d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402d0a:	4b12      	ldr	r3, [pc, #72]	; (402d54 <xTaskResumeAll+0x118>)
  402d0c:	601a      	str	r2, [r3, #0]
  402d0e:	f3bf 8f4f 	dsb	sy
  402d12:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  402d16:	2401      	movs	r4, #1
  402d18:	e7ae      	b.n	402c78 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  402d1a:	2400      	movs	r4, #0
  402d1c:	e7ac      	b.n	402c78 <xTaskResumeAll+0x3c>
  402d1e:	2400      	movs	r4, #0
  402d20:	e7aa      	b.n	402c78 <xTaskResumeAll+0x3c>
  402d22:	bf00      	nop
  402d24:	20400ce0 	.word	0x20400ce0
  402d28:	00401b7d 	.word	0x00401b7d
  402d2c:	20400cd8 	.word	0x20400cd8
  402d30:	00401bc9 	.word	0x00401bc9
  402d34:	00401a4d 	.word	0x00401a4d
  402d38:	20400c68 	.word	0x20400c68
  402d3c:	20400cdc 	.word	0x20400cdc
  402d40:	00402af1 	.word	0x00402af1
  402d44:	20400d64 	.word	0x20400d64
  402d48:	20400d20 	.word	0x20400d20
  402d4c:	00401a99 	.word	0x00401a99
  402d50:	20400cec 	.word	0x20400cec
  402d54:	e000ed04 	.word	0xe000ed04
  402d58:	20400c74 	.word	0x20400c74

00402d5c <vTaskDelay>:
	{
  402d5c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  402d5e:	2800      	cmp	r0, #0
  402d60:	d029      	beq.n	402db6 <vTaskDelay+0x5a>
  402d62:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402d64:	4b18      	ldr	r3, [pc, #96]	; (402dc8 <vTaskDelay+0x6c>)
  402d66:	681b      	ldr	r3, [r3, #0]
  402d68:	b153      	cbz	r3, 402d80 <vTaskDelay+0x24>
  402d6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d6e:	b672      	cpsid	i
  402d70:	f383 8811 	msr	BASEPRI, r3
  402d74:	f3bf 8f6f 	isb	sy
  402d78:	f3bf 8f4f 	dsb	sy
  402d7c:	b662      	cpsie	i
  402d7e:	e7fe      	b.n	402d7e <vTaskDelay+0x22>
			vTaskSuspendAll();
  402d80:	4b12      	ldr	r3, [pc, #72]	; (402dcc <vTaskDelay+0x70>)
  402d82:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  402d84:	4b12      	ldr	r3, [pc, #72]	; (402dd0 <vTaskDelay+0x74>)
  402d86:	681b      	ldr	r3, [r3, #0]
  402d88:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402d8a:	4b12      	ldr	r3, [pc, #72]	; (402dd4 <vTaskDelay+0x78>)
  402d8c:	6818      	ldr	r0, [r3, #0]
  402d8e:	3004      	adds	r0, #4
  402d90:	4b11      	ldr	r3, [pc, #68]	; (402dd8 <vTaskDelay+0x7c>)
  402d92:	4798      	blx	r3
  402d94:	b948      	cbnz	r0, 402daa <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402d96:	4b0f      	ldr	r3, [pc, #60]	; (402dd4 <vTaskDelay+0x78>)
  402d98:	681a      	ldr	r2, [r3, #0]
  402d9a:	4910      	ldr	r1, [pc, #64]	; (402ddc <vTaskDelay+0x80>)
  402d9c:	680b      	ldr	r3, [r1, #0]
  402d9e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402da0:	2201      	movs	r2, #1
  402da2:	4082      	lsls	r2, r0
  402da4:	ea23 0302 	bic.w	r3, r3, r2
  402da8:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402daa:	4620      	mov	r0, r4
  402dac:	4b0c      	ldr	r3, [pc, #48]	; (402de0 <vTaskDelay+0x84>)
  402dae:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402db0:	4b0c      	ldr	r3, [pc, #48]	; (402de4 <vTaskDelay+0x88>)
  402db2:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402db4:	b938      	cbnz	r0, 402dc6 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  402db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402dba:	4b0b      	ldr	r3, [pc, #44]	; (402de8 <vTaskDelay+0x8c>)
  402dbc:	601a      	str	r2, [r3, #0]
  402dbe:	f3bf 8f4f 	dsb	sy
  402dc2:	f3bf 8f6f 	isb	sy
  402dc6:	bd10      	pop	{r4, pc}
  402dc8:	20400ce0 	.word	0x20400ce0
  402dcc:	00402ad5 	.word	0x00402ad5
  402dd0:	20400d60 	.word	0x20400d60
  402dd4:	20400c68 	.word	0x20400c68
  402dd8:	00401a99 	.word	0x00401a99
  402ddc:	20400cec 	.word	0x20400cec
  402de0:	004027bd 	.word	0x004027bd
  402de4:	00402c3d 	.word	0x00402c3d
  402de8:	e000ed04 	.word	0xe000ed04

00402dec <prvIdleTask>:
{
  402dec:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  402dee:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402e78 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402df2:	4e19      	ldr	r6, [pc, #100]	; (402e58 <prvIdleTask+0x6c>)
				taskYIELD();
  402df4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402e7c <prvIdleTask+0x90>
  402df8:	e02a      	b.n	402e50 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402dfa:	4b18      	ldr	r3, [pc, #96]	; (402e5c <prvIdleTask+0x70>)
  402dfc:	681b      	ldr	r3, [r3, #0]
  402dfe:	2b01      	cmp	r3, #1
  402e00:	d81e      	bhi.n	402e40 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402e02:	682b      	ldr	r3, [r5, #0]
  402e04:	2b00      	cmp	r3, #0
  402e06:	d0f8      	beq.n	402dfa <prvIdleTask+0xe>
			vTaskSuspendAll();
  402e08:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402e0a:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  402e0c:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  402e0e:	2c00      	cmp	r4, #0
  402e10:	d0f7      	beq.n	402e02 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  402e12:	4b13      	ldr	r3, [pc, #76]	; (402e60 <prvIdleTask+0x74>)
  402e14:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402e16:	68f3      	ldr	r3, [r6, #12]
  402e18:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402e1a:	1d20      	adds	r0, r4, #4
  402e1c:	4b11      	ldr	r3, [pc, #68]	; (402e64 <prvIdleTask+0x78>)
  402e1e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402e20:	4a11      	ldr	r2, [pc, #68]	; (402e68 <prvIdleTask+0x7c>)
  402e22:	6813      	ldr	r3, [r2, #0]
  402e24:	3b01      	subs	r3, #1
  402e26:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402e28:	682b      	ldr	r3, [r5, #0]
  402e2a:	3b01      	subs	r3, #1
  402e2c:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  402e2e:	4b0f      	ldr	r3, [pc, #60]	; (402e6c <prvIdleTask+0x80>)
  402e30:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  402e32:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402e34:	f8df a048 	ldr.w	sl, [pc, #72]	; 402e80 <prvIdleTask+0x94>
  402e38:	47d0      	blx	sl
		vPortFree( pxTCB );
  402e3a:	4620      	mov	r0, r4
  402e3c:	47d0      	blx	sl
  402e3e:	e7e0      	b.n	402e02 <prvIdleTask+0x16>
				taskYIELD();
  402e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402e44:	f8c9 3000 	str.w	r3, [r9]
  402e48:	f3bf 8f4f 	dsb	sy
  402e4c:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402e50:	4d07      	ldr	r5, [pc, #28]	; (402e70 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  402e52:	4f08      	ldr	r7, [pc, #32]	; (402e74 <prvIdleTask+0x88>)
  402e54:	e7d5      	b.n	402e02 <prvIdleTask+0x16>
  402e56:	bf00      	nop
  402e58:	20400d4c 	.word	0x20400d4c
  402e5c:	20400c74 	.word	0x20400c74
  402e60:	00401b7d 	.word	0x00401b7d
  402e64:	00401a99 	.word	0x00401a99
  402e68:	20400cd8 	.word	0x20400cd8
  402e6c:	00401bc9 	.word	0x00401bc9
  402e70:	20400ce8 	.word	0x20400ce8
  402e74:	00402c3d 	.word	0x00402c3d
  402e78:	00402ad5 	.word	0x00402ad5
  402e7c:	e000ed04 	.word	0xe000ed04
  402e80:	00401e09 	.word	0x00401e09

00402e84 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402e84:	4b2d      	ldr	r3, [pc, #180]	; (402f3c <vTaskSwitchContext+0xb8>)
  402e86:	681b      	ldr	r3, [r3, #0]
  402e88:	2b00      	cmp	r3, #0
  402e8a:	d12c      	bne.n	402ee6 <vTaskSwitchContext+0x62>
{
  402e8c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402e8e:	2200      	movs	r2, #0
  402e90:	4b2b      	ldr	r3, [pc, #172]	; (402f40 <vTaskSwitchContext+0xbc>)
  402e92:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402e94:	4b2b      	ldr	r3, [pc, #172]	; (402f44 <vTaskSwitchContext+0xc0>)
  402e96:	681b      	ldr	r3, [r3, #0]
  402e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e9a:	681a      	ldr	r2, [r3, #0]
  402e9c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402ea0:	d103      	bne.n	402eaa <vTaskSwitchContext+0x26>
  402ea2:	685a      	ldr	r2, [r3, #4]
  402ea4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402ea8:	d021      	beq.n	402eee <vTaskSwitchContext+0x6a>
  402eaa:	4b26      	ldr	r3, [pc, #152]	; (402f44 <vTaskSwitchContext+0xc0>)
  402eac:	6818      	ldr	r0, [r3, #0]
  402eae:	6819      	ldr	r1, [r3, #0]
  402eb0:	3134      	adds	r1, #52	; 0x34
  402eb2:	4b25      	ldr	r3, [pc, #148]	; (402f48 <vTaskSwitchContext+0xc4>)
  402eb4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402eb6:	4b25      	ldr	r3, [pc, #148]	; (402f4c <vTaskSwitchContext+0xc8>)
  402eb8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402eba:	fab3 f383 	clz	r3, r3
  402ebe:	b2db      	uxtb	r3, r3
  402ec0:	f1c3 031f 	rsb	r3, r3, #31
  402ec4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402ec8:	4a21      	ldr	r2, [pc, #132]	; (402f50 <vTaskSwitchContext+0xcc>)
  402eca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402ece:	b9ba      	cbnz	r2, 402f00 <vTaskSwitchContext+0x7c>
	__asm volatile
  402ed0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ed4:	b672      	cpsid	i
  402ed6:	f383 8811 	msr	BASEPRI, r3
  402eda:	f3bf 8f6f 	isb	sy
  402ede:	f3bf 8f4f 	dsb	sy
  402ee2:	b662      	cpsie	i
  402ee4:	e7fe      	b.n	402ee4 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402ee6:	2201      	movs	r2, #1
  402ee8:	4b15      	ldr	r3, [pc, #84]	; (402f40 <vTaskSwitchContext+0xbc>)
  402eea:	601a      	str	r2, [r3, #0]
  402eec:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402eee:	689a      	ldr	r2, [r3, #8]
  402ef0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402ef4:	d1d9      	bne.n	402eaa <vTaskSwitchContext+0x26>
  402ef6:	68db      	ldr	r3, [r3, #12]
  402ef8:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402efc:	d1d5      	bne.n	402eaa <vTaskSwitchContext+0x26>
  402efe:	e7da      	b.n	402eb6 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402f00:	4a13      	ldr	r2, [pc, #76]	; (402f50 <vTaskSwitchContext+0xcc>)
  402f02:	0099      	lsls	r1, r3, #2
  402f04:	18c8      	adds	r0, r1, r3
  402f06:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402f0a:	6844      	ldr	r4, [r0, #4]
  402f0c:	6864      	ldr	r4, [r4, #4]
  402f0e:	6044      	str	r4, [r0, #4]
  402f10:	4419      	add	r1, r3
  402f12:	4602      	mov	r2, r0
  402f14:	3208      	adds	r2, #8
  402f16:	4294      	cmp	r4, r2
  402f18:	d009      	beq.n	402f2e <vTaskSwitchContext+0xaa>
  402f1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402f1e:	4a0c      	ldr	r2, [pc, #48]	; (402f50 <vTaskSwitchContext+0xcc>)
  402f20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402f24:	685b      	ldr	r3, [r3, #4]
  402f26:	68da      	ldr	r2, [r3, #12]
  402f28:	4b06      	ldr	r3, [pc, #24]	; (402f44 <vTaskSwitchContext+0xc0>)
  402f2a:	601a      	str	r2, [r3, #0]
  402f2c:	bd10      	pop	{r4, pc}
  402f2e:	6860      	ldr	r0, [r4, #4]
  402f30:	4a07      	ldr	r2, [pc, #28]	; (402f50 <vTaskSwitchContext+0xcc>)
  402f32:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402f36:	6050      	str	r0, [r2, #4]
  402f38:	e7ef      	b.n	402f1a <vTaskSwitchContext+0x96>
  402f3a:	bf00      	nop
  402f3c:	20400ce0 	.word	0x20400ce0
  402f40:	20400d64 	.word	0x20400d64
  402f44:	20400c68 	.word	0x20400c68
  402f48:	00403e99 	.word	0x00403e99
  402f4c:	20400cec 	.word	0x20400cec
  402f50:	20400c74 	.word	0x20400c74

00402f54 <vTaskPlaceOnEventList>:
{
  402f54:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  402f56:	b1e0      	cbz	r0, 402f92 <vTaskPlaceOnEventList+0x3e>
  402f58:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402f5a:	4d17      	ldr	r5, [pc, #92]	; (402fb8 <vTaskPlaceOnEventList+0x64>)
  402f5c:	6829      	ldr	r1, [r5, #0]
  402f5e:	3118      	adds	r1, #24
  402f60:	4b16      	ldr	r3, [pc, #88]	; (402fbc <vTaskPlaceOnEventList+0x68>)
  402f62:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402f64:	6828      	ldr	r0, [r5, #0]
  402f66:	3004      	adds	r0, #4
  402f68:	4b15      	ldr	r3, [pc, #84]	; (402fc0 <vTaskPlaceOnEventList+0x6c>)
  402f6a:	4798      	blx	r3
  402f6c:	b940      	cbnz	r0, 402f80 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402f6e:	682a      	ldr	r2, [r5, #0]
  402f70:	4914      	ldr	r1, [pc, #80]	; (402fc4 <vTaskPlaceOnEventList+0x70>)
  402f72:	680b      	ldr	r3, [r1, #0]
  402f74:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402f76:	2201      	movs	r2, #1
  402f78:	4082      	lsls	r2, r0
  402f7a:	ea23 0302 	bic.w	r3, r3, r2
  402f7e:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402f80:	f1b4 3fff 	cmp.w	r4, #4294967295
  402f84:	d010      	beq.n	402fa8 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402f86:	4b10      	ldr	r3, [pc, #64]	; (402fc8 <vTaskPlaceOnEventList+0x74>)
  402f88:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402f8a:	4420      	add	r0, r4
  402f8c:	4b0f      	ldr	r3, [pc, #60]	; (402fcc <vTaskPlaceOnEventList+0x78>)
  402f8e:	4798      	blx	r3
  402f90:	bd38      	pop	{r3, r4, r5, pc}
  402f92:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f96:	b672      	cpsid	i
  402f98:	f383 8811 	msr	BASEPRI, r3
  402f9c:	f3bf 8f6f 	isb	sy
  402fa0:	f3bf 8f4f 	dsb	sy
  402fa4:	b662      	cpsie	i
  402fa6:	e7fe      	b.n	402fa6 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402fa8:	4b03      	ldr	r3, [pc, #12]	; (402fb8 <vTaskPlaceOnEventList+0x64>)
  402faa:	6819      	ldr	r1, [r3, #0]
  402fac:	3104      	adds	r1, #4
  402fae:	4808      	ldr	r0, [pc, #32]	; (402fd0 <vTaskPlaceOnEventList+0x7c>)
  402fb0:	4b08      	ldr	r3, [pc, #32]	; (402fd4 <vTaskPlaceOnEventList+0x80>)
  402fb2:	4798      	blx	r3
  402fb4:	bd38      	pop	{r3, r4, r5, pc}
  402fb6:	bf00      	nop
  402fb8:	20400c68 	.word	0x20400c68
  402fbc:	00401a65 	.word	0x00401a65
  402fc0:	00401a99 	.word	0x00401a99
  402fc4:	20400cec 	.word	0x20400cec
  402fc8:	20400d60 	.word	0x20400d60
  402fcc:	004027bd 	.word	0x004027bd
  402fd0:	20400d38 	.word	0x20400d38
  402fd4:	00401a4d 	.word	0x00401a4d

00402fd8 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402fd8:	b1e8      	cbz	r0, 403016 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  402fda:	b570      	push	{r4, r5, r6, lr}
  402fdc:	4615      	mov	r5, r2
  402fde:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402fe0:	4e16      	ldr	r6, [pc, #88]	; (40303c <vTaskPlaceOnEventListRestricted+0x64>)
  402fe2:	6831      	ldr	r1, [r6, #0]
  402fe4:	3118      	adds	r1, #24
  402fe6:	4b16      	ldr	r3, [pc, #88]	; (403040 <vTaskPlaceOnEventListRestricted+0x68>)
  402fe8:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402fea:	6830      	ldr	r0, [r6, #0]
  402fec:	3004      	adds	r0, #4
  402fee:	4b15      	ldr	r3, [pc, #84]	; (403044 <vTaskPlaceOnEventListRestricted+0x6c>)
  402ff0:	4798      	blx	r3
  402ff2:	b940      	cbnz	r0, 403006 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402ff4:	6832      	ldr	r2, [r6, #0]
  402ff6:	4914      	ldr	r1, [pc, #80]	; (403048 <vTaskPlaceOnEventListRestricted+0x70>)
  402ff8:	680b      	ldr	r3, [r1, #0]
  402ffa:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402ffc:	2201      	movs	r2, #1
  402ffe:	4082      	lsls	r2, r0
  403000:	ea23 0302 	bic.w	r3, r3, r2
  403004:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  403006:	2d01      	cmp	r5, #1
  403008:	d010      	beq.n	40302c <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  40300a:	4b10      	ldr	r3, [pc, #64]	; (40304c <vTaskPlaceOnEventListRestricted+0x74>)
  40300c:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40300e:	4420      	add	r0, r4
  403010:	4b0f      	ldr	r3, [pc, #60]	; (403050 <vTaskPlaceOnEventListRestricted+0x78>)
  403012:	4798      	blx	r3
  403014:	bd70      	pop	{r4, r5, r6, pc}
  403016:	f04f 0380 	mov.w	r3, #128	; 0x80
  40301a:	b672      	cpsid	i
  40301c:	f383 8811 	msr	BASEPRI, r3
  403020:	f3bf 8f6f 	isb	sy
  403024:	f3bf 8f4f 	dsb	sy
  403028:	b662      	cpsie	i
  40302a:	e7fe      	b.n	40302a <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40302c:	4b03      	ldr	r3, [pc, #12]	; (40303c <vTaskPlaceOnEventListRestricted+0x64>)
  40302e:	6819      	ldr	r1, [r3, #0]
  403030:	3104      	adds	r1, #4
  403032:	4808      	ldr	r0, [pc, #32]	; (403054 <vTaskPlaceOnEventListRestricted+0x7c>)
  403034:	4b02      	ldr	r3, [pc, #8]	; (403040 <vTaskPlaceOnEventListRestricted+0x68>)
  403036:	4798      	blx	r3
  403038:	bd70      	pop	{r4, r5, r6, pc}
  40303a:	bf00      	nop
  40303c:	20400c68 	.word	0x20400c68
  403040:	00401a4d 	.word	0x00401a4d
  403044:	00401a99 	.word	0x00401a99
  403048:	20400cec 	.word	0x20400cec
  40304c:	20400d60 	.word	0x20400d60
  403050:	004027bd 	.word	0x004027bd
  403054:	20400d38 	.word	0x20400d38

00403058 <xTaskRemoveFromEventList>:
{
  403058:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40305a:	68c3      	ldr	r3, [r0, #12]
  40305c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40305e:	b324      	cbz	r4, 4030aa <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  403060:	f104 0518 	add.w	r5, r4, #24
  403064:	4628      	mov	r0, r5
  403066:	4b1a      	ldr	r3, [pc, #104]	; (4030d0 <xTaskRemoveFromEventList+0x78>)
  403068:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40306a:	4b1a      	ldr	r3, [pc, #104]	; (4030d4 <xTaskRemoveFromEventList+0x7c>)
  40306c:	681b      	ldr	r3, [r3, #0]
  40306e:	bb3b      	cbnz	r3, 4030c0 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  403070:	1d25      	adds	r5, r4, #4
  403072:	4628      	mov	r0, r5
  403074:	4b16      	ldr	r3, [pc, #88]	; (4030d0 <xTaskRemoveFromEventList+0x78>)
  403076:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  403078:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40307a:	4a17      	ldr	r2, [pc, #92]	; (4030d8 <xTaskRemoveFromEventList+0x80>)
  40307c:	6811      	ldr	r1, [r2, #0]
  40307e:	2301      	movs	r3, #1
  403080:	4083      	lsls	r3, r0
  403082:	430b      	orrs	r3, r1
  403084:	6013      	str	r3, [r2, #0]
  403086:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40308a:	4629      	mov	r1, r5
  40308c:	4b13      	ldr	r3, [pc, #76]	; (4030dc <xTaskRemoveFromEventList+0x84>)
  40308e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403092:	4b13      	ldr	r3, [pc, #76]	; (4030e0 <xTaskRemoveFromEventList+0x88>)
  403094:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  403096:	4b13      	ldr	r3, [pc, #76]	; (4030e4 <xTaskRemoveFromEventList+0x8c>)
  403098:	681b      	ldr	r3, [r3, #0]
  40309a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40309e:	429a      	cmp	r2, r3
  4030a0:	d913      	bls.n	4030ca <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  4030a2:	2001      	movs	r0, #1
  4030a4:	4b10      	ldr	r3, [pc, #64]	; (4030e8 <xTaskRemoveFromEventList+0x90>)
  4030a6:	6018      	str	r0, [r3, #0]
  4030a8:	bd38      	pop	{r3, r4, r5, pc}
  4030aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030ae:	b672      	cpsid	i
  4030b0:	f383 8811 	msr	BASEPRI, r3
  4030b4:	f3bf 8f6f 	isb	sy
  4030b8:	f3bf 8f4f 	dsb	sy
  4030bc:	b662      	cpsie	i
  4030be:	e7fe      	b.n	4030be <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4030c0:	4629      	mov	r1, r5
  4030c2:	480a      	ldr	r0, [pc, #40]	; (4030ec <xTaskRemoveFromEventList+0x94>)
  4030c4:	4b06      	ldr	r3, [pc, #24]	; (4030e0 <xTaskRemoveFromEventList+0x88>)
  4030c6:	4798      	blx	r3
  4030c8:	e7e5      	b.n	403096 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  4030ca:	2000      	movs	r0, #0
}
  4030cc:	bd38      	pop	{r3, r4, r5, pc}
  4030ce:	bf00      	nop
  4030d0:	00401a99 	.word	0x00401a99
  4030d4:	20400ce0 	.word	0x20400ce0
  4030d8:	20400cec 	.word	0x20400cec
  4030dc:	20400c74 	.word	0x20400c74
  4030e0:	00401a4d 	.word	0x00401a4d
  4030e4:	20400c68 	.word	0x20400c68
  4030e8:	20400d64 	.word	0x20400d64
  4030ec:	20400d20 	.word	0x20400d20

004030f0 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  4030f0:	b130      	cbz	r0, 403100 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4030f2:	4a09      	ldr	r2, [pc, #36]	; (403118 <vTaskSetTimeOutState+0x28>)
  4030f4:	6812      	ldr	r2, [r2, #0]
  4030f6:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4030f8:	4a08      	ldr	r2, [pc, #32]	; (40311c <vTaskSetTimeOutState+0x2c>)
  4030fa:	6812      	ldr	r2, [r2, #0]
  4030fc:	6042      	str	r2, [r0, #4]
  4030fe:	4770      	bx	lr
  403100:	f04f 0380 	mov.w	r3, #128	; 0x80
  403104:	b672      	cpsid	i
  403106:	f383 8811 	msr	BASEPRI, r3
  40310a:	f3bf 8f6f 	isb	sy
  40310e:	f3bf 8f4f 	dsb	sy
  403112:	b662      	cpsie	i
  403114:	e7fe      	b.n	403114 <vTaskSetTimeOutState+0x24>
  403116:	bf00      	nop
  403118:	20400d1c 	.word	0x20400d1c
  40311c:	20400d60 	.word	0x20400d60

00403120 <xTaskCheckForTimeOut>:
{
  403120:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  403122:	b1c0      	cbz	r0, 403156 <xTaskCheckForTimeOut+0x36>
  403124:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  403126:	b309      	cbz	r1, 40316c <xTaskCheckForTimeOut+0x4c>
  403128:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40312a:	4b1d      	ldr	r3, [pc, #116]	; (4031a0 <xTaskCheckForTimeOut+0x80>)
  40312c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  40312e:	4b1d      	ldr	r3, [pc, #116]	; (4031a4 <xTaskCheckForTimeOut+0x84>)
  403130:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  403132:	682b      	ldr	r3, [r5, #0]
  403134:	f1b3 3fff 	cmp.w	r3, #4294967295
  403138:	d02e      	beq.n	403198 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40313a:	491b      	ldr	r1, [pc, #108]	; (4031a8 <xTaskCheckForTimeOut+0x88>)
  40313c:	6809      	ldr	r1, [r1, #0]
  40313e:	6820      	ldr	r0, [r4, #0]
  403140:	4288      	cmp	r0, r1
  403142:	d002      	beq.n	40314a <xTaskCheckForTimeOut+0x2a>
  403144:	6861      	ldr	r1, [r4, #4]
  403146:	428a      	cmp	r2, r1
  403148:	d228      	bcs.n	40319c <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  40314a:	6861      	ldr	r1, [r4, #4]
  40314c:	1a50      	subs	r0, r2, r1
  40314e:	4283      	cmp	r3, r0
  403150:	d817      	bhi.n	403182 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  403152:	2401      	movs	r4, #1
  403154:	e01c      	b.n	403190 <xTaskCheckForTimeOut+0x70>
  403156:	f04f 0380 	mov.w	r3, #128	; 0x80
  40315a:	b672      	cpsid	i
  40315c:	f383 8811 	msr	BASEPRI, r3
  403160:	f3bf 8f6f 	isb	sy
  403164:	f3bf 8f4f 	dsb	sy
  403168:	b662      	cpsie	i
  40316a:	e7fe      	b.n	40316a <xTaskCheckForTimeOut+0x4a>
  40316c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403170:	b672      	cpsid	i
  403172:	f383 8811 	msr	BASEPRI, r3
  403176:	f3bf 8f6f 	isb	sy
  40317a:	f3bf 8f4f 	dsb	sy
  40317e:	b662      	cpsie	i
  403180:	e7fe      	b.n	403180 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  403182:	1a9b      	subs	r3, r3, r2
  403184:	440b      	add	r3, r1
  403186:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  403188:	4620      	mov	r0, r4
  40318a:	4b08      	ldr	r3, [pc, #32]	; (4031ac <xTaskCheckForTimeOut+0x8c>)
  40318c:	4798      	blx	r3
			xReturn = pdFALSE;
  40318e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  403190:	4b07      	ldr	r3, [pc, #28]	; (4031b0 <xTaskCheckForTimeOut+0x90>)
  403192:	4798      	blx	r3
}
  403194:	4620      	mov	r0, r4
  403196:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  403198:	2400      	movs	r4, #0
  40319a:	e7f9      	b.n	403190 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  40319c:	2401      	movs	r4, #1
  40319e:	e7f7      	b.n	403190 <xTaskCheckForTimeOut+0x70>
  4031a0:	00401b7d 	.word	0x00401b7d
  4031a4:	20400d60 	.word	0x20400d60
  4031a8:	20400d1c 	.word	0x20400d1c
  4031ac:	004030f1 	.word	0x004030f1
  4031b0:	00401bc9 	.word	0x00401bc9

004031b4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4031b4:	2201      	movs	r2, #1
  4031b6:	4b01      	ldr	r3, [pc, #4]	; (4031bc <vTaskMissedYield+0x8>)
  4031b8:	601a      	str	r2, [r3, #0]
  4031ba:	4770      	bx	lr
  4031bc:	20400d64 	.word	0x20400d64

004031c0 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4031c0:	4b05      	ldr	r3, [pc, #20]	; (4031d8 <xTaskGetSchedulerState+0x18>)
  4031c2:	681b      	ldr	r3, [r3, #0]
  4031c4:	b133      	cbz	r3, 4031d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4031c6:	4b05      	ldr	r3, [pc, #20]	; (4031dc <xTaskGetSchedulerState+0x1c>)
  4031c8:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4031ca:	2b00      	cmp	r3, #0
  4031cc:	bf0c      	ite	eq
  4031ce:	2002      	moveq	r0, #2
  4031d0:	2000      	movne	r0, #0
  4031d2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4031d4:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4031d6:	4770      	bx	lr
  4031d8:	20400d34 	.word	0x20400d34
  4031dc:	20400ce0 	.word	0x20400ce0

004031e0 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4031e0:	2800      	cmp	r0, #0
  4031e2:	d044      	beq.n	40326e <vTaskPriorityInherit+0x8e>
	{
  4031e4:	b538      	push	{r3, r4, r5, lr}
  4031e6:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4031e8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4031ea:	4921      	ldr	r1, [pc, #132]	; (403270 <vTaskPriorityInherit+0x90>)
  4031ec:	6809      	ldr	r1, [r1, #0]
  4031ee:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4031f0:	428a      	cmp	r2, r1
  4031f2:	d214      	bcs.n	40321e <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4031f4:	6981      	ldr	r1, [r0, #24]
  4031f6:	2900      	cmp	r1, #0
  4031f8:	db05      	blt.n	403206 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4031fa:	491d      	ldr	r1, [pc, #116]	; (403270 <vTaskPriorityInherit+0x90>)
  4031fc:	6809      	ldr	r1, [r1, #0]
  4031fe:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  403200:	f1c1 0105 	rsb	r1, r1, #5
  403204:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  403206:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40320a:	491a      	ldr	r1, [pc, #104]	; (403274 <vTaskPriorityInherit+0x94>)
  40320c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  403210:	6961      	ldr	r1, [r4, #20]
  403212:	4291      	cmp	r1, r2
  403214:	d004      	beq.n	403220 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403216:	4a16      	ldr	r2, [pc, #88]	; (403270 <vTaskPriorityInherit+0x90>)
  403218:	6812      	ldr	r2, [r2, #0]
  40321a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  40321c:	62e2      	str	r2, [r4, #44]	; 0x2c
  40321e:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403220:	1d25      	adds	r5, r4, #4
  403222:	4628      	mov	r0, r5
  403224:	4b14      	ldr	r3, [pc, #80]	; (403278 <vTaskPriorityInherit+0x98>)
  403226:	4798      	blx	r3
  403228:	b970      	cbnz	r0, 403248 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40322a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40322c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403230:	4a10      	ldr	r2, [pc, #64]	; (403274 <vTaskPriorityInherit+0x94>)
  403232:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  403236:	b93a      	cbnz	r2, 403248 <vTaskPriorityInherit+0x68>
  403238:	4810      	ldr	r0, [pc, #64]	; (40327c <vTaskPriorityInherit+0x9c>)
  40323a:	6802      	ldr	r2, [r0, #0]
  40323c:	2101      	movs	r1, #1
  40323e:	fa01 f303 	lsl.w	r3, r1, r3
  403242:	ea22 0303 	bic.w	r3, r2, r3
  403246:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403248:	4b09      	ldr	r3, [pc, #36]	; (403270 <vTaskPriorityInherit+0x90>)
  40324a:	681b      	ldr	r3, [r3, #0]
  40324c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  40324e:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  403250:	4a0a      	ldr	r2, [pc, #40]	; (40327c <vTaskPriorityInherit+0x9c>)
  403252:	6811      	ldr	r1, [r2, #0]
  403254:	2301      	movs	r3, #1
  403256:	4083      	lsls	r3, r0
  403258:	430b      	orrs	r3, r1
  40325a:	6013      	str	r3, [r2, #0]
  40325c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403260:	4629      	mov	r1, r5
  403262:	4b04      	ldr	r3, [pc, #16]	; (403274 <vTaskPriorityInherit+0x94>)
  403264:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403268:	4b05      	ldr	r3, [pc, #20]	; (403280 <vTaskPriorityInherit+0xa0>)
  40326a:	4798      	blx	r3
  40326c:	bd38      	pop	{r3, r4, r5, pc}
  40326e:	4770      	bx	lr
  403270:	20400c68 	.word	0x20400c68
  403274:	20400c74 	.word	0x20400c74
  403278:	00401a99 	.word	0x00401a99
  40327c:	20400cec 	.word	0x20400cec
  403280:	00401a4d 	.word	0x00401a4d

00403284 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  403284:	2800      	cmp	r0, #0
  403286:	d04d      	beq.n	403324 <xTaskPriorityDisinherit+0xa0>
	{
  403288:	b538      	push	{r3, r4, r5, lr}
  40328a:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  40328c:	4a27      	ldr	r2, [pc, #156]	; (40332c <xTaskPriorityDisinherit+0xa8>)
  40328e:	6812      	ldr	r2, [r2, #0]
  403290:	4290      	cmp	r0, r2
  403292:	d00a      	beq.n	4032aa <xTaskPriorityDisinherit+0x26>
  403294:	f04f 0380 	mov.w	r3, #128	; 0x80
  403298:	b672      	cpsid	i
  40329a:	f383 8811 	msr	BASEPRI, r3
  40329e:	f3bf 8f6f 	isb	sy
  4032a2:	f3bf 8f4f 	dsb	sy
  4032a6:	b662      	cpsie	i
  4032a8:	e7fe      	b.n	4032a8 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  4032aa:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4032ac:	b952      	cbnz	r2, 4032c4 <xTaskPriorityDisinherit+0x40>
  4032ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032b2:	b672      	cpsid	i
  4032b4:	f383 8811 	msr	BASEPRI, r3
  4032b8:	f3bf 8f6f 	isb	sy
  4032bc:	f3bf 8f4f 	dsb	sy
  4032c0:	b662      	cpsie	i
  4032c2:	e7fe      	b.n	4032c2 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  4032c4:	3a01      	subs	r2, #1
  4032c6:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4032c8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4032ca:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4032cc:	4288      	cmp	r0, r1
  4032ce:	d02b      	beq.n	403328 <xTaskPriorityDisinherit+0xa4>
  4032d0:	bb52      	cbnz	r2, 403328 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4032d2:	1d25      	adds	r5, r4, #4
  4032d4:	4628      	mov	r0, r5
  4032d6:	4b16      	ldr	r3, [pc, #88]	; (403330 <xTaskPriorityDisinherit+0xac>)
  4032d8:	4798      	blx	r3
  4032da:	b968      	cbnz	r0, 4032f8 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4032dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4032de:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4032e2:	4b14      	ldr	r3, [pc, #80]	; (403334 <xTaskPriorityDisinherit+0xb0>)
  4032e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4032e8:	b933      	cbnz	r3, 4032f8 <xTaskPriorityDisinherit+0x74>
  4032ea:	4813      	ldr	r0, [pc, #76]	; (403338 <xTaskPriorityDisinherit+0xb4>)
  4032ec:	6803      	ldr	r3, [r0, #0]
  4032ee:	2201      	movs	r2, #1
  4032f0:	408a      	lsls	r2, r1
  4032f2:	ea23 0302 	bic.w	r3, r3, r2
  4032f6:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4032f8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4032fa:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4032fc:	f1c0 0305 	rsb	r3, r0, #5
  403300:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  403302:	4a0d      	ldr	r2, [pc, #52]	; (403338 <xTaskPriorityDisinherit+0xb4>)
  403304:	6811      	ldr	r1, [r2, #0]
  403306:	2401      	movs	r4, #1
  403308:	fa04 f300 	lsl.w	r3, r4, r0
  40330c:	430b      	orrs	r3, r1
  40330e:	6013      	str	r3, [r2, #0]
  403310:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403314:	4629      	mov	r1, r5
  403316:	4b07      	ldr	r3, [pc, #28]	; (403334 <xTaskPriorityDisinherit+0xb0>)
  403318:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40331c:	4b07      	ldr	r3, [pc, #28]	; (40333c <xTaskPriorityDisinherit+0xb8>)
  40331e:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  403320:	4620      	mov	r0, r4
  403322:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  403324:	2000      	movs	r0, #0
  403326:	4770      	bx	lr
  403328:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40332a:	bd38      	pop	{r3, r4, r5, pc}
  40332c:	20400c68 	.word	0x20400c68
  403330:	00401a99 	.word	0x00401a99
  403334:	20400c74 	.word	0x20400c74
  403338:	20400cec 	.word	0x20400cec
  40333c:	00401a4d 	.word	0x00401a4d

00403340 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  403340:	4b05      	ldr	r3, [pc, #20]	; (403358 <pvTaskIncrementMutexHeldCount+0x18>)
  403342:	681b      	ldr	r3, [r3, #0]
  403344:	b123      	cbz	r3, 403350 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  403346:	4b04      	ldr	r3, [pc, #16]	; (403358 <pvTaskIncrementMutexHeldCount+0x18>)
  403348:	681a      	ldr	r2, [r3, #0]
  40334a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  40334c:	3301      	adds	r3, #1
  40334e:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  403350:	4b01      	ldr	r3, [pc, #4]	; (403358 <pvTaskIncrementMutexHeldCount+0x18>)
  403352:	6818      	ldr	r0, [r3, #0]
	}
  403354:	4770      	bx	lr
  403356:	bf00      	nop
  403358:	20400c68 	.word	0x20400c68

0040335c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  40335c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40335e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403360:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  403362:	4291      	cmp	r1, r2
  403364:	d80c      	bhi.n	403380 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  403366:	1ad2      	subs	r2, r2, r3
  403368:	6983      	ldr	r3, [r0, #24]
  40336a:	429a      	cmp	r2, r3
  40336c:	d301      	bcc.n	403372 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40336e:	2001      	movs	r0, #1
  403370:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  403372:	1d01      	adds	r1, r0, #4
  403374:	4b09      	ldr	r3, [pc, #36]	; (40339c <prvInsertTimerInActiveList+0x40>)
  403376:	6818      	ldr	r0, [r3, #0]
  403378:	4b09      	ldr	r3, [pc, #36]	; (4033a0 <prvInsertTimerInActiveList+0x44>)
  40337a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40337c:	2000      	movs	r0, #0
  40337e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  403380:	429a      	cmp	r2, r3
  403382:	d203      	bcs.n	40338c <prvInsertTimerInActiveList+0x30>
  403384:	4299      	cmp	r1, r3
  403386:	d301      	bcc.n	40338c <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  403388:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40338a:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40338c:	1d01      	adds	r1, r0, #4
  40338e:	4b05      	ldr	r3, [pc, #20]	; (4033a4 <prvInsertTimerInActiveList+0x48>)
  403390:	6818      	ldr	r0, [r3, #0]
  403392:	4b03      	ldr	r3, [pc, #12]	; (4033a0 <prvInsertTimerInActiveList+0x44>)
  403394:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403396:	2000      	movs	r0, #0
  403398:	bd08      	pop	{r3, pc}
  40339a:	bf00      	nop
  40339c:	20400d6c 	.word	0x20400d6c
  4033a0:	00401a65 	.word	0x00401a65
  4033a4:	20400d68 	.word	0x20400d68

004033a8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4033a8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4033aa:	4b15      	ldr	r3, [pc, #84]	; (403400 <prvCheckForValidListAndQueue+0x58>)
  4033ac:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4033ae:	4b15      	ldr	r3, [pc, #84]	; (403404 <prvCheckForValidListAndQueue+0x5c>)
  4033b0:	681b      	ldr	r3, [r3, #0]
  4033b2:	b113      	cbz	r3, 4033ba <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4033b4:	4b14      	ldr	r3, [pc, #80]	; (403408 <prvCheckForValidListAndQueue+0x60>)
  4033b6:	4798      	blx	r3
  4033b8:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4033ba:	4d14      	ldr	r5, [pc, #80]	; (40340c <prvCheckForValidListAndQueue+0x64>)
  4033bc:	4628      	mov	r0, r5
  4033be:	4e14      	ldr	r6, [pc, #80]	; (403410 <prvCheckForValidListAndQueue+0x68>)
  4033c0:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4033c2:	4c14      	ldr	r4, [pc, #80]	; (403414 <prvCheckForValidListAndQueue+0x6c>)
  4033c4:	4620      	mov	r0, r4
  4033c6:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4033c8:	4b13      	ldr	r3, [pc, #76]	; (403418 <prvCheckForValidListAndQueue+0x70>)
  4033ca:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4033cc:	4b13      	ldr	r3, [pc, #76]	; (40341c <prvCheckForValidListAndQueue+0x74>)
  4033ce:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4033d0:	2200      	movs	r2, #0
  4033d2:	2110      	movs	r1, #16
  4033d4:	2005      	movs	r0, #5
  4033d6:	4b12      	ldr	r3, [pc, #72]	; (403420 <prvCheckForValidListAndQueue+0x78>)
  4033d8:	4798      	blx	r3
  4033da:	4b0a      	ldr	r3, [pc, #40]	; (403404 <prvCheckForValidListAndQueue+0x5c>)
  4033dc:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  4033de:	b118      	cbz	r0, 4033e8 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4033e0:	4910      	ldr	r1, [pc, #64]	; (403424 <prvCheckForValidListAndQueue+0x7c>)
  4033e2:	4b11      	ldr	r3, [pc, #68]	; (403428 <prvCheckForValidListAndQueue+0x80>)
  4033e4:	4798      	blx	r3
  4033e6:	e7e5      	b.n	4033b4 <prvCheckForValidListAndQueue+0xc>
  4033e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4033ec:	b672      	cpsid	i
  4033ee:	f383 8811 	msr	BASEPRI, r3
  4033f2:	f3bf 8f6f 	isb	sy
  4033f6:	f3bf 8f4f 	dsb	sy
  4033fa:	b662      	cpsie	i
  4033fc:	e7fe      	b.n	4033fc <prvCheckForValidListAndQueue+0x54>
  4033fe:	bf00      	nop
  403400:	00401b7d 	.word	0x00401b7d
  403404:	20400d9c 	.word	0x20400d9c
  403408:	00401bc9 	.word	0x00401bc9
  40340c:	20400d70 	.word	0x20400d70
  403410:	00401a31 	.word	0x00401a31
  403414:	20400d84 	.word	0x20400d84
  403418:	20400d68 	.word	0x20400d68
  40341c:	20400d6c 	.word	0x20400d6c
  403420:	0040209d 	.word	0x0040209d
  403424:	004077e0 	.word	0x004077e0
  403428:	00402705 	.word	0x00402705

0040342c <xTimerCreateTimerTask>:
{
  40342c:	b510      	push	{r4, lr}
  40342e:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  403430:	4b0f      	ldr	r3, [pc, #60]	; (403470 <xTimerCreateTimerTask+0x44>)
  403432:	4798      	blx	r3
	if( xTimerQueue != NULL )
  403434:	4b0f      	ldr	r3, [pc, #60]	; (403474 <xTimerCreateTimerTask+0x48>)
  403436:	681b      	ldr	r3, [r3, #0]
  403438:	b173      	cbz	r3, 403458 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40343a:	2300      	movs	r3, #0
  40343c:	9303      	str	r3, [sp, #12]
  40343e:	9302      	str	r3, [sp, #8]
  403440:	9301      	str	r3, [sp, #4]
  403442:	2204      	movs	r2, #4
  403444:	9200      	str	r2, [sp, #0]
  403446:	f44f 7282 	mov.w	r2, #260	; 0x104
  40344a:	490b      	ldr	r1, [pc, #44]	; (403478 <xTimerCreateTimerTask+0x4c>)
  40344c:	480b      	ldr	r0, [pc, #44]	; (40347c <xTimerCreateTimerTask+0x50>)
  40344e:	4c0c      	ldr	r4, [pc, #48]	; (403480 <xTimerCreateTimerTask+0x54>)
  403450:	47a0      	blx	r4
	configASSERT( xReturn );
  403452:	b108      	cbz	r0, 403458 <xTimerCreateTimerTask+0x2c>
}
  403454:	b004      	add	sp, #16
  403456:	bd10      	pop	{r4, pc}
  403458:	f04f 0380 	mov.w	r3, #128	; 0x80
  40345c:	b672      	cpsid	i
  40345e:	f383 8811 	msr	BASEPRI, r3
  403462:	f3bf 8f6f 	isb	sy
  403466:	f3bf 8f4f 	dsb	sy
  40346a:	b662      	cpsie	i
  40346c:	e7fe      	b.n	40346c <xTimerCreateTimerTask+0x40>
  40346e:	bf00      	nop
  403470:	004033a9 	.word	0x004033a9
  403474:	20400d9c 	.word	0x20400d9c
  403478:	004077e8 	.word	0x004077e8
  40347c:	004035ad 	.word	0x004035ad
  403480:	00402815 	.word	0x00402815

00403484 <xTimerGenericCommand>:
	configASSERT( xTimer );
  403484:	b1d8      	cbz	r0, 4034be <xTimerGenericCommand+0x3a>
{
  403486:	b530      	push	{r4, r5, lr}
  403488:	b085      	sub	sp, #20
  40348a:	4615      	mov	r5, r2
  40348c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  40348e:	4a15      	ldr	r2, [pc, #84]	; (4034e4 <xTimerGenericCommand+0x60>)
  403490:	6810      	ldr	r0, [r2, #0]
  403492:	b320      	cbz	r0, 4034de <xTimerGenericCommand+0x5a>
  403494:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  403496:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  403498:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  40349a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  40349c:	2905      	cmp	r1, #5
  40349e:	dc19      	bgt.n	4034d4 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4034a0:	4b11      	ldr	r3, [pc, #68]	; (4034e8 <xTimerGenericCommand+0x64>)
  4034a2:	4798      	blx	r3
  4034a4:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4034a6:	f04f 0300 	mov.w	r3, #0
  4034aa:	bf0c      	ite	eq
  4034ac:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4034ae:	461a      	movne	r2, r3
  4034b0:	4669      	mov	r1, sp
  4034b2:	480c      	ldr	r0, [pc, #48]	; (4034e4 <xTimerGenericCommand+0x60>)
  4034b4:	6800      	ldr	r0, [r0, #0]
  4034b6:	4c0d      	ldr	r4, [pc, #52]	; (4034ec <xTimerGenericCommand+0x68>)
  4034b8:	47a0      	blx	r4
}
  4034ba:	b005      	add	sp, #20
  4034bc:	bd30      	pop	{r4, r5, pc}
  4034be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4034c2:	b672      	cpsid	i
  4034c4:	f383 8811 	msr	BASEPRI, r3
  4034c8:	f3bf 8f6f 	isb	sy
  4034cc:	f3bf 8f4f 	dsb	sy
  4034d0:	b662      	cpsie	i
  4034d2:	e7fe      	b.n	4034d2 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4034d4:	2300      	movs	r3, #0
  4034d6:	4669      	mov	r1, sp
  4034d8:	4c05      	ldr	r4, [pc, #20]	; (4034f0 <xTimerGenericCommand+0x6c>)
  4034da:	47a0      	blx	r4
  4034dc:	e7ed      	b.n	4034ba <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  4034de:	2000      	movs	r0, #0
	return xReturn;
  4034e0:	e7eb      	b.n	4034ba <xTimerGenericCommand+0x36>
  4034e2:	bf00      	nop
  4034e4:	20400d9c 	.word	0x20400d9c
  4034e8:	004031c1 	.word	0x004031c1
  4034ec:	00402119 	.word	0x00402119
  4034f0:	00402355 	.word	0x00402355

004034f4 <prvSampleTimeNow>:
{
  4034f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4034f8:	b082      	sub	sp, #8
  4034fa:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  4034fc:	4b24      	ldr	r3, [pc, #144]	; (403590 <prvSampleTimeNow+0x9c>)
  4034fe:	4798      	blx	r3
  403500:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  403502:	4b24      	ldr	r3, [pc, #144]	; (403594 <prvSampleTimeNow+0xa0>)
  403504:	681b      	ldr	r3, [r3, #0]
  403506:	4298      	cmp	r0, r3
  403508:	d31b      	bcc.n	403542 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  40350a:	2300      	movs	r3, #0
  40350c:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  403510:	4b20      	ldr	r3, [pc, #128]	; (403594 <prvSampleTimeNow+0xa0>)
  403512:	601f      	str	r7, [r3, #0]
}
  403514:	4638      	mov	r0, r7
  403516:	b002      	add	sp, #8
  403518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40351c:	2100      	movs	r1, #0
  40351e:	9100      	str	r1, [sp, #0]
  403520:	460b      	mov	r3, r1
  403522:	4652      	mov	r2, sl
  403524:	4620      	mov	r0, r4
  403526:	4c1c      	ldr	r4, [pc, #112]	; (403598 <prvSampleTimeNow+0xa4>)
  403528:	47a0      	blx	r4
				configASSERT( xResult );
  40352a:	b960      	cbnz	r0, 403546 <prvSampleTimeNow+0x52>
  40352c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403530:	b672      	cpsid	i
  403532:	f383 8811 	msr	BASEPRI, r3
  403536:	f3bf 8f6f 	isb	sy
  40353a:	f3bf 8f4f 	dsb	sy
  40353e:	b662      	cpsie	i
  403540:	e7fe      	b.n	403540 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403542:	4d16      	ldr	r5, [pc, #88]	; (40359c <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403544:	4e16      	ldr	r6, [pc, #88]	; (4035a0 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403546:	682b      	ldr	r3, [r5, #0]
  403548:	681a      	ldr	r2, [r3, #0]
  40354a:	b1c2      	cbz	r2, 40357e <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40354c:	68db      	ldr	r3, [r3, #12]
  40354e:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403552:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403554:	f104 0904 	add.w	r9, r4, #4
  403558:	4648      	mov	r0, r9
  40355a:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40355c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40355e:	4620      	mov	r0, r4
  403560:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403562:	69e3      	ldr	r3, [r4, #28]
  403564:	2b01      	cmp	r3, #1
  403566:	d1ee      	bne.n	403546 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  403568:	69a3      	ldr	r3, [r4, #24]
  40356a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  40356c:	459a      	cmp	sl, r3
  40356e:	d2d5      	bcs.n	40351c <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  403570:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403572:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403574:	4649      	mov	r1, r9
  403576:	6828      	ldr	r0, [r5, #0]
  403578:	4b0a      	ldr	r3, [pc, #40]	; (4035a4 <prvSampleTimeNow+0xb0>)
  40357a:	4798      	blx	r3
  40357c:	e7e3      	b.n	403546 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  40357e:	4a0a      	ldr	r2, [pc, #40]	; (4035a8 <prvSampleTimeNow+0xb4>)
  403580:	6810      	ldr	r0, [r2, #0]
  403582:	4906      	ldr	r1, [pc, #24]	; (40359c <prvSampleTimeNow+0xa8>)
  403584:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  403586:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  403588:	2301      	movs	r3, #1
  40358a:	f8c8 3000 	str.w	r3, [r8]
  40358e:	e7bf      	b.n	403510 <prvSampleTimeNow+0x1c>
  403590:	00402ae5 	.word	0x00402ae5
  403594:	20400d98 	.word	0x20400d98
  403598:	00403485 	.word	0x00403485
  40359c:	20400d68 	.word	0x20400d68
  4035a0:	00401a99 	.word	0x00401a99
  4035a4:	00401a65 	.word	0x00401a65
  4035a8:	20400d6c 	.word	0x20400d6c

004035ac <prvTimerTask>:
{
  4035ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4035b0:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4035b2:	4e75      	ldr	r6, [pc, #468]	; (403788 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  4035b4:	4f75      	ldr	r7, [pc, #468]	; (40378c <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  4035b6:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 4037b4 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4035ba:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 4037b8 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4035be:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  4035c0:	681a      	ldr	r2, [r3, #0]
  4035c2:	2a00      	cmp	r2, #0
  4035c4:	f000 80ce 	beq.w	403764 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4035c8:	68db      	ldr	r3, [r3, #12]
  4035ca:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  4035cc:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4035ce:	a804      	add	r0, sp, #16
  4035d0:	4b6f      	ldr	r3, [pc, #444]	; (403790 <prvTimerTask+0x1e4>)
  4035d2:	4798      	blx	r3
  4035d4:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4035d6:	9b04      	ldr	r3, [sp, #16]
  4035d8:	2b00      	cmp	r3, #0
  4035da:	d144      	bne.n	403666 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4035dc:	42a0      	cmp	r0, r4
  4035de:	d212      	bcs.n	403606 <prvTimerTask+0x5a>
  4035e0:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4035e2:	1b61      	subs	r1, r4, r5
  4035e4:	4b6b      	ldr	r3, [pc, #428]	; (403794 <prvTimerTask+0x1e8>)
  4035e6:	6818      	ldr	r0, [r3, #0]
  4035e8:	4b6b      	ldr	r3, [pc, #428]	; (403798 <prvTimerTask+0x1ec>)
  4035ea:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4035ec:	4b6b      	ldr	r3, [pc, #428]	; (40379c <prvTimerTask+0x1f0>)
  4035ee:	4798      	blx	r3
  4035f0:	2800      	cmp	r0, #0
  4035f2:	d13a      	bne.n	40366a <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  4035f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4035f8:	f8c9 3000 	str.w	r3, [r9]
  4035fc:	f3bf 8f4f 	dsb	sy
  403600:	f3bf 8f6f 	isb	sy
  403604:	e031      	b.n	40366a <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  403606:	4b65      	ldr	r3, [pc, #404]	; (40379c <prvTimerTask+0x1f0>)
  403608:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40360a:	6833      	ldr	r3, [r6, #0]
  40360c:	68db      	ldr	r3, [r3, #12]
  40360e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403612:	f10a 0004 	add.w	r0, sl, #4
  403616:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403618:	f8da 301c 	ldr.w	r3, [sl, #28]
  40361c:	2b01      	cmp	r3, #1
  40361e:	d004      	beq.n	40362a <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403620:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403624:	4650      	mov	r0, sl
  403626:	4798      	blx	r3
  403628:	e01f      	b.n	40366a <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  40362a:	f8da 1018 	ldr.w	r1, [sl, #24]
  40362e:	4623      	mov	r3, r4
  403630:	462a      	mov	r2, r5
  403632:	4421      	add	r1, r4
  403634:	4650      	mov	r0, sl
  403636:	4d5a      	ldr	r5, [pc, #360]	; (4037a0 <prvTimerTask+0x1f4>)
  403638:	47a8      	blx	r5
  40363a:	2801      	cmp	r0, #1
  40363c:	d1f0      	bne.n	403620 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40363e:	2100      	movs	r1, #0
  403640:	9100      	str	r1, [sp, #0]
  403642:	460b      	mov	r3, r1
  403644:	4622      	mov	r2, r4
  403646:	4650      	mov	r0, sl
  403648:	4c56      	ldr	r4, [pc, #344]	; (4037a4 <prvTimerTask+0x1f8>)
  40364a:	47a0      	blx	r4
			configASSERT( xResult );
  40364c:	2800      	cmp	r0, #0
  40364e:	d1e7      	bne.n	403620 <prvTimerTask+0x74>
  403650:	f04f 0380 	mov.w	r3, #128	; 0x80
  403654:	b672      	cpsid	i
  403656:	f383 8811 	msr	BASEPRI, r3
  40365a:	f3bf 8f6f 	isb	sy
  40365e:	f3bf 8f4f 	dsb	sy
  403662:	b662      	cpsie	i
  403664:	e7fe      	b.n	403664 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  403666:	4b4d      	ldr	r3, [pc, #308]	; (40379c <prvTimerTask+0x1f0>)
  403668:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40366a:	4d4a      	ldr	r5, [pc, #296]	; (403794 <prvTimerTask+0x1e8>)
  40366c:	4c4e      	ldr	r4, [pc, #312]	; (4037a8 <prvTimerTask+0x1fc>)
  40366e:	e006      	b.n	40367e <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  403670:	9907      	ldr	r1, [sp, #28]
  403672:	9806      	ldr	r0, [sp, #24]
  403674:	9b05      	ldr	r3, [sp, #20]
  403676:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403678:	9b04      	ldr	r3, [sp, #16]
  40367a:	2b00      	cmp	r3, #0
  40367c:	da09      	bge.n	403692 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40367e:	2300      	movs	r3, #0
  403680:	461a      	mov	r2, r3
  403682:	a904      	add	r1, sp, #16
  403684:	6828      	ldr	r0, [r5, #0]
  403686:	47a0      	blx	r4
  403688:	2800      	cmp	r0, #0
  40368a:	d098      	beq.n	4035be <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  40368c:	9b04      	ldr	r3, [sp, #16]
  40368e:	2b00      	cmp	r3, #0
  403690:	dbee      	blt.n	403670 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  403692:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403696:	f8da 3014 	ldr.w	r3, [sl, #20]
  40369a:	b113      	cbz	r3, 4036a2 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40369c:	f10a 0004 	add.w	r0, sl, #4
  4036a0:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4036a2:	a803      	add	r0, sp, #12
  4036a4:	4b3a      	ldr	r3, [pc, #232]	; (403790 <prvTimerTask+0x1e4>)
  4036a6:	4798      	blx	r3
			switch( xMessage.xMessageID )
  4036a8:	9b04      	ldr	r3, [sp, #16]
  4036aa:	2b09      	cmp	r3, #9
  4036ac:	d8e7      	bhi.n	40367e <prvTimerTask+0xd2>
  4036ae:	a201      	add	r2, pc, #4	; (adr r2, 4036b4 <prvTimerTask+0x108>)
  4036b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4036b4:	004036dd 	.word	0x004036dd
  4036b8:	004036dd 	.word	0x004036dd
  4036bc:	004036dd 	.word	0x004036dd
  4036c0:	0040367f 	.word	0x0040367f
  4036c4:	00403731 	.word	0x00403731
  4036c8:	0040375d 	.word	0x0040375d
  4036cc:	004036dd 	.word	0x004036dd
  4036d0:	004036dd 	.word	0x004036dd
  4036d4:	0040367f 	.word	0x0040367f
  4036d8:	00403731 	.word	0x00403731
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4036dc:	9c05      	ldr	r4, [sp, #20]
  4036de:	f8da 1018 	ldr.w	r1, [sl, #24]
  4036e2:	4623      	mov	r3, r4
  4036e4:	4602      	mov	r2, r0
  4036e6:	4421      	add	r1, r4
  4036e8:	4650      	mov	r0, sl
  4036ea:	4c2d      	ldr	r4, [pc, #180]	; (4037a0 <prvTimerTask+0x1f4>)
  4036ec:	47a0      	blx	r4
  4036ee:	2801      	cmp	r0, #1
  4036f0:	d1bc      	bne.n	40366c <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4036f2:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4036f6:	4650      	mov	r0, sl
  4036f8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4036fa:	f8da 301c 	ldr.w	r3, [sl, #28]
  4036fe:	2b01      	cmp	r3, #1
  403700:	d1b4      	bne.n	40366c <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  403702:	f8da 2018 	ldr.w	r2, [sl, #24]
  403706:	2100      	movs	r1, #0
  403708:	9100      	str	r1, [sp, #0]
  40370a:	460b      	mov	r3, r1
  40370c:	9805      	ldr	r0, [sp, #20]
  40370e:	4402      	add	r2, r0
  403710:	4650      	mov	r0, sl
  403712:	4c24      	ldr	r4, [pc, #144]	; (4037a4 <prvTimerTask+0x1f8>)
  403714:	47a0      	blx	r4
							configASSERT( xResult );
  403716:	2800      	cmp	r0, #0
  403718:	d1a8      	bne.n	40366c <prvTimerTask+0xc0>
  40371a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40371e:	b672      	cpsid	i
  403720:	f383 8811 	msr	BASEPRI, r3
  403724:	f3bf 8f6f 	isb	sy
  403728:	f3bf 8f4f 	dsb	sy
  40372c:	b662      	cpsie	i
  40372e:	e7fe      	b.n	40372e <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  403730:	9905      	ldr	r1, [sp, #20]
  403732:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  403736:	b131      	cbz	r1, 403746 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403738:	4603      	mov	r3, r0
  40373a:	4602      	mov	r2, r0
  40373c:	4401      	add	r1, r0
  40373e:	4650      	mov	r0, sl
  403740:	4c17      	ldr	r4, [pc, #92]	; (4037a0 <prvTimerTask+0x1f4>)
  403742:	47a0      	blx	r4
  403744:	e792      	b.n	40366c <prvTimerTask+0xc0>
  403746:	f04f 0380 	mov.w	r3, #128	; 0x80
  40374a:	b672      	cpsid	i
  40374c:	f383 8811 	msr	BASEPRI, r3
  403750:	f3bf 8f6f 	isb	sy
  403754:	f3bf 8f4f 	dsb	sy
  403758:	b662      	cpsie	i
  40375a:	e7fe      	b.n	40375a <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  40375c:	4650      	mov	r0, sl
  40375e:	4b13      	ldr	r3, [pc, #76]	; (4037ac <prvTimerTask+0x200>)
  403760:	4798      	blx	r3
  403762:	e783      	b.n	40366c <prvTimerTask+0xc0>
	vTaskSuspendAll();
  403764:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403766:	a804      	add	r0, sp, #16
  403768:	4b09      	ldr	r3, [pc, #36]	; (403790 <prvTimerTask+0x1e4>)
  40376a:	4798      	blx	r3
  40376c:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40376e:	9b04      	ldr	r3, [sp, #16]
  403770:	2b00      	cmp	r3, #0
  403772:	f47f af78 	bne.w	403666 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403776:	4b0e      	ldr	r3, [pc, #56]	; (4037b0 <prvTimerTask+0x204>)
  403778:	681b      	ldr	r3, [r3, #0]
  40377a:	681a      	ldr	r2, [r3, #0]
  40377c:	fab2 f282 	clz	r2, r2
  403780:	0952      	lsrs	r2, r2, #5
  403782:	2400      	movs	r4, #0
  403784:	e72d      	b.n	4035e2 <prvTimerTask+0x36>
  403786:	bf00      	nop
  403788:	20400d68 	.word	0x20400d68
  40378c:	00402ad5 	.word	0x00402ad5
  403790:	004034f5 	.word	0x004034f5
  403794:	20400d9c 	.word	0x20400d9c
  403798:	00402739 	.word	0x00402739
  40379c:	00402c3d 	.word	0x00402c3d
  4037a0:	0040335d 	.word	0x0040335d
  4037a4:	00403485 	.word	0x00403485
  4037a8:	00402535 	.word	0x00402535
  4037ac:	00401e09 	.word	0x00401e09
  4037b0:	20400d6c 	.word	0x20400d6c
  4037b4:	e000ed04 	.word	0xe000ed04
  4037b8:	00401a99 	.word	0x00401a99

004037bc <but1_callback>:
/************************************************************************/
/* handlers / callbacks                                                 */
/************************************************************************/

void but1_callback(void)
{
  4037bc:	b510      	push	{r4, lr}
  4037be:	b082      	sub	sp, #8
	EventData ed = {'1', !pio_get(BUT_1_PIO, PIO_INPUT, BUT_1_IDX_MASK)};
  4037c0:	2331      	movs	r3, #49	; 0x31
  4037c2:	f88d 3004 	strb.w	r3, [sp, #4]
  4037c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4037ca:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4037ce:	4808      	ldr	r0, [pc, #32]	; (4037f0 <but1_callback+0x34>)
  4037d0:	4b08      	ldr	r3, [pc, #32]	; (4037f4 <but1_callback+0x38>)
  4037d2:	4798      	blx	r3
  4037d4:	fab0 f080 	clz	r0, r0
  4037d8:	0940      	lsrs	r0, r0, #5
  4037da:	f88d 0005 	strb.w	r0, [sp, #5]
	xQueueSendFromISR(xQueueEvent, &ed, 0);
  4037de:	4b06      	ldr	r3, [pc, #24]	; (4037f8 <but1_callback+0x3c>)
  4037e0:	6818      	ldr	r0, [r3, #0]
  4037e2:	2300      	movs	r3, #0
  4037e4:	461a      	mov	r2, r3
  4037e6:	a901      	add	r1, sp, #4
  4037e8:	4c04      	ldr	r4, [pc, #16]	; (4037fc <but1_callback+0x40>)
  4037ea:	47a0      	blx	r4
}
  4037ec:	b002      	add	sp, #8
  4037ee:	bd10      	pop	{r4, pc}
  4037f0:	400e1400 	.word	0x400e1400
  4037f4:	004011c9 	.word	0x004011c9
  4037f8:	20400ec0 	.word	0x20400ec0
  4037fc:	00402355 	.word	0x00402355

00403800 <but2_callback>:

void but2_callback(void)
{
  403800:	b510      	push	{r4, lr}
  403802:	b082      	sub	sp, #8
	EventData ed = {'2', !pio_get(BUT_2_PIO, PIO_INPUT, BUT_2_IDX_MASK)};
  403804:	2332      	movs	r3, #50	; 0x32
  403806:	f88d 3004 	strb.w	r3, [sp, #4]
  40380a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40380e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403812:	4808      	ldr	r0, [pc, #32]	; (403834 <but2_callback+0x34>)
  403814:	4b08      	ldr	r3, [pc, #32]	; (403838 <but2_callback+0x38>)
  403816:	4798      	blx	r3
  403818:	fab0 f080 	clz	r0, r0
  40381c:	0940      	lsrs	r0, r0, #5
  40381e:	f88d 0005 	strb.w	r0, [sp, #5]
	xQueueSendFromISR(xQueueEvent, &ed, 0);
  403822:	4b06      	ldr	r3, [pc, #24]	; (40383c <but2_callback+0x3c>)
  403824:	6818      	ldr	r0, [r3, #0]
  403826:	2300      	movs	r3, #0
  403828:	461a      	mov	r2, r3
  40382a:	a901      	add	r1, sp, #4
  40382c:	4c04      	ldr	r4, [pc, #16]	; (403840 <but2_callback+0x40>)
  40382e:	47a0      	blx	r4
}
  403830:	b002      	add	sp, #8
  403832:	bd10      	pop	{r4, pc}
  403834:	400e1200 	.word	0x400e1200
  403838:	004011c9 	.word	0x004011c9
  40383c:	20400ec0 	.word	0x20400ec0
  403840:	00402355 	.word	0x00402355

00403844 <but3_callback>:

void but3_callback(void)
{
  403844:	b510      	push	{r4, lr}
  403846:	b082      	sub	sp, #8
	EventData ed = {'3', !pio_get(BUT_3_PIO, PIO_INPUT, BUT_3_IDX_MASK)};
  403848:	2333      	movs	r3, #51	; 0x33
  40384a:	f88d 3004 	strb.w	r3, [sp, #4]
  40384e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403852:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403856:	4808      	ldr	r0, [pc, #32]	; (403878 <but3_callback+0x34>)
  403858:	4b08      	ldr	r3, [pc, #32]	; (40387c <but3_callback+0x38>)
  40385a:	4798      	blx	r3
  40385c:	fab0 f080 	clz	r0, r0
  403860:	0940      	lsrs	r0, r0, #5
  403862:	f88d 0005 	strb.w	r0, [sp, #5]
	xQueueSendFromISR(xQueueEvent, &ed, 0);
  403866:	4b06      	ldr	r3, [pc, #24]	; (403880 <but3_callback+0x3c>)
  403868:	6818      	ldr	r0, [r3, #0]
  40386a:	2300      	movs	r3, #0
  40386c:	461a      	mov	r2, r3
  40386e:	a901      	add	r1, sp, #4
  403870:	4c04      	ldr	r4, [pc, #16]	; (403884 <but3_callback+0x40>)
  403872:	47a0      	blx	r4
}
  403874:	b002      	add	sp, #8
  403876:	bd10      	pop	{r4, pc}
  403878:	400e0e00 	.word	0x400e0e00
  40387c:	004011c9 	.word	0x004011c9
  403880:	20400ec0 	.word	0x20400ec0
  403884:	00402355 	.word	0x00402355

00403888 <butEXTRA_callback>:

void butEXTRA_callback(void)
{
  403888:	b510      	push	{r4, lr}
  40388a:	b082      	sub	sp, #8
	EventData ed = {'E', !pio_get(BUT_EXTRA_PIO, PIO_INPUT, BUT_EXTRA_IDX_MASK)};
  40388c:	2345      	movs	r3, #69	; 0x45
  40388e:	f88d 3004 	strb.w	r3, [sp, #4]
  403892:	2204      	movs	r2, #4
  403894:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403898:	4808      	ldr	r0, [pc, #32]	; (4038bc <butEXTRA_callback+0x34>)
  40389a:	4b09      	ldr	r3, [pc, #36]	; (4038c0 <butEXTRA_callback+0x38>)
  40389c:	4798      	blx	r3
  40389e:	fab0 f080 	clz	r0, r0
  4038a2:	0940      	lsrs	r0, r0, #5
  4038a4:	f88d 0005 	strb.w	r0, [sp, #5]
	xQueueSendFromISR(xQueueEvent, &ed, 0);
  4038a8:	4b06      	ldr	r3, [pc, #24]	; (4038c4 <butEXTRA_callback+0x3c>)
  4038aa:	6818      	ldr	r0, [r3, #0]
  4038ac:	2300      	movs	r3, #0
  4038ae:	461a      	mov	r2, r3
  4038b0:	a901      	add	r1, sp, #4
  4038b2:	4c05      	ldr	r4, [pc, #20]	; (4038c8 <butEXTRA_callback+0x40>)
  4038b4:	47a0      	blx	r4
}
  4038b6:	b002      	add	sp, #8
  4038b8:	bd10      	pop	{r4, pc}
  4038ba:	bf00      	nop
  4038bc:	400e0e00 	.word	0x400e0e00
  4038c0:	004011c9 	.word	0x004011c9
  4038c4:	20400ec0 	.word	0x20400ec0
  4038c8:	00402355 	.word	0x00402355

004038cc <pot_callback>:

void pot_callback(void)
{
  4038cc:	b530      	push	{r4, r5, lr}
  4038ce:	b085      	sub	sp, #20
	uint32_t adc, adc2;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  4038d0:	2400      	movs	r4, #0
  4038d2:	9401      	str	r4, [sp, #4]
	afec->AFEC_CSELR = afec_ch;
  4038d4:	4b0c      	ldr	r3, [pc, #48]	; (403908 <pot_callback+0x3c>)
  4038d6:	665c      	str	r4, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4038d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	adc = afec_channel_get_value(AFEC_POT, AFEC_POT_CHANNEL);
  4038da:	9303      	str	r3, [sp, #12]
	xQueueSendFromISR(xQueueAfec, &adc, &xHigherPriorityTaskWoken);
  4038dc:	4b0b      	ldr	r3, [pc, #44]	; (40390c <pot_callback+0x40>)
  4038de:	6818      	ldr	r0, [r3, #0]
  4038e0:	4623      	mov	r3, r4
  4038e2:	aa01      	add	r2, sp, #4
  4038e4:	a903      	add	r1, sp, #12
  4038e6:	4d0a      	ldr	r5, [pc, #40]	; (403910 <pot_callback+0x44>)
  4038e8:	47a8      	blx	r5
	afec->AFEC_CSELR = afec_ch;
  4038ea:	4b0a      	ldr	r3, [pc, #40]	; (403914 <pot_callback+0x48>)
  4038ec:	2201      	movs	r2, #1
  4038ee:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4038f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68

	adc2 = afec_channel_get_value(AFEC_POT2, AFEC_POT2_CHANNEL);
  4038f2:	a904      	add	r1, sp, #16
  4038f4:	f841 3d08 	str.w	r3, [r1, #-8]!
	xQueueSendFromISR(xQueueAfec2, &adc2, &xHigherPriorityTaskWoken);
  4038f8:	4b07      	ldr	r3, [pc, #28]	; (403918 <pot_callback+0x4c>)
  4038fa:	6818      	ldr	r0, [r3, #0]
  4038fc:	4623      	mov	r3, r4
  4038fe:	aa01      	add	r2, sp, #4
  403900:	47a8      	blx	r5
}
  403902:	b005      	add	sp, #20
  403904:	bd30      	pop	{r4, r5, pc}
  403906:	bf00      	nop
  403908:	4003c000 	.word	0x4003c000
  40390c:	20400ebc 	.word	0x20400ebc
  403910:	00402355 	.word	0x00402355
  403914:	40064000 	.word	0x40064000
  403918:	20400eac 	.word	0x20400eac

0040391c <task_afec>:
		vTaskDelay(200);
	}
}

void task_afec(void *pvParameters)
{
  40391c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403920:	b08e      	sub	sp, #56	; 0x38
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  403922:	2600      	movs	r6, #0
  403924:	960d      	str	r6, [sp, #52]	; 0x34
	uint32_t adc;
	int cnt = 1;
  403926:	2701      	movs	r7, #1
	_Bool alarmed = 0;
	uint32_t current_hour, current_min, current_sec;
	uint32_t current_year, current_month, current_day, current_week;
	while (1)
	{
		rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  403928:	4d30      	ldr	r5, [pc, #192]	; (4039ec <task_afec+0xd0>)
  40392a:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 403a14 <task_afec+0xf8>
		rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  40392e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 403a18 <task_afec+0xfc>
  403932:	e01f      	b.n	403974 <task_afec+0x58>
			if (adc >= 3000)
				cnt++;
		}
		else
		{
			xSemaphoreTake(xSemaphoreMutex, portMAX_DELAY);
  403934:	4c2e      	ldr	r4, [pc, #184]	; (4039f0 <task_afec+0xd4>)
  403936:	6820      	ldr	r0, [r4, #0]
  403938:	2300      	movs	r3, #0
  40393a:	f04f 32ff 	mov.w	r2, #4294967295
  40393e:	4619      	mov	r1, r3
  403940:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 403a0c <task_afec+0xf0>
  403944:	47d0      	blx	sl
			printf("Nao chegou um novo dado em 1 segundo");
  403946:	482b      	ldr	r0, [pc, #172]	; (4039f4 <task_afec+0xd8>)
  403948:	4b2b      	ldr	r3, [pc, #172]	; (4039f8 <task_afec+0xdc>)
  40394a:	4798      	blx	r3
			xSemaphoreGive(xSemaphoreMutex);
  40394c:	6820      	ldr	r0, [r4, #0]
  40394e:	2300      	movs	r3, #0
  403950:	461a      	mov	r2, r3
  403952:	4619      	mov	r1, r3
  403954:	4c29      	ldr	r4, [pc, #164]	; (4039fc <task_afec+0xe0>)
  403956:	47a0      	blx	r4
		}

		if (cnt >= 5 && !alarmed)
  403958:	f086 0401 	eor.w	r4, r6, #1
  40395c:	2f04      	cmp	r7, #4
  40395e:	bfd4      	ite	le
  403960:	2400      	movle	r4, #0
  403962:	f004 0401 	andgt.w	r4, r4, #1
  403966:	b12c      	cbz	r4, 403974 <task_afec+0x58>
		{
			xSemaphoreGiveFromISR(xSemaphoreAfecAlarm, &xHigherPriorityTaskWoken);
  403968:	4b25      	ldr	r3, [pc, #148]	; (403a00 <task_afec+0xe4>)
  40396a:	6818      	ldr	r0, [r3, #0]
  40396c:	a90d      	add	r1, sp, #52	; 0x34
  40396e:	4b25      	ldr	r3, [pc, #148]	; (403a04 <task_afec+0xe8>)
  403970:	4798      	blx	r3
			alarmed = 1;
  403972:	4626      	mov	r6, r4
		rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  403974:	ab09      	add	r3, sp, #36	; 0x24
  403976:	aa0a      	add	r2, sp, #40	; 0x28
  403978:	a90b      	add	r1, sp, #44	; 0x2c
  40397a:	4628      	mov	r0, r5
  40397c:	47c8      	blx	r9
		rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  40397e:	ab05      	add	r3, sp, #20
  403980:	9300      	str	r3, [sp, #0]
  403982:	ab06      	add	r3, sp, #24
  403984:	aa07      	add	r2, sp, #28
  403986:	a908      	add	r1, sp, #32
  403988:	4628      	mov	r0, r5
  40398a:	47c0      	blx	r8
		if (xQueueReceive(xQueueAfec, &(adc), 1000))
  40398c:	4b1e      	ldr	r3, [pc, #120]	; (403a08 <task_afec+0xec>)
  40398e:	6818      	ldr	r0, [r3, #0]
  403990:	2300      	movs	r3, #0
  403992:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403996:	a90c      	add	r1, sp, #48	; 0x30
  403998:	4c1c      	ldr	r4, [pc, #112]	; (403a0c <task_afec+0xf0>)
  40399a:	47a0      	blx	r4
  40399c:	2800      	cmp	r0, #0
  40399e:	d0c9      	beq.n	403934 <task_afec+0x18>
			xSemaphoreTake(xSemaphoreMutex, portMAX_DELAY);
  4039a0:	4c13      	ldr	r4, [pc, #76]	; (4039f0 <task_afec+0xd4>)
  4039a2:	6820      	ldr	r0, [r4, #0]
  4039a4:	2300      	movs	r3, #0
  4039a6:	f04f 32ff 	mov.w	r2, #4294967295
  4039aa:	4619      	mov	r1, r3
  4039ac:	f8df a05c 	ldr.w	sl, [pc, #92]	; 403a0c <task_afec+0xf0>
  4039b0:	47d0      	blx	sl
			printf("[AFEC1] %02d:%02d:%04d %02d:%02d:%02d $%d\n", current_day, current_month, current_year, current_hour, current_min, current_sec, adc);
  4039b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4039b4:	9303      	str	r3, [sp, #12]
  4039b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4039b8:	9302      	str	r3, [sp, #8]
  4039ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4039bc:	9301      	str	r3, [sp, #4]
  4039be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4039c0:	9300      	str	r3, [sp, #0]
  4039c2:	9b08      	ldr	r3, [sp, #32]
  4039c4:	9a07      	ldr	r2, [sp, #28]
  4039c6:	9906      	ldr	r1, [sp, #24]
  4039c8:	4811      	ldr	r0, [pc, #68]	; (403a10 <task_afec+0xf4>)
  4039ca:	f8df a02c 	ldr.w	sl, [pc, #44]	; 4039f8 <task_afec+0xdc>
  4039ce:	47d0      	blx	sl
			xSemaphoreGive(xSemaphoreMutex);
  4039d0:	6820      	ldr	r0, [r4, #0]
  4039d2:	2300      	movs	r3, #0
  4039d4:	461a      	mov	r2, r3
  4039d6:	4619      	mov	r1, r3
  4039d8:	4c08      	ldr	r4, [pc, #32]	; (4039fc <task_afec+0xe0>)
  4039da:	47a0      	blx	r4
			if (adc >= 3000)
  4039dc:	f640 33b7 	movw	r3, #2999	; 0xbb7
  4039e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4039e2:	429a      	cmp	r2, r3
  4039e4:	d9b8      	bls.n	403958 <task_afec+0x3c>
				cnt++;
  4039e6:	3701      	adds	r7, #1
  4039e8:	e7b6      	b.n	403958 <task_afec+0x3c>
  4039ea:	bf00      	nop
  4039ec:	400e1860 	.word	0x400e1860
  4039f0:	20400eb0 	.word	0x20400eb0
  4039f4:	00407914 	.word	0x00407914
  4039f8:	00404885 	.word	0x00404885
  4039fc:	00402119 	.word	0x00402119
  403a00:	20400eb4 	.word	0x20400eb4
  403a04:	00402455 	.word	0x00402455
  403a08:	20400ebc 	.word	0x20400ebc
  403a0c:	00402535 	.word	0x00402535
  403a10:	004078e8 	.word	0x004078e8
  403a14:	004004c7 	.word	0x004004c7
  403a18:	004005b1 	.word	0x004005b1

00403a1c <task_afec2>:
		}
	}
}

void task_afec2(void *pvParameters)
{
  403a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403a20:	b08e      	sub	sp, #56	; 0x38
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  403a22:	2600      	movs	r6, #0
  403a24:	960d      	str	r6, [sp, #52]	; 0x34
	uint32_t adc2;
	int cnt = 1;
  403a26:	2701      	movs	r7, #1
	_Bool alarmed = 0;
	uint32_t current_hour, current_min, current_sec;
	uint32_t current_year, current_month, current_day, current_week;
	while (1)
	{
		rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  403a28:	4d30      	ldr	r5, [pc, #192]	; (403aec <task_afec2+0xd0>)
  403a2a:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 403b14 <task_afec2+0xf8>
		rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  403a2e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 403b18 <task_afec2+0xfc>
  403a32:	e01f      	b.n	403a74 <task_afec2+0x58>
			if (adc2 >= 3000)
				cnt++;
		}
		else
		{
			xSemaphoreTake(xSemaphoreMutex, portMAX_DELAY);
  403a34:	4c2e      	ldr	r4, [pc, #184]	; (403af0 <task_afec2+0xd4>)
  403a36:	6820      	ldr	r0, [r4, #0]
  403a38:	2300      	movs	r3, #0
  403a3a:	f04f 32ff 	mov.w	r2, #4294967295
  403a3e:	4619      	mov	r1, r3
  403a40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 403b0c <task_afec2+0xf0>
  403a44:	47d0      	blx	sl
			printf("Nao chegou um novo dado em 1 segundo");
  403a46:	482b      	ldr	r0, [pc, #172]	; (403af4 <task_afec2+0xd8>)
  403a48:	4b2b      	ldr	r3, [pc, #172]	; (403af8 <task_afec2+0xdc>)
  403a4a:	4798      	blx	r3
			xSemaphoreGive(xSemaphoreMutex);
  403a4c:	6820      	ldr	r0, [r4, #0]
  403a4e:	2300      	movs	r3, #0
  403a50:	461a      	mov	r2, r3
  403a52:	4619      	mov	r1, r3
  403a54:	4c29      	ldr	r4, [pc, #164]	; (403afc <task_afec2+0xe0>)
  403a56:	47a0      	blx	r4
		}

		if (cnt >= 5 && !alarmed)
  403a58:	f086 0401 	eor.w	r4, r6, #1
  403a5c:	2f04      	cmp	r7, #4
  403a5e:	bfd4      	ite	le
  403a60:	2400      	movle	r4, #0
  403a62:	f004 0401 	andgt.w	r4, r4, #1
  403a66:	b12c      	cbz	r4, 403a74 <task_afec2+0x58>
		{
			xSemaphoreGiveFromISR(xSemaphoreAfecAlarm, &xHigherPriorityTaskWoken);
  403a68:	4b25      	ldr	r3, [pc, #148]	; (403b00 <task_afec2+0xe4>)
  403a6a:	6818      	ldr	r0, [r3, #0]
  403a6c:	a90d      	add	r1, sp, #52	; 0x34
  403a6e:	4b25      	ldr	r3, [pc, #148]	; (403b04 <task_afec2+0xe8>)
  403a70:	4798      	blx	r3
			alarmed = 1;
  403a72:	4626      	mov	r6, r4
		rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  403a74:	ab09      	add	r3, sp, #36	; 0x24
  403a76:	aa0a      	add	r2, sp, #40	; 0x28
  403a78:	a90b      	add	r1, sp, #44	; 0x2c
  403a7a:	4628      	mov	r0, r5
  403a7c:	47c8      	blx	r9
		rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  403a7e:	ab05      	add	r3, sp, #20
  403a80:	9300      	str	r3, [sp, #0]
  403a82:	ab06      	add	r3, sp, #24
  403a84:	aa07      	add	r2, sp, #28
  403a86:	a908      	add	r1, sp, #32
  403a88:	4628      	mov	r0, r5
  403a8a:	47c0      	blx	r8
		if (xQueueReceive(xQueueAfec2, &(adc2), 1000))
  403a8c:	4b1e      	ldr	r3, [pc, #120]	; (403b08 <task_afec2+0xec>)
  403a8e:	6818      	ldr	r0, [r3, #0]
  403a90:	2300      	movs	r3, #0
  403a92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403a96:	a90c      	add	r1, sp, #48	; 0x30
  403a98:	4c1c      	ldr	r4, [pc, #112]	; (403b0c <task_afec2+0xf0>)
  403a9a:	47a0      	blx	r4
  403a9c:	2800      	cmp	r0, #0
  403a9e:	d0c9      	beq.n	403a34 <task_afec2+0x18>
			xSemaphoreTake(xSemaphoreMutex, portMAX_DELAY);
  403aa0:	4c13      	ldr	r4, [pc, #76]	; (403af0 <task_afec2+0xd4>)
  403aa2:	6820      	ldr	r0, [r4, #0]
  403aa4:	2300      	movs	r3, #0
  403aa6:	f04f 32ff 	mov.w	r2, #4294967295
  403aaa:	4619      	mov	r1, r3
  403aac:	f8df a05c 	ldr.w	sl, [pc, #92]	; 403b0c <task_afec2+0xf0>
  403ab0:	47d0      	blx	sl
			printf("[AFEC2] %02d:%02d:%04d %02d:%02d:%02d $%d\n", current_day, current_month, current_year, current_hour, current_min, current_sec, adc2);
  403ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403ab4:	9303      	str	r3, [sp, #12]
  403ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403ab8:	9302      	str	r3, [sp, #8]
  403aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403abc:	9301      	str	r3, [sp, #4]
  403abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403ac0:	9300      	str	r3, [sp, #0]
  403ac2:	9b08      	ldr	r3, [sp, #32]
  403ac4:	9a07      	ldr	r2, [sp, #28]
  403ac6:	9906      	ldr	r1, [sp, #24]
  403ac8:	4811      	ldr	r0, [pc, #68]	; (403b10 <task_afec2+0xf4>)
  403aca:	f8df a02c 	ldr.w	sl, [pc, #44]	; 403af8 <task_afec2+0xdc>
  403ace:	47d0      	blx	sl
			xSemaphoreGive(xSemaphoreMutex);
  403ad0:	6820      	ldr	r0, [r4, #0]
  403ad2:	2300      	movs	r3, #0
  403ad4:	461a      	mov	r2, r3
  403ad6:	4619      	mov	r1, r3
  403ad8:	4c08      	ldr	r4, [pc, #32]	; (403afc <task_afec2+0xe0>)
  403ada:	47a0      	blx	r4
			if (adc2 >= 3000)
  403adc:	f640 33b7 	movw	r3, #2999	; 0xbb7
  403ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403ae2:	429a      	cmp	r2, r3
  403ae4:	d9b8      	bls.n	403a58 <task_afec2+0x3c>
				cnt++;
  403ae6:	3701      	adds	r7, #1
  403ae8:	e7b6      	b.n	403a58 <task_afec2+0x3c>
  403aea:	bf00      	nop
  403aec:	400e1860 	.word	0x400e1860
  403af0:	20400eb0 	.word	0x20400eb0
  403af4:	00407914 	.word	0x00407914
  403af8:	00404885 	.word	0x00404885
  403afc:	00402119 	.word	0x00402119
  403b00:	20400eb4 	.word	0x20400eb4
  403b04:	00402455 	.word	0x00402455
  403b08:	20400eac 	.word	0x20400eac
  403b0c:	00402535 	.word	0x00402535
  403b10:	0040793c 	.word	0x0040793c
  403b14:	004004c7 	.word	0x004004c7
  403b18:	004005b1 	.word	0x004005b1

00403b1c <task_event>:
		}
	}
}

void task_event(void *pvParameters)
{
  403b1c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  403b20:	b091      	sub	sp, #68	; 0x44
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  403b22:	2300      	movs	r3, #0
  403b24:	930f      	str	r3, [sp, #60]	; 0x3c
	char id;
	uint32_t current_hour, current_min, current_sec;
	uint32_t current_year, current_month, current_day, current_week;
	for (;;)
	{
		rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  403b26:	4d56      	ldr	r5, [pc, #344]	; (403c80 <task_event+0x164>)
  403b28:	f8df a180 	ldr.w	sl, [pc, #384]	; 403cac <task_event+0x190>
		rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  403b2c:	f8df 9180 	ldr.w	r9, [pc, #384]	; 403cb0 <task_event+0x194>
		{
			xSemaphoreTake(xSemaphoreMutex, portMAX_DELAY);
			printf("[EVENT] %02d:%02d:%04d %02d:%02d:%02d $%c:%d\n", current_day, current_month, current_year, current_hour, current_min, current_sec, queue.id, queue.state);
			xSemaphoreGive(xSemaphoreMutex);
		}
		if (!pio_get(BUT_1_PIO, PIO_INPUT, BUT_1_IDX_MASK) && !pio_get(BUT_2_PIO, PIO_INPUT, BUT_2_IDX_MASK) ||
  403b30:	4c54      	ldr	r4, [pc, #336]	; (403c84 <task_event+0x168>)
			!pio_get(BUT_1_PIO, PIO_INPUT, BUT_1_IDX_MASK) && !pio_get(BUT_3_PIO, PIO_INPUT, BUT_3_IDX_MASK) ||
			!pio_get(BUT_2_PIO, PIO_INPUT, BUT_2_IDX_MASK) && !pio_get(BUT_3_PIO, PIO_INPUT, BUT_3_IDX_MASK) ||
  403b32:	4f55      	ldr	r7, [pc, #340]	; (403c88 <task_event+0x16c>)
			!pio_get(BUT_1_PIO, PIO_INPUT, BUT_1_IDX_MASK) && !pio_get(BUT_EXTRA_PIO, PIO_INPUT, BUT_EXTRA_IDX_MASK) ||
			!pio_get(BUT_2_PIO, PIO_INPUT, BUT_2_IDX_MASK) && !pio_get(BUT_EXTRA_PIO, PIO_INPUT, BUT_EXTRA_IDX_MASK) ||
			!pio_get(BUT_3_PIO, PIO_INPUT, BUT_3_IDX_MASK) && !pio_get(BUT_EXTRA_PIO, PIO_INPUT, BUT_EXTRA_IDX_MASK))
  403b34:	f8df 817c 	ldr.w	r8, [pc, #380]	; 403cb4 <task_event+0x198>
  403b38:	e027      	b.n	403b8a <task_event+0x6e>
			xSemaphoreTake(xSemaphoreMutex, portMAX_DELAY);
  403b3a:	4e54      	ldr	r6, [pc, #336]	; (403c8c <task_event+0x170>)
  403b3c:	6830      	ldr	r0, [r6, #0]
  403b3e:	2300      	movs	r3, #0
  403b40:	f04f 32ff 	mov.w	r2, #4294967295
  403b44:	4619      	mov	r1, r3
  403b46:	f8df b15c 	ldr.w	fp, [pc, #348]	; 403ca4 <task_event+0x188>
  403b4a:	47d8      	blx	fp
			printf("[EVENT] %02d:%02d:%04d %02d:%02d:%02d $%c:%d\n", current_day, current_month, current_year, current_hour, current_min, current_sec, queue.id, queue.state);
  403b4c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
  403b50:	9304      	str	r3, [sp, #16]
  403b52:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
  403b56:	9303      	str	r3, [sp, #12]
  403b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403b5a:	9302      	str	r3, [sp, #8]
  403b5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403b5e:	9301      	str	r3, [sp, #4]
  403b60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403b62:	9300      	str	r3, [sp, #0]
  403b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403b68:	9908      	ldr	r1, [sp, #32]
  403b6a:	4849      	ldr	r0, [pc, #292]	; (403c90 <task_event+0x174>)
  403b6c:	f8df b148 	ldr.w	fp, [pc, #328]	; 403cb8 <task_event+0x19c>
  403b70:	47d8      	blx	fp
			xSemaphoreGive(xSemaphoreMutex);
  403b72:	6830      	ldr	r0, [r6, #0]
  403b74:	2300      	movs	r3, #0
  403b76:	461a      	mov	r2, r3
  403b78:	4619      	mov	r1, r3
  403b7a:	4e46      	ldr	r6, [pc, #280]	; (403c94 <task_event+0x178>)
  403b7c:	47b0      	blx	r6
  403b7e:	e01a      	b.n	403bb6 <task_event+0x9a>
			xSemaphoreGiveFromISR(xSemaphoreEventAlarm, &xHigherPriorityTaskWoken);
  403b80:	4b45      	ldr	r3, [pc, #276]	; (403c98 <task_event+0x17c>)
  403b82:	6818      	ldr	r0, [r3, #0]
  403b84:	a90f      	add	r1, sp, #60	; 0x3c
  403b86:	4b45      	ldr	r3, [pc, #276]	; (403c9c <task_event+0x180>)
  403b88:	4798      	blx	r3
		rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  403b8a:	ab0b      	add	r3, sp, #44	; 0x2c
  403b8c:	aa0c      	add	r2, sp, #48	; 0x30
  403b8e:	a90d      	add	r1, sp, #52	; 0x34
  403b90:	4628      	mov	r0, r5
  403b92:	47d0      	blx	sl
		rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  403b94:	ab07      	add	r3, sp, #28
  403b96:	9300      	str	r3, [sp, #0]
  403b98:	ab08      	add	r3, sp, #32
  403b9a:	aa09      	add	r2, sp, #36	; 0x24
  403b9c:	a90a      	add	r1, sp, #40	; 0x28
  403b9e:	4628      	mov	r0, r5
  403ba0:	47c8      	blx	r9
		if (xQueueReceive(xQueueEvent, &(queue), 1000))
  403ba2:	4b3f      	ldr	r3, [pc, #252]	; (403ca0 <task_event+0x184>)
  403ba4:	6818      	ldr	r0, [r3, #0]
  403ba6:	2300      	movs	r3, #0
  403ba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403bac:	a90e      	add	r1, sp, #56	; 0x38
  403bae:	4e3d      	ldr	r6, [pc, #244]	; (403ca4 <task_event+0x188>)
  403bb0:	47b0      	blx	r6
  403bb2:	2800      	cmp	r0, #0
  403bb4:	d1c1      	bne.n	403b3a <task_event+0x1e>
		if (!pio_get(BUT_1_PIO, PIO_INPUT, BUT_1_IDX_MASK) && !pio_get(BUT_2_PIO, PIO_INPUT, BUT_2_IDX_MASK) ||
  403bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403bba:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403bbe:	4620      	mov	r0, r4
  403bc0:	4b39      	ldr	r3, [pc, #228]	; (403ca8 <task_event+0x18c>)
  403bc2:	4798      	blx	r3
  403bc4:	b940      	cbnz	r0, 403bd8 <task_event+0xbc>
  403bc6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  403bca:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403bce:	4638      	mov	r0, r7
  403bd0:	4b35      	ldr	r3, [pc, #212]	; (403ca8 <task_event+0x18c>)
  403bd2:	4798      	blx	r3
  403bd4:	2800      	cmp	r0, #0
  403bd6:	d0d3      	beq.n	403b80 <task_event+0x64>
			!pio_get(BUT_1_PIO, PIO_INPUT, BUT_1_IDX_MASK) && !pio_get(BUT_3_PIO, PIO_INPUT, BUT_3_IDX_MASK) ||
  403bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403bdc:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403be0:	4620      	mov	r0, r4
  403be2:	4b31      	ldr	r3, [pc, #196]	; (403ca8 <task_event+0x18c>)
  403be4:	4798      	blx	r3
		if (!pio_get(BUT_1_PIO, PIO_INPUT, BUT_1_IDX_MASK) && !pio_get(BUT_2_PIO, PIO_INPUT, BUT_2_IDX_MASK) ||
  403be6:	b940      	cbnz	r0, 403bfa <task_event+0xde>
			!pio_get(BUT_1_PIO, PIO_INPUT, BUT_1_IDX_MASK) && !pio_get(BUT_3_PIO, PIO_INPUT, BUT_3_IDX_MASK) ||
  403be8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403bec:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403bf0:	4640      	mov	r0, r8
  403bf2:	4b2d      	ldr	r3, [pc, #180]	; (403ca8 <task_event+0x18c>)
  403bf4:	4798      	blx	r3
  403bf6:	2800      	cmp	r0, #0
  403bf8:	d0c2      	beq.n	403b80 <task_event+0x64>
			!pio_get(BUT_2_PIO, PIO_INPUT, BUT_2_IDX_MASK) && !pio_get(BUT_3_PIO, PIO_INPUT, BUT_3_IDX_MASK) ||
  403bfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  403bfe:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403c02:	4638      	mov	r0, r7
  403c04:	4b28      	ldr	r3, [pc, #160]	; (403ca8 <task_event+0x18c>)
  403c06:	4798      	blx	r3
			!pio_get(BUT_1_PIO, PIO_INPUT, BUT_1_IDX_MASK) && !pio_get(BUT_3_PIO, PIO_INPUT, BUT_3_IDX_MASK) ||
  403c08:	b940      	cbnz	r0, 403c1c <task_event+0x100>
			!pio_get(BUT_2_PIO, PIO_INPUT, BUT_2_IDX_MASK) && !pio_get(BUT_3_PIO, PIO_INPUT, BUT_3_IDX_MASK) ||
  403c0a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403c0e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403c12:	4640      	mov	r0, r8
  403c14:	4b24      	ldr	r3, [pc, #144]	; (403ca8 <task_event+0x18c>)
  403c16:	4798      	blx	r3
  403c18:	2800      	cmp	r0, #0
  403c1a:	d0b1      	beq.n	403b80 <task_event+0x64>
			!pio_get(BUT_1_PIO, PIO_INPUT, BUT_1_IDX_MASK) && !pio_get(BUT_EXTRA_PIO, PIO_INPUT, BUT_EXTRA_IDX_MASK) ||
  403c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403c20:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403c24:	4620      	mov	r0, r4
  403c26:	4b20      	ldr	r3, [pc, #128]	; (403ca8 <task_event+0x18c>)
  403c28:	4798      	blx	r3
			!pio_get(BUT_2_PIO, PIO_INPUT, BUT_2_IDX_MASK) && !pio_get(BUT_3_PIO, PIO_INPUT, BUT_3_IDX_MASK) ||
  403c2a:	b938      	cbnz	r0, 403c3c <task_event+0x120>
			!pio_get(BUT_1_PIO, PIO_INPUT, BUT_1_IDX_MASK) && !pio_get(BUT_EXTRA_PIO, PIO_INPUT, BUT_EXTRA_IDX_MASK) ||
  403c2c:	2204      	movs	r2, #4
  403c2e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403c32:	4640      	mov	r0, r8
  403c34:	4b1c      	ldr	r3, [pc, #112]	; (403ca8 <task_event+0x18c>)
  403c36:	4798      	blx	r3
  403c38:	2800      	cmp	r0, #0
  403c3a:	d0a1      	beq.n	403b80 <task_event+0x64>
			!pio_get(BUT_2_PIO, PIO_INPUT, BUT_2_IDX_MASK) && !pio_get(BUT_EXTRA_PIO, PIO_INPUT, BUT_EXTRA_IDX_MASK) ||
  403c3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  403c40:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403c44:	4638      	mov	r0, r7
  403c46:	4b18      	ldr	r3, [pc, #96]	; (403ca8 <task_event+0x18c>)
  403c48:	4798      	blx	r3
			!pio_get(BUT_1_PIO, PIO_INPUT, BUT_1_IDX_MASK) && !pio_get(BUT_EXTRA_PIO, PIO_INPUT, BUT_EXTRA_IDX_MASK) ||
  403c4a:	b938      	cbnz	r0, 403c5c <task_event+0x140>
			!pio_get(BUT_2_PIO, PIO_INPUT, BUT_2_IDX_MASK) && !pio_get(BUT_EXTRA_PIO, PIO_INPUT, BUT_EXTRA_IDX_MASK) ||
  403c4c:	2204      	movs	r2, #4
  403c4e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403c52:	4640      	mov	r0, r8
  403c54:	4b14      	ldr	r3, [pc, #80]	; (403ca8 <task_event+0x18c>)
  403c56:	4798      	blx	r3
  403c58:	2800      	cmp	r0, #0
  403c5a:	d091      	beq.n	403b80 <task_event+0x64>
			!pio_get(BUT_3_PIO, PIO_INPUT, BUT_3_IDX_MASK) && !pio_get(BUT_EXTRA_PIO, PIO_INPUT, BUT_EXTRA_IDX_MASK))
  403c5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403c60:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403c64:	4640      	mov	r0, r8
  403c66:	4b10      	ldr	r3, [pc, #64]	; (403ca8 <task_event+0x18c>)
  403c68:	4798      	blx	r3
			!pio_get(BUT_2_PIO, PIO_INPUT, BUT_2_IDX_MASK) && !pio_get(BUT_EXTRA_PIO, PIO_INPUT, BUT_EXTRA_IDX_MASK) ||
  403c6a:	2800      	cmp	r0, #0
  403c6c:	d18d      	bne.n	403b8a <task_event+0x6e>
			!pio_get(BUT_3_PIO, PIO_INPUT, BUT_3_IDX_MASK) && !pio_get(BUT_EXTRA_PIO, PIO_INPUT, BUT_EXTRA_IDX_MASK))
  403c6e:	2204      	movs	r2, #4
  403c70:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403c74:	4640      	mov	r0, r8
  403c76:	4b0c      	ldr	r3, [pc, #48]	; (403ca8 <task_event+0x18c>)
  403c78:	4798      	blx	r3
  403c7a:	2800      	cmp	r0, #0
  403c7c:	d185      	bne.n	403b8a <task_event+0x6e>
  403c7e:	e77f      	b.n	403b80 <task_event+0x64>
  403c80:	400e1860 	.word	0x400e1860
  403c84:	400e1400 	.word	0x400e1400
  403c88:	400e1200 	.word	0x400e1200
  403c8c:	20400eb0 	.word	0x20400eb0
  403c90:	004079a4 	.word	0x004079a4
  403c94:	00402119 	.word	0x00402119
  403c98:	20400eb8 	.word	0x20400eb8
  403c9c:	00402455 	.word	0x00402455
  403ca0:	20400ec0 	.word	0x20400ec0
  403ca4:	00402535 	.word	0x00402535
  403ca8:	004011c9 	.word	0x004011c9
  403cac:	004004c7 	.word	0x004004c7
  403cb0:	004005b1 	.word	0x004005b1
  403cb4:	400e0e00 	.word	0x400e0e00
  403cb8:	00404885 	.word	0x00404885

00403cbc <task_oled>:
{
  403cbc:	b500      	push	{lr}
  403cbe:	b083      	sub	sp, #12
	gfx_mono_ssd1306_init();
  403cc0:	4b06      	ldr	r3, [pc, #24]	; (403cdc <task_oled+0x20>)
  403cc2:	4798      	blx	r3
		gfx_mono_draw_filled_circle(12, 12, 4, GFX_PIXEL_XOR, GFX_QUADRANT0 | GFX_QUADRANT1 | GFX_QUADRANT2 | GFX_QUADRANT3);
  403cc4:	26ff      	movs	r6, #255	; 0xff
  403cc6:	4d06      	ldr	r5, [pc, #24]	; (403ce0 <task_oled+0x24>)
		vTaskDelay(200);
  403cc8:	4c06      	ldr	r4, [pc, #24]	; (403ce4 <task_oled+0x28>)
		gfx_mono_draw_filled_circle(12, 12, 4, GFX_PIXEL_XOR, GFX_QUADRANT0 | GFX_QUADRANT1 | GFX_QUADRANT2 | GFX_QUADRANT3);
  403cca:	9600      	str	r6, [sp, #0]
  403ccc:	2302      	movs	r3, #2
  403cce:	2204      	movs	r2, #4
  403cd0:	210c      	movs	r1, #12
  403cd2:	4608      	mov	r0, r1
  403cd4:	47a8      	blx	r5
		vTaskDelay(200);
  403cd6:	20c8      	movs	r0, #200	; 0xc8
  403cd8:	47a0      	blx	r4
  403cda:	e7f6      	b.n	403cca <task_oled+0xe>
  403cdc:	00400bd5 	.word	0x00400bd5
  403ce0:	00400a69 	.word	0x00400a69
  403ce4:	00402d5d 	.word	0x00402d5d

00403ce8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
  403cea:	b083      	sub	sp, #12
  403cec:	4605      	mov	r5, r0
  403cee:	460c      	mov	r4, r1
	uint32_t val = 0;
  403cf0:	2300      	movs	r3, #0
  403cf2:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403cf4:	4b2a      	ldr	r3, [pc, #168]	; (403da0 <usart_serial_getchar+0xb8>)
  403cf6:	4298      	cmp	r0, r3
  403cf8:	d013      	beq.n	403d22 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403cfa:	4b2a      	ldr	r3, [pc, #168]	; (403da4 <usart_serial_getchar+0xbc>)
  403cfc:	4298      	cmp	r0, r3
  403cfe:	d018      	beq.n	403d32 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403d00:	4b29      	ldr	r3, [pc, #164]	; (403da8 <usart_serial_getchar+0xc0>)
  403d02:	4298      	cmp	r0, r3
  403d04:	d01d      	beq.n	403d42 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403d06:	4b29      	ldr	r3, [pc, #164]	; (403dac <usart_serial_getchar+0xc4>)
  403d08:	429d      	cmp	r5, r3
  403d0a:	d022      	beq.n	403d52 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403d0c:	4b28      	ldr	r3, [pc, #160]	; (403db0 <usart_serial_getchar+0xc8>)
  403d0e:	429d      	cmp	r5, r3
  403d10:	d027      	beq.n	403d62 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403d12:	4b28      	ldr	r3, [pc, #160]	; (403db4 <usart_serial_getchar+0xcc>)
  403d14:	429d      	cmp	r5, r3
  403d16:	d02e      	beq.n	403d76 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403d18:	4b27      	ldr	r3, [pc, #156]	; (403db8 <usart_serial_getchar+0xd0>)
  403d1a:	429d      	cmp	r5, r3
  403d1c:	d035      	beq.n	403d8a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403d1e:	b003      	add	sp, #12
  403d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403d22:	461f      	mov	r7, r3
  403d24:	4e25      	ldr	r6, [pc, #148]	; (403dbc <usart_serial_getchar+0xd4>)
  403d26:	4621      	mov	r1, r4
  403d28:	4638      	mov	r0, r7
  403d2a:	47b0      	blx	r6
  403d2c:	2800      	cmp	r0, #0
  403d2e:	d1fa      	bne.n	403d26 <usart_serial_getchar+0x3e>
  403d30:	e7e9      	b.n	403d06 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403d32:	461f      	mov	r7, r3
  403d34:	4e21      	ldr	r6, [pc, #132]	; (403dbc <usart_serial_getchar+0xd4>)
  403d36:	4621      	mov	r1, r4
  403d38:	4638      	mov	r0, r7
  403d3a:	47b0      	blx	r6
  403d3c:	2800      	cmp	r0, #0
  403d3e:	d1fa      	bne.n	403d36 <usart_serial_getchar+0x4e>
  403d40:	e7e4      	b.n	403d0c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403d42:	461f      	mov	r7, r3
  403d44:	4e1d      	ldr	r6, [pc, #116]	; (403dbc <usart_serial_getchar+0xd4>)
  403d46:	4621      	mov	r1, r4
  403d48:	4638      	mov	r0, r7
  403d4a:	47b0      	blx	r6
  403d4c:	2800      	cmp	r0, #0
  403d4e:	d1fa      	bne.n	403d46 <usart_serial_getchar+0x5e>
  403d50:	e7df      	b.n	403d12 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403d52:	461f      	mov	r7, r3
  403d54:	4e19      	ldr	r6, [pc, #100]	; (403dbc <usart_serial_getchar+0xd4>)
  403d56:	4621      	mov	r1, r4
  403d58:	4638      	mov	r0, r7
  403d5a:	47b0      	blx	r6
  403d5c:	2800      	cmp	r0, #0
  403d5e:	d1fa      	bne.n	403d56 <usart_serial_getchar+0x6e>
  403d60:	e7da      	b.n	403d18 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403d62:	461e      	mov	r6, r3
  403d64:	4d16      	ldr	r5, [pc, #88]	; (403dc0 <usart_serial_getchar+0xd8>)
  403d66:	a901      	add	r1, sp, #4
  403d68:	4630      	mov	r0, r6
  403d6a:	47a8      	blx	r5
  403d6c:	2800      	cmp	r0, #0
  403d6e:	d1fa      	bne.n	403d66 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403d70:	9b01      	ldr	r3, [sp, #4]
  403d72:	7023      	strb	r3, [r4, #0]
  403d74:	e7d3      	b.n	403d1e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403d76:	461e      	mov	r6, r3
  403d78:	4d11      	ldr	r5, [pc, #68]	; (403dc0 <usart_serial_getchar+0xd8>)
  403d7a:	a901      	add	r1, sp, #4
  403d7c:	4630      	mov	r0, r6
  403d7e:	47a8      	blx	r5
  403d80:	2800      	cmp	r0, #0
  403d82:	d1fa      	bne.n	403d7a <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403d84:	9b01      	ldr	r3, [sp, #4]
  403d86:	7023      	strb	r3, [r4, #0]
  403d88:	e7c9      	b.n	403d1e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403d8a:	461e      	mov	r6, r3
  403d8c:	4d0c      	ldr	r5, [pc, #48]	; (403dc0 <usart_serial_getchar+0xd8>)
  403d8e:	a901      	add	r1, sp, #4
  403d90:	4630      	mov	r0, r6
  403d92:	47a8      	blx	r5
  403d94:	2800      	cmp	r0, #0
  403d96:	d1fa      	bne.n	403d8e <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403d98:	9b01      	ldr	r3, [sp, #4]
  403d9a:	7023      	strb	r3, [r4, #0]
}
  403d9c:	e7bf      	b.n	403d1e <usart_serial_getchar+0x36>
  403d9e:	bf00      	nop
  403da0:	400e0800 	.word	0x400e0800
  403da4:	400e0a00 	.word	0x400e0a00
  403da8:	400e1a00 	.word	0x400e1a00
  403dac:	400e1c00 	.word	0x400e1c00
  403db0:	40024000 	.word	0x40024000
  403db4:	40028000 	.word	0x40028000
  403db8:	4002c000 	.word	0x4002c000
  403dbc:	0040165b 	.word	0x0040165b
  403dc0:	00401767 	.word	0x00401767

00403dc4 <usart_serial_putchar>:
{
  403dc4:	b570      	push	{r4, r5, r6, lr}
  403dc6:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403dc8:	4b2a      	ldr	r3, [pc, #168]	; (403e74 <usart_serial_putchar+0xb0>)
  403dca:	4298      	cmp	r0, r3
  403dcc:	d013      	beq.n	403df6 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403dce:	4b2a      	ldr	r3, [pc, #168]	; (403e78 <usart_serial_putchar+0xb4>)
  403dd0:	4298      	cmp	r0, r3
  403dd2:	d019      	beq.n	403e08 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403dd4:	4b29      	ldr	r3, [pc, #164]	; (403e7c <usart_serial_putchar+0xb8>)
  403dd6:	4298      	cmp	r0, r3
  403dd8:	d01f      	beq.n	403e1a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403dda:	4b29      	ldr	r3, [pc, #164]	; (403e80 <usart_serial_putchar+0xbc>)
  403ddc:	4298      	cmp	r0, r3
  403dde:	d025      	beq.n	403e2c <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403de0:	4b28      	ldr	r3, [pc, #160]	; (403e84 <usart_serial_putchar+0xc0>)
  403de2:	4298      	cmp	r0, r3
  403de4:	d02b      	beq.n	403e3e <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403de6:	4b28      	ldr	r3, [pc, #160]	; (403e88 <usart_serial_putchar+0xc4>)
  403de8:	4298      	cmp	r0, r3
  403dea:	d031      	beq.n	403e50 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403dec:	4b27      	ldr	r3, [pc, #156]	; (403e8c <usart_serial_putchar+0xc8>)
  403dee:	4298      	cmp	r0, r3
  403df0:	d037      	beq.n	403e62 <usart_serial_putchar+0x9e>
	return 0;
  403df2:	2000      	movs	r0, #0
}
  403df4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403df6:	461e      	mov	r6, r3
  403df8:	4d25      	ldr	r5, [pc, #148]	; (403e90 <usart_serial_putchar+0xcc>)
  403dfa:	4621      	mov	r1, r4
  403dfc:	4630      	mov	r0, r6
  403dfe:	47a8      	blx	r5
  403e00:	2800      	cmp	r0, #0
  403e02:	d1fa      	bne.n	403dfa <usart_serial_putchar+0x36>
		return 1;
  403e04:	2001      	movs	r0, #1
  403e06:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403e08:	461e      	mov	r6, r3
  403e0a:	4d21      	ldr	r5, [pc, #132]	; (403e90 <usart_serial_putchar+0xcc>)
  403e0c:	4621      	mov	r1, r4
  403e0e:	4630      	mov	r0, r6
  403e10:	47a8      	blx	r5
  403e12:	2800      	cmp	r0, #0
  403e14:	d1fa      	bne.n	403e0c <usart_serial_putchar+0x48>
		return 1;
  403e16:	2001      	movs	r0, #1
  403e18:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403e1a:	461e      	mov	r6, r3
  403e1c:	4d1c      	ldr	r5, [pc, #112]	; (403e90 <usart_serial_putchar+0xcc>)
  403e1e:	4621      	mov	r1, r4
  403e20:	4630      	mov	r0, r6
  403e22:	47a8      	blx	r5
  403e24:	2800      	cmp	r0, #0
  403e26:	d1fa      	bne.n	403e1e <usart_serial_putchar+0x5a>
		return 1;
  403e28:	2001      	movs	r0, #1
  403e2a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403e2c:	461e      	mov	r6, r3
  403e2e:	4d18      	ldr	r5, [pc, #96]	; (403e90 <usart_serial_putchar+0xcc>)
  403e30:	4621      	mov	r1, r4
  403e32:	4630      	mov	r0, r6
  403e34:	47a8      	blx	r5
  403e36:	2800      	cmp	r0, #0
  403e38:	d1fa      	bne.n	403e30 <usart_serial_putchar+0x6c>
		return 1;
  403e3a:	2001      	movs	r0, #1
  403e3c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403e3e:	461e      	mov	r6, r3
  403e40:	4d14      	ldr	r5, [pc, #80]	; (403e94 <usart_serial_putchar+0xd0>)
  403e42:	4621      	mov	r1, r4
  403e44:	4630      	mov	r0, r6
  403e46:	47a8      	blx	r5
  403e48:	2800      	cmp	r0, #0
  403e4a:	d1fa      	bne.n	403e42 <usart_serial_putchar+0x7e>
		return 1;
  403e4c:	2001      	movs	r0, #1
  403e4e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403e50:	461e      	mov	r6, r3
  403e52:	4d10      	ldr	r5, [pc, #64]	; (403e94 <usart_serial_putchar+0xd0>)
  403e54:	4621      	mov	r1, r4
  403e56:	4630      	mov	r0, r6
  403e58:	47a8      	blx	r5
  403e5a:	2800      	cmp	r0, #0
  403e5c:	d1fa      	bne.n	403e54 <usart_serial_putchar+0x90>
		return 1;
  403e5e:	2001      	movs	r0, #1
  403e60:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403e62:	461e      	mov	r6, r3
  403e64:	4d0b      	ldr	r5, [pc, #44]	; (403e94 <usart_serial_putchar+0xd0>)
  403e66:	4621      	mov	r1, r4
  403e68:	4630      	mov	r0, r6
  403e6a:	47a8      	blx	r5
  403e6c:	2800      	cmp	r0, #0
  403e6e:	d1fa      	bne.n	403e66 <usart_serial_putchar+0xa2>
		return 1;
  403e70:	2001      	movs	r0, #1
  403e72:	bd70      	pop	{r4, r5, r6, pc}
  403e74:	400e0800 	.word	0x400e0800
  403e78:	400e0a00 	.word	0x400e0a00
  403e7c:	400e1a00 	.word	0x400e1a00
  403e80:	400e1c00 	.word	0x400e1c00
  403e84:	40024000 	.word	0x40024000
  403e88:	40028000 	.word	0x40028000
  403e8c:	4002c000 	.word	0x4002c000
  403e90:	00401649 	.word	0x00401649
  403e94:	00401751 	.word	0x00401751

00403e98 <vApplicationStackOverflowHook>:
{
  403e98:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403e9a:	460a      	mov	r2, r1
  403e9c:	4601      	mov	r1, r0
  403e9e:	4802      	ldr	r0, [pc, #8]	; (403ea8 <vApplicationStackOverflowHook+0x10>)
  403ea0:	4b02      	ldr	r3, [pc, #8]	; (403eac <vApplicationStackOverflowHook+0x14>)
  403ea2:	4798      	blx	r3
  403ea4:	e7fe      	b.n	403ea4 <vApplicationStackOverflowHook+0xc>
  403ea6:	bf00      	nop
  403ea8:	004079d4 	.word	0x004079d4
  403eac:	00404885 	.word	0x00404885

00403eb0 <vApplicationTickHook>:
extern void vApplicationTickHook(void) {}
  403eb0:	4770      	bx	lr

00403eb2 <vApplicationMallocFailedHook>:
  403eb2:	f04f 0380 	mov.w	r3, #128	; 0x80
  403eb6:	b672      	cpsid	i
  403eb8:	f383 8811 	msr	BASEPRI, r3
  403ebc:	f3bf 8f6f 	isb	sy
  403ec0:	f3bf 8f4f 	dsb	sy
  403ec4:	b662      	cpsie	i
  403ec6:	e7fe      	b.n	403ec6 <vApplicationMallocFailedHook+0x14>

00403ec8 <pin_toggle>:

/************************************************************************/
/* funcoes                                                              */
/************************************************************************/
void pin_toggle(Pio *pio, uint32_t mask)
{
  403ec8:	b538      	push	{r3, r4, r5, lr}
  403eca:	4604      	mov	r4, r0
  403ecc:	460d      	mov	r5, r1
	pio_get_output_data_status(pio, mask) ? pio_clear(pio, mask) : pio_set(pio, mask);
  403ece:	4b06      	ldr	r3, [pc, #24]	; (403ee8 <pin_toggle+0x20>)
  403ed0:	4798      	blx	r3
  403ed2:	b920      	cbnz	r0, 403ede <pin_toggle+0x16>
  403ed4:	4629      	mov	r1, r5
  403ed6:	4620      	mov	r0, r4
  403ed8:	4b04      	ldr	r3, [pc, #16]	; (403eec <pin_toggle+0x24>)
  403eda:	4798      	blx	r3
  403edc:	bd38      	pop	{r3, r4, r5, pc}
  403ede:	4629      	mov	r1, r5
  403ee0:	4620      	mov	r0, r4
  403ee2:	4b03      	ldr	r3, [pc, #12]	; (403ef0 <pin_toggle+0x28>)
  403ee4:	4798      	blx	r3
  403ee6:	bd38      	pop	{r3, r4, r5, pc}
  403ee8:	00401365 	.word	0x00401365
  403eec:	004011c1 	.word	0x004011c1
  403ef0:	004011c5 	.word	0x004011c5

00403ef4 <TC0_Handler>:
}

void TC0_Handler(void)
{
  403ef4:	b500      	push	{lr}
  403ef6:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 0);
  403ef8:	2100      	movs	r1, #0
  403efa:	4806      	ldr	r0, [pc, #24]	; (403f14 <TC0_Handler+0x20>)
  403efc:	4b06      	ldr	r3, [pc, #24]	; (403f18 <TC0_Handler+0x24>)
  403efe:	4798      	blx	r3
  403f00:	9001      	str	r0, [sp, #4]
	afec->AFEC_CR = AFEC_CR_START;
  403f02:	2302      	movs	r3, #2
  403f04:	4a05      	ldr	r2, [pc, #20]	; (403f1c <TC0_Handler+0x28>)
  403f06:	6013      	str	r3, [r2, #0]
  403f08:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  403f0c:	6013      	str	r3, [r2, #0]
	afec_start_software_conversion(AFEC_POT);
	afec_start_software_conversion(AFEC_POT2);
}
  403f0e:	b003      	add	sp, #12
  403f10:	f85d fb04 	ldr.w	pc, [sp], #4
  403f14:	4000c000 	.word	0x4000c000
  403f18:	00400925 	.word	0x00400925
  403f1c:	4003c000 	.word	0x4003c000

00403f20 <TC1_Handler>:

void TC1_Handler(void)
{
  403f20:	b500      	push	{lr}
  403f22:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 1);
  403f24:	2101      	movs	r1, #1
  403f26:	4805      	ldr	r0, [pc, #20]	; (403f3c <TC1_Handler+0x1c>)
  403f28:	4b05      	ldr	r3, [pc, #20]	; (403f40 <TC1_Handler+0x20>)
  403f2a:	4798      	blx	r3
  403f2c:	9001      	str	r0, [sp, #4]
	pin_toggle(LED_1_PIO, LED_1_IDX_MASK);
  403f2e:	2101      	movs	r1, #1
  403f30:	4804      	ldr	r0, [pc, #16]	; (403f44 <TC1_Handler+0x24>)
  403f32:	4b05      	ldr	r3, [pc, #20]	; (403f48 <TC1_Handler+0x28>)
  403f34:	4798      	blx	r3
}
  403f36:	b003      	add	sp, #12
  403f38:	f85d fb04 	ldr.w	pc, [sp], #4
  403f3c:	4000c000 	.word	0x4000c000
  403f40:	00400925 	.word	0x00400925
  403f44:	400e0e00 	.word	0x400e0e00
  403f48:	00403ec9 	.word	0x00403ec9

00403f4c <TC2_Handler>:

void TC2_Handler(void)
{
  403f4c:	b500      	push	{lr}
  403f4e:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 2);
  403f50:	2102      	movs	r1, #2
  403f52:	4806      	ldr	r0, [pc, #24]	; (403f6c <TC2_Handler+0x20>)
  403f54:	4b06      	ldr	r3, [pc, #24]	; (403f70 <TC2_Handler+0x24>)
  403f56:	4798      	blx	r3
  403f58:	9001      	str	r0, [sp, #4]
	pin_toggle(LED_2_PIO, LED_2_IDX_MASK);
  403f5a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403f5e:	4805      	ldr	r0, [pc, #20]	; (403f74 <TC2_Handler+0x28>)
  403f60:	4b05      	ldr	r3, [pc, #20]	; (403f78 <TC2_Handler+0x2c>)
  403f62:	4798      	blx	r3
}
  403f64:	b003      	add	sp, #12
  403f66:	f85d fb04 	ldr.w	pc, [sp], #4
  403f6a:	bf00      	nop
  403f6c:	4000c000 	.word	0x4000c000
  403f70:	00400925 	.word	0x00400925
  403f74:	400e1200 	.word	0x400e1200
  403f78:	00403ec9 	.word	0x00403ec9

00403f7c <RTC_Handler>:
		RTT_init(1, 5, RTT_SR_RTTINC);
	}
}

void RTC_Handler(void)
{
  403f7c:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  403f7e:	4812      	ldr	r0, [pc, #72]	; (403fc8 <RTC_Handler+0x4c>)
  403f80:	4b12      	ldr	r3, [pc, #72]	; (403fcc <RTC_Handler+0x50>)
  403f82:	4798      	blx	r3

	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC)
  403f84:	f010 0f04 	tst.w	r0, #4
  403f88:	d002      	beq.n	403f90 <RTC_Handler+0x14>
		flag_rtc_second = 1;
  403f8a:	2201      	movs	r2, #1
  403f8c:	4b10      	ldr	r3, [pc, #64]	; (403fd0 <RTC_Handler+0x54>)
  403f8e:	701a      	strb	r2, [r3, #0]

	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM)
  403f90:	f010 0f02 	tst.w	r0, #2
  403f94:	d002      	beq.n	403f9c <RTC_Handler+0x20>
		flag_rtc_alarm = 1;
  403f96:	2201      	movs	r2, #1
  403f98:	4b0e      	ldr	r3, [pc, #56]	; (403fd4 <RTC_Handler+0x58>)
  403f9a:	701a      	strb	r2, [r3, #0]

	rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  403f9c:	4d0a      	ldr	r5, [pc, #40]	; (403fc8 <RTC_Handler+0x4c>)
  403f9e:	2104      	movs	r1, #4
  403fa0:	4628      	mov	r0, r5
  403fa2:	4c0d      	ldr	r4, [pc, #52]	; (403fd8 <RTC_Handler+0x5c>)
  403fa4:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  403fa6:	2102      	movs	r1, #2
  403fa8:	4628      	mov	r0, r5
  403faa:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  403fac:	2101      	movs	r1, #1
  403fae:	4628      	mov	r0, r5
  403fb0:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  403fb2:	2108      	movs	r1, #8
  403fb4:	4628      	mov	r0, r5
  403fb6:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  403fb8:	2110      	movs	r1, #16
  403fba:	4628      	mov	r0, r5
  403fbc:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  403fbe:	2120      	movs	r1, #32
  403fc0:	4628      	mov	r0, r5
  403fc2:	47a0      	blx	r4
  403fc4:	bd38      	pop	{r3, r4, r5, pc}
  403fc6:	bf00      	nop
  403fc8:	400e1860 	.word	0x400e1860
  403fcc:	004006dd 	.word	0x004006dd
  403fd0:	20400da1 	.word	0x20400da1
  403fd4:	20400da0 	.word	0x20400da0
  403fd8:	004006e1 	.word	0x004006e1

00403fdc <TC_init>:
}

void TC_init(Tc *TC, int ID_TC, int TC_CHANNEL, int freq)
{
  403fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403fe0:	b085      	sub	sp, #20
  403fe2:	4606      	mov	r6, r0
  403fe4:	460c      	mov	r4, r1
  403fe6:	4617      	mov	r7, r2
  403fe8:	4698      	mov	r8, r3
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();

	pmc_enable_periph_clk(ID_TC);
  403fea:	4608      	mov	r0, r1
  403fec:	4b1c      	ldr	r3, [pc, #112]	; (404060 <TC_init+0x84>)
  403fee:	4798      	blx	r3

	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  403ff0:	4d1c      	ldr	r5, [pc, #112]	; (404064 <TC_init+0x88>)
  403ff2:	9500      	str	r5, [sp, #0]
  403ff4:	ab02      	add	r3, sp, #8
  403ff6:	aa03      	add	r2, sp, #12
  403ff8:	4629      	mov	r1, r5
  403ffa:	4640      	mov	r0, r8
  403ffc:	f8df 9080 	ldr.w	r9, [pc, #128]	; 404080 <TC_init+0xa4>
  404000:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  404002:	9a02      	ldr	r2, [sp, #8]
  404004:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  404008:	4639      	mov	r1, r7
  40400a:	4630      	mov	r0, r6
  40400c:	4b16      	ldr	r3, [pc, #88]	; (404068 <TC_init+0x8c>)
  40400e:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  404010:	9a03      	ldr	r2, [sp, #12]
  404012:	fbb5 f2f2 	udiv	r2, r5, r2
  404016:	fbb2 f2f8 	udiv	r2, r2, r8
  40401a:	4639      	mov	r1, r7
  40401c:	4630      	mov	r0, r6
  40401e:	4b13      	ldr	r3, [pc, #76]	; (40406c <TC_init+0x90>)
  404020:	4798      	blx	r3

	NVIC_SetPriority(ID_TC, 4);
  404022:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  404024:	2b00      	cmp	r3, #0
  404026:	db13      	blt.n	404050 <TC_init+0x74>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  404028:	4a11      	ldr	r2, [pc, #68]	; (404070 <TC_init+0x94>)
  40402a:	2180      	movs	r1, #128	; 0x80
  40402c:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40402e:	095b      	lsrs	r3, r3, #5
  404030:	f004 041f 	and.w	r4, r4, #31
  404034:	2201      	movs	r2, #1
  404036:	fa02 f404 	lsl.w	r4, r2, r4
  40403a:	4a0e      	ldr	r2, [pc, #56]	; (404074 <TC_init+0x98>)
  40403c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	NVIC_EnableIRQ((IRQn_Type)ID_TC);
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  404040:	2210      	movs	r2, #16
  404042:	4639      	mov	r1, r7
  404044:	4630      	mov	r0, r6
  404046:	4b0c      	ldr	r3, [pc, #48]	; (404078 <TC_init+0x9c>)
  404048:	4798      	blx	r3
}
  40404a:	b005      	add	sp, #20
  40404c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  404050:	f004 010f 	and.w	r1, r4, #15
  404054:	4a09      	ldr	r2, [pc, #36]	; (40407c <TC_init+0xa0>)
  404056:	440a      	add	r2, r1
  404058:	2180      	movs	r1, #128	; 0x80
  40405a:	7611      	strb	r1, [r2, #24]
  40405c:	e7e7      	b.n	40402e <TC_init+0x52>
  40405e:	bf00      	nop
  404060:	004015f5 	.word	0x004015f5
  404064:	11e1a300 	.word	0x11e1a300
  404068:	004008f3 	.word	0x004008f3
  40406c:	00400915 	.word	0x00400915
  404070:	e000e400 	.word	0xe000e400
  404074:	e000e100 	.word	0xe000e100
  404078:	0040091d 	.word	0x0040091d
  40407c:	e000ecfc 	.word	0xe000ecfc
  404080:	0040092d 	.word	0x0040092d

00404084 <task_alarm>:
{
  404084:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  404088:	b08d      	sub	sp, #52	; 0x34
	TC_init(TC0, ID_TC1, 1, 10);
  40408a:	4d3b      	ldr	r5, [pc, #236]	; (404178 <task_alarm+0xf4>)
  40408c:	230a      	movs	r3, #10
  40408e:	2201      	movs	r2, #1
  404090:	2118      	movs	r1, #24
  404092:	4628      	mov	r0, r5
  404094:	4c39      	ldr	r4, [pc, #228]	; (40417c <task_alarm+0xf8>)
  404096:	47a0      	blx	r4
	TC_init(TC0, ID_TC2, 2, 10);
  404098:	230a      	movs	r3, #10
  40409a:	2202      	movs	r2, #2
  40409c:	2119      	movs	r1, #25
  40409e:	4628      	mov	r0, r5
  4040a0:	47a0      	blx	r4
		if (xSemaphoreTake(xSemaphoreEventAlarm, 1))
  4040a2:	4d37      	ldr	r5, [pc, #220]	; (404180 <task_alarm+0xfc>)
  4040a4:	2400      	movs	r4, #0
			tc_start(TC0, 1);
  4040a6:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 404178 <task_alarm+0xf4>
  4040aa:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 4041a8 <task_alarm+0x124>
			xSemaphoreTake(xSemaphoreMutex, portMAX_DELAY);
  4040ae:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 4041ac <task_alarm+0x128>
  4040b2:	e05e      	b.n	404172 <task_alarm+0xee>
		if (xSemaphoreTake(xSemaphoreAfecAlarm, 1))
  4040b4:	4b33      	ldr	r3, [pc, #204]	; (404184 <task_alarm+0x100>)
  4040b6:	6818      	ldr	r0, [r3, #0]
  4040b8:	4623      	mov	r3, r4
  4040ba:	2201      	movs	r2, #1
  4040bc:	4621      	mov	r1, r4
  4040be:	47a8      	blx	r5
  4040c0:	2800      	cmp	r0, #0
  4040c2:	d137      	bne.n	404134 <task_alarm+0xb0>
		rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  4040c4:	ab09      	add	r3, sp, #36	; 0x24
  4040c6:	aa0a      	add	r2, sp, #40	; 0x28
  4040c8:	a90b      	add	r1, sp, #44	; 0x2c
  4040ca:	4630      	mov	r0, r6
  4040cc:	47b8      	blx	r7
		rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  4040ce:	ab05      	add	r3, sp, #20
  4040d0:	9300      	str	r3, [sp, #0]
  4040d2:	ab06      	add	r3, sp, #24
  4040d4:	aa07      	add	r2, sp, #28
  4040d6:	a908      	add	r1, sp, #32
  4040d8:	4630      	mov	r0, r6
  4040da:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 4041b0 <task_alarm+0x12c>
  4040de:	47d8      	blx	fp
		if (xSemaphoreTake(xSemaphoreEventAlarm, 1))
  4040e0:	4b29      	ldr	r3, [pc, #164]	; (404188 <task_alarm+0x104>)
  4040e2:	6818      	ldr	r0, [r3, #0]
  4040e4:	4623      	mov	r3, r4
  4040e6:	2201      	movs	r2, #1
  4040e8:	4621      	mov	r1, r4
  4040ea:	47a8      	blx	r5
  4040ec:	2800      	cmp	r0, #0
  4040ee:	d0e1      	beq.n	4040b4 <task_alarm+0x30>
			tc_start(TC0, 1);
  4040f0:	2101      	movs	r1, #1
  4040f2:	4650      	mov	r0, sl
  4040f4:	47c8      	blx	r9
			xSemaphoreTake(xSemaphoreMutex, portMAX_DELAY);
  4040f6:	f8d8 0000 	ldr.w	r0, [r8]
  4040fa:	4623      	mov	r3, r4
  4040fc:	f04f 32ff 	mov.w	r2, #4294967295
  404100:	4621      	mov	r1, r4
  404102:	47a8      	blx	r5
			printf("[ALARM] %02d:%02d:%04d %02d:%02d:%02d $%s\n", current_day, current_month, current_year, current_hour, current_min, current_sec, "EVENT");
  404104:	4b21      	ldr	r3, [pc, #132]	; (40418c <task_alarm+0x108>)
  404106:	9303      	str	r3, [sp, #12]
  404108:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40410a:	9302      	str	r3, [sp, #8]
  40410c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40410e:	9301      	str	r3, [sp, #4]
  404110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404112:	9300      	str	r3, [sp, #0]
  404114:	9b08      	ldr	r3, [sp, #32]
  404116:	9a07      	ldr	r2, [sp, #28]
  404118:	9906      	ldr	r1, [sp, #24]
  40411a:	481d      	ldr	r0, [pc, #116]	; (404190 <task_alarm+0x10c>)
  40411c:	f8df b078 	ldr.w	fp, [pc, #120]	; 404198 <task_alarm+0x114>
  404120:	47d8      	blx	fp
			xSemaphoreGive(xSemaphoreMutex);
  404122:	f8d8 0000 	ldr.w	r0, [r8]
  404126:	4623      	mov	r3, r4
  404128:	4622      	mov	r2, r4
  40412a:	4621      	mov	r1, r4
  40412c:	f8df b06c 	ldr.w	fp, [pc, #108]	; 40419c <task_alarm+0x118>
  404130:	47d8      	blx	fp
  404132:	e7bf      	b.n	4040b4 <task_alarm+0x30>
			tc_start(TC0, 2);
  404134:	2102      	movs	r1, #2
  404136:	4650      	mov	r0, sl
  404138:	47c8      	blx	r9
			xSemaphoreTake(xSemaphoreMutex, portMAX_DELAY);
  40413a:	f8d8 0000 	ldr.w	r0, [r8]
  40413e:	4623      	mov	r3, r4
  404140:	f04f 32ff 	mov.w	r2, #4294967295
  404144:	4621      	mov	r1, r4
  404146:	47a8      	blx	r5
			printf("[ALARM] %02d:%02d:%04d %02d:%02d:%02d $%s\n", current_day, current_month, current_year, current_hour, current_min, current_sec, "AFEC");
  404148:	4b12      	ldr	r3, [pc, #72]	; (404194 <task_alarm+0x110>)
  40414a:	9303      	str	r3, [sp, #12]
  40414c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40414e:	9302      	str	r3, [sp, #8]
  404150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404152:	9301      	str	r3, [sp, #4]
  404154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404156:	9300      	str	r3, [sp, #0]
  404158:	9b08      	ldr	r3, [sp, #32]
  40415a:	9a07      	ldr	r2, [sp, #28]
  40415c:	9906      	ldr	r1, [sp, #24]
  40415e:	480c      	ldr	r0, [pc, #48]	; (404190 <task_alarm+0x10c>)
  404160:	4e0d      	ldr	r6, [pc, #52]	; (404198 <task_alarm+0x114>)
  404162:	47b0      	blx	r6
			xSemaphoreGive(xSemaphoreMutex);
  404164:	f8d8 0000 	ldr.w	r0, [r8]
  404168:	4623      	mov	r3, r4
  40416a:	4622      	mov	r2, r4
  40416c:	4621      	mov	r1, r4
  40416e:	4e0b      	ldr	r6, [pc, #44]	; (40419c <task_alarm+0x118>)
  404170:	47b0      	blx	r6
		rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  404172:	4e0b      	ldr	r6, [pc, #44]	; (4041a0 <task_alarm+0x11c>)
  404174:	4f0b      	ldr	r7, [pc, #44]	; (4041a4 <task_alarm+0x120>)
  404176:	e7a5      	b.n	4040c4 <task_alarm+0x40>
  404178:	4000c000 	.word	0x4000c000
  40417c:	00403fdd 	.word	0x00403fdd
  404180:	00402535 	.word	0x00402535
  404184:	20400eb4 	.word	0x20400eb4
  404188:	20400eb8 	.word	0x20400eb8
  40418c:	00407994 	.word	0x00407994
  404190:	00407968 	.word	0x00407968
  404194:	0040799c 	.word	0x0040799c
  404198:	00404885 	.word	0x00404885
  40419c:	00402119 	.word	0x00402119
  4041a0:	400e1860 	.word	0x400e1860
  4041a4:	004004c7 	.word	0x004004c7
  4041a8:	0040090d 	.word	0x0040090d
  4041ac:	20400eb0 	.word	0x20400eb0
  4041b0:	004005b1 	.word	0x004005b1

004041b4 <RTT_init>:

void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource)
{
  4041b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4041b8:	ed2d 8b02 	vpush	{d8}
  4041bc:	b082      	sub	sp, #8
  4041be:	ee08 0a10 	vmov	s16, r0
  4041c2:	4688      	mov	r8, r1
  4041c4:	4617      	mov	r7, r2
	uint16_t pllPreScale = (int)(((float)32768) / freqPrescale);

	rtt_sel_source(RTT, false);
  4041c6:	4c20      	ldr	r4, [pc, #128]	; (404248 <RTT_init+0x94>)
  4041c8:	2100      	movs	r1, #0
  4041ca:	4620      	mov	r0, r4
  4041cc:	4b1f      	ldr	r3, [pc, #124]	; (40424c <RTT_init+0x98>)
  4041ce:	4798      	blx	r3
	uint16_t pllPreScale = (int)(((float)32768) / freqPrescale);
  4041d0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 404250 <RTT_init+0x9c>
  4041d4:	eec7 7a08 	vdiv.f32	s15, s14, s16
  4041d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  4041dc:	edcd 7a01 	vstr	s15, [sp, #4]
	rtt_init(RTT, pllPreScale);
  4041e0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  4041e4:	4620      	mov	r0, r4
  4041e6:	4b1b      	ldr	r3, [pc, #108]	; (404254 <RTT_init+0xa0>)
  4041e8:	4798      	blx	r3

	if (rttIRQSource & RTT_MR_ALMIEN)
  4041ea:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  4041ee:	d116      	bne.n	40421e <RTT_init+0x6a>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4041f0:	4b19      	ldr	r3, [pc, #100]	; (404258 <RTT_init+0xa4>)
  4041f2:	2208      	movs	r2, #8
  4041f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4041f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4041fc:	2180      	movs	r1, #128	; 0x80
  4041fe:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404202:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(RTT_IRQn);
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 4);
	NVIC_EnableIRQ(RTT_IRQn);

	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  404204:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  404208:	d119      	bne.n	40423e <RTT_init+0x8a>
		rtt_enable_interrupt(RTT, rttIRQSource);
	else
		rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  40420a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  40420e:	480e      	ldr	r0, [pc, #56]	; (404248 <RTT_init+0x94>)
  404210:	4b12      	ldr	r3, [pc, #72]	; (40425c <RTT_init+0xa8>)
  404212:	4798      	blx	r3
}
  404214:	b002      	add	sp, #8
  404216:	ecbd 8b02 	vpop	{d8}
  40421a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_previous_time = rtt_read_timer_value(RTT);
  40421e:	4620      	mov	r0, r4
  404220:	4b0f      	ldr	r3, [pc, #60]	; (404260 <RTT_init+0xac>)
  404222:	4798      	blx	r3
  404224:	4604      	mov	r4, r0
		while (ul_previous_time == rtt_read_timer_value(RTT))
  404226:	4e08      	ldr	r6, [pc, #32]	; (404248 <RTT_init+0x94>)
  404228:	4d0d      	ldr	r5, [pc, #52]	; (404260 <RTT_init+0xac>)
  40422a:	4630      	mov	r0, r6
  40422c:	47a8      	blx	r5
  40422e:	4284      	cmp	r4, r0
  404230:	d0fb      	beq.n	40422a <RTT_init+0x76>
		rtt_write_alarm_time(RTT, IrqNPulses + ul_previous_time);
  404232:	eb04 0108 	add.w	r1, r4, r8
  404236:	4804      	ldr	r0, [pc, #16]	; (404248 <RTT_init+0x94>)
  404238:	4b0a      	ldr	r3, [pc, #40]	; (404264 <RTT_init+0xb0>)
  40423a:	4798      	blx	r3
  40423c:	e7d8      	b.n	4041f0 <RTT_init+0x3c>
		rtt_enable_interrupt(RTT, rttIRQSource);
  40423e:	4639      	mov	r1, r7
  404240:	4801      	ldr	r0, [pc, #4]	; (404248 <RTT_init+0x94>)
  404242:	4b09      	ldr	r3, [pc, #36]	; (404268 <RTT_init+0xb4>)
  404244:	4798      	blx	r3
  404246:	e7e5      	b.n	404214 <RTT_init+0x60>
  404248:	400e1830 	.word	0x400e1830
  40424c:	004006f9 	.word	0x004006f9
  404250:	47000000 	.word	0x47000000
  404254:	004006e5 	.word	0x004006e5
  404258:	e000e100 	.word	0xe000e100
  40425c:	00400739 	.word	0x00400739
  404260:	0040074d 	.word	0x0040074d
  404264:	00400765 	.word	0x00400765
  404268:	00400725 	.word	0x00400725

0040426c <RTT_Handler>:
{
  40426c:	b508      	push	{r3, lr}
	ul_status = rtt_get_status(RTT);
  40426e:	4809      	ldr	r0, [pc, #36]	; (404294 <RTT_Handler+0x28>)
  404270:	4b09      	ldr	r3, [pc, #36]	; (404298 <RTT_Handler+0x2c>)
  404272:	4798      	blx	r3
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC)
  404274:	f010 0f02 	tst.w	r0, #2
  404278:	d100      	bne.n	40427c <RTT_Handler+0x10>
  40427a:	bd08      	pop	{r3, pc}
  40427c:	2202      	movs	r2, #2
  40427e:	4b07      	ldr	r3, [pc, #28]	; (40429c <RTT_Handler+0x30>)
  404280:	601a      	str	r2, [r3, #0]
  404282:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  404286:	601a      	str	r2, [r3, #0]
		RTT_init(1, 5, RTT_SR_RTTINC);
  404288:	2105      	movs	r1, #5
  40428a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  40428e:	4b04      	ldr	r3, [pc, #16]	; (4042a0 <RTT_Handler+0x34>)
  404290:	4798      	blx	r3
}
  404292:	e7f2      	b.n	40427a <RTT_Handler+0xe>
  404294:	400e1830 	.word	0x400e1830
  404298:	00400761 	.word	0x00400761
  40429c:	4003c000 	.word	0x4003c000
  4042a0:	004041b5 	.word	0x004041b5

004042a4 <RTC_init>:

void RTC_init(Rtc *rtc, uint32_t id_rtc, Calendar t, uint32_t irq_type)
{
  4042a4:	b082      	sub	sp, #8
  4042a6:	b570      	push	{r4, r5, r6, lr}
  4042a8:	b082      	sub	sp, #8
  4042aa:	4605      	mov	r5, r0
  4042ac:	460c      	mov	r4, r1
  4042ae:	a906      	add	r1, sp, #24
  4042b0:	e881 000c 	stmia.w	r1, {r2, r3}
	pmc_enable_periph_clk(ID_RTC);
  4042b4:	2002      	movs	r0, #2
  4042b6:	4b1d      	ldr	r3, [pc, #116]	; (40432c <RTC_init+0x88>)
  4042b8:	4798      	blx	r3
	rtc_set_hour_mode(rtc, 0);
  4042ba:	2100      	movs	r1, #0
  4042bc:	4628      	mov	r0, r5
  4042be:	4b1c      	ldr	r3, [pc, #112]	; (404330 <RTC_init+0x8c>)
  4042c0:	4798      	blx	r3

	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  4042c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4042c4:	9300      	str	r3, [sp, #0]
  4042c6:	9b08      	ldr	r3, [sp, #32]
  4042c8:	9a07      	ldr	r2, [sp, #28]
  4042ca:	9906      	ldr	r1, [sp, #24]
  4042cc:	4628      	mov	r0, r5
  4042ce:	4e19      	ldr	r6, [pc, #100]	; (404334 <RTC_init+0x90>)
  4042d0:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  4042d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4042d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4042d6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4042d8:	4628      	mov	r0, r5
  4042da:	4e17      	ldr	r6, [pc, #92]	; (404338 <RTC_init+0x94>)
  4042dc:	47b0      	blx	r6

	NVIC_DisableIRQ(id_rtc);
  4042de:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4042e0:	b2e4      	uxtb	r4, r4
  4042e2:	f004 011f 	and.w	r1, r4, #31
  4042e6:	2301      	movs	r3, #1
  4042e8:	408b      	lsls	r3, r1
  4042ea:	0956      	lsrs	r6, r2, #5
  4042ec:	4813      	ldr	r0, [pc, #76]	; (40433c <RTC_init+0x98>)
  4042ee:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  4042f2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4042f6:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  4042fa:	2a00      	cmp	r2, #0
  4042fc:	db0f      	blt.n	40431e <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4042fe:	490f      	ldr	r1, [pc, #60]	; (40433c <RTC_init+0x98>)
  404300:	4411      	add	r1, r2
  404302:	2280      	movs	r2, #128	; 0x80
  404304:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404308:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	NVIC_ClearPendingIRQ(id_rtc);
	NVIC_SetPriority(id_rtc, 4);
	NVIC_EnableIRQ(id_rtc);

	rtc_enable_interrupt(rtc, irq_type);
  40430c:	990d      	ldr	r1, [sp, #52]	; 0x34
  40430e:	4628      	mov	r0, r5
  404310:	4b0b      	ldr	r3, [pc, #44]	; (404340 <RTC_init+0x9c>)
  404312:	4798      	blx	r3
}
  404314:	b002      	add	sp, #8
  404316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  40431a:	b002      	add	sp, #8
  40431c:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40431e:	f004 040f 	and.w	r4, r4, #15
  404322:	4a08      	ldr	r2, [pc, #32]	; (404344 <RTC_init+0xa0>)
  404324:	2180      	movs	r1, #128	; 0x80
  404326:	5511      	strb	r1, [r2, r4]
  404328:	e7ee      	b.n	404308 <RTC_init+0x64>
  40432a:	bf00      	nop
  40432c:	004015f5 	.word	0x004015f5
  404330:	004004ad 	.word	0x004004ad
  404334:	00400625 	.word	0x00400625
  404338:	00400521 	.word	0x00400521
  40433c:	e000e100 	.word	0xe000e100
  404340:	004004c3 	.word	0x004004c3
  404344:	e000ed14 	.word	0xe000ed14

00404348 <configure_afec>:

void configure_afec(Afec *afec, uint32_t afec_id, uint32_t afec_channel, afec_callback_t callback)
{
  404348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40434c:	b08a      	sub	sp, #40	; 0x28
  40434e:	4604      	mov	r4, r0
  404350:	460d      	mov	r5, r1
  404352:	4616      	mov	r6, r2
  404354:	4698      	mov	r8, r3
	afec_enable(afec);
  404356:	4b21      	ldr	r3, [pc, #132]	; (4043dc <configure_afec+0x94>)
  404358:	4798      	blx	r3
	struct afec_config afec_cfg;
	afec_get_config_defaults(&afec_cfg);
  40435a:	a804      	add	r0, sp, #16
  40435c:	4b20      	ldr	r3, [pc, #128]	; (4043e0 <configure_afec+0x98>)
  40435e:	4798      	blx	r3
	afec_init(afec, &afec_cfg);
  404360:	a904      	add	r1, sp, #16
  404362:	4620      	mov	r0, r4
  404364:	4b1f      	ldr	r3, [pc, #124]	; (4043e4 <configure_afec+0x9c>)
  404366:	4798      	blx	r3
	reg = afec->AFEC_MR;
  404368:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  40436a:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  40436e:	6063      	str	r3, [r4, #4]
	afec_set_trigger(afec, AFEC_TRIG_SW);

	struct afec_ch_config afec_ch_cfg;
	afec_ch_get_config_defaults(&afec_ch_cfg);
  404370:	a803      	add	r0, sp, #12
  404372:	4b1d      	ldr	r3, [pc, #116]	; (4043e8 <configure_afec+0xa0>)
  404374:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  404376:	2300      	movs	r3, #0
  404378:	f88d 300d 	strb.w	r3, [sp, #13]
	afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  40437c:	b2b7      	uxth	r7, r6
  40437e:	aa03      	add	r2, sp, #12
  404380:	4639      	mov	r1, r7
  404382:	4620      	mov	r0, r4
  404384:	4b19      	ldr	r3, [pc, #100]	; (4043ec <configure_afec+0xa4>)
  404386:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  404388:	6667      	str	r7, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  40438a:	f44f 7300 	mov.w	r3, #512	; 0x200
  40438e:	66e3      	str	r3, [r4, #108]	; 0x6c

	afec_channel_set_analog_offset(afec, afec_channel, 0x200);
	struct afec_temp_sensor_config afec_temp_sensor_cfg;

	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  404390:	a801      	add	r0, sp, #4
  404392:	4b17      	ldr	r3, [pc, #92]	; (4043f0 <configure_afec+0xa8>)
  404394:	4798      	blx	r3
	afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  404396:	a901      	add	r1, sp, #4
  404398:	4620      	mov	r0, r4
  40439a:	4b16      	ldr	r3, [pc, #88]	; (4043f4 <configure_afec+0xac>)
  40439c:	4798      	blx	r3

	afec_set_callback(afec, afec_channel, callback, 1);
  40439e:	2301      	movs	r3, #1
  4043a0:	4642      	mov	r2, r8
  4043a2:	4631      	mov	r1, r6
  4043a4:	4620      	mov	r0, r4
  4043a6:	4c14      	ldr	r4, [pc, #80]	; (4043f8 <configure_afec+0xb0>)
  4043a8:	47a0      	blx	r4
	NVIC_SetPriority(afec_id, 4);
  4043aa:	b26b      	sxtb	r3, r5
  if(IRQn < 0) {
  4043ac:	2b00      	cmp	r3, #0
  4043ae:	db0e      	blt.n	4043ce <configure_afec+0x86>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4043b0:	4a12      	ldr	r2, [pc, #72]	; (4043fc <configure_afec+0xb4>)
  4043b2:	2180      	movs	r1, #128	; 0x80
  4043b4:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4043b6:	095b      	lsrs	r3, r3, #5
  4043b8:	f005 051f 	and.w	r5, r5, #31
  4043bc:	2201      	movs	r2, #1
  4043be:	fa02 f505 	lsl.w	r5, r2, r5
  4043c2:	4a0f      	ldr	r2, [pc, #60]	; (404400 <configure_afec+0xb8>)
  4043c4:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
	NVIC_EnableIRQ(afec_id);
}
  4043c8:	b00a      	add	sp, #40	; 0x28
  4043ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4043ce:	f005 010f 	and.w	r1, r5, #15
  4043d2:	4a0c      	ldr	r2, [pc, #48]	; (404404 <configure_afec+0xbc>)
  4043d4:	440a      	add	r2, r1
  4043d6:	2180      	movs	r1, #128	; 0x80
  4043d8:	7611      	strb	r1, [r2, #24]
  4043da:	e7ec      	b.n	4043b6 <configure_afec+0x6e>
  4043dc:	00400449 	.word	0x00400449
  4043e0:	00400279 	.word	0x00400279
  4043e4:	004002c9 	.word	0x004002c9
  4043e8:	004002a9 	.word	0x004002a9
  4043ec:	00400235 	.word	0x00400235
  4043f0:	004002b3 	.word	0x004002b3
  4043f4:	00400265 	.word	0x00400265
  4043f8:	004003c9 	.word	0x004003c9
  4043fc:	e000e400 	.word	0xe000e400
  404400:	e000e100 	.word	0xe000e100
  404404:	e000ecfc 	.word	0xe000ecfc

00404408 <io_init>:
	/* Specify that stdout should not be buffered. */
	setbuf(stdout, NULL);
}

void io_init(void)
{
  404408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40440c:	b082      	sub	sp, #8
	pmc_enable_periph_clk(LED_1_PIO_ID);
  40440e:	200a      	movs	r0, #10
  404410:	4c4d      	ldr	r4, [pc, #308]	; (404548 <io_init+0x140>)
  404412:	47a0      	blx	r4
	pmc_enable_periph_clk(LED_2_PIO_ID);
  404414:	200c      	movs	r0, #12
  404416:	47a0      	blx	r4
	pmc_enable_periph_clk(LED_3_PIO_ID);
  404418:	200b      	movs	r0, #11
  40441a:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT_1_PIO_ID);
  40441c:	2010      	movs	r0, #16
  40441e:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT_2_PIO_ID);
  404420:	200c      	movs	r0, #12
  404422:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT_3_PIO_ID);
  404424:	200a      	movs	r0, #10
  404426:	47a0      	blx	r4

	pio_configure(LED_1_PIO, PIO_OUTPUT_0, LED_1_IDX_MASK, PIO_DEFAULT);
  404428:	4c48      	ldr	r4, [pc, #288]	; (40454c <io_init+0x144>)
  40442a:	2300      	movs	r3, #0
  40442c:	2201      	movs	r2, #1
  40442e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  404432:	4620      	mov	r0, r4
  404434:	4d46      	ldr	r5, [pc, #280]	; (404550 <io_init+0x148>)
  404436:	47a8      	blx	r5
	pio_configure(LED_2_PIO, PIO_OUTPUT_0, LED_2_IDX_MASK, PIO_DEFAULT);
  404438:	4e46      	ldr	r6, [pc, #280]	; (404554 <io_init+0x14c>)
  40443a:	2300      	movs	r3, #0
  40443c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  404440:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  404444:	4630      	mov	r0, r6
  404446:	47a8      	blx	r5
	pio_configure(LED_3_PIO, PIO_OUTPUT_0, LED_3_IDX_MASK, PIO_DEFAULT);
  404448:	f8df 8134 	ldr.w	r8, [pc, #308]	; 404580 <io_init+0x178>
  40444c:	2300      	movs	r3, #0
  40444e:	2204      	movs	r2, #4
  404450:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  404454:	4640      	mov	r0, r8
  404456:	47a8      	blx	r5

	pio_configure(BUT_1_PIO, PIO_INPUT, BUT_1_IDX_MASK,
  404458:	4f3f      	ldr	r7, [pc, #252]	; (404558 <io_init+0x150>)
  40445a:	2309      	movs	r3, #9
  40445c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  404460:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  404464:	4638      	mov	r0, r7
  404466:	47a8      	blx	r5
				  PIO_PULLUP | PIO_DEBOUNCE);
	pio_configure(BUT_2_PIO, PIO_INPUT, BUT_2_IDX_MASK,
  404468:	2309      	movs	r3, #9
  40446a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40446e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  404472:	4630      	mov	r0, r6
  404474:	47a8      	blx	r5
				  PIO_PULLUP | PIO_DEBOUNCE);
	pio_configure(BUT_3_PIO, PIO_INPUT, BUT_3_IDX_MASK,
  404476:	2309      	movs	r3, #9
  404478:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40447c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  404480:	4620      	mov	r0, r4
  404482:	47a8      	blx	r5
				  PIO_PULLUP | PIO_DEBOUNCE);
	pio_configure(BUT_EXTRA_PIO, PIO_INPUT, BUT_EXTRA_IDX_MASK,
  404484:	2309      	movs	r3, #9
  404486:	2204      	movs	r2, #4
  404488:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40448c:	4620      	mov	r0, r4
  40448e:	47a8      	blx	r5
				  PIO_PULLUP | PIO_DEBOUNCE);

	pio_handler_set(BUT_1_PIO, BUT_1_PIO_ID, BUT_1_IDX_MASK, PIO_IT_EDGE,
  404490:	4b32      	ldr	r3, [pc, #200]	; (40455c <io_init+0x154>)
  404492:	9300      	str	r3, [sp, #0]
  404494:	2340      	movs	r3, #64	; 0x40
  404496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40449a:	2110      	movs	r1, #16
  40449c:	4638      	mov	r0, r7
  40449e:	4d30      	ldr	r5, [pc, #192]	; (404560 <io_init+0x158>)
  4044a0:	47a8      	blx	r5
					but1_callback);
	pio_handler_set(BUT_2_PIO, BUT_2_PIO_ID, BUT_2_IDX_MASK, PIO_IT_EDGE,
  4044a2:	4b30      	ldr	r3, [pc, #192]	; (404564 <io_init+0x15c>)
  4044a4:	9300      	str	r3, [sp, #0]
  4044a6:	2340      	movs	r3, #64	; 0x40
  4044a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4044ac:	210c      	movs	r1, #12
  4044ae:	4630      	mov	r0, r6
  4044b0:	47a8      	blx	r5
					but2_callback);
	pio_handler_set(BUT_3_PIO, BUT_3_PIO_ID, BUT_3_IDX_MASK, PIO_IT_EDGE,
  4044b2:	4b2d      	ldr	r3, [pc, #180]	; (404568 <io_init+0x160>)
  4044b4:	9300      	str	r3, [sp, #0]
  4044b6:	2340      	movs	r3, #64	; 0x40
  4044b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4044bc:	210a      	movs	r1, #10
  4044be:	4620      	mov	r0, r4
  4044c0:	47a8      	blx	r5
					but3_callback);
	pio_handler_set(BUT_EXTRA_PIO, BUT_EXTRA_PIO_ID, BUT_EXTRA_IDX_MASK, PIO_IT_EDGE,
  4044c2:	4b2a      	ldr	r3, [pc, #168]	; (40456c <io_init+0x164>)
  4044c4:	9300      	str	r3, [sp, #0]
  4044c6:	2340      	movs	r3, #64	; 0x40
  4044c8:	2204      	movs	r2, #4
  4044ca:	210a      	movs	r1, #10
  4044cc:	4620      	mov	r0, r4
  4044ce:	47a8      	blx	r5
					butEXTRA_callback);

	pio_enable_interrupt(BUT_1_PIO, BUT_1_IDX_MASK);
  4044d0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4044d4:	4638      	mov	r0, r7
  4044d6:	4d26      	ldr	r5, [pc, #152]	; (404570 <io_init+0x168>)
  4044d8:	47a8      	blx	r5
	pio_enable_interrupt(BUT_2_PIO, BUT_2_IDX_MASK);
  4044da:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4044de:	4630      	mov	r0, r6
  4044e0:	47a8      	blx	r5
	pio_enable_interrupt(BUT_3_PIO, BUT_3_IDX_MASK);
  4044e2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4044e6:	4620      	mov	r0, r4
  4044e8:	47a8      	blx	r5
	pio_enable_interrupt(BUT_EXTRA_PIO, BUT_EXTRA_IDX_MASK);
  4044ea:	2104      	movs	r1, #4
  4044ec:	4620      	mov	r0, r4
  4044ee:	47a8      	blx	r5

	pio_get_interrupt_status(BUT_1_PIO);
  4044f0:	4638      	mov	r0, r7
  4044f2:	4d20      	ldr	r5, [pc, #128]	; (404574 <io_init+0x16c>)
  4044f4:	47a8      	blx	r5
	pio_get_interrupt_status(BUT_2_PIO);
  4044f6:	4630      	mov	r0, r6
  4044f8:	47a8      	blx	r5
	pio_get_interrupt_status(BUT_3_PIO);
  4044fa:	4620      	mov	r0, r4
  4044fc:	47a8      	blx	r5
	pio_get_interrupt_status(BUT_EXTRA_PIO);
  4044fe:	4620      	mov	r0, r4
  404500:	47a8      	blx	r5
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404502:	4b1d      	ldr	r3, [pc, #116]	; (404578 <io_init+0x170>)
  404504:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  404508:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40450a:	2280      	movs	r2, #128	; 0x80
  40450c:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404510:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404514:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  404516:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40451a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40451e:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  404520:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404524:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  404526:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	NVIC_SetPriority(BUT_3_PIO_ID, 4);

	NVIC_EnableIRQ(BUT_EXTRA_PIO_ID);
	NVIC_SetPriority(BUT_EXTRA_PIO_ID, 4);

	pio_set(LED_1_PIO, LED_1_IDX_MASK);
  40452a:	2101      	movs	r1, #1
  40452c:	4620      	mov	r0, r4
  40452e:	4c13      	ldr	r4, [pc, #76]	; (40457c <io_init+0x174>)
  404530:	47a0      	blx	r4
	pio_set(LED_2_PIO, LED_2_IDX_MASK);
  404532:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  404536:	4630      	mov	r0, r6
  404538:	47a0      	blx	r4
	pio_set(LED_3_PIO, LED_3_IDX_MASK);
  40453a:	2104      	movs	r1, #4
  40453c:	4640      	mov	r0, r8
  40453e:	47a0      	blx	r4
}
  404540:	b002      	add	sp, #8
  404542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404546:	bf00      	nop
  404548:	004015f5 	.word	0x004015f5
  40454c:	400e0e00 	.word	0x400e0e00
  404550:	004012d5 	.word	0x004012d5
  404554:	400e1200 	.word	0x400e1200
  404558:	400e1400 	.word	0x400e1400
  40455c:	004037bd 	.word	0x004037bd
  404560:	00401401 	.word	0x00401401
  404564:	00403801 	.word	0x00403801
  404568:	00403845 	.word	0x00403845
  40456c:	00403889 	.word	0x00403889
  404570:	004013a3 	.word	0x004013a3
  404574:	004013a7 	.word	0x004013a7
  404578:	e000e100 	.word	0xe000e100
  40457c:	004011c1 	.word	0x004011c1
  404580:	400e1000 	.word	0x400e1000

00404584 <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void)
{
  404584:	b580      	push	{r7, lr}
  404586:	b094      	sub	sp, #80	; 0x50
	/* Initialize the SAM system */
	sysclk_init();
  404588:	4b77      	ldr	r3, [pc, #476]	; (404768 <main+0x1e4>)
  40458a:	4798      	blx	r3
	board_init();
  40458c:	4b77      	ldr	r3, [pc, #476]	; (40476c <main+0x1e8>)
  40458e:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  404590:	4d77      	ldr	r5, [pc, #476]	; (404770 <main+0x1ec>)
  404592:	4b78      	ldr	r3, [pc, #480]	; (404774 <main+0x1f0>)
  404594:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  404596:	4a78      	ldr	r2, [pc, #480]	; (404778 <main+0x1f4>)
  404598:	4b78      	ldr	r3, [pc, #480]	; (40477c <main+0x1f8>)
  40459a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40459c:	4a78      	ldr	r2, [pc, #480]	; (404780 <main+0x1fc>)
  40459e:	4b79      	ldr	r3, [pc, #484]	; (404784 <main+0x200>)
  4045a0:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4045a2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4045a6:	9307      	str	r3, [sp, #28]
	usart_settings.char_length = opt->charlength;
  4045a8:	23c0      	movs	r3, #192	; 0xc0
  4045aa:	9308      	str	r3, [sp, #32]
	usart_settings.parity_type = opt->paritytype;
  4045ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4045b0:	9309      	str	r3, [sp, #36]	; 0x24
	usart_settings.stop_bits= opt->stopbits;
  4045b2:	2400      	movs	r4, #0
  4045b4:	940a      	str	r4, [sp, #40]	; 0x28
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4045b6:	940b      	str	r4, [sp, #44]	; 0x2c
  4045b8:	200e      	movs	r0, #14
  4045ba:	4b73      	ldr	r3, [pc, #460]	; (404788 <main+0x204>)
  4045bc:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  4045be:	4a73      	ldr	r2, [pc, #460]	; (40478c <main+0x208>)
  4045c0:	a907      	add	r1, sp, #28
  4045c2:	4628      	mov	r0, r5
  4045c4:	4b72      	ldr	r3, [pc, #456]	; (404790 <main+0x20c>)
  4045c6:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4045c8:	4628      	mov	r0, r5
  4045ca:	4b72      	ldr	r3, [pc, #456]	; (404794 <main+0x210>)
  4045cc:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4045ce:	4628      	mov	r0, r5
  4045d0:	4b71      	ldr	r3, [pc, #452]	; (404798 <main+0x214>)
  4045d2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4045d4:	4e71      	ldr	r6, [pc, #452]	; (40479c <main+0x218>)
  4045d6:	6833      	ldr	r3, [r6, #0]
  4045d8:	4621      	mov	r1, r4
  4045da:	6898      	ldr	r0, [r3, #8]
  4045dc:	4d70      	ldr	r5, [pc, #448]	; (4047a0 <main+0x21c>)
  4045de:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4045e0:	6833      	ldr	r3, [r6, #0]
  4045e2:	4621      	mov	r1, r4
  4045e4:	6858      	ldr	r0, [r3, #4]
  4045e6:	47a8      	blx	r5
	setbuf(stdout, NULL);
  4045e8:	6833      	ldr	r3, [r6, #0]
  4045ea:	4621      	mov	r1, r4
  4045ec:	6898      	ldr	r0, [r3, #8]
  4045ee:	47a8      	blx	r5
	configure_console();
	io_init();
  4045f0:	4b6c      	ldr	r3, [pc, #432]	; (4047a4 <main+0x220>)
  4045f2:	4798      	blx	r3

	Calendar rtc_initial = {2018, 3, 19, 12, 15, 45, 1};
  4045f4:	ad0d      	add	r5, sp, #52	; 0x34
  4045f6:	4e6c      	ldr	r6, [pc, #432]	; (4047a8 <main+0x224>)
  4045f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4045fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4045fc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  404600:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, 0);
  404604:	9405      	str	r4, [sp, #20]
  404606:	466d      	mov	r5, sp
  404608:	ae0f      	add	r6, sp, #60	; 0x3c
  40460a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  40460c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40460e:	6833      	ldr	r3, [r6, #0]
  404610:	602b      	str	r3, [r5, #0]
  404612:	ab0d      	add	r3, sp, #52	; 0x34
  404614:	cb0c      	ldmia	r3, {r2, r3}
  404616:	2102      	movs	r1, #2
  404618:	4864      	ldr	r0, [pc, #400]	; (4047ac <main+0x228>)
  40461a:	4d65      	ldr	r5, [pc, #404]	; (4047b0 <main+0x22c>)
  40461c:	47a8      	blx	r5

	xSemaphoreMutex = xSemaphoreCreateMutex();
  40461e:	2001      	movs	r0, #1
  404620:	4b64      	ldr	r3, [pc, #400]	; (4047b4 <main+0x230>)
  404622:	4798      	blx	r3
  404624:	4b64      	ldr	r3, [pc, #400]	; (4047b8 <main+0x234>)
  404626:	6018      	str	r0, [r3, #0]
	xQueueEvent = xQueueCreate(10, sizeof(EventData));
  404628:	4622      	mov	r2, r4
  40462a:	2102      	movs	r1, #2
  40462c:	200a      	movs	r0, #10
  40462e:	4d63      	ldr	r5, [pc, #396]	; (4047bc <main+0x238>)
  404630:	47a8      	blx	r5
  404632:	4b63      	ldr	r3, [pc, #396]	; (4047c0 <main+0x23c>)
  404634:	6018      	str	r0, [r3, #0]
	xQueueAfec = xQueueCreate(32, sizeof(uint32_t));
  404636:	4622      	mov	r2, r4
  404638:	2104      	movs	r1, #4
  40463a:	2020      	movs	r0, #32
  40463c:	47a8      	blx	r5
  40463e:	4b61      	ldr	r3, [pc, #388]	; (4047c4 <main+0x240>)
  404640:	6018      	str	r0, [r3, #0]
	xQueueAfec2 = xQueueCreate(32, sizeof(uint32_t));
  404642:	4622      	mov	r2, r4
  404644:	2104      	movs	r1, #4
  404646:	2020      	movs	r0, #32
  404648:	47a8      	blx	r5
  40464a:	4b5f      	ldr	r3, [pc, #380]	; (4047c8 <main+0x244>)
  40464c:	6018      	str	r0, [r3, #0]

	xSemaphoreAfecAlarm = xSemaphoreCreateBinary();
  40464e:	2203      	movs	r2, #3
  404650:	4621      	mov	r1, r4
  404652:	2001      	movs	r0, #1
  404654:	47a8      	blx	r5
  404656:	4b5d      	ldr	r3, [pc, #372]	; (4047cc <main+0x248>)
  404658:	6018      	str	r0, [r3, #0]
	if (xSemaphoreAfecAlarm == NULL)
  40465a:	681b      	ldr	r3, [r3, #0]
  40465c:	2b00      	cmp	r3, #0
  40465e:	d07b      	beq.n	404758 <main+0x1d4>
		printf("falha em criar o semaforo \n");

	xSemaphoreEventAlarm = xSemaphoreCreateBinary();
  404660:	2203      	movs	r2, #3
  404662:	2100      	movs	r1, #0
  404664:	2001      	movs	r0, #1
  404666:	4b55      	ldr	r3, [pc, #340]	; (4047bc <main+0x238>)
  404668:	4798      	blx	r3
  40466a:	4b59      	ldr	r3, [pc, #356]	; (4047d0 <main+0x24c>)
  40466c:	6018      	str	r0, [r3, #0]
	if (xSemaphoreEventAlarm == NULL)
  40466e:	681b      	ldr	r3, [r3, #0]
  404670:	2b00      	cmp	r3, #0
  404672:	d075      	beq.n	404760 <main+0x1dc>
		printf("falha em criar o semaforo \n");

	configure_afec(AFEC_POT, AFEC_POT_ID, AFEC_POT_CHANNEL, pot_callback);
  404674:	4f57      	ldr	r7, [pc, #348]	; (4047d4 <main+0x250>)
  404676:	4d58      	ldr	r5, [pc, #352]	; (4047d8 <main+0x254>)
  404678:	463b      	mov	r3, r7
  40467a:	2200      	movs	r2, #0
  40467c:	211d      	movs	r1, #29
  40467e:	4628      	mov	r0, r5
  404680:	4e56      	ldr	r6, [pc, #344]	; (4047dc <main+0x258>)
  404682:	47b0      	blx	r6
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  404684:	2401      	movs	r4, #1
  404686:	616c      	str	r4, [r5, #20]
	afec_channel_enable(AFEC_POT, AFEC_POT_CHANNEL);
	configure_afec(AFEC_POT2, AFEC_POT2_ID, AFEC_POT2_CHANNEL, pot_callback);
  404688:	f505 3520 	add.w	r5, r5, #163840	; 0x28000
  40468c:	463b      	mov	r3, r7
  40468e:	4622      	mov	r2, r4
  404690:	2128      	movs	r1, #40	; 0x28
  404692:	4628      	mov	r0, r5
  404694:	47b0      	blx	r6
  404696:	2302      	movs	r3, #2
  404698:	616b      	str	r3, [r5, #20]
	afec_channel_enable(AFEC_POT2, AFEC_POT2_CHANNEL);
	// RTT_init(1, 5, RTT_SR_RTTINC);
	TC_init(TC0, ID_TC0, 0, 1);
  40469a:	f5a5 25b0 	sub.w	r5, r5, #360448	; 0x58000
  40469e:	4623      	mov	r3, r4
  4046a0:	2200      	movs	r2, #0
  4046a2:	2117      	movs	r1, #23
  4046a4:	4628      	mov	r0, r5
  4046a6:	4c4e      	ldr	r4, [pc, #312]	; (4047e0 <main+0x25c>)
  4046a8:	47a0      	blx	r4
	tc_start(TC0, 0);
  4046aa:	2100      	movs	r1, #0
  4046ac:	4628      	mov	r0, r5
  4046ae:	4b4d      	ldr	r3, [pc, #308]	; (4047e4 <main+0x260>)
  4046b0:	4798      	blx	r3

	if (xTaskCreate(task_oled, "oled", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS)
  4046b2:	2300      	movs	r3, #0
  4046b4:	9303      	str	r3, [sp, #12]
  4046b6:	9302      	str	r3, [sp, #8]
  4046b8:	9301      	str	r3, [sp, #4]
  4046ba:	9300      	str	r3, [sp, #0]
  4046bc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4046c0:	4949      	ldr	r1, [pc, #292]	; (4047e8 <main+0x264>)
  4046c2:	484a      	ldr	r0, [pc, #296]	; (4047ec <main+0x268>)
  4046c4:	4c4a      	ldr	r4, [pc, #296]	; (4047f0 <main+0x26c>)
  4046c6:	47a0      	blx	r4
  4046c8:	2801      	cmp	r0, #1
  4046ca:	d002      	beq.n	4046d2 <main+0x14e>
	{
		printf("Failed to create oled task\r\n");
  4046cc:	4849      	ldr	r0, [pc, #292]	; (4047f4 <main+0x270>)
  4046ce:	4b4a      	ldr	r3, [pc, #296]	; (4047f8 <main+0x274>)
  4046d0:	4798      	blx	r3
	}

	if (xTaskCreate(task_afec, "afec", TASK_ADC_STACK_SIZE, NULL, TASK_ADC_STACK_PRIORITY, NULL) != pdPASS)
  4046d2:	2300      	movs	r3, #0
  4046d4:	9303      	str	r3, [sp, #12]
  4046d6:	9302      	str	r3, [sp, #8]
  4046d8:	9301      	str	r3, [sp, #4]
  4046da:	9300      	str	r3, [sp, #0]
  4046dc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  4046e0:	4946      	ldr	r1, [pc, #280]	; (4047fc <main+0x278>)
  4046e2:	4847      	ldr	r0, [pc, #284]	; (404800 <main+0x27c>)
  4046e4:	4c42      	ldr	r4, [pc, #264]	; (4047f0 <main+0x26c>)
  4046e6:	47a0      	blx	r4
  4046e8:	2801      	cmp	r0, #1
  4046ea:	d002      	beq.n	4046f2 <main+0x16e>
		printf("Failed to create afec task\r\n");
  4046ec:	4845      	ldr	r0, [pc, #276]	; (404804 <main+0x280>)
  4046ee:	4b42      	ldr	r3, [pc, #264]	; (4047f8 <main+0x274>)
  4046f0:	4798      	blx	r3

	if (xTaskCreate(task_afec2, "afec2", TASK_ADC_STACK_SIZE, NULL, TASK_ADC_STACK_PRIORITY, NULL) != pdPASS)
  4046f2:	2300      	movs	r3, #0
  4046f4:	9303      	str	r3, [sp, #12]
  4046f6:	9302      	str	r3, [sp, #8]
  4046f8:	9301      	str	r3, [sp, #4]
  4046fa:	9300      	str	r3, [sp, #0]
  4046fc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  404700:	4941      	ldr	r1, [pc, #260]	; (404808 <main+0x284>)
  404702:	4842      	ldr	r0, [pc, #264]	; (40480c <main+0x288>)
  404704:	4c3a      	ldr	r4, [pc, #232]	; (4047f0 <main+0x26c>)
  404706:	47a0      	blx	r4
  404708:	2801      	cmp	r0, #1
  40470a:	d002      	beq.n	404712 <main+0x18e>
		printf("Failed to create afec2 task\r\n");
  40470c:	4840      	ldr	r0, [pc, #256]	; (404810 <main+0x28c>)
  40470e:	4b3a      	ldr	r3, [pc, #232]	; (4047f8 <main+0x274>)
  404710:	4798      	blx	r3

	if (xTaskCreate(task_event, "EVENT", TASK_EVENT_STACK_SIZE, NULL, TASK_EVENT_STACK_PRIORITY, NULL) != pdPASS)
  404712:	2300      	movs	r3, #0
  404714:	9303      	str	r3, [sp, #12]
  404716:	9302      	str	r3, [sp, #8]
  404718:	9301      	str	r3, [sp, #4]
  40471a:	9300      	str	r3, [sp, #0]
  40471c:	f44f 7200 	mov.w	r2, #512	; 0x200
  404720:	493c      	ldr	r1, [pc, #240]	; (404814 <main+0x290>)
  404722:	483d      	ldr	r0, [pc, #244]	; (404818 <main+0x294>)
  404724:	4c32      	ldr	r4, [pc, #200]	; (4047f0 <main+0x26c>)
  404726:	47a0      	blx	r4
  404728:	2801      	cmp	r0, #1
  40472a:	d002      	beq.n	404732 <main+0x1ae>
		printf("Failed to create EVENT task\r\n");
  40472c:	483b      	ldr	r0, [pc, #236]	; (40481c <main+0x298>)
  40472e:	4b32      	ldr	r3, [pc, #200]	; (4047f8 <main+0x274>)
  404730:	4798      	blx	r3

	if (xTaskCreate(task_alarm, "ALARM", TASK_EVENT_STACK_SIZE, NULL, TASK_EVENT_STACK_PRIORITY, NULL) != pdPASS)
  404732:	2300      	movs	r3, #0
  404734:	9303      	str	r3, [sp, #12]
  404736:	9302      	str	r3, [sp, #8]
  404738:	9301      	str	r3, [sp, #4]
  40473a:	9300      	str	r3, [sp, #0]
  40473c:	f44f 7200 	mov.w	r2, #512	; 0x200
  404740:	4937      	ldr	r1, [pc, #220]	; (404820 <main+0x29c>)
  404742:	4838      	ldr	r0, [pc, #224]	; (404824 <main+0x2a0>)
  404744:	4c2a      	ldr	r4, [pc, #168]	; (4047f0 <main+0x26c>)
  404746:	47a0      	blx	r4
  404748:	2801      	cmp	r0, #1
  40474a:	d002      	beq.n	404752 <main+0x1ce>
		printf("Failed to create ALARM task\r\n");
  40474c:	4836      	ldr	r0, [pc, #216]	; (404828 <main+0x2a4>)
  40474e:	4b2a      	ldr	r3, [pc, #168]	; (4047f8 <main+0x274>)
  404750:	4798      	blx	r3

	vTaskStartScheduler();
  404752:	4b36      	ldr	r3, [pc, #216]	; (40482c <main+0x2a8>)
  404754:	4798      	blx	r3
  404756:	e7fe      	b.n	404756 <main+0x1d2>
		printf("falha em criar o semaforo \n");
  404758:	4835      	ldr	r0, [pc, #212]	; (404830 <main+0x2ac>)
  40475a:	4b27      	ldr	r3, [pc, #156]	; (4047f8 <main+0x274>)
  40475c:	4798      	blx	r3
  40475e:	e77f      	b.n	404660 <main+0xdc>
		printf("falha em criar o semaforo \n");
  404760:	4833      	ldr	r0, [pc, #204]	; (404830 <main+0x2ac>)
  404762:	4b25      	ldr	r3, [pc, #148]	; (4047f8 <main+0x274>)
  404764:	4798      	blx	r3
  404766:	e785      	b.n	404674 <main+0xf0>
  404768:	00400f2d 	.word	0x00400f2d
  40476c:	00401029 	.word	0x00401029
  404770:	40028000 	.word	0x40028000
  404774:	20400e68 	.word	0x20400e68
  404778:	00403dc5 	.word	0x00403dc5
  40477c:	20400e64 	.word	0x20400e64
  404780:	00403ce9 	.word	0x00403ce9
  404784:	20400e60 	.word	0x20400e60
  404788:	004015f5 	.word	0x004015f5
  40478c:	08f0d180 	.word	0x08f0d180
  404790:	004016f1 	.word	0x004016f1
  404794:	00401745 	.word	0x00401745
  404798:	0040174b 	.word	0x0040174b
  40479c:	20400014 	.word	0x20400014
  4047a0:	00405039 	.word	0x00405039
  4047a4:	00404409 	.word	0x00404409
  4047a8:	004077f0 	.word	0x004077f0
  4047ac:	400e1860 	.word	0x400e1860
  4047b0:	004042a5 	.word	0x004042a5
  4047b4:	004022fd 	.word	0x004022fd
  4047b8:	20400eb0 	.word	0x20400eb0
  4047bc:	0040209d 	.word	0x0040209d
  4047c0:	20400ec0 	.word	0x20400ec0
  4047c4:	20400ebc 	.word	0x20400ebc
  4047c8:	20400eac 	.word	0x20400eac
  4047cc:	20400eb4 	.word	0x20400eb4
  4047d0:	20400eb8 	.word	0x20400eb8
  4047d4:	004038cd 	.word	0x004038cd
  4047d8:	4003c000 	.word	0x4003c000
  4047dc:	00404349 	.word	0x00404349
  4047e0:	00403fdd 	.word	0x00403fdd
  4047e4:	0040090d 	.word	0x0040090d
  4047e8:	00407828 	.word	0x00407828
  4047ec:	00403cbd 	.word	0x00403cbd
  4047f0:	00402815 	.word	0x00402815
  4047f4:	00407830 	.word	0x00407830
  4047f8:	00404885 	.word	0x00404885
  4047fc:	00407850 	.word	0x00407850
  404800:	0040391d 	.word	0x0040391d
  404804:	00407858 	.word	0x00407858
  404808:	00407878 	.word	0x00407878
  40480c:	00403a1d 	.word	0x00403a1d
  404810:	00407880 	.word	0x00407880
  404814:	00407994 	.word	0x00407994
  404818:	00403b1d 	.word	0x00403b1d
  40481c:	004078a0 	.word	0x004078a0
  404820:	004078c0 	.word	0x004078c0
  404824:	00404085 	.word	0x00404085
  404828:	004078c8 	.word	0x004078c8
  40482c:	00402a49 	.word	0x00402a49
  404830:	0040780c 	.word	0x0040780c

00404834 <__libc_init_array>:
  404834:	b570      	push	{r4, r5, r6, lr}
  404836:	4e0f      	ldr	r6, [pc, #60]	; (404874 <__libc_init_array+0x40>)
  404838:	4d0f      	ldr	r5, [pc, #60]	; (404878 <__libc_init_array+0x44>)
  40483a:	1b76      	subs	r6, r6, r5
  40483c:	10b6      	asrs	r6, r6, #2
  40483e:	bf18      	it	ne
  404840:	2400      	movne	r4, #0
  404842:	d005      	beq.n	404850 <__libc_init_array+0x1c>
  404844:	3401      	adds	r4, #1
  404846:	f855 3b04 	ldr.w	r3, [r5], #4
  40484a:	4798      	blx	r3
  40484c:	42a6      	cmp	r6, r4
  40484e:	d1f9      	bne.n	404844 <__libc_init_array+0x10>
  404850:	4e0a      	ldr	r6, [pc, #40]	; (40487c <__libc_init_array+0x48>)
  404852:	4d0b      	ldr	r5, [pc, #44]	; (404880 <__libc_init_array+0x4c>)
  404854:	1b76      	subs	r6, r6, r5
  404856:	f003 f97d 	bl	407b54 <_init>
  40485a:	10b6      	asrs	r6, r6, #2
  40485c:	bf18      	it	ne
  40485e:	2400      	movne	r4, #0
  404860:	d006      	beq.n	404870 <__libc_init_array+0x3c>
  404862:	3401      	adds	r4, #1
  404864:	f855 3b04 	ldr.w	r3, [r5], #4
  404868:	4798      	blx	r3
  40486a:	42a6      	cmp	r6, r4
  40486c:	d1f9      	bne.n	404862 <__libc_init_array+0x2e>
  40486e:	bd70      	pop	{r4, r5, r6, pc}
  404870:	bd70      	pop	{r4, r5, r6, pc}
  404872:	bf00      	nop
  404874:	00407b60 	.word	0x00407b60
  404878:	00407b60 	.word	0x00407b60
  40487c:	00407b68 	.word	0x00407b68
  404880:	00407b60 	.word	0x00407b60

00404884 <iprintf>:
  404884:	b40f      	push	{r0, r1, r2, r3}
  404886:	b500      	push	{lr}
  404888:	4907      	ldr	r1, [pc, #28]	; (4048a8 <iprintf+0x24>)
  40488a:	b083      	sub	sp, #12
  40488c:	ab04      	add	r3, sp, #16
  40488e:	6808      	ldr	r0, [r1, #0]
  404890:	f853 2b04 	ldr.w	r2, [r3], #4
  404894:	6881      	ldr	r1, [r0, #8]
  404896:	9301      	str	r3, [sp, #4]
  404898:	f000 fd60 	bl	40535c <_vfiprintf_r>
  40489c:	b003      	add	sp, #12
  40489e:	f85d eb04 	ldr.w	lr, [sp], #4
  4048a2:	b004      	add	sp, #16
  4048a4:	4770      	bx	lr
  4048a6:	bf00      	nop
  4048a8:	20400014 	.word	0x20400014

004048ac <malloc>:
  4048ac:	4b02      	ldr	r3, [pc, #8]	; (4048b8 <malloc+0xc>)
  4048ae:	4601      	mov	r1, r0
  4048b0:	6818      	ldr	r0, [r3, #0]
  4048b2:	f000 b80b 	b.w	4048cc <_malloc_r>
  4048b6:	bf00      	nop
  4048b8:	20400014 	.word	0x20400014

004048bc <free>:
  4048bc:	4b02      	ldr	r3, [pc, #8]	; (4048c8 <free+0xc>)
  4048be:	4601      	mov	r1, r0
  4048c0:	6818      	ldr	r0, [r3, #0]
  4048c2:	f001 be67 	b.w	406594 <_free_r>
  4048c6:	bf00      	nop
  4048c8:	20400014 	.word	0x20400014

004048cc <_malloc_r>:
  4048cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4048d0:	f101 060b 	add.w	r6, r1, #11
  4048d4:	2e16      	cmp	r6, #22
  4048d6:	b083      	sub	sp, #12
  4048d8:	4605      	mov	r5, r0
  4048da:	f240 809e 	bls.w	404a1a <_malloc_r+0x14e>
  4048de:	f036 0607 	bics.w	r6, r6, #7
  4048e2:	f100 80bd 	bmi.w	404a60 <_malloc_r+0x194>
  4048e6:	42b1      	cmp	r1, r6
  4048e8:	f200 80ba 	bhi.w	404a60 <_malloc_r+0x194>
  4048ec:	f000 fb86 	bl	404ffc <__malloc_lock>
  4048f0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4048f4:	f0c0 8293 	bcc.w	404e1e <_malloc_r+0x552>
  4048f8:	0a73      	lsrs	r3, r6, #9
  4048fa:	f000 80b8 	beq.w	404a6e <_malloc_r+0x1a2>
  4048fe:	2b04      	cmp	r3, #4
  404900:	f200 8179 	bhi.w	404bf6 <_malloc_r+0x32a>
  404904:	09b3      	lsrs	r3, r6, #6
  404906:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40490a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40490e:	00c3      	lsls	r3, r0, #3
  404910:	4fbf      	ldr	r7, [pc, #764]	; (404c10 <_malloc_r+0x344>)
  404912:	443b      	add	r3, r7
  404914:	f1a3 0108 	sub.w	r1, r3, #8
  404918:	685c      	ldr	r4, [r3, #4]
  40491a:	42a1      	cmp	r1, r4
  40491c:	d106      	bne.n	40492c <_malloc_r+0x60>
  40491e:	e00c      	b.n	40493a <_malloc_r+0x6e>
  404920:	2a00      	cmp	r2, #0
  404922:	f280 80aa 	bge.w	404a7a <_malloc_r+0x1ae>
  404926:	68e4      	ldr	r4, [r4, #12]
  404928:	42a1      	cmp	r1, r4
  40492a:	d006      	beq.n	40493a <_malloc_r+0x6e>
  40492c:	6863      	ldr	r3, [r4, #4]
  40492e:	f023 0303 	bic.w	r3, r3, #3
  404932:	1b9a      	subs	r2, r3, r6
  404934:	2a0f      	cmp	r2, #15
  404936:	ddf3      	ble.n	404920 <_malloc_r+0x54>
  404938:	4670      	mov	r0, lr
  40493a:	693c      	ldr	r4, [r7, #16]
  40493c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404c24 <_malloc_r+0x358>
  404940:	4574      	cmp	r4, lr
  404942:	f000 81ab 	beq.w	404c9c <_malloc_r+0x3d0>
  404946:	6863      	ldr	r3, [r4, #4]
  404948:	f023 0303 	bic.w	r3, r3, #3
  40494c:	1b9a      	subs	r2, r3, r6
  40494e:	2a0f      	cmp	r2, #15
  404950:	f300 8190 	bgt.w	404c74 <_malloc_r+0x3a8>
  404954:	2a00      	cmp	r2, #0
  404956:	f8c7 e014 	str.w	lr, [r7, #20]
  40495a:	f8c7 e010 	str.w	lr, [r7, #16]
  40495e:	f280 809d 	bge.w	404a9c <_malloc_r+0x1d0>
  404962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404966:	f080 8161 	bcs.w	404c2c <_malloc_r+0x360>
  40496a:	08db      	lsrs	r3, r3, #3
  40496c:	f103 0c01 	add.w	ip, r3, #1
  404970:	1099      	asrs	r1, r3, #2
  404972:	687a      	ldr	r2, [r7, #4]
  404974:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404978:	f8c4 8008 	str.w	r8, [r4, #8]
  40497c:	2301      	movs	r3, #1
  40497e:	408b      	lsls	r3, r1
  404980:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404984:	4313      	orrs	r3, r2
  404986:	3908      	subs	r1, #8
  404988:	60e1      	str	r1, [r4, #12]
  40498a:	607b      	str	r3, [r7, #4]
  40498c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404990:	f8c8 400c 	str.w	r4, [r8, #12]
  404994:	1082      	asrs	r2, r0, #2
  404996:	2401      	movs	r4, #1
  404998:	4094      	lsls	r4, r2
  40499a:	429c      	cmp	r4, r3
  40499c:	f200 808b 	bhi.w	404ab6 <_malloc_r+0x1ea>
  4049a0:	421c      	tst	r4, r3
  4049a2:	d106      	bne.n	4049b2 <_malloc_r+0xe6>
  4049a4:	f020 0003 	bic.w	r0, r0, #3
  4049a8:	0064      	lsls	r4, r4, #1
  4049aa:	421c      	tst	r4, r3
  4049ac:	f100 0004 	add.w	r0, r0, #4
  4049b0:	d0fa      	beq.n	4049a8 <_malloc_r+0xdc>
  4049b2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4049b6:	46cc      	mov	ip, r9
  4049b8:	4680      	mov	r8, r0
  4049ba:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4049be:	459c      	cmp	ip, r3
  4049c0:	d107      	bne.n	4049d2 <_malloc_r+0x106>
  4049c2:	e16d      	b.n	404ca0 <_malloc_r+0x3d4>
  4049c4:	2a00      	cmp	r2, #0
  4049c6:	f280 817b 	bge.w	404cc0 <_malloc_r+0x3f4>
  4049ca:	68db      	ldr	r3, [r3, #12]
  4049cc:	459c      	cmp	ip, r3
  4049ce:	f000 8167 	beq.w	404ca0 <_malloc_r+0x3d4>
  4049d2:	6859      	ldr	r1, [r3, #4]
  4049d4:	f021 0103 	bic.w	r1, r1, #3
  4049d8:	1b8a      	subs	r2, r1, r6
  4049da:	2a0f      	cmp	r2, #15
  4049dc:	ddf2      	ble.n	4049c4 <_malloc_r+0xf8>
  4049de:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4049e2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4049e6:	9300      	str	r3, [sp, #0]
  4049e8:	199c      	adds	r4, r3, r6
  4049ea:	4628      	mov	r0, r5
  4049ec:	f046 0601 	orr.w	r6, r6, #1
  4049f0:	f042 0501 	orr.w	r5, r2, #1
  4049f4:	605e      	str	r6, [r3, #4]
  4049f6:	f8c8 c00c 	str.w	ip, [r8, #12]
  4049fa:	f8cc 8008 	str.w	r8, [ip, #8]
  4049fe:	617c      	str	r4, [r7, #20]
  404a00:	613c      	str	r4, [r7, #16]
  404a02:	f8c4 e00c 	str.w	lr, [r4, #12]
  404a06:	f8c4 e008 	str.w	lr, [r4, #8]
  404a0a:	6065      	str	r5, [r4, #4]
  404a0c:	505a      	str	r2, [r3, r1]
  404a0e:	f000 fafb 	bl	405008 <__malloc_unlock>
  404a12:	9b00      	ldr	r3, [sp, #0]
  404a14:	f103 0408 	add.w	r4, r3, #8
  404a18:	e01e      	b.n	404a58 <_malloc_r+0x18c>
  404a1a:	2910      	cmp	r1, #16
  404a1c:	d820      	bhi.n	404a60 <_malloc_r+0x194>
  404a1e:	f000 faed 	bl	404ffc <__malloc_lock>
  404a22:	2610      	movs	r6, #16
  404a24:	2318      	movs	r3, #24
  404a26:	2002      	movs	r0, #2
  404a28:	4f79      	ldr	r7, [pc, #484]	; (404c10 <_malloc_r+0x344>)
  404a2a:	443b      	add	r3, r7
  404a2c:	f1a3 0208 	sub.w	r2, r3, #8
  404a30:	685c      	ldr	r4, [r3, #4]
  404a32:	4294      	cmp	r4, r2
  404a34:	f000 813d 	beq.w	404cb2 <_malloc_r+0x3e6>
  404a38:	6863      	ldr	r3, [r4, #4]
  404a3a:	68e1      	ldr	r1, [r4, #12]
  404a3c:	68a6      	ldr	r6, [r4, #8]
  404a3e:	f023 0303 	bic.w	r3, r3, #3
  404a42:	4423      	add	r3, r4
  404a44:	4628      	mov	r0, r5
  404a46:	685a      	ldr	r2, [r3, #4]
  404a48:	60f1      	str	r1, [r6, #12]
  404a4a:	f042 0201 	orr.w	r2, r2, #1
  404a4e:	608e      	str	r6, [r1, #8]
  404a50:	605a      	str	r2, [r3, #4]
  404a52:	f000 fad9 	bl	405008 <__malloc_unlock>
  404a56:	3408      	adds	r4, #8
  404a58:	4620      	mov	r0, r4
  404a5a:	b003      	add	sp, #12
  404a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a60:	2400      	movs	r4, #0
  404a62:	230c      	movs	r3, #12
  404a64:	4620      	mov	r0, r4
  404a66:	602b      	str	r3, [r5, #0]
  404a68:	b003      	add	sp, #12
  404a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a6e:	2040      	movs	r0, #64	; 0x40
  404a70:	f44f 7300 	mov.w	r3, #512	; 0x200
  404a74:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404a78:	e74a      	b.n	404910 <_malloc_r+0x44>
  404a7a:	4423      	add	r3, r4
  404a7c:	68e1      	ldr	r1, [r4, #12]
  404a7e:	685a      	ldr	r2, [r3, #4]
  404a80:	68a6      	ldr	r6, [r4, #8]
  404a82:	f042 0201 	orr.w	r2, r2, #1
  404a86:	60f1      	str	r1, [r6, #12]
  404a88:	4628      	mov	r0, r5
  404a8a:	608e      	str	r6, [r1, #8]
  404a8c:	605a      	str	r2, [r3, #4]
  404a8e:	f000 fabb 	bl	405008 <__malloc_unlock>
  404a92:	3408      	adds	r4, #8
  404a94:	4620      	mov	r0, r4
  404a96:	b003      	add	sp, #12
  404a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a9c:	4423      	add	r3, r4
  404a9e:	4628      	mov	r0, r5
  404aa0:	685a      	ldr	r2, [r3, #4]
  404aa2:	f042 0201 	orr.w	r2, r2, #1
  404aa6:	605a      	str	r2, [r3, #4]
  404aa8:	f000 faae 	bl	405008 <__malloc_unlock>
  404aac:	3408      	adds	r4, #8
  404aae:	4620      	mov	r0, r4
  404ab0:	b003      	add	sp, #12
  404ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ab6:	68bc      	ldr	r4, [r7, #8]
  404ab8:	6863      	ldr	r3, [r4, #4]
  404aba:	f023 0803 	bic.w	r8, r3, #3
  404abe:	45b0      	cmp	r8, r6
  404ac0:	d304      	bcc.n	404acc <_malloc_r+0x200>
  404ac2:	eba8 0306 	sub.w	r3, r8, r6
  404ac6:	2b0f      	cmp	r3, #15
  404ac8:	f300 8085 	bgt.w	404bd6 <_malloc_r+0x30a>
  404acc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404c28 <_malloc_r+0x35c>
  404ad0:	4b50      	ldr	r3, [pc, #320]	; (404c14 <_malloc_r+0x348>)
  404ad2:	f8d9 2000 	ldr.w	r2, [r9]
  404ad6:	681b      	ldr	r3, [r3, #0]
  404ad8:	3201      	adds	r2, #1
  404ada:	4433      	add	r3, r6
  404adc:	eb04 0a08 	add.w	sl, r4, r8
  404ae0:	f000 8155 	beq.w	404d8e <_malloc_r+0x4c2>
  404ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404ae8:	330f      	adds	r3, #15
  404aea:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404aee:	f02b 0b0f 	bic.w	fp, fp, #15
  404af2:	4659      	mov	r1, fp
  404af4:	4628      	mov	r0, r5
  404af6:	f000 fa8d 	bl	405014 <_sbrk_r>
  404afa:	1c41      	adds	r1, r0, #1
  404afc:	4602      	mov	r2, r0
  404afe:	f000 80fc 	beq.w	404cfa <_malloc_r+0x42e>
  404b02:	4582      	cmp	sl, r0
  404b04:	f200 80f7 	bhi.w	404cf6 <_malloc_r+0x42a>
  404b08:	4b43      	ldr	r3, [pc, #268]	; (404c18 <_malloc_r+0x34c>)
  404b0a:	6819      	ldr	r1, [r3, #0]
  404b0c:	4459      	add	r1, fp
  404b0e:	6019      	str	r1, [r3, #0]
  404b10:	f000 814d 	beq.w	404dae <_malloc_r+0x4e2>
  404b14:	f8d9 0000 	ldr.w	r0, [r9]
  404b18:	3001      	adds	r0, #1
  404b1a:	bf1b      	ittet	ne
  404b1c:	eba2 0a0a 	subne.w	sl, r2, sl
  404b20:	4451      	addne	r1, sl
  404b22:	f8c9 2000 	streq.w	r2, [r9]
  404b26:	6019      	strne	r1, [r3, #0]
  404b28:	f012 0107 	ands.w	r1, r2, #7
  404b2c:	f000 8115 	beq.w	404d5a <_malloc_r+0x48e>
  404b30:	f1c1 0008 	rsb	r0, r1, #8
  404b34:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404b38:	4402      	add	r2, r0
  404b3a:	3108      	adds	r1, #8
  404b3c:	eb02 090b 	add.w	r9, r2, fp
  404b40:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404b44:	eba1 0909 	sub.w	r9, r1, r9
  404b48:	4649      	mov	r1, r9
  404b4a:	4628      	mov	r0, r5
  404b4c:	9301      	str	r3, [sp, #4]
  404b4e:	9200      	str	r2, [sp, #0]
  404b50:	f000 fa60 	bl	405014 <_sbrk_r>
  404b54:	1c43      	adds	r3, r0, #1
  404b56:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404b5a:	f000 8143 	beq.w	404de4 <_malloc_r+0x518>
  404b5e:	1a80      	subs	r0, r0, r2
  404b60:	4448      	add	r0, r9
  404b62:	f040 0001 	orr.w	r0, r0, #1
  404b66:	6819      	ldr	r1, [r3, #0]
  404b68:	60ba      	str	r2, [r7, #8]
  404b6a:	4449      	add	r1, r9
  404b6c:	42bc      	cmp	r4, r7
  404b6e:	6050      	str	r0, [r2, #4]
  404b70:	6019      	str	r1, [r3, #0]
  404b72:	d017      	beq.n	404ba4 <_malloc_r+0x2d8>
  404b74:	f1b8 0f0f 	cmp.w	r8, #15
  404b78:	f240 80fb 	bls.w	404d72 <_malloc_r+0x4a6>
  404b7c:	6860      	ldr	r0, [r4, #4]
  404b7e:	f1a8 020c 	sub.w	r2, r8, #12
  404b82:	f022 0207 	bic.w	r2, r2, #7
  404b86:	eb04 0e02 	add.w	lr, r4, r2
  404b8a:	f000 0001 	and.w	r0, r0, #1
  404b8e:	f04f 0c05 	mov.w	ip, #5
  404b92:	4310      	orrs	r0, r2
  404b94:	2a0f      	cmp	r2, #15
  404b96:	6060      	str	r0, [r4, #4]
  404b98:	f8ce c004 	str.w	ip, [lr, #4]
  404b9c:	f8ce c008 	str.w	ip, [lr, #8]
  404ba0:	f200 8117 	bhi.w	404dd2 <_malloc_r+0x506>
  404ba4:	4b1d      	ldr	r3, [pc, #116]	; (404c1c <_malloc_r+0x350>)
  404ba6:	68bc      	ldr	r4, [r7, #8]
  404ba8:	681a      	ldr	r2, [r3, #0]
  404baa:	4291      	cmp	r1, r2
  404bac:	bf88      	it	hi
  404bae:	6019      	strhi	r1, [r3, #0]
  404bb0:	4b1b      	ldr	r3, [pc, #108]	; (404c20 <_malloc_r+0x354>)
  404bb2:	681a      	ldr	r2, [r3, #0]
  404bb4:	4291      	cmp	r1, r2
  404bb6:	6862      	ldr	r2, [r4, #4]
  404bb8:	bf88      	it	hi
  404bba:	6019      	strhi	r1, [r3, #0]
  404bbc:	f022 0203 	bic.w	r2, r2, #3
  404bc0:	4296      	cmp	r6, r2
  404bc2:	eba2 0306 	sub.w	r3, r2, r6
  404bc6:	d801      	bhi.n	404bcc <_malloc_r+0x300>
  404bc8:	2b0f      	cmp	r3, #15
  404bca:	dc04      	bgt.n	404bd6 <_malloc_r+0x30a>
  404bcc:	4628      	mov	r0, r5
  404bce:	f000 fa1b 	bl	405008 <__malloc_unlock>
  404bd2:	2400      	movs	r4, #0
  404bd4:	e740      	b.n	404a58 <_malloc_r+0x18c>
  404bd6:	19a2      	adds	r2, r4, r6
  404bd8:	f043 0301 	orr.w	r3, r3, #1
  404bdc:	f046 0601 	orr.w	r6, r6, #1
  404be0:	6066      	str	r6, [r4, #4]
  404be2:	4628      	mov	r0, r5
  404be4:	60ba      	str	r2, [r7, #8]
  404be6:	6053      	str	r3, [r2, #4]
  404be8:	f000 fa0e 	bl	405008 <__malloc_unlock>
  404bec:	3408      	adds	r4, #8
  404bee:	4620      	mov	r0, r4
  404bf0:	b003      	add	sp, #12
  404bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bf6:	2b14      	cmp	r3, #20
  404bf8:	d971      	bls.n	404cde <_malloc_r+0x412>
  404bfa:	2b54      	cmp	r3, #84	; 0x54
  404bfc:	f200 80a3 	bhi.w	404d46 <_malloc_r+0x47a>
  404c00:	0b33      	lsrs	r3, r6, #12
  404c02:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404c06:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404c0a:	00c3      	lsls	r3, r0, #3
  404c0c:	e680      	b.n	404910 <_malloc_r+0x44>
  404c0e:	bf00      	nop
  404c10:	20400440 	.word	0x20400440
  404c14:	20400dd4 	.word	0x20400dd4
  404c18:	20400da4 	.word	0x20400da4
  404c1c:	20400dcc 	.word	0x20400dcc
  404c20:	20400dd0 	.word	0x20400dd0
  404c24:	20400448 	.word	0x20400448
  404c28:	20400848 	.word	0x20400848
  404c2c:	0a5a      	lsrs	r2, r3, #9
  404c2e:	2a04      	cmp	r2, #4
  404c30:	d95b      	bls.n	404cea <_malloc_r+0x41e>
  404c32:	2a14      	cmp	r2, #20
  404c34:	f200 80ae 	bhi.w	404d94 <_malloc_r+0x4c8>
  404c38:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404c3c:	00c9      	lsls	r1, r1, #3
  404c3e:	325b      	adds	r2, #91	; 0x5b
  404c40:	eb07 0c01 	add.w	ip, r7, r1
  404c44:	5879      	ldr	r1, [r7, r1]
  404c46:	f1ac 0c08 	sub.w	ip, ip, #8
  404c4a:	458c      	cmp	ip, r1
  404c4c:	f000 8088 	beq.w	404d60 <_malloc_r+0x494>
  404c50:	684a      	ldr	r2, [r1, #4]
  404c52:	f022 0203 	bic.w	r2, r2, #3
  404c56:	4293      	cmp	r3, r2
  404c58:	d273      	bcs.n	404d42 <_malloc_r+0x476>
  404c5a:	6889      	ldr	r1, [r1, #8]
  404c5c:	458c      	cmp	ip, r1
  404c5e:	d1f7      	bne.n	404c50 <_malloc_r+0x384>
  404c60:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404c64:	687b      	ldr	r3, [r7, #4]
  404c66:	60e2      	str	r2, [r4, #12]
  404c68:	f8c4 c008 	str.w	ip, [r4, #8]
  404c6c:	6094      	str	r4, [r2, #8]
  404c6e:	f8cc 400c 	str.w	r4, [ip, #12]
  404c72:	e68f      	b.n	404994 <_malloc_r+0xc8>
  404c74:	19a1      	adds	r1, r4, r6
  404c76:	f046 0c01 	orr.w	ip, r6, #1
  404c7a:	f042 0601 	orr.w	r6, r2, #1
  404c7e:	f8c4 c004 	str.w	ip, [r4, #4]
  404c82:	4628      	mov	r0, r5
  404c84:	6179      	str	r1, [r7, #20]
  404c86:	6139      	str	r1, [r7, #16]
  404c88:	f8c1 e00c 	str.w	lr, [r1, #12]
  404c8c:	f8c1 e008 	str.w	lr, [r1, #8]
  404c90:	604e      	str	r6, [r1, #4]
  404c92:	50e2      	str	r2, [r4, r3]
  404c94:	f000 f9b8 	bl	405008 <__malloc_unlock>
  404c98:	3408      	adds	r4, #8
  404c9a:	e6dd      	b.n	404a58 <_malloc_r+0x18c>
  404c9c:	687b      	ldr	r3, [r7, #4]
  404c9e:	e679      	b.n	404994 <_malloc_r+0xc8>
  404ca0:	f108 0801 	add.w	r8, r8, #1
  404ca4:	f018 0f03 	tst.w	r8, #3
  404ca8:	f10c 0c08 	add.w	ip, ip, #8
  404cac:	f47f ae85 	bne.w	4049ba <_malloc_r+0xee>
  404cb0:	e02d      	b.n	404d0e <_malloc_r+0x442>
  404cb2:	68dc      	ldr	r4, [r3, #12]
  404cb4:	42a3      	cmp	r3, r4
  404cb6:	bf08      	it	eq
  404cb8:	3002      	addeq	r0, #2
  404cba:	f43f ae3e 	beq.w	40493a <_malloc_r+0x6e>
  404cbe:	e6bb      	b.n	404a38 <_malloc_r+0x16c>
  404cc0:	4419      	add	r1, r3
  404cc2:	461c      	mov	r4, r3
  404cc4:	684a      	ldr	r2, [r1, #4]
  404cc6:	68db      	ldr	r3, [r3, #12]
  404cc8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404ccc:	f042 0201 	orr.w	r2, r2, #1
  404cd0:	604a      	str	r2, [r1, #4]
  404cd2:	4628      	mov	r0, r5
  404cd4:	60f3      	str	r3, [r6, #12]
  404cd6:	609e      	str	r6, [r3, #8]
  404cd8:	f000 f996 	bl	405008 <__malloc_unlock>
  404cdc:	e6bc      	b.n	404a58 <_malloc_r+0x18c>
  404cde:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404ce2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404ce6:	00c3      	lsls	r3, r0, #3
  404ce8:	e612      	b.n	404910 <_malloc_r+0x44>
  404cea:	099a      	lsrs	r2, r3, #6
  404cec:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404cf0:	00c9      	lsls	r1, r1, #3
  404cf2:	3238      	adds	r2, #56	; 0x38
  404cf4:	e7a4      	b.n	404c40 <_malloc_r+0x374>
  404cf6:	42bc      	cmp	r4, r7
  404cf8:	d054      	beq.n	404da4 <_malloc_r+0x4d8>
  404cfa:	68bc      	ldr	r4, [r7, #8]
  404cfc:	6862      	ldr	r2, [r4, #4]
  404cfe:	f022 0203 	bic.w	r2, r2, #3
  404d02:	e75d      	b.n	404bc0 <_malloc_r+0x2f4>
  404d04:	f859 3908 	ldr.w	r3, [r9], #-8
  404d08:	4599      	cmp	r9, r3
  404d0a:	f040 8086 	bne.w	404e1a <_malloc_r+0x54e>
  404d0e:	f010 0f03 	tst.w	r0, #3
  404d12:	f100 30ff 	add.w	r0, r0, #4294967295
  404d16:	d1f5      	bne.n	404d04 <_malloc_r+0x438>
  404d18:	687b      	ldr	r3, [r7, #4]
  404d1a:	ea23 0304 	bic.w	r3, r3, r4
  404d1e:	607b      	str	r3, [r7, #4]
  404d20:	0064      	lsls	r4, r4, #1
  404d22:	429c      	cmp	r4, r3
  404d24:	f63f aec7 	bhi.w	404ab6 <_malloc_r+0x1ea>
  404d28:	2c00      	cmp	r4, #0
  404d2a:	f43f aec4 	beq.w	404ab6 <_malloc_r+0x1ea>
  404d2e:	421c      	tst	r4, r3
  404d30:	4640      	mov	r0, r8
  404d32:	f47f ae3e 	bne.w	4049b2 <_malloc_r+0xe6>
  404d36:	0064      	lsls	r4, r4, #1
  404d38:	421c      	tst	r4, r3
  404d3a:	f100 0004 	add.w	r0, r0, #4
  404d3e:	d0fa      	beq.n	404d36 <_malloc_r+0x46a>
  404d40:	e637      	b.n	4049b2 <_malloc_r+0xe6>
  404d42:	468c      	mov	ip, r1
  404d44:	e78c      	b.n	404c60 <_malloc_r+0x394>
  404d46:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404d4a:	d815      	bhi.n	404d78 <_malloc_r+0x4ac>
  404d4c:	0bf3      	lsrs	r3, r6, #15
  404d4e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404d52:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404d56:	00c3      	lsls	r3, r0, #3
  404d58:	e5da      	b.n	404910 <_malloc_r+0x44>
  404d5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404d5e:	e6ed      	b.n	404b3c <_malloc_r+0x270>
  404d60:	687b      	ldr	r3, [r7, #4]
  404d62:	1092      	asrs	r2, r2, #2
  404d64:	2101      	movs	r1, #1
  404d66:	fa01 f202 	lsl.w	r2, r1, r2
  404d6a:	4313      	orrs	r3, r2
  404d6c:	607b      	str	r3, [r7, #4]
  404d6e:	4662      	mov	r2, ip
  404d70:	e779      	b.n	404c66 <_malloc_r+0x39a>
  404d72:	2301      	movs	r3, #1
  404d74:	6053      	str	r3, [r2, #4]
  404d76:	e729      	b.n	404bcc <_malloc_r+0x300>
  404d78:	f240 5254 	movw	r2, #1364	; 0x554
  404d7c:	4293      	cmp	r3, r2
  404d7e:	d822      	bhi.n	404dc6 <_malloc_r+0x4fa>
  404d80:	0cb3      	lsrs	r3, r6, #18
  404d82:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404d86:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404d8a:	00c3      	lsls	r3, r0, #3
  404d8c:	e5c0      	b.n	404910 <_malloc_r+0x44>
  404d8e:	f103 0b10 	add.w	fp, r3, #16
  404d92:	e6ae      	b.n	404af2 <_malloc_r+0x226>
  404d94:	2a54      	cmp	r2, #84	; 0x54
  404d96:	d829      	bhi.n	404dec <_malloc_r+0x520>
  404d98:	0b1a      	lsrs	r2, r3, #12
  404d9a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404d9e:	00c9      	lsls	r1, r1, #3
  404da0:	326e      	adds	r2, #110	; 0x6e
  404da2:	e74d      	b.n	404c40 <_malloc_r+0x374>
  404da4:	4b20      	ldr	r3, [pc, #128]	; (404e28 <_malloc_r+0x55c>)
  404da6:	6819      	ldr	r1, [r3, #0]
  404da8:	4459      	add	r1, fp
  404daa:	6019      	str	r1, [r3, #0]
  404dac:	e6b2      	b.n	404b14 <_malloc_r+0x248>
  404dae:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404db2:	2800      	cmp	r0, #0
  404db4:	f47f aeae 	bne.w	404b14 <_malloc_r+0x248>
  404db8:	eb08 030b 	add.w	r3, r8, fp
  404dbc:	68ba      	ldr	r2, [r7, #8]
  404dbe:	f043 0301 	orr.w	r3, r3, #1
  404dc2:	6053      	str	r3, [r2, #4]
  404dc4:	e6ee      	b.n	404ba4 <_malloc_r+0x2d8>
  404dc6:	207f      	movs	r0, #127	; 0x7f
  404dc8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404dcc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404dd0:	e59e      	b.n	404910 <_malloc_r+0x44>
  404dd2:	f104 0108 	add.w	r1, r4, #8
  404dd6:	4628      	mov	r0, r5
  404dd8:	9300      	str	r3, [sp, #0]
  404dda:	f001 fbdb 	bl	406594 <_free_r>
  404dde:	9b00      	ldr	r3, [sp, #0]
  404de0:	6819      	ldr	r1, [r3, #0]
  404de2:	e6df      	b.n	404ba4 <_malloc_r+0x2d8>
  404de4:	2001      	movs	r0, #1
  404de6:	f04f 0900 	mov.w	r9, #0
  404dea:	e6bc      	b.n	404b66 <_malloc_r+0x29a>
  404dec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404df0:	d805      	bhi.n	404dfe <_malloc_r+0x532>
  404df2:	0bda      	lsrs	r2, r3, #15
  404df4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404df8:	00c9      	lsls	r1, r1, #3
  404dfa:	3277      	adds	r2, #119	; 0x77
  404dfc:	e720      	b.n	404c40 <_malloc_r+0x374>
  404dfe:	f240 5154 	movw	r1, #1364	; 0x554
  404e02:	428a      	cmp	r2, r1
  404e04:	d805      	bhi.n	404e12 <_malloc_r+0x546>
  404e06:	0c9a      	lsrs	r2, r3, #18
  404e08:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404e0c:	00c9      	lsls	r1, r1, #3
  404e0e:	327c      	adds	r2, #124	; 0x7c
  404e10:	e716      	b.n	404c40 <_malloc_r+0x374>
  404e12:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404e16:	227e      	movs	r2, #126	; 0x7e
  404e18:	e712      	b.n	404c40 <_malloc_r+0x374>
  404e1a:	687b      	ldr	r3, [r7, #4]
  404e1c:	e780      	b.n	404d20 <_malloc_r+0x454>
  404e1e:	08f0      	lsrs	r0, r6, #3
  404e20:	f106 0308 	add.w	r3, r6, #8
  404e24:	e600      	b.n	404a28 <_malloc_r+0x15c>
  404e26:	bf00      	nop
  404e28:	20400da4 	.word	0x20400da4

00404e2c <memcpy>:
  404e2c:	4684      	mov	ip, r0
  404e2e:	ea41 0300 	orr.w	r3, r1, r0
  404e32:	f013 0303 	ands.w	r3, r3, #3
  404e36:	d16d      	bne.n	404f14 <memcpy+0xe8>
  404e38:	3a40      	subs	r2, #64	; 0x40
  404e3a:	d341      	bcc.n	404ec0 <memcpy+0x94>
  404e3c:	f851 3b04 	ldr.w	r3, [r1], #4
  404e40:	f840 3b04 	str.w	r3, [r0], #4
  404e44:	f851 3b04 	ldr.w	r3, [r1], #4
  404e48:	f840 3b04 	str.w	r3, [r0], #4
  404e4c:	f851 3b04 	ldr.w	r3, [r1], #4
  404e50:	f840 3b04 	str.w	r3, [r0], #4
  404e54:	f851 3b04 	ldr.w	r3, [r1], #4
  404e58:	f840 3b04 	str.w	r3, [r0], #4
  404e5c:	f851 3b04 	ldr.w	r3, [r1], #4
  404e60:	f840 3b04 	str.w	r3, [r0], #4
  404e64:	f851 3b04 	ldr.w	r3, [r1], #4
  404e68:	f840 3b04 	str.w	r3, [r0], #4
  404e6c:	f851 3b04 	ldr.w	r3, [r1], #4
  404e70:	f840 3b04 	str.w	r3, [r0], #4
  404e74:	f851 3b04 	ldr.w	r3, [r1], #4
  404e78:	f840 3b04 	str.w	r3, [r0], #4
  404e7c:	f851 3b04 	ldr.w	r3, [r1], #4
  404e80:	f840 3b04 	str.w	r3, [r0], #4
  404e84:	f851 3b04 	ldr.w	r3, [r1], #4
  404e88:	f840 3b04 	str.w	r3, [r0], #4
  404e8c:	f851 3b04 	ldr.w	r3, [r1], #4
  404e90:	f840 3b04 	str.w	r3, [r0], #4
  404e94:	f851 3b04 	ldr.w	r3, [r1], #4
  404e98:	f840 3b04 	str.w	r3, [r0], #4
  404e9c:	f851 3b04 	ldr.w	r3, [r1], #4
  404ea0:	f840 3b04 	str.w	r3, [r0], #4
  404ea4:	f851 3b04 	ldr.w	r3, [r1], #4
  404ea8:	f840 3b04 	str.w	r3, [r0], #4
  404eac:	f851 3b04 	ldr.w	r3, [r1], #4
  404eb0:	f840 3b04 	str.w	r3, [r0], #4
  404eb4:	f851 3b04 	ldr.w	r3, [r1], #4
  404eb8:	f840 3b04 	str.w	r3, [r0], #4
  404ebc:	3a40      	subs	r2, #64	; 0x40
  404ebe:	d2bd      	bcs.n	404e3c <memcpy+0x10>
  404ec0:	3230      	adds	r2, #48	; 0x30
  404ec2:	d311      	bcc.n	404ee8 <memcpy+0xbc>
  404ec4:	f851 3b04 	ldr.w	r3, [r1], #4
  404ec8:	f840 3b04 	str.w	r3, [r0], #4
  404ecc:	f851 3b04 	ldr.w	r3, [r1], #4
  404ed0:	f840 3b04 	str.w	r3, [r0], #4
  404ed4:	f851 3b04 	ldr.w	r3, [r1], #4
  404ed8:	f840 3b04 	str.w	r3, [r0], #4
  404edc:	f851 3b04 	ldr.w	r3, [r1], #4
  404ee0:	f840 3b04 	str.w	r3, [r0], #4
  404ee4:	3a10      	subs	r2, #16
  404ee6:	d2ed      	bcs.n	404ec4 <memcpy+0x98>
  404ee8:	320c      	adds	r2, #12
  404eea:	d305      	bcc.n	404ef8 <memcpy+0xcc>
  404eec:	f851 3b04 	ldr.w	r3, [r1], #4
  404ef0:	f840 3b04 	str.w	r3, [r0], #4
  404ef4:	3a04      	subs	r2, #4
  404ef6:	d2f9      	bcs.n	404eec <memcpy+0xc0>
  404ef8:	3204      	adds	r2, #4
  404efa:	d008      	beq.n	404f0e <memcpy+0xe2>
  404efc:	07d2      	lsls	r2, r2, #31
  404efe:	bf1c      	itt	ne
  404f00:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404f04:	f800 3b01 	strbne.w	r3, [r0], #1
  404f08:	d301      	bcc.n	404f0e <memcpy+0xe2>
  404f0a:	880b      	ldrh	r3, [r1, #0]
  404f0c:	8003      	strh	r3, [r0, #0]
  404f0e:	4660      	mov	r0, ip
  404f10:	4770      	bx	lr
  404f12:	bf00      	nop
  404f14:	2a08      	cmp	r2, #8
  404f16:	d313      	bcc.n	404f40 <memcpy+0x114>
  404f18:	078b      	lsls	r3, r1, #30
  404f1a:	d08d      	beq.n	404e38 <memcpy+0xc>
  404f1c:	f010 0303 	ands.w	r3, r0, #3
  404f20:	d08a      	beq.n	404e38 <memcpy+0xc>
  404f22:	f1c3 0304 	rsb	r3, r3, #4
  404f26:	1ad2      	subs	r2, r2, r3
  404f28:	07db      	lsls	r3, r3, #31
  404f2a:	bf1c      	itt	ne
  404f2c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404f30:	f800 3b01 	strbne.w	r3, [r0], #1
  404f34:	d380      	bcc.n	404e38 <memcpy+0xc>
  404f36:	f831 3b02 	ldrh.w	r3, [r1], #2
  404f3a:	f820 3b02 	strh.w	r3, [r0], #2
  404f3e:	e77b      	b.n	404e38 <memcpy+0xc>
  404f40:	3a04      	subs	r2, #4
  404f42:	d3d9      	bcc.n	404ef8 <memcpy+0xcc>
  404f44:	3a01      	subs	r2, #1
  404f46:	f811 3b01 	ldrb.w	r3, [r1], #1
  404f4a:	f800 3b01 	strb.w	r3, [r0], #1
  404f4e:	d2f9      	bcs.n	404f44 <memcpy+0x118>
  404f50:	780b      	ldrb	r3, [r1, #0]
  404f52:	7003      	strb	r3, [r0, #0]
  404f54:	784b      	ldrb	r3, [r1, #1]
  404f56:	7043      	strb	r3, [r0, #1]
  404f58:	788b      	ldrb	r3, [r1, #2]
  404f5a:	7083      	strb	r3, [r0, #2]
  404f5c:	4660      	mov	r0, ip
  404f5e:	4770      	bx	lr

00404f60 <memset>:
  404f60:	b470      	push	{r4, r5, r6}
  404f62:	0786      	lsls	r6, r0, #30
  404f64:	d046      	beq.n	404ff4 <memset+0x94>
  404f66:	1e54      	subs	r4, r2, #1
  404f68:	2a00      	cmp	r2, #0
  404f6a:	d041      	beq.n	404ff0 <memset+0x90>
  404f6c:	b2ca      	uxtb	r2, r1
  404f6e:	4603      	mov	r3, r0
  404f70:	e002      	b.n	404f78 <memset+0x18>
  404f72:	f114 34ff 	adds.w	r4, r4, #4294967295
  404f76:	d33b      	bcc.n	404ff0 <memset+0x90>
  404f78:	f803 2b01 	strb.w	r2, [r3], #1
  404f7c:	079d      	lsls	r5, r3, #30
  404f7e:	d1f8      	bne.n	404f72 <memset+0x12>
  404f80:	2c03      	cmp	r4, #3
  404f82:	d92e      	bls.n	404fe2 <memset+0x82>
  404f84:	b2cd      	uxtb	r5, r1
  404f86:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404f8a:	2c0f      	cmp	r4, #15
  404f8c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404f90:	d919      	bls.n	404fc6 <memset+0x66>
  404f92:	f103 0210 	add.w	r2, r3, #16
  404f96:	4626      	mov	r6, r4
  404f98:	3e10      	subs	r6, #16
  404f9a:	2e0f      	cmp	r6, #15
  404f9c:	f842 5c10 	str.w	r5, [r2, #-16]
  404fa0:	f842 5c0c 	str.w	r5, [r2, #-12]
  404fa4:	f842 5c08 	str.w	r5, [r2, #-8]
  404fa8:	f842 5c04 	str.w	r5, [r2, #-4]
  404fac:	f102 0210 	add.w	r2, r2, #16
  404fb0:	d8f2      	bhi.n	404f98 <memset+0x38>
  404fb2:	f1a4 0210 	sub.w	r2, r4, #16
  404fb6:	f022 020f 	bic.w	r2, r2, #15
  404fba:	f004 040f 	and.w	r4, r4, #15
  404fbe:	3210      	adds	r2, #16
  404fc0:	2c03      	cmp	r4, #3
  404fc2:	4413      	add	r3, r2
  404fc4:	d90d      	bls.n	404fe2 <memset+0x82>
  404fc6:	461e      	mov	r6, r3
  404fc8:	4622      	mov	r2, r4
  404fca:	3a04      	subs	r2, #4
  404fcc:	2a03      	cmp	r2, #3
  404fce:	f846 5b04 	str.w	r5, [r6], #4
  404fd2:	d8fa      	bhi.n	404fca <memset+0x6a>
  404fd4:	1f22      	subs	r2, r4, #4
  404fd6:	f022 0203 	bic.w	r2, r2, #3
  404fda:	3204      	adds	r2, #4
  404fdc:	4413      	add	r3, r2
  404fde:	f004 0403 	and.w	r4, r4, #3
  404fe2:	b12c      	cbz	r4, 404ff0 <memset+0x90>
  404fe4:	b2c9      	uxtb	r1, r1
  404fe6:	441c      	add	r4, r3
  404fe8:	f803 1b01 	strb.w	r1, [r3], #1
  404fec:	429c      	cmp	r4, r3
  404fee:	d1fb      	bne.n	404fe8 <memset+0x88>
  404ff0:	bc70      	pop	{r4, r5, r6}
  404ff2:	4770      	bx	lr
  404ff4:	4614      	mov	r4, r2
  404ff6:	4603      	mov	r3, r0
  404ff8:	e7c2      	b.n	404f80 <memset+0x20>
  404ffa:	bf00      	nop

00404ffc <__malloc_lock>:
  404ffc:	4801      	ldr	r0, [pc, #4]	; (405004 <__malloc_lock+0x8>)
  404ffe:	f001 bd63 	b.w	406ac8 <__retarget_lock_acquire_recursive>
  405002:	bf00      	nop
  405004:	20400ed4 	.word	0x20400ed4

00405008 <__malloc_unlock>:
  405008:	4801      	ldr	r0, [pc, #4]	; (405010 <__malloc_unlock+0x8>)
  40500a:	f001 bd5f 	b.w	406acc <__retarget_lock_release_recursive>
  40500e:	bf00      	nop
  405010:	20400ed4 	.word	0x20400ed4

00405014 <_sbrk_r>:
  405014:	b538      	push	{r3, r4, r5, lr}
  405016:	4c07      	ldr	r4, [pc, #28]	; (405034 <_sbrk_r+0x20>)
  405018:	2300      	movs	r3, #0
  40501a:	4605      	mov	r5, r0
  40501c:	4608      	mov	r0, r1
  40501e:	6023      	str	r3, [r4, #0]
  405020:	f7fc fcde 	bl	4019e0 <_sbrk>
  405024:	1c43      	adds	r3, r0, #1
  405026:	d000      	beq.n	40502a <_sbrk_r+0x16>
  405028:	bd38      	pop	{r3, r4, r5, pc}
  40502a:	6823      	ldr	r3, [r4, #0]
  40502c:	2b00      	cmp	r3, #0
  40502e:	d0fb      	beq.n	405028 <_sbrk_r+0x14>
  405030:	602b      	str	r3, [r5, #0]
  405032:	bd38      	pop	{r3, r4, r5, pc}
  405034:	20400ee8 	.word	0x20400ee8

00405038 <setbuf>:
  405038:	2900      	cmp	r1, #0
  40503a:	bf0c      	ite	eq
  40503c:	2202      	moveq	r2, #2
  40503e:	2200      	movne	r2, #0
  405040:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405044:	f000 b800 	b.w	405048 <setvbuf>

00405048 <setvbuf>:
  405048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40504c:	4c61      	ldr	r4, [pc, #388]	; (4051d4 <setvbuf+0x18c>)
  40504e:	6825      	ldr	r5, [r4, #0]
  405050:	b083      	sub	sp, #12
  405052:	4604      	mov	r4, r0
  405054:	460f      	mov	r7, r1
  405056:	4690      	mov	r8, r2
  405058:	461e      	mov	r6, r3
  40505a:	b115      	cbz	r5, 405062 <setvbuf+0x1a>
  40505c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40505e:	2b00      	cmp	r3, #0
  405060:	d064      	beq.n	40512c <setvbuf+0xe4>
  405062:	f1b8 0f02 	cmp.w	r8, #2
  405066:	d006      	beq.n	405076 <setvbuf+0x2e>
  405068:	f1b8 0f01 	cmp.w	r8, #1
  40506c:	f200 809f 	bhi.w	4051ae <setvbuf+0x166>
  405070:	2e00      	cmp	r6, #0
  405072:	f2c0 809c 	blt.w	4051ae <setvbuf+0x166>
  405076:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405078:	07d8      	lsls	r0, r3, #31
  40507a:	d534      	bpl.n	4050e6 <setvbuf+0x9e>
  40507c:	4621      	mov	r1, r4
  40507e:	4628      	mov	r0, r5
  405080:	f001 f90a 	bl	406298 <_fflush_r>
  405084:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405086:	b141      	cbz	r1, 40509a <setvbuf+0x52>
  405088:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40508c:	4299      	cmp	r1, r3
  40508e:	d002      	beq.n	405096 <setvbuf+0x4e>
  405090:	4628      	mov	r0, r5
  405092:	f001 fa7f 	bl	406594 <_free_r>
  405096:	2300      	movs	r3, #0
  405098:	6323      	str	r3, [r4, #48]	; 0x30
  40509a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40509e:	2200      	movs	r2, #0
  4050a0:	61a2      	str	r2, [r4, #24]
  4050a2:	6062      	str	r2, [r4, #4]
  4050a4:	061a      	lsls	r2, r3, #24
  4050a6:	d43a      	bmi.n	40511e <setvbuf+0xd6>
  4050a8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4050ac:	f023 0303 	bic.w	r3, r3, #3
  4050b0:	f1b8 0f02 	cmp.w	r8, #2
  4050b4:	81a3      	strh	r3, [r4, #12]
  4050b6:	d01d      	beq.n	4050f4 <setvbuf+0xac>
  4050b8:	ab01      	add	r3, sp, #4
  4050ba:	466a      	mov	r2, sp
  4050bc:	4621      	mov	r1, r4
  4050be:	4628      	mov	r0, r5
  4050c0:	f001 fd06 	bl	406ad0 <__swhatbuf_r>
  4050c4:	89a3      	ldrh	r3, [r4, #12]
  4050c6:	4318      	orrs	r0, r3
  4050c8:	81a0      	strh	r0, [r4, #12]
  4050ca:	2e00      	cmp	r6, #0
  4050cc:	d132      	bne.n	405134 <setvbuf+0xec>
  4050ce:	9e00      	ldr	r6, [sp, #0]
  4050d0:	4630      	mov	r0, r6
  4050d2:	f7ff fbeb 	bl	4048ac <malloc>
  4050d6:	4607      	mov	r7, r0
  4050d8:	2800      	cmp	r0, #0
  4050da:	d06b      	beq.n	4051b4 <setvbuf+0x16c>
  4050dc:	89a3      	ldrh	r3, [r4, #12]
  4050de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4050e2:	81a3      	strh	r3, [r4, #12]
  4050e4:	e028      	b.n	405138 <setvbuf+0xf0>
  4050e6:	89a3      	ldrh	r3, [r4, #12]
  4050e8:	0599      	lsls	r1, r3, #22
  4050ea:	d4c7      	bmi.n	40507c <setvbuf+0x34>
  4050ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4050ee:	f001 fceb 	bl	406ac8 <__retarget_lock_acquire_recursive>
  4050f2:	e7c3      	b.n	40507c <setvbuf+0x34>
  4050f4:	2500      	movs	r5, #0
  4050f6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4050f8:	2600      	movs	r6, #0
  4050fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4050fe:	f043 0302 	orr.w	r3, r3, #2
  405102:	2001      	movs	r0, #1
  405104:	60a6      	str	r6, [r4, #8]
  405106:	07ce      	lsls	r6, r1, #31
  405108:	81a3      	strh	r3, [r4, #12]
  40510a:	6022      	str	r2, [r4, #0]
  40510c:	6122      	str	r2, [r4, #16]
  40510e:	6160      	str	r0, [r4, #20]
  405110:	d401      	bmi.n	405116 <setvbuf+0xce>
  405112:	0598      	lsls	r0, r3, #22
  405114:	d53e      	bpl.n	405194 <setvbuf+0x14c>
  405116:	4628      	mov	r0, r5
  405118:	b003      	add	sp, #12
  40511a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40511e:	6921      	ldr	r1, [r4, #16]
  405120:	4628      	mov	r0, r5
  405122:	f001 fa37 	bl	406594 <_free_r>
  405126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40512a:	e7bd      	b.n	4050a8 <setvbuf+0x60>
  40512c:	4628      	mov	r0, r5
  40512e:	f001 f90b 	bl	406348 <__sinit>
  405132:	e796      	b.n	405062 <setvbuf+0x1a>
  405134:	2f00      	cmp	r7, #0
  405136:	d0cb      	beq.n	4050d0 <setvbuf+0x88>
  405138:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40513a:	2b00      	cmp	r3, #0
  40513c:	d033      	beq.n	4051a6 <setvbuf+0x15e>
  40513e:	9b00      	ldr	r3, [sp, #0]
  405140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405144:	6027      	str	r7, [r4, #0]
  405146:	429e      	cmp	r6, r3
  405148:	bf1c      	itt	ne
  40514a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40514e:	81a2      	strhne	r2, [r4, #12]
  405150:	f1b8 0f01 	cmp.w	r8, #1
  405154:	bf04      	itt	eq
  405156:	f042 0201 	orreq.w	r2, r2, #1
  40515a:	81a2      	strheq	r2, [r4, #12]
  40515c:	b292      	uxth	r2, r2
  40515e:	f012 0308 	ands.w	r3, r2, #8
  405162:	6127      	str	r7, [r4, #16]
  405164:	6166      	str	r6, [r4, #20]
  405166:	d00e      	beq.n	405186 <setvbuf+0x13e>
  405168:	07d1      	lsls	r1, r2, #31
  40516a:	d51a      	bpl.n	4051a2 <setvbuf+0x15a>
  40516c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40516e:	4276      	negs	r6, r6
  405170:	2300      	movs	r3, #0
  405172:	f015 0501 	ands.w	r5, r5, #1
  405176:	61a6      	str	r6, [r4, #24]
  405178:	60a3      	str	r3, [r4, #8]
  40517a:	d009      	beq.n	405190 <setvbuf+0x148>
  40517c:	2500      	movs	r5, #0
  40517e:	4628      	mov	r0, r5
  405180:	b003      	add	sp, #12
  405182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405186:	60a3      	str	r3, [r4, #8]
  405188:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40518a:	f015 0501 	ands.w	r5, r5, #1
  40518e:	d1f5      	bne.n	40517c <setvbuf+0x134>
  405190:	0593      	lsls	r3, r2, #22
  405192:	d4c0      	bmi.n	405116 <setvbuf+0xce>
  405194:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405196:	f001 fc99 	bl	406acc <__retarget_lock_release_recursive>
  40519a:	4628      	mov	r0, r5
  40519c:	b003      	add	sp, #12
  40519e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4051a2:	60a6      	str	r6, [r4, #8]
  4051a4:	e7f0      	b.n	405188 <setvbuf+0x140>
  4051a6:	4628      	mov	r0, r5
  4051a8:	f001 f8ce 	bl	406348 <__sinit>
  4051ac:	e7c7      	b.n	40513e <setvbuf+0xf6>
  4051ae:	f04f 35ff 	mov.w	r5, #4294967295
  4051b2:	e7b0      	b.n	405116 <setvbuf+0xce>
  4051b4:	f8dd 9000 	ldr.w	r9, [sp]
  4051b8:	45b1      	cmp	r9, r6
  4051ba:	d004      	beq.n	4051c6 <setvbuf+0x17e>
  4051bc:	4648      	mov	r0, r9
  4051be:	f7ff fb75 	bl	4048ac <malloc>
  4051c2:	4607      	mov	r7, r0
  4051c4:	b920      	cbnz	r0, 4051d0 <setvbuf+0x188>
  4051c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4051ca:	f04f 35ff 	mov.w	r5, #4294967295
  4051ce:	e792      	b.n	4050f6 <setvbuf+0xae>
  4051d0:	464e      	mov	r6, r9
  4051d2:	e783      	b.n	4050dc <setvbuf+0x94>
  4051d4:	20400014 	.word	0x20400014
	...

00405200 <strlen>:
  405200:	f890 f000 	pld	[r0]
  405204:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405208:	f020 0107 	bic.w	r1, r0, #7
  40520c:	f06f 0c00 	mvn.w	ip, #0
  405210:	f010 0407 	ands.w	r4, r0, #7
  405214:	f891 f020 	pld	[r1, #32]
  405218:	f040 8049 	bne.w	4052ae <strlen+0xae>
  40521c:	f04f 0400 	mov.w	r4, #0
  405220:	f06f 0007 	mvn.w	r0, #7
  405224:	e9d1 2300 	ldrd	r2, r3, [r1]
  405228:	f891 f040 	pld	[r1, #64]	; 0x40
  40522c:	f100 0008 	add.w	r0, r0, #8
  405230:	fa82 f24c 	uadd8	r2, r2, ip
  405234:	faa4 f28c 	sel	r2, r4, ip
  405238:	fa83 f34c 	uadd8	r3, r3, ip
  40523c:	faa2 f38c 	sel	r3, r2, ip
  405240:	bb4b      	cbnz	r3, 405296 <strlen+0x96>
  405242:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405246:	fa82 f24c 	uadd8	r2, r2, ip
  40524a:	f100 0008 	add.w	r0, r0, #8
  40524e:	faa4 f28c 	sel	r2, r4, ip
  405252:	fa83 f34c 	uadd8	r3, r3, ip
  405256:	faa2 f38c 	sel	r3, r2, ip
  40525a:	b9e3      	cbnz	r3, 405296 <strlen+0x96>
  40525c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405260:	fa82 f24c 	uadd8	r2, r2, ip
  405264:	f100 0008 	add.w	r0, r0, #8
  405268:	faa4 f28c 	sel	r2, r4, ip
  40526c:	fa83 f34c 	uadd8	r3, r3, ip
  405270:	faa2 f38c 	sel	r3, r2, ip
  405274:	b97b      	cbnz	r3, 405296 <strlen+0x96>
  405276:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40527a:	f101 0120 	add.w	r1, r1, #32
  40527e:	fa82 f24c 	uadd8	r2, r2, ip
  405282:	f100 0008 	add.w	r0, r0, #8
  405286:	faa4 f28c 	sel	r2, r4, ip
  40528a:	fa83 f34c 	uadd8	r3, r3, ip
  40528e:	faa2 f38c 	sel	r3, r2, ip
  405292:	2b00      	cmp	r3, #0
  405294:	d0c6      	beq.n	405224 <strlen+0x24>
  405296:	2a00      	cmp	r2, #0
  405298:	bf04      	itt	eq
  40529a:	3004      	addeq	r0, #4
  40529c:	461a      	moveq	r2, r3
  40529e:	ba12      	rev	r2, r2
  4052a0:	fab2 f282 	clz	r2, r2
  4052a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4052a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4052ac:	4770      	bx	lr
  4052ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4052b2:	f004 0503 	and.w	r5, r4, #3
  4052b6:	f1c4 0000 	rsb	r0, r4, #0
  4052ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4052be:	f014 0f04 	tst.w	r4, #4
  4052c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4052c6:	fa0c f505 	lsl.w	r5, ip, r5
  4052ca:	ea62 0205 	orn	r2, r2, r5
  4052ce:	bf1c      	itt	ne
  4052d0:	ea63 0305 	ornne	r3, r3, r5
  4052d4:	4662      	movne	r2, ip
  4052d6:	f04f 0400 	mov.w	r4, #0
  4052da:	e7a9      	b.n	405230 <strlen+0x30>

004052dc <__sprint_r.part.0>:
  4052dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4052e0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4052e2:	049c      	lsls	r4, r3, #18
  4052e4:	4693      	mov	fp, r2
  4052e6:	d52f      	bpl.n	405348 <__sprint_r.part.0+0x6c>
  4052e8:	6893      	ldr	r3, [r2, #8]
  4052ea:	6812      	ldr	r2, [r2, #0]
  4052ec:	b353      	cbz	r3, 405344 <__sprint_r.part.0+0x68>
  4052ee:	460e      	mov	r6, r1
  4052f0:	4607      	mov	r7, r0
  4052f2:	f102 0908 	add.w	r9, r2, #8
  4052f6:	e919 0420 	ldmdb	r9, {r5, sl}
  4052fa:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4052fe:	d017      	beq.n	405330 <__sprint_r.part.0+0x54>
  405300:	3d04      	subs	r5, #4
  405302:	2400      	movs	r4, #0
  405304:	e001      	b.n	40530a <__sprint_r.part.0+0x2e>
  405306:	45a0      	cmp	r8, r4
  405308:	d010      	beq.n	40532c <__sprint_r.part.0+0x50>
  40530a:	4632      	mov	r2, r6
  40530c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  405310:	4638      	mov	r0, r7
  405312:	f001 f8bb 	bl	40648c <_fputwc_r>
  405316:	1c43      	adds	r3, r0, #1
  405318:	f104 0401 	add.w	r4, r4, #1
  40531c:	d1f3      	bne.n	405306 <__sprint_r.part.0+0x2a>
  40531e:	2300      	movs	r3, #0
  405320:	f8cb 3008 	str.w	r3, [fp, #8]
  405324:	f8cb 3004 	str.w	r3, [fp, #4]
  405328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40532c:	f8db 3008 	ldr.w	r3, [fp, #8]
  405330:	f02a 0a03 	bic.w	sl, sl, #3
  405334:	eba3 030a 	sub.w	r3, r3, sl
  405338:	f8cb 3008 	str.w	r3, [fp, #8]
  40533c:	f109 0908 	add.w	r9, r9, #8
  405340:	2b00      	cmp	r3, #0
  405342:	d1d8      	bne.n	4052f6 <__sprint_r.part.0+0x1a>
  405344:	2000      	movs	r0, #0
  405346:	e7ea      	b.n	40531e <__sprint_r.part.0+0x42>
  405348:	f001 fa0a 	bl	406760 <__sfvwrite_r>
  40534c:	2300      	movs	r3, #0
  40534e:	f8cb 3008 	str.w	r3, [fp, #8]
  405352:	f8cb 3004 	str.w	r3, [fp, #4]
  405356:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40535a:	bf00      	nop

0040535c <_vfiprintf_r>:
  40535c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405360:	b0ad      	sub	sp, #180	; 0xb4
  405362:	461d      	mov	r5, r3
  405364:	468b      	mov	fp, r1
  405366:	4690      	mov	r8, r2
  405368:	9307      	str	r3, [sp, #28]
  40536a:	9006      	str	r0, [sp, #24]
  40536c:	b118      	cbz	r0, 405376 <_vfiprintf_r+0x1a>
  40536e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405370:	2b00      	cmp	r3, #0
  405372:	f000 80f3 	beq.w	40555c <_vfiprintf_r+0x200>
  405376:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40537a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40537e:	07df      	lsls	r7, r3, #31
  405380:	b281      	uxth	r1, r0
  405382:	d402      	bmi.n	40538a <_vfiprintf_r+0x2e>
  405384:	058e      	lsls	r6, r1, #22
  405386:	f140 80fc 	bpl.w	405582 <_vfiprintf_r+0x226>
  40538a:	048c      	lsls	r4, r1, #18
  40538c:	d40a      	bmi.n	4053a4 <_vfiprintf_r+0x48>
  40538e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405392:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  405396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40539a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40539e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4053a2:	b289      	uxth	r1, r1
  4053a4:	0708      	lsls	r0, r1, #28
  4053a6:	f140 80b3 	bpl.w	405510 <_vfiprintf_r+0x1b4>
  4053aa:	f8db 3010 	ldr.w	r3, [fp, #16]
  4053ae:	2b00      	cmp	r3, #0
  4053b0:	f000 80ae 	beq.w	405510 <_vfiprintf_r+0x1b4>
  4053b4:	f001 031a 	and.w	r3, r1, #26
  4053b8:	2b0a      	cmp	r3, #10
  4053ba:	f000 80b5 	beq.w	405528 <_vfiprintf_r+0x1cc>
  4053be:	2300      	movs	r3, #0
  4053c0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4053c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4053c6:	9311      	str	r3, [sp, #68]	; 0x44
  4053c8:	9310      	str	r3, [sp, #64]	; 0x40
  4053ca:	9303      	str	r3, [sp, #12]
  4053cc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4053d0:	46ca      	mov	sl, r9
  4053d2:	f8cd b010 	str.w	fp, [sp, #16]
  4053d6:	f898 3000 	ldrb.w	r3, [r8]
  4053da:	4644      	mov	r4, r8
  4053dc:	b1fb      	cbz	r3, 40541e <_vfiprintf_r+0xc2>
  4053de:	2b25      	cmp	r3, #37	; 0x25
  4053e0:	d102      	bne.n	4053e8 <_vfiprintf_r+0x8c>
  4053e2:	e01c      	b.n	40541e <_vfiprintf_r+0xc2>
  4053e4:	2b25      	cmp	r3, #37	; 0x25
  4053e6:	d003      	beq.n	4053f0 <_vfiprintf_r+0x94>
  4053e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4053ec:	2b00      	cmp	r3, #0
  4053ee:	d1f9      	bne.n	4053e4 <_vfiprintf_r+0x88>
  4053f0:	eba4 0508 	sub.w	r5, r4, r8
  4053f4:	b19d      	cbz	r5, 40541e <_vfiprintf_r+0xc2>
  4053f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4053f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4053fa:	f8ca 8000 	str.w	r8, [sl]
  4053fe:	3301      	adds	r3, #1
  405400:	442a      	add	r2, r5
  405402:	2b07      	cmp	r3, #7
  405404:	f8ca 5004 	str.w	r5, [sl, #4]
  405408:	9211      	str	r2, [sp, #68]	; 0x44
  40540a:	9310      	str	r3, [sp, #64]	; 0x40
  40540c:	dd7a      	ble.n	405504 <_vfiprintf_r+0x1a8>
  40540e:	2a00      	cmp	r2, #0
  405410:	f040 84b0 	bne.w	405d74 <_vfiprintf_r+0xa18>
  405414:	9b03      	ldr	r3, [sp, #12]
  405416:	9210      	str	r2, [sp, #64]	; 0x40
  405418:	442b      	add	r3, r5
  40541a:	46ca      	mov	sl, r9
  40541c:	9303      	str	r3, [sp, #12]
  40541e:	7823      	ldrb	r3, [r4, #0]
  405420:	2b00      	cmp	r3, #0
  405422:	f000 83e0 	beq.w	405be6 <_vfiprintf_r+0x88a>
  405426:	2000      	movs	r0, #0
  405428:	f04f 0300 	mov.w	r3, #0
  40542c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405430:	f104 0801 	add.w	r8, r4, #1
  405434:	7862      	ldrb	r2, [r4, #1]
  405436:	4605      	mov	r5, r0
  405438:	4606      	mov	r6, r0
  40543a:	4603      	mov	r3, r0
  40543c:	f04f 34ff 	mov.w	r4, #4294967295
  405440:	f108 0801 	add.w	r8, r8, #1
  405444:	f1a2 0120 	sub.w	r1, r2, #32
  405448:	2958      	cmp	r1, #88	; 0x58
  40544a:	f200 82de 	bhi.w	405a0a <_vfiprintf_r+0x6ae>
  40544e:	e8df f011 	tbh	[pc, r1, lsl #1]
  405452:	0221      	.short	0x0221
  405454:	02dc02dc 	.word	0x02dc02dc
  405458:	02dc0229 	.word	0x02dc0229
  40545c:	02dc02dc 	.word	0x02dc02dc
  405460:	02dc02dc 	.word	0x02dc02dc
  405464:	028902dc 	.word	0x028902dc
  405468:	02dc0295 	.word	0x02dc0295
  40546c:	02bd00a2 	.word	0x02bd00a2
  405470:	019f02dc 	.word	0x019f02dc
  405474:	01a401a4 	.word	0x01a401a4
  405478:	01a401a4 	.word	0x01a401a4
  40547c:	01a401a4 	.word	0x01a401a4
  405480:	01a401a4 	.word	0x01a401a4
  405484:	02dc01a4 	.word	0x02dc01a4
  405488:	02dc02dc 	.word	0x02dc02dc
  40548c:	02dc02dc 	.word	0x02dc02dc
  405490:	02dc02dc 	.word	0x02dc02dc
  405494:	02dc02dc 	.word	0x02dc02dc
  405498:	01b202dc 	.word	0x01b202dc
  40549c:	02dc02dc 	.word	0x02dc02dc
  4054a0:	02dc02dc 	.word	0x02dc02dc
  4054a4:	02dc02dc 	.word	0x02dc02dc
  4054a8:	02dc02dc 	.word	0x02dc02dc
  4054ac:	02dc02dc 	.word	0x02dc02dc
  4054b0:	02dc0197 	.word	0x02dc0197
  4054b4:	02dc02dc 	.word	0x02dc02dc
  4054b8:	02dc02dc 	.word	0x02dc02dc
  4054bc:	02dc019b 	.word	0x02dc019b
  4054c0:	025302dc 	.word	0x025302dc
  4054c4:	02dc02dc 	.word	0x02dc02dc
  4054c8:	02dc02dc 	.word	0x02dc02dc
  4054cc:	02dc02dc 	.word	0x02dc02dc
  4054d0:	02dc02dc 	.word	0x02dc02dc
  4054d4:	02dc02dc 	.word	0x02dc02dc
  4054d8:	021b025a 	.word	0x021b025a
  4054dc:	02dc02dc 	.word	0x02dc02dc
  4054e0:	026e02dc 	.word	0x026e02dc
  4054e4:	02dc021b 	.word	0x02dc021b
  4054e8:	027302dc 	.word	0x027302dc
  4054ec:	01f502dc 	.word	0x01f502dc
  4054f0:	02090182 	.word	0x02090182
  4054f4:	02dc02d7 	.word	0x02dc02d7
  4054f8:	02dc029a 	.word	0x02dc029a
  4054fc:	02dc00a7 	.word	0x02dc00a7
  405500:	022e02dc 	.word	0x022e02dc
  405504:	f10a 0a08 	add.w	sl, sl, #8
  405508:	9b03      	ldr	r3, [sp, #12]
  40550a:	442b      	add	r3, r5
  40550c:	9303      	str	r3, [sp, #12]
  40550e:	e786      	b.n	40541e <_vfiprintf_r+0xc2>
  405510:	4659      	mov	r1, fp
  405512:	9806      	ldr	r0, [sp, #24]
  405514:	f000 fdac 	bl	406070 <__swsetup_r>
  405518:	bb18      	cbnz	r0, 405562 <_vfiprintf_r+0x206>
  40551a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40551e:	f001 031a 	and.w	r3, r1, #26
  405522:	2b0a      	cmp	r3, #10
  405524:	f47f af4b 	bne.w	4053be <_vfiprintf_r+0x62>
  405528:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40552c:	2b00      	cmp	r3, #0
  40552e:	f6ff af46 	blt.w	4053be <_vfiprintf_r+0x62>
  405532:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405536:	07db      	lsls	r3, r3, #31
  405538:	d405      	bmi.n	405546 <_vfiprintf_r+0x1ea>
  40553a:	058f      	lsls	r7, r1, #22
  40553c:	d403      	bmi.n	405546 <_vfiprintf_r+0x1ea>
  40553e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405542:	f001 fac3 	bl	406acc <__retarget_lock_release_recursive>
  405546:	462b      	mov	r3, r5
  405548:	4642      	mov	r2, r8
  40554a:	4659      	mov	r1, fp
  40554c:	9806      	ldr	r0, [sp, #24]
  40554e:	f000 fd4d 	bl	405fec <__sbprintf>
  405552:	9003      	str	r0, [sp, #12]
  405554:	9803      	ldr	r0, [sp, #12]
  405556:	b02d      	add	sp, #180	; 0xb4
  405558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40555c:	f000 fef4 	bl	406348 <__sinit>
  405560:	e709      	b.n	405376 <_vfiprintf_r+0x1a>
  405562:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405566:	07d9      	lsls	r1, r3, #31
  405568:	d404      	bmi.n	405574 <_vfiprintf_r+0x218>
  40556a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40556e:	059a      	lsls	r2, r3, #22
  405570:	f140 84aa 	bpl.w	405ec8 <_vfiprintf_r+0xb6c>
  405574:	f04f 33ff 	mov.w	r3, #4294967295
  405578:	9303      	str	r3, [sp, #12]
  40557a:	9803      	ldr	r0, [sp, #12]
  40557c:	b02d      	add	sp, #180	; 0xb4
  40557e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405582:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405586:	f001 fa9f 	bl	406ac8 <__retarget_lock_acquire_recursive>
  40558a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40558e:	b281      	uxth	r1, r0
  405590:	e6fb      	b.n	40538a <_vfiprintf_r+0x2e>
  405592:	4276      	negs	r6, r6
  405594:	9207      	str	r2, [sp, #28]
  405596:	f043 0304 	orr.w	r3, r3, #4
  40559a:	f898 2000 	ldrb.w	r2, [r8]
  40559e:	e74f      	b.n	405440 <_vfiprintf_r+0xe4>
  4055a0:	9608      	str	r6, [sp, #32]
  4055a2:	069e      	lsls	r6, r3, #26
  4055a4:	f100 8450 	bmi.w	405e48 <_vfiprintf_r+0xaec>
  4055a8:	9907      	ldr	r1, [sp, #28]
  4055aa:	06dd      	lsls	r5, r3, #27
  4055ac:	460a      	mov	r2, r1
  4055ae:	f100 83ef 	bmi.w	405d90 <_vfiprintf_r+0xa34>
  4055b2:	0658      	lsls	r0, r3, #25
  4055b4:	f140 83ec 	bpl.w	405d90 <_vfiprintf_r+0xa34>
  4055b8:	880e      	ldrh	r6, [r1, #0]
  4055ba:	3104      	adds	r1, #4
  4055bc:	2700      	movs	r7, #0
  4055be:	2201      	movs	r2, #1
  4055c0:	9107      	str	r1, [sp, #28]
  4055c2:	f04f 0100 	mov.w	r1, #0
  4055c6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4055ca:	2500      	movs	r5, #0
  4055cc:	1c61      	adds	r1, r4, #1
  4055ce:	f000 8116 	beq.w	4057fe <_vfiprintf_r+0x4a2>
  4055d2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4055d6:	9102      	str	r1, [sp, #8]
  4055d8:	ea56 0107 	orrs.w	r1, r6, r7
  4055dc:	f040 8114 	bne.w	405808 <_vfiprintf_r+0x4ac>
  4055e0:	2c00      	cmp	r4, #0
  4055e2:	f040 835c 	bne.w	405c9e <_vfiprintf_r+0x942>
  4055e6:	2a00      	cmp	r2, #0
  4055e8:	f040 83b7 	bne.w	405d5a <_vfiprintf_r+0x9fe>
  4055ec:	f013 0301 	ands.w	r3, r3, #1
  4055f0:	9305      	str	r3, [sp, #20]
  4055f2:	f000 8457 	beq.w	405ea4 <_vfiprintf_r+0xb48>
  4055f6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4055fa:	2330      	movs	r3, #48	; 0x30
  4055fc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  405600:	9b05      	ldr	r3, [sp, #20]
  405602:	42a3      	cmp	r3, r4
  405604:	bfb8      	it	lt
  405606:	4623      	movlt	r3, r4
  405608:	9301      	str	r3, [sp, #4]
  40560a:	b10d      	cbz	r5, 405610 <_vfiprintf_r+0x2b4>
  40560c:	3301      	adds	r3, #1
  40560e:	9301      	str	r3, [sp, #4]
  405610:	9b02      	ldr	r3, [sp, #8]
  405612:	f013 0302 	ands.w	r3, r3, #2
  405616:	9309      	str	r3, [sp, #36]	; 0x24
  405618:	d002      	beq.n	405620 <_vfiprintf_r+0x2c4>
  40561a:	9b01      	ldr	r3, [sp, #4]
  40561c:	3302      	adds	r3, #2
  40561e:	9301      	str	r3, [sp, #4]
  405620:	9b02      	ldr	r3, [sp, #8]
  405622:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  405626:	930a      	str	r3, [sp, #40]	; 0x28
  405628:	f040 8217 	bne.w	405a5a <_vfiprintf_r+0x6fe>
  40562c:	9b08      	ldr	r3, [sp, #32]
  40562e:	9a01      	ldr	r2, [sp, #4]
  405630:	1a9d      	subs	r5, r3, r2
  405632:	2d00      	cmp	r5, #0
  405634:	f340 8211 	ble.w	405a5a <_vfiprintf_r+0x6fe>
  405638:	2d10      	cmp	r5, #16
  40563a:	f340 8490 	ble.w	405f5e <_vfiprintf_r+0xc02>
  40563e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405640:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405642:	4ec4      	ldr	r6, [pc, #784]	; (405954 <_vfiprintf_r+0x5f8>)
  405644:	46d6      	mov	lr, sl
  405646:	2710      	movs	r7, #16
  405648:	46a2      	mov	sl, r4
  40564a:	4619      	mov	r1, r3
  40564c:	9c06      	ldr	r4, [sp, #24]
  40564e:	e007      	b.n	405660 <_vfiprintf_r+0x304>
  405650:	f101 0c02 	add.w	ip, r1, #2
  405654:	f10e 0e08 	add.w	lr, lr, #8
  405658:	4601      	mov	r1, r0
  40565a:	3d10      	subs	r5, #16
  40565c:	2d10      	cmp	r5, #16
  40565e:	dd11      	ble.n	405684 <_vfiprintf_r+0x328>
  405660:	1c48      	adds	r0, r1, #1
  405662:	3210      	adds	r2, #16
  405664:	2807      	cmp	r0, #7
  405666:	9211      	str	r2, [sp, #68]	; 0x44
  405668:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40566c:	9010      	str	r0, [sp, #64]	; 0x40
  40566e:	ddef      	ble.n	405650 <_vfiprintf_r+0x2f4>
  405670:	2a00      	cmp	r2, #0
  405672:	f040 81e4 	bne.w	405a3e <_vfiprintf_r+0x6e2>
  405676:	3d10      	subs	r5, #16
  405678:	2d10      	cmp	r5, #16
  40567a:	4611      	mov	r1, r2
  40567c:	f04f 0c01 	mov.w	ip, #1
  405680:	46ce      	mov	lr, r9
  405682:	dced      	bgt.n	405660 <_vfiprintf_r+0x304>
  405684:	4654      	mov	r4, sl
  405686:	4661      	mov	r1, ip
  405688:	46f2      	mov	sl, lr
  40568a:	442a      	add	r2, r5
  40568c:	2907      	cmp	r1, #7
  40568e:	9211      	str	r2, [sp, #68]	; 0x44
  405690:	f8ca 6000 	str.w	r6, [sl]
  405694:	f8ca 5004 	str.w	r5, [sl, #4]
  405698:	9110      	str	r1, [sp, #64]	; 0x40
  40569a:	f300 82ec 	bgt.w	405c76 <_vfiprintf_r+0x91a>
  40569e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4056a2:	f10a 0a08 	add.w	sl, sl, #8
  4056a6:	1c48      	adds	r0, r1, #1
  4056a8:	2d00      	cmp	r5, #0
  4056aa:	f040 81de 	bne.w	405a6a <_vfiprintf_r+0x70e>
  4056ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4056b0:	2b00      	cmp	r3, #0
  4056b2:	f000 81f8 	beq.w	405aa6 <_vfiprintf_r+0x74a>
  4056b6:	3202      	adds	r2, #2
  4056b8:	a90e      	add	r1, sp, #56	; 0x38
  4056ba:	2302      	movs	r3, #2
  4056bc:	2807      	cmp	r0, #7
  4056be:	9211      	str	r2, [sp, #68]	; 0x44
  4056c0:	9010      	str	r0, [sp, #64]	; 0x40
  4056c2:	e88a 000a 	stmia.w	sl, {r1, r3}
  4056c6:	f340 81ea 	ble.w	405a9e <_vfiprintf_r+0x742>
  4056ca:	2a00      	cmp	r2, #0
  4056cc:	f040 838c 	bne.w	405de8 <_vfiprintf_r+0xa8c>
  4056d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4056d2:	2b80      	cmp	r3, #128	; 0x80
  4056d4:	f04f 0001 	mov.w	r0, #1
  4056d8:	4611      	mov	r1, r2
  4056da:	46ca      	mov	sl, r9
  4056dc:	f040 81e7 	bne.w	405aae <_vfiprintf_r+0x752>
  4056e0:	9b08      	ldr	r3, [sp, #32]
  4056e2:	9d01      	ldr	r5, [sp, #4]
  4056e4:	1b5e      	subs	r6, r3, r5
  4056e6:	2e00      	cmp	r6, #0
  4056e8:	f340 81e1 	ble.w	405aae <_vfiprintf_r+0x752>
  4056ec:	2e10      	cmp	r6, #16
  4056ee:	4d9a      	ldr	r5, [pc, #616]	; (405958 <_vfiprintf_r+0x5fc>)
  4056f0:	f340 8450 	ble.w	405f94 <_vfiprintf_r+0xc38>
  4056f4:	46d4      	mov	ip, sl
  4056f6:	2710      	movs	r7, #16
  4056f8:	46a2      	mov	sl, r4
  4056fa:	9c06      	ldr	r4, [sp, #24]
  4056fc:	e007      	b.n	40570e <_vfiprintf_r+0x3b2>
  4056fe:	f101 0e02 	add.w	lr, r1, #2
  405702:	f10c 0c08 	add.w	ip, ip, #8
  405706:	4601      	mov	r1, r0
  405708:	3e10      	subs	r6, #16
  40570a:	2e10      	cmp	r6, #16
  40570c:	dd11      	ble.n	405732 <_vfiprintf_r+0x3d6>
  40570e:	1c48      	adds	r0, r1, #1
  405710:	3210      	adds	r2, #16
  405712:	2807      	cmp	r0, #7
  405714:	9211      	str	r2, [sp, #68]	; 0x44
  405716:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40571a:	9010      	str	r0, [sp, #64]	; 0x40
  40571c:	ddef      	ble.n	4056fe <_vfiprintf_r+0x3a2>
  40571e:	2a00      	cmp	r2, #0
  405720:	f040 829d 	bne.w	405c5e <_vfiprintf_r+0x902>
  405724:	3e10      	subs	r6, #16
  405726:	2e10      	cmp	r6, #16
  405728:	f04f 0e01 	mov.w	lr, #1
  40572c:	4611      	mov	r1, r2
  40572e:	46cc      	mov	ip, r9
  405730:	dced      	bgt.n	40570e <_vfiprintf_r+0x3b2>
  405732:	4654      	mov	r4, sl
  405734:	46e2      	mov	sl, ip
  405736:	4432      	add	r2, r6
  405738:	f1be 0f07 	cmp.w	lr, #7
  40573c:	9211      	str	r2, [sp, #68]	; 0x44
  40573e:	e88a 0060 	stmia.w	sl, {r5, r6}
  405742:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405746:	f300 8369 	bgt.w	405e1c <_vfiprintf_r+0xac0>
  40574a:	f10a 0a08 	add.w	sl, sl, #8
  40574e:	f10e 0001 	add.w	r0, lr, #1
  405752:	4671      	mov	r1, lr
  405754:	e1ab      	b.n	405aae <_vfiprintf_r+0x752>
  405756:	9608      	str	r6, [sp, #32]
  405758:	f013 0220 	ands.w	r2, r3, #32
  40575c:	f040 838c 	bne.w	405e78 <_vfiprintf_r+0xb1c>
  405760:	f013 0110 	ands.w	r1, r3, #16
  405764:	f040 831a 	bne.w	405d9c <_vfiprintf_r+0xa40>
  405768:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40576c:	f000 8316 	beq.w	405d9c <_vfiprintf_r+0xa40>
  405770:	9807      	ldr	r0, [sp, #28]
  405772:	460a      	mov	r2, r1
  405774:	4601      	mov	r1, r0
  405776:	3104      	adds	r1, #4
  405778:	8806      	ldrh	r6, [r0, #0]
  40577a:	9107      	str	r1, [sp, #28]
  40577c:	2700      	movs	r7, #0
  40577e:	e720      	b.n	4055c2 <_vfiprintf_r+0x266>
  405780:	9608      	str	r6, [sp, #32]
  405782:	f043 0310 	orr.w	r3, r3, #16
  405786:	e7e7      	b.n	405758 <_vfiprintf_r+0x3fc>
  405788:	9608      	str	r6, [sp, #32]
  40578a:	f043 0310 	orr.w	r3, r3, #16
  40578e:	e708      	b.n	4055a2 <_vfiprintf_r+0x246>
  405790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405794:	f898 2000 	ldrb.w	r2, [r8]
  405798:	e652      	b.n	405440 <_vfiprintf_r+0xe4>
  40579a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40579e:	2600      	movs	r6, #0
  4057a0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4057a4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4057a8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4057ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4057b0:	2909      	cmp	r1, #9
  4057b2:	d9f5      	bls.n	4057a0 <_vfiprintf_r+0x444>
  4057b4:	e646      	b.n	405444 <_vfiprintf_r+0xe8>
  4057b6:	9608      	str	r6, [sp, #32]
  4057b8:	2800      	cmp	r0, #0
  4057ba:	f040 8408 	bne.w	405fce <_vfiprintf_r+0xc72>
  4057be:	f043 0310 	orr.w	r3, r3, #16
  4057c2:	069e      	lsls	r6, r3, #26
  4057c4:	f100 834c 	bmi.w	405e60 <_vfiprintf_r+0xb04>
  4057c8:	06dd      	lsls	r5, r3, #27
  4057ca:	f100 82f3 	bmi.w	405db4 <_vfiprintf_r+0xa58>
  4057ce:	0658      	lsls	r0, r3, #25
  4057d0:	f140 82f0 	bpl.w	405db4 <_vfiprintf_r+0xa58>
  4057d4:	9d07      	ldr	r5, [sp, #28]
  4057d6:	f9b5 6000 	ldrsh.w	r6, [r5]
  4057da:	462a      	mov	r2, r5
  4057dc:	17f7      	asrs	r7, r6, #31
  4057de:	3204      	adds	r2, #4
  4057e0:	4630      	mov	r0, r6
  4057e2:	4639      	mov	r1, r7
  4057e4:	9207      	str	r2, [sp, #28]
  4057e6:	2800      	cmp	r0, #0
  4057e8:	f171 0200 	sbcs.w	r2, r1, #0
  4057ec:	f2c0 835d 	blt.w	405eaa <_vfiprintf_r+0xb4e>
  4057f0:	1c61      	adds	r1, r4, #1
  4057f2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4057f6:	f04f 0201 	mov.w	r2, #1
  4057fa:	f47f aeea 	bne.w	4055d2 <_vfiprintf_r+0x276>
  4057fe:	ea56 0107 	orrs.w	r1, r6, r7
  405802:	f000 824d 	beq.w	405ca0 <_vfiprintf_r+0x944>
  405806:	9302      	str	r3, [sp, #8]
  405808:	2a01      	cmp	r2, #1
  40580a:	f000 828c 	beq.w	405d26 <_vfiprintf_r+0x9ca>
  40580e:	2a02      	cmp	r2, #2
  405810:	f040 825c 	bne.w	405ccc <_vfiprintf_r+0x970>
  405814:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405816:	46cb      	mov	fp, r9
  405818:	0933      	lsrs	r3, r6, #4
  40581a:	f006 010f 	and.w	r1, r6, #15
  40581e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  405822:	093a      	lsrs	r2, r7, #4
  405824:	461e      	mov	r6, r3
  405826:	4617      	mov	r7, r2
  405828:	5c43      	ldrb	r3, [r0, r1]
  40582a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40582e:	ea56 0307 	orrs.w	r3, r6, r7
  405832:	d1f1      	bne.n	405818 <_vfiprintf_r+0x4bc>
  405834:	eba9 030b 	sub.w	r3, r9, fp
  405838:	9305      	str	r3, [sp, #20]
  40583a:	e6e1      	b.n	405600 <_vfiprintf_r+0x2a4>
  40583c:	2800      	cmp	r0, #0
  40583e:	f040 83c0 	bne.w	405fc2 <_vfiprintf_r+0xc66>
  405842:	0699      	lsls	r1, r3, #26
  405844:	f100 8367 	bmi.w	405f16 <_vfiprintf_r+0xbba>
  405848:	06da      	lsls	r2, r3, #27
  40584a:	f100 80f1 	bmi.w	405a30 <_vfiprintf_r+0x6d4>
  40584e:	065b      	lsls	r3, r3, #25
  405850:	f140 80ee 	bpl.w	405a30 <_vfiprintf_r+0x6d4>
  405854:	9a07      	ldr	r2, [sp, #28]
  405856:	6813      	ldr	r3, [r2, #0]
  405858:	3204      	adds	r2, #4
  40585a:	9207      	str	r2, [sp, #28]
  40585c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  405860:	801a      	strh	r2, [r3, #0]
  405862:	e5b8      	b.n	4053d6 <_vfiprintf_r+0x7a>
  405864:	9807      	ldr	r0, [sp, #28]
  405866:	4a3d      	ldr	r2, [pc, #244]	; (40595c <_vfiprintf_r+0x600>)
  405868:	9608      	str	r6, [sp, #32]
  40586a:	920b      	str	r2, [sp, #44]	; 0x2c
  40586c:	6806      	ldr	r6, [r0, #0]
  40586e:	2278      	movs	r2, #120	; 0x78
  405870:	2130      	movs	r1, #48	; 0x30
  405872:	3004      	adds	r0, #4
  405874:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405878:	f043 0302 	orr.w	r3, r3, #2
  40587c:	9007      	str	r0, [sp, #28]
  40587e:	2700      	movs	r7, #0
  405880:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405884:	2202      	movs	r2, #2
  405886:	e69c      	b.n	4055c2 <_vfiprintf_r+0x266>
  405888:	9608      	str	r6, [sp, #32]
  40588a:	2800      	cmp	r0, #0
  40588c:	d099      	beq.n	4057c2 <_vfiprintf_r+0x466>
  40588e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405892:	e796      	b.n	4057c2 <_vfiprintf_r+0x466>
  405894:	f898 2000 	ldrb.w	r2, [r8]
  405898:	2d00      	cmp	r5, #0
  40589a:	f47f add1 	bne.w	405440 <_vfiprintf_r+0xe4>
  40589e:	2001      	movs	r0, #1
  4058a0:	2520      	movs	r5, #32
  4058a2:	e5cd      	b.n	405440 <_vfiprintf_r+0xe4>
  4058a4:	f043 0301 	orr.w	r3, r3, #1
  4058a8:	f898 2000 	ldrb.w	r2, [r8]
  4058ac:	e5c8      	b.n	405440 <_vfiprintf_r+0xe4>
  4058ae:	9608      	str	r6, [sp, #32]
  4058b0:	2800      	cmp	r0, #0
  4058b2:	f040 8393 	bne.w	405fdc <_vfiprintf_r+0xc80>
  4058b6:	4929      	ldr	r1, [pc, #164]	; (40595c <_vfiprintf_r+0x600>)
  4058b8:	910b      	str	r1, [sp, #44]	; 0x2c
  4058ba:	069f      	lsls	r7, r3, #26
  4058bc:	f100 82e8 	bmi.w	405e90 <_vfiprintf_r+0xb34>
  4058c0:	9807      	ldr	r0, [sp, #28]
  4058c2:	06de      	lsls	r6, r3, #27
  4058c4:	4601      	mov	r1, r0
  4058c6:	f100 8270 	bmi.w	405daa <_vfiprintf_r+0xa4e>
  4058ca:	065d      	lsls	r5, r3, #25
  4058cc:	f140 826d 	bpl.w	405daa <_vfiprintf_r+0xa4e>
  4058d0:	3104      	adds	r1, #4
  4058d2:	8806      	ldrh	r6, [r0, #0]
  4058d4:	9107      	str	r1, [sp, #28]
  4058d6:	2700      	movs	r7, #0
  4058d8:	07d8      	lsls	r0, r3, #31
  4058da:	f140 8222 	bpl.w	405d22 <_vfiprintf_r+0x9c6>
  4058de:	ea56 0107 	orrs.w	r1, r6, r7
  4058e2:	f000 821e 	beq.w	405d22 <_vfiprintf_r+0x9c6>
  4058e6:	2130      	movs	r1, #48	; 0x30
  4058e8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4058ec:	f043 0302 	orr.w	r3, r3, #2
  4058f0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4058f4:	2202      	movs	r2, #2
  4058f6:	e664      	b.n	4055c2 <_vfiprintf_r+0x266>
  4058f8:	9608      	str	r6, [sp, #32]
  4058fa:	2800      	cmp	r0, #0
  4058fc:	f040 836b 	bne.w	405fd6 <_vfiprintf_r+0xc7a>
  405900:	4917      	ldr	r1, [pc, #92]	; (405960 <_vfiprintf_r+0x604>)
  405902:	910b      	str	r1, [sp, #44]	; 0x2c
  405904:	e7d9      	b.n	4058ba <_vfiprintf_r+0x55e>
  405906:	9907      	ldr	r1, [sp, #28]
  405908:	9608      	str	r6, [sp, #32]
  40590a:	680a      	ldr	r2, [r1, #0]
  40590c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405910:	f04f 0000 	mov.w	r0, #0
  405914:	460a      	mov	r2, r1
  405916:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40591a:	3204      	adds	r2, #4
  40591c:	2001      	movs	r0, #1
  40591e:	9001      	str	r0, [sp, #4]
  405920:	9207      	str	r2, [sp, #28]
  405922:	9005      	str	r0, [sp, #20]
  405924:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405928:	9302      	str	r3, [sp, #8]
  40592a:	2400      	movs	r4, #0
  40592c:	e670      	b.n	405610 <_vfiprintf_r+0x2b4>
  40592e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405932:	f898 2000 	ldrb.w	r2, [r8]
  405936:	e583      	b.n	405440 <_vfiprintf_r+0xe4>
  405938:	f898 2000 	ldrb.w	r2, [r8]
  40593c:	2a6c      	cmp	r2, #108	; 0x6c
  40593e:	bf03      	ittte	eq
  405940:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  405944:	f043 0320 	orreq.w	r3, r3, #32
  405948:	f108 0801 	addeq.w	r8, r8, #1
  40594c:	f043 0310 	orrne.w	r3, r3, #16
  405950:	e576      	b.n	405440 <_vfiprintf_r+0xe4>
  405952:	bf00      	nop
  405954:	00407a20 	.word	0x00407a20
  405958:	00407a30 	.word	0x00407a30
  40595c:	00407a04 	.word	0x00407a04
  405960:	004079f0 	.word	0x004079f0
  405964:	9907      	ldr	r1, [sp, #28]
  405966:	680e      	ldr	r6, [r1, #0]
  405968:	460a      	mov	r2, r1
  40596a:	2e00      	cmp	r6, #0
  40596c:	f102 0204 	add.w	r2, r2, #4
  405970:	f6ff ae0f 	blt.w	405592 <_vfiprintf_r+0x236>
  405974:	9207      	str	r2, [sp, #28]
  405976:	f898 2000 	ldrb.w	r2, [r8]
  40597a:	e561      	b.n	405440 <_vfiprintf_r+0xe4>
  40597c:	f898 2000 	ldrb.w	r2, [r8]
  405980:	2001      	movs	r0, #1
  405982:	252b      	movs	r5, #43	; 0x2b
  405984:	e55c      	b.n	405440 <_vfiprintf_r+0xe4>
  405986:	9907      	ldr	r1, [sp, #28]
  405988:	9608      	str	r6, [sp, #32]
  40598a:	f8d1 b000 	ldr.w	fp, [r1]
  40598e:	f04f 0200 	mov.w	r2, #0
  405992:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405996:	1d0e      	adds	r6, r1, #4
  405998:	f1bb 0f00 	cmp.w	fp, #0
  40599c:	f000 82e5 	beq.w	405f6a <_vfiprintf_r+0xc0e>
  4059a0:	1c67      	adds	r7, r4, #1
  4059a2:	f000 82c4 	beq.w	405f2e <_vfiprintf_r+0xbd2>
  4059a6:	4622      	mov	r2, r4
  4059a8:	2100      	movs	r1, #0
  4059aa:	4658      	mov	r0, fp
  4059ac:	9301      	str	r3, [sp, #4]
  4059ae:	f001 f91f 	bl	406bf0 <memchr>
  4059b2:	9b01      	ldr	r3, [sp, #4]
  4059b4:	2800      	cmp	r0, #0
  4059b6:	f000 82e5 	beq.w	405f84 <_vfiprintf_r+0xc28>
  4059ba:	eba0 020b 	sub.w	r2, r0, fp
  4059be:	9205      	str	r2, [sp, #20]
  4059c0:	9607      	str	r6, [sp, #28]
  4059c2:	9302      	str	r3, [sp, #8]
  4059c4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4059c8:	2400      	movs	r4, #0
  4059ca:	e619      	b.n	405600 <_vfiprintf_r+0x2a4>
  4059cc:	f898 2000 	ldrb.w	r2, [r8]
  4059d0:	2a2a      	cmp	r2, #42	; 0x2a
  4059d2:	f108 0701 	add.w	r7, r8, #1
  4059d6:	f000 82e9 	beq.w	405fac <_vfiprintf_r+0xc50>
  4059da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4059de:	2909      	cmp	r1, #9
  4059e0:	46b8      	mov	r8, r7
  4059e2:	f04f 0400 	mov.w	r4, #0
  4059e6:	f63f ad2d 	bhi.w	405444 <_vfiprintf_r+0xe8>
  4059ea:	f818 2b01 	ldrb.w	r2, [r8], #1
  4059ee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4059f2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4059f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4059fa:	2909      	cmp	r1, #9
  4059fc:	d9f5      	bls.n	4059ea <_vfiprintf_r+0x68e>
  4059fe:	e521      	b.n	405444 <_vfiprintf_r+0xe8>
  405a00:	f043 0320 	orr.w	r3, r3, #32
  405a04:	f898 2000 	ldrb.w	r2, [r8]
  405a08:	e51a      	b.n	405440 <_vfiprintf_r+0xe4>
  405a0a:	9608      	str	r6, [sp, #32]
  405a0c:	2800      	cmp	r0, #0
  405a0e:	f040 82db 	bne.w	405fc8 <_vfiprintf_r+0xc6c>
  405a12:	2a00      	cmp	r2, #0
  405a14:	f000 80e7 	beq.w	405be6 <_vfiprintf_r+0x88a>
  405a18:	2101      	movs	r1, #1
  405a1a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405a1e:	f04f 0200 	mov.w	r2, #0
  405a22:	9101      	str	r1, [sp, #4]
  405a24:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405a28:	9105      	str	r1, [sp, #20]
  405a2a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405a2e:	e77b      	b.n	405928 <_vfiprintf_r+0x5cc>
  405a30:	9a07      	ldr	r2, [sp, #28]
  405a32:	6813      	ldr	r3, [r2, #0]
  405a34:	3204      	adds	r2, #4
  405a36:	9207      	str	r2, [sp, #28]
  405a38:	9a03      	ldr	r2, [sp, #12]
  405a3a:	601a      	str	r2, [r3, #0]
  405a3c:	e4cb      	b.n	4053d6 <_vfiprintf_r+0x7a>
  405a3e:	aa0f      	add	r2, sp, #60	; 0x3c
  405a40:	9904      	ldr	r1, [sp, #16]
  405a42:	4620      	mov	r0, r4
  405a44:	f7ff fc4a 	bl	4052dc <__sprint_r.part.0>
  405a48:	2800      	cmp	r0, #0
  405a4a:	f040 8139 	bne.w	405cc0 <_vfiprintf_r+0x964>
  405a4e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405a50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a52:	f101 0c01 	add.w	ip, r1, #1
  405a56:	46ce      	mov	lr, r9
  405a58:	e5ff      	b.n	40565a <_vfiprintf_r+0x2fe>
  405a5a:	9910      	ldr	r1, [sp, #64]	; 0x40
  405a5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a5e:	1c48      	adds	r0, r1, #1
  405a60:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405a64:	2d00      	cmp	r5, #0
  405a66:	f43f ae22 	beq.w	4056ae <_vfiprintf_r+0x352>
  405a6a:	3201      	adds	r2, #1
  405a6c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  405a70:	2101      	movs	r1, #1
  405a72:	2807      	cmp	r0, #7
  405a74:	9211      	str	r2, [sp, #68]	; 0x44
  405a76:	9010      	str	r0, [sp, #64]	; 0x40
  405a78:	f8ca 5000 	str.w	r5, [sl]
  405a7c:	f8ca 1004 	str.w	r1, [sl, #4]
  405a80:	f340 8108 	ble.w	405c94 <_vfiprintf_r+0x938>
  405a84:	2a00      	cmp	r2, #0
  405a86:	f040 81bc 	bne.w	405e02 <_vfiprintf_r+0xaa6>
  405a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405a8c:	2b00      	cmp	r3, #0
  405a8e:	f43f ae1f 	beq.w	4056d0 <_vfiprintf_r+0x374>
  405a92:	ab0e      	add	r3, sp, #56	; 0x38
  405a94:	2202      	movs	r2, #2
  405a96:	4608      	mov	r0, r1
  405a98:	931c      	str	r3, [sp, #112]	; 0x70
  405a9a:	921d      	str	r2, [sp, #116]	; 0x74
  405a9c:	46ca      	mov	sl, r9
  405a9e:	4601      	mov	r1, r0
  405aa0:	f10a 0a08 	add.w	sl, sl, #8
  405aa4:	3001      	adds	r0, #1
  405aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405aa8:	2b80      	cmp	r3, #128	; 0x80
  405aaa:	f43f ae19 	beq.w	4056e0 <_vfiprintf_r+0x384>
  405aae:	9b05      	ldr	r3, [sp, #20]
  405ab0:	1ae4      	subs	r4, r4, r3
  405ab2:	2c00      	cmp	r4, #0
  405ab4:	dd2e      	ble.n	405b14 <_vfiprintf_r+0x7b8>
  405ab6:	2c10      	cmp	r4, #16
  405ab8:	4db3      	ldr	r5, [pc, #716]	; (405d88 <_vfiprintf_r+0xa2c>)
  405aba:	dd1e      	ble.n	405afa <_vfiprintf_r+0x79e>
  405abc:	46d6      	mov	lr, sl
  405abe:	2610      	movs	r6, #16
  405ac0:	9f06      	ldr	r7, [sp, #24]
  405ac2:	f8dd a010 	ldr.w	sl, [sp, #16]
  405ac6:	e006      	b.n	405ad6 <_vfiprintf_r+0x77a>
  405ac8:	1c88      	adds	r0, r1, #2
  405aca:	f10e 0e08 	add.w	lr, lr, #8
  405ace:	4619      	mov	r1, r3
  405ad0:	3c10      	subs	r4, #16
  405ad2:	2c10      	cmp	r4, #16
  405ad4:	dd10      	ble.n	405af8 <_vfiprintf_r+0x79c>
  405ad6:	1c4b      	adds	r3, r1, #1
  405ad8:	3210      	adds	r2, #16
  405ada:	2b07      	cmp	r3, #7
  405adc:	9211      	str	r2, [sp, #68]	; 0x44
  405ade:	e88e 0060 	stmia.w	lr, {r5, r6}
  405ae2:	9310      	str	r3, [sp, #64]	; 0x40
  405ae4:	ddf0      	ble.n	405ac8 <_vfiprintf_r+0x76c>
  405ae6:	2a00      	cmp	r2, #0
  405ae8:	d165      	bne.n	405bb6 <_vfiprintf_r+0x85a>
  405aea:	3c10      	subs	r4, #16
  405aec:	2c10      	cmp	r4, #16
  405aee:	f04f 0001 	mov.w	r0, #1
  405af2:	4611      	mov	r1, r2
  405af4:	46ce      	mov	lr, r9
  405af6:	dcee      	bgt.n	405ad6 <_vfiprintf_r+0x77a>
  405af8:	46f2      	mov	sl, lr
  405afa:	4422      	add	r2, r4
  405afc:	2807      	cmp	r0, #7
  405afe:	9211      	str	r2, [sp, #68]	; 0x44
  405b00:	f8ca 5000 	str.w	r5, [sl]
  405b04:	f8ca 4004 	str.w	r4, [sl, #4]
  405b08:	9010      	str	r0, [sp, #64]	; 0x40
  405b0a:	f300 8085 	bgt.w	405c18 <_vfiprintf_r+0x8bc>
  405b0e:	f10a 0a08 	add.w	sl, sl, #8
  405b12:	3001      	adds	r0, #1
  405b14:	9905      	ldr	r1, [sp, #20]
  405b16:	f8ca b000 	str.w	fp, [sl]
  405b1a:	440a      	add	r2, r1
  405b1c:	2807      	cmp	r0, #7
  405b1e:	9211      	str	r2, [sp, #68]	; 0x44
  405b20:	f8ca 1004 	str.w	r1, [sl, #4]
  405b24:	9010      	str	r0, [sp, #64]	; 0x40
  405b26:	f340 8082 	ble.w	405c2e <_vfiprintf_r+0x8d2>
  405b2a:	2a00      	cmp	r2, #0
  405b2c:	f040 8118 	bne.w	405d60 <_vfiprintf_r+0xa04>
  405b30:	9b02      	ldr	r3, [sp, #8]
  405b32:	9210      	str	r2, [sp, #64]	; 0x40
  405b34:	0758      	lsls	r0, r3, #29
  405b36:	d535      	bpl.n	405ba4 <_vfiprintf_r+0x848>
  405b38:	9b08      	ldr	r3, [sp, #32]
  405b3a:	9901      	ldr	r1, [sp, #4]
  405b3c:	1a5c      	subs	r4, r3, r1
  405b3e:	2c00      	cmp	r4, #0
  405b40:	f340 80e7 	ble.w	405d12 <_vfiprintf_r+0x9b6>
  405b44:	46ca      	mov	sl, r9
  405b46:	2c10      	cmp	r4, #16
  405b48:	f340 8218 	ble.w	405f7c <_vfiprintf_r+0xc20>
  405b4c:	9910      	ldr	r1, [sp, #64]	; 0x40
  405b4e:	4e8f      	ldr	r6, [pc, #572]	; (405d8c <_vfiprintf_r+0xa30>)
  405b50:	9f06      	ldr	r7, [sp, #24]
  405b52:	f8dd b010 	ldr.w	fp, [sp, #16]
  405b56:	2510      	movs	r5, #16
  405b58:	e006      	b.n	405b68 <_vfiprintf_r+0x80c>
  405b5a:	1c88      	adds	r0, r1, #2
  405b5c:	f10a 0a08 	add.w	sl, sl, #8
  405b60:	4619      	mov	r1, r3
  405b62:	3c10      	subs	r4, #16
  405b64:	2c10      	cmp	r4, #16
  405b66:	dd11      	ble.n	405b8c <_vfiprintf_r+0x830>
  405b68:	1c4b      	adds	r3, r1, #1
  405b6a:	3210      	adds	r2, #16
  405b6c:	2b07      	cmp	r3, #7
  405b6e:	9211      	str	r2, [sp, #68]	; 0x44
  405b70:	f8ca 6000 	str.w	r6, [sl]
  405b74:	f8ca 5004 	str.w	r5, [sl, #4]
  405b78:	9310      	str	r3, [sp, #64]	; 0x40
  405b7a:	ddee      	ble.n	405b5a <_vfiprintf_r+0x7fe>
  405b7c:	bb42      	cbnz	r2, 405bd0 <_vfiprintf_r+0x874>
  405b7e:	3c10      	subs	r4, #16
  405b80:	2c10      	cmp	r4, #16
  405b82:	f04f 0001 	mov.w	r0, #1
  405b86:	4611      	mov	r1, r2
  405b88:	46ca      	mov	sl, r9
  405b8a:	dced      	bgt.n	405b68 <_vfiprintf_r+0x80c>
  405b8c:	4422      	add	r2, r4
  405b8e:	2807      	cmp	r0, #7
  405b90:	9211      	str	r2, [sp, #68]	; 0x44
  405b92:	f8ca 6000 	str.w	r6, [sl]
  405b96:	f8ca 4004 	str.w	r4, [sl, #4]
  405b9a:	9010      	str	r0, [sp, #64]	; 0x40
  405b9c:	dd51      	ble.n	405c42 <_vfiprintf_r+0x8e6>
  405b9e:	2a00      	cmp	r2, #0
  405ba0:	f040 819b 	bne.w	405eda <_vfiprintf_r+0xb7e>
  405ba4:	9b03      	ldr	r3, [sp, #12]
  405ba6:	9a08      	ldr	r2, [sp, #32]
  405ba8:	9901      	ldr	r1, [sp, #4]
  405baa:	428a      	cmp	r2, r1
  405bac:	bfac      	ite	ge
  405bae:	189b      	addge	r3, r3, r2
  405bb0:	185b      	addlt	r3, r3, r1
  405bb2:	9303      	str	r3, [sp, #12]
  405bb4:	e04e      	b.n	405c54 <_vfiprintf_r+0x8f8>
  405bb6:	aa0f      	add	r2, sp, #60	; 0x3c
  405bb8:	4651      	mov	r1, sl
  405bba:	4638      	mov	r0, r7
  405bbc:	f7ff fb8e 	bl	4052dc <__sprint_r.part.0>
  405bc0:	2800      	cmp	r0, #0
  405bc2:	f040 813f 	bne.w	405e44 <_vfiprintf_r+0xae8>
  405bc6:	9910      	ldr	r1, [sp, #64]	; 0x40
  405bc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405bca:	1c48      	adds	r0, r1, #1
  405bcc:	46ce      	mov	lr, r9
  405bce:	e77f      	b.n	405ad0 <_vfiprintf_r+0x774>
  405bd0:	aa0f      	add	r2, sp, #60	; 0x3c
  405bd2:	4659      	mov	r1, fp
  405bd4:	4638      	mov	r0, r7
  405bd6:	f7ff fb81 	bl	4052dc <__sprint_r.part.0>
  405bda:	b960      	cbnz	r0, 405bf6 <_vfiprintf_r+0x89a>
  405bdc:	9910      	ldr	r1, [sp, #64]	; 0x40
  405bde:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405be0:	1c48      	adds	r0, r1, #1
  405be2:	46ca      	mov	sl, r9
  405be4:	e7bd      	b.n	405b62 <_vfiprintf_r+0x806>
  405be6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405be8:	f8dd b010 	ldr.w	fp, [sp, #16]
  405bec:	2b00      	cmp	r3, #0
  405bee:	f040 81d4 	bne.w	405f9a <_vfiprintf_r+0xc3e>
  405bf2:	2300      	movs	r3, #0
  405bf4:	9310      	str	r3, [sp, #64]	; 0x40
  405bf6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405bfa:	f013 0f01 	tst.w	r3, #1
  405bfe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405c02:	d102      	bne.n	405c0a <_vfiprintf_r+0x8ae>
  405c04:	059a      	lsls	r2, r3, #22
  405c06:	f140 80de 	bpl.w	405dc6 <_vfiprintf_r+0xa6a>
  405c0a:	065b      	lsls	r3, r3, #25
  405c0c:	f53f acb2 	bmi.w	405574 <_vfiprintf_r+0x218>
  405c10:	9803      	ldr	r0, [sp, #12]
  405c12:	b02d      	add	sp, #180	; 0xb4
  405c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c18:	2a00      	cmp	r2, #0
  405c1a:	f040 8106 	bne.w	405e2a <_vfiprintf_r+0xace>
  405c1e:	9a05      	ldr	r2, [sp, #20]
  405c20:	921d      	str	r2, [sp, #116]	; 0x74
  405c22:	2301      	movs	r3, #1
  405c24:	9211      	str	r2, [sp, #68]	; 0x44
  405c26:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  405c2a:	9310      	str	r3, [sp, #64]	; 0x40
  405c2c:	46ca      	mov	sl, r9
  405c2e:	f10a 0a08 	add.w	sl, sl, #8
  405c32:	9b02      	ldr	r3, [sp, #8]
  405c34:	0759      	lsls	r1, r3, #29
  405c36:	d504      	bpl.n	405c42 <_vfiprintf_r+0x8e6>
  405c38:	9b08      	ldr	r3, [sp, #32]
  405c3a:	9901      	ldr	r1, [sp, #4]
  405c3c:	1a5c      	subs	r4, r3, r1
  405c3e:	2c00      	cmp	r4, #0
  405c40:	dc81      	bgt.n	405b46 <_vfiprintf_r+0x7ea>
  405c42:	9b03      	ldr	r3, [sp, #12]
  405c44:	9908      	ldr	r1, [sp, #32]
  405c46:	9801      	ldr	r0, [sp, #4]
  405c48:	4281      	cmp	r1, r0
  405c4a:	bfac      	ite	ge
  405c4c:	185b      	addge	r3, r3, r1
  405c4e:	181b      	addlt	r3, r3, r0
  405c50:	9303      	str	r3, [sp, #12]
  405c52:	bb72      	cbnz	r2, 405cb2 <_vfiprintf_r+0x956>
  405c54:	2300      	movs	r3, #0
  405c56:	9310      	str	r3, [sp, #64]	; 0x40
  405c58:	46ca      	mov	sl, r9
  405c5a:	f7ff bbbc 	b.w	4053d6 <_vfiprintf_r+0x7a>
  405c5e:	aa0f      	add	r2, sp, #60	; 0x3c
  405c60:	9904      	ldr	r1, [sp, #16]
  405c62:	4620      	mov	r0, r4
  405c64:	f7ff fb3a 	bl	4052dc <__sprint_r.part.0>
  405c68:	bb50      	cbnz	r0, 405cc0 <_vfiprintf_r+0x964>
  405c6a:	9910      	ldr	r1, [sp, #64]	; 0x40
  405c6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405c6e:	f101 0e01 	add.w	lr, r1, #1
  405c72:	46cc      	mov	ip, r9
  405c74:	e548      	b.n	405708 <_vfiprintf_r+0x3ac>
  405c76:	2a00      	cmp	r2, #0
  405c78:	f040 8140 	bne.w	405efc <_vfiprintf_r+0xba0>
  405c7c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  405c80:	2900      	cmp	r1, #0
  405c82:	f000 811b 	beq.w	405ebc <_vfiprintf_r+0xb60>
  405c86:	2201      	movs	r2, #1
  405c88:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  405c8c:	4610      	mov	r0, r2
  405c8e:	921d      	str	r2, [sp, #116]	; 0x74
  405c90:	911c      	str	r1, [sp, #112]	; 0x70
  405c92:	46ca      	mov	sl, r9
  405c94:	4601      	mov	r1, r0
  405c96:	f10a 0a08 	add.w	sl, sl, #8
  405c9a:	3001      	adds	r0, #1
  405c9c:	e507      	b.n	4056ae <_vfiprintf_r+0x352>
  405c9e:	9b02      	ldr	r3, [sp, #8]
  405ca0:	2a01      	cmp	r2, #1
  405ca2:	f000 8098 	beq.w	405dd6 <_vfiprintf_r+0xa7a>
  405ca6:	2a02      	cmp	r2, #2
  405ca8:	d10d      	bne.n	405cc6 <_vfiprintf_r+0x96a>
  405caa:	9302      	str	r3, [sp, #8]
  405cac:	2600      	movs	r6, #0
  405cae:	2700      	movs	r7, #0
  405cb0:	e5b0      	b.n	405814 <_vfiprintf_r+0x4b8>
  405cb2:	aa0f      	add	r2, sp, #60	; 0x3c
  405cb4:	9904      	ldr	r1, [sp, #16]
  405cb6:	9806      	ldr	r0, [sp, #24]
  405cb8:	f7ff fb10 	bl	4052dc <__sprint_r.part.0>
  405cbc:	2800      	cmp	r0, #0
  405cbe:	d0c9      	beq.n	405c54 <_vfiprintf_r+0x8f8>
  405cc0:	f8dd b010 	ldr.w	fp, [sp, #16]
  405cc4:	e797      	b.n	405bf6 <_vfiprintf_r+0x89a>
  405cc6:	9302      	str	r3, [sp, #8]
  405cc8:	2600      	movs	r6, #0
  405cca:	2700      	movs	r7, #0
  405ccc:	4649      	mov	r1, r9
  405cce:	e000      	b.n	405cd2 <_vfiprintf_r+0x976>
  405cd0:	4659      	mov	r1, fp
  405cd2:	08f2      	lsrs	r2, r6, #3
  405cd4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405cd8:	08f8      	lsrs	r0, r7, #3
  405cda:	f006 0307 	and.w	r3, r6, #7
  405cde:	4607      	mov	r7, r0
  405ce0:	4616      	mov	r6, r2
  405ce2:	3330      	adds	r3, #48	; 0x30
  405ce4:	ea56 0207 	orrs.w	r2, r6, r7
  405ce8:	f801 3c01 	strb.w	r3, [r1, #-1]
  405cec:	f101 3bff 	add.w	fp, r1, #4294967295
  405cf0:	d1ee      	bne.n	405cd0 <_vfiprintf_r+0x974>
  405cf2:	9a02      	ldr	r2, [sp, #8]
  405cf4:	07d6      	lsls	r6, r2, #31
  405cf6:	f57f ad9d 	bpl.w	405834 <_vfiprintf_r+0x4d8>
  405cfa:	2b30      	cmp	r3, #48	; 0x30
  405cfc:	f43f ad9a 	beq.w	405834 <_vfiprintf_r+0x4d8>
  405d00:	3902      	subs	r1, #2
  405d02:	2330      	movs	r3, #48	; 0x30
  405d04:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405d08:	eba9 0301 	sub.w	r3, r9, r1
  405d0c:	9305      	str	r3, [sp, #20]
  405d0e:	468b      	mov	fp, r1
  405d10:	e476      	b.n	405600 <_vfiprintf_r+0x2a4>
  405d12:	9b03      	ldr	r3, [sp, #12]
  405d14:	9a08      	ldr	r2, [sp, #32]
  405d16:	428a      	cmp	r2, r1
  405d18:	bfac      	ite	ge
  405d1a:	189b      	addge	r3, r3, r2
  405d1c:	185b      	addlt	r3, r3, r1
  405d1e:	9303      	str	r3, [sp, #12]
  405d20:	e798      	b.n	405c54 <_vfiprintf_r+0x8f8>
  405d22:	2202      	movs	r2, #2
  405d24:	e44d      	b.n	4055c2 <_vfiprintf_r+0x266>
  405d26:	2f00      	cmp	r7, #0
  405d28:	bf08      	it	eq
  405d2a:	2e0a      	cmpeq	r6, #10
  405d2c:	d352      	bcc.n	405dd4 <_vfiprintf_r+0xa78>
  405d2e:	46cb      	mov	fp, r9
  405d30:	4630      	mov	r0, r6
  405d32:	4639      	mov	r1, r7
  405d34:	220a      	movs	r2, #10
  405d36:	2300      	movs	r3, #0
  405d38:	f001 fbc6 	bl	4074c8 <__aeabi_uldivmod>
  405d3c:	3230      	adds	r2, #48	; 0x30
  405d3e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  405d42:	4630      	mov	r0, r6
  405d44:	4639      	mov	r1, r7
  405d46:	2300      	movs	r3, #0
  405d48:	220a      	movs	r2, #10
  405d4a:	f001 fbbd 	bl	4074c8 <__aeabi_uldivmod>
  405d4e:	4606      	mov	r6, r0
  405d50:	460f      	mov	r7, r1
  405d52:	ea56 0307 	orrs.w	r3, r6, r7
  405d56:	d1eb      	bne.n	405d30 <_vfiprintf_r+0x9d4>
  405d58:	e56c      	b.n	405834 <_vfiprintf_r+0x4d8>
  405d5a:	9405      	str	r4, [sp, #20]
  405d5c:	46cb      	mov	fp, r9
  405d5e:	e44f      	b.n	405600 <_vfiprintf_r+0x2a4>
  405d60:	aa0f      	add	r2, sp, #60	; 0x3c
  405d62:	9904      	ldr	r1, [sp, #16]
  405d64:	9806      	ldr	r0, [sp, #24]
  405d66:	f7ff fab9 	bl	4052dc <__sprint_r.part.0>
  405d6a:	2800      	cmp	r0, #0
  405d6c:	d1a8      	bne.n	405cc0 <_vfiprintf_r+0x964>
  405d6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d70:	46ca      	mov	sl, r9
  405d72:	e75e      	b.n	405c32 <_vfiprintf_r+0x8d6>
  405d74:	aa0f      	add	r2, sp, #60	; 0x3c
  405d76:	9904      	ldr	r1, [sp, #16]
  405d78:	9806      	ldr	r0, [sp, #24]
  405d7a:	f7ff faaf 	bl	4052dc <__sprint_r.part.0>
  405d7e:	2800      	cmp	r0, #0
  405d80:	d19e      	bne.n	405cc0 <_vfiprintf_r+0x964>
  405d82:	46ca      	mov	sl, r9
  405d84:	f7ff bbc0 	b.w	405508 <_vfiprintf_r+0x1ac>
  405d88:	00407a30 	.word	0x00407a30
  405d8c:	00407a20 	.word	0x00407a20
  405d90:	3104      	adds	r1, #4
  405d92:	6816      	ldr	r6, [r2, #0]
  405d94:	9107      	str	r1, [sp, #28]
  405d96:	2201      	movs	r2, #1
  405d98:	2700      	movs	r7, #0
  405d9a:	e412      	b.n	4055c2 <_vfiprintf_r+0x266>
  405d9c:	9807      	ldr	r0, [sp, #28]
  405d9e:	4601      	mov	r1, r0
  405da0:	3104      	adds	r1, #4
  405da2:	6806      	ldr	r6, [r0, #0]
  405da4:	9107      	str	r1, [sp, #28]
  405da6:	2700      	movs	r7, #0
  405da8:	e40b      	b.n	4055c2 <_vfiprintf_r+0x266>
  405daa:	680e      	ldr	r6, [r1, #0]
  405dac:	3104      	adds	r1, #4
  405dae:	9107      	str	r1, [sp, #28]
  405db0:	2700      	movs	r7, #0
  405db2:	e591      	b.n	4058d8 <_vfiprintf_r+0x57c>
  405db4:	9907      	ldr	r1, [sp, #28]
  405db6:	680e      	ldr	r6, [r1, #0]
  405db8:	460a      	mov	r2, r1
  405dba:	17f7      	asrs	r7, r6, #31
  405dbc:	3204      	adds	r2, #4
  405dbe:	9207      	str	r2, [sp, #28]
  405dc0:	4630      	mov	r0, r6
  405dc2:	4639      	mov	r1, r7
  405dc4:	e50f      	b.n	4057e6 <_vfiprintf_r+0x48a>
  405dc6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405dca:	f000 fe7f 	bl	406acc <__retarget_lock_release_recursive>
  405dce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405dd2:	e71a      	b.n	405c0a <_vfiprintf_r+0x8ae>
  405dd4:	9b02      	ldr	r3, [sp, #8]
  405dd6:	9302      	str	r3, [sp, #8]
  405dd8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405ddc:	3630      	adds	r6, #48	; 0x30
  405dde:	2301      	movs	r3, #1
  405de0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405de4:	9305      	str	r3, [sp, #20]
  405de6:	e40b      	b.n	405600 <_vfiprintf_r+0x2a4>
  405de8:	aa0f      	add	r2, sp, #60	; 0x3c
  405dea:	9904      	ldr	r1, [sp, #16]
  405dec:	9806      	ldr	r0, [sp, #24]
  405dee:	f7ff fa75 	bl	4052dc <__sprint_r.part.0>
  405df2:	2800      	cmp	r0, #0
  405df4:	f47f af64 	bne.w	405cc0 <_vfiprintf_r+0x964>
  405df8:	9910      	ldr	r1, [sp, #64]	; 0x40
  405dfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405dfc:	1c48      	adds	r0, r1, #1
  405dfe:	46ca      	mov	sl, r9
  405e00:	e651      	b.n	405aa6 <_vfiprintf_r+0x74a>
  405e02:	aa0f      	add	r2, sp, #60	; 0x3c
  405e04:	9904      	ldr	r1, [sp, #16]
  405e06:	9806      	ldr	r0, [sp, #24]
  405e08:	f7ff fa68 	bl	4052dc <__sprint_r.part.0>
  405e0c:	2800      	cmp	r0, #0
  405e0e:	f47f af57 	bne.w	405cc0 <_vfiprintf_r+0x964>
  405e12:	9910      	ldr	r1, [sp, #64]	; 0x40
  405e14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405e16:	1c48      	adds	r0, r1, #1
  405e18:	46ca      	mov	sl, r9
  405e1a:	e448      	b.n	4056ae <_vfiprintf_r+0x352>
  405e1c:	2a00      	cmp	r2, #0
  405e1e:	f040 8091 	bne.w	405f44 <_vfiprintf_r+0xbe8>
  405e22:	2001      	movs	r0, #1
  405e24:	4611      	mov	r1, r2
  405e26:	46ca      	mov	sl, r9
  405e28:	e641      	b.n	405aae <_vfiprintf_r+0x752>
  405e2a:	aa0f      	add	r2, sp, #60	; 0x3c
  405e2c:	9904      	ldr	r1, [sp, #16]
  405e2e:	9806      	ldr	r0, [sp, #24]
  405e30:	f7ff fa54 	bl	4052dc <__sprint_r.part.0>
  405e34:	2800      	cmp	r0, #0
  405e36:	f47f af43 	bne.w	405cc0 <_vfiprintf_r+0x964>
  405e3a:	9810      	ldr	r0, [sp, #64]	; 0x40
  405e3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405e3e:	3001      	adds	r0, #1
  405e40:	46ca      	mov	sl, r9
  405e42:	e667      	b.n	405b14 <_vfiprintf_r+0x7b8>
  405e44:	46d3      	mov	fp, sl
  405e46:	e6d6      	b.n	405bf6 <_vfiprintf_r+0x89a>
  405e48:	9e07      	ldr	r6, [sp, #28]
  405e4a:	3607      	adds	r6, #7
  405e4c:	f026 0207 	bic.w	r2, r6, #7
  405e50:	f102 0108 	add.w	r1, r2, #8
  405e54:	e9d2 6700 	ldrd	r6, r7, [r2]
  405e58:	9107      	str	r1, [sp, #28]
  405e5a:	2201      	movs	r2, #1
  405e5c:	f7ff bbb1 	b.w	4055c2 <_vfiprintf_r+0x266>
  405e60:	9e07      	ldr	r6, [sp, #28]
  405e62:	3607      	adds	r6, #7
  405e64:	f026 0607 	bic.w	r6, r6, #7
  405e68:	e9d6 0100 	ldrd	r0, r1, [r6]
  405e6c:	f106 0208 	add.w	r2, r6, #8
  405e70:	9207      	str	r2, [sp, #28]
  405e72:	4606      	mov	r6, r0
  405e74:	460f      	mov	r7, r1
  405e76:	e4b6      	b.n	4057e6 <_vfiprintf_r+0x48a>
  405e78:	9e07      	ldr	r6, [sp, #28]
  405e7a:	3607      	adds	r6, #7
  405e7c:	f026 0207 	bic.w	r2, r6, #7
  405e80:	f102 0108 	add.w	r1, r2, #8
  405e84:	e9d2 6700 	ldrd	r6, r7, [r2]
  405e88:	9107      	str	r1, [sp, #28]
  405e8a:	2200      	movs	r2, #0
  405e8c:	f7ff bb99 	b.w	4055c2 <_vfiprintf_r+0x266>
  405e90:	9e07      	ldr	r6, [sp, #28]
  405e92:	3607      	adds	r6, #7
  405e94:	f026 0107 	bic.w	r1, r6, #7
  405e98:	f101 0008 	add.w	r0, r1, #8
  405e9c:	9007      	str	r0, [sp, #28]
  405e9e:	e9d1 6700 	ldrd	r6, r7, [r1]
  405ea2:	e519      	b.n	4058d8 <_vfiprintf_r+0x57c>
  405ea4:	46cb      	mov	fp, r9
  405ea6:	f7ff bbab 	b.w	405600 <_vfiprintf_r+0x2a4>
  405eaa:	252d      	movs	r5, #45	; 0x2d
  405eac:	4276      	negs	r6, r6
  405eae:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  405eb2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405eb6:	2201      	movs	r2, #1
  405eb8:	f7ff bb88 	b.w	4055cc <_vfiprintf_r+0x270>
  405ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405ebe:	b9b3      	cbnz	r3, 405eee <_vfiprintf_r+0xb92>
  405ec0:	4611      	mov	r1, r2
  405ec2:	2001      	movs	r0, #1
  405ec4:	46ca      	mov	sl, r9
  405ec6:	e5f2      	b.n	405aae <_vfiprintf_r+0x752>
  405ec8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405ecc:	f000 fdfe 	bl	406acc <__retarget_lock_release_recursive>
  405ed0:	f04f 33ff 	mov.w	r3, #4294967295
  405ed4:	9303      	str	r3, [sp, #12]
  405ed6:	f7ff bb50 	b.w	40557a <_vfiprintf_r+0x21e>
  405eda:	aa0f      	add	r2, sp, #60	; 0x3c
  405edc:	9904      	ldr	r1, [sp, #16]
  405ede:	9806      	ldr	r0, [sp, #24]
  405ee0:	f7ff f9fc 	bl	4052dc <__sprint_r.part.0>
  405ee4:	2800      	cmp	r0, #0
  405ee6:	f47f aeeb 	bne.w	405cc0 <_vfiprintf_r+0x964>
  405eea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405eec:	e6a9      	b.n	405c42 <_vfiprintf_r+0x8e6>
  405eee:	ab0e      	add	r3, sp, #56	; 0x38
  405ef0:	2202      	movs	r2, #2
  405ef2:	931c      	str	r3, [sp, #112]	; 0x70
  405ef4:	921d      	str	r2, [sp, #116]	; 0x74
  405ef6:	2001      	movs	r0, #1
  405ef8:	46ca      	mov	sl, r9
  405efa:	e5d0      	b.n	405a9e <_vfiprintf_r+0x742>
  405efc:	aa0f      	add	r2, sp, #60	; 0x3c
  405efe:	9904      	ldr	r1, [sp, #16]
  405f00:	9806      	ldr	r0, [sp, #24]
  405f02:	f7ff f9eb 	bl	4052dc <__sprint_r.part.0>
  405f06:	2800      	cmp	r0, #0
  405f08:	f47f aeda 	bne.w	405cc0 <_vfiprintf_r+0x964>
  405f0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  405f0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405f10:	1c48      	adds	r0, r1, #1
  405f12:	46ca      	mov	sl, r9
  405f14:	e5a4      	b.n	405a60 <_vfiprintf_r+0x704>
  405f16:	9a07      	ldr	r2, [sp, #28]
  405f18:	9903      	ldr	r1, [sp, #12]
  405f1a:	6813      	ldr	r3, [r2, #0]
  405f1c:	17cd      	asrs	r5, r1, #31
  405f1e:	4608      	mov	r0, r1
  405f20:	3204      	adds	r2, #4
  405f22:	4629      	mov	r1, r5
  405f24:	9207      	str	r2, [sp, #28]
  405f26:	e9c3 0100 	strd	r0, r1, [r3]
  405f2a:	f7ff ba54 	b.w	4053d6 <_vfiprintf_r+0x7a>
  405f2e:	4658      	mov	r0, fp
  405f30:	9607      	str	r6, [sp, #28]
  405f32:	9302      	str	r3, [sp, #8]
  405f34:	f7ff f964 	bl	405200 <strlen>
  405f38:	2400      	movs	r4, #0
  405f3a:	9005      	str	r0, [sp, #20]
  405f3c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405f40:	f7ff bb5e 	b.w	405600 <_vfiprintf_r+0x2a4>
  405f44:	aa0f      	add	r2, sp, #60	; 0x3c
  405f46:	9904      	ldr	r1, [sp, #16]
  405f48:	9806      	ldr	r0, [sp, #24]
  405f4a:	f7ff f9c7 	bl	4052dc <__sprint_r.part.0>
  405f4e:	2800      	cmp	r0, #0
  405f50:	f47f aeb6 	bne.w	405cc0 <_vfiprintf_r+0x964>
  405f54:	9910      	ldr	r1, [sp, #64]	; 0x40
  405f56:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405f58:	1c48      	adds	r0, r1, #1
  405f5a:	46ca      	mov	sl, r9
  405f5c:	e5a7      	b.n	405aae <_vfiprintf_r+0x752>
  405f5e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405f60:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405f62:	4e20      	ldr	r6, [pc, #128]	; (405fe4 <_vfiprintf_r+0xc88>)
  405f64:	3101      	adds	r1, #1
  405f66:	f7ff bb90 	b.w	40568a <_vfiprintf_r+0x32e>
  405f6a:	2c06      	cmp	r4, #6
  405f6c:	bf28      	it	cs
  405f6e:	2406      	movcs	r4, #6
  405f70:	9405      	str	r4, [sp, #20]
  405f72:	9607      	str	r6, [sp, #28]
  405f74:	9401      	str	r4, [sp, #4]
  405f76:	f8df b070 	ldr.w	fp, [pc, #112]	; 405fe8 <_vfiprintf_r+0xc8c>
  405f7a:	e4d5      	b.n	405928 <_vfiprintf_r+0x5cc>
  405f7c:	9810      	ldr	r0, [sp, #64]	; 0x40
  405f7e:	4e19      	ldr	r6, [pc, #100]	; (405fe4 <_vfiprintf_r+0xc88>)
  405f80:	3001      	adds	r0, #1
  405f82:	e603      	b.n	405b8c <_vfiprintf_r+0x830>
  405f84:	9405      	str	r4, [sp, #20]
  405f86:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405f8a:	9607      	str	r6, [sp, #28]
  405f8c:	9302      	str	r3, [sp, #8]
  405f8e:	4604      	mov	r4, r0
  405f90:	f7ff bb36 	b.w	405600 <_vfiprintf_r+0x2a4>
  405f94:	4686      	mov	lr, r0
  405f96:	f7ff bbce 	b.w	405736 <_vfiprintf_r+0x3da>
  405f9a:	9806      	ldr	r0, [sp, #24]
  405f9c:	aa0f      	add	r2, sp, #60	; 0x3c
  405f9e:	4659      	mov	r1, fp
  405fa0:	f7ff f99c 	bl	4052dc <__sprint_r.part.0>
  405fa4:	2800      	cmp	r0, #0
  405fa6:	f43f ae24 	beq.w	405bf2 <_vfiprintf_r+0x896>
  405faa:	e624      	b.n	405bf6 <_vfiprintf_r+0x89a>
  405fac:	9907      	ldr	r1, [sp, #28]
  405fae:	f898 2001 	ldrb.w	r2, [r8, #1]
  405fb2:	680c      	ldr	r4, [r1, #0]
  405fb4:	3104      	adds	r1, #4
  405fb6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405fba:	46b8      	mov	r8, r7
  405fbc:	9107      	str	r1, [sp, #28]
  405fbe:	f7ff ba3f 	b.w	405440 <_vfiprintf_r+0xe4>
  405fc2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405fc6:	e43c      	b.n	405842 <_vfiprintf_r+0x4e6>
  405fc8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405fcc:	e521      	b.n	405a12 <_vfiprintf_r+0x6b6>
  405fce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405fd2:	f7ff bbf4 	b.w	4057be <_vfiprintf_r+0x462>
  405fd6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405fda:	e491      	b.n	405900 <_vfiprintf_r+0x5a4>
  405fdc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405fe0:	e469      	b.n	4058b6 <_vfiprintf_r+0x55a>
  405fe2:	bf00      	nop
  405fe4:	00407a20 	.word	0x00407a20
  405fe8:	00407a18 	.word	0x00407a18

00405fec <__sbprintf>:
  405fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405ff0:	460c      	mov	r4, r1
  405ff2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405ff6:	8989      	ldrh	r1, [r1, #12]
  405ff8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405ffa:	89e5      	ldrh	r5, [r4, #14]
  405ffc:	9619      	str	r6, [sp, #100]	; 0x64
  405ffe:	f021 0102 	bic.w	r1, r1, #2
  406002:	4606      	mov	r6, r0
  406004:	69e0      	ldr	r0, [r4, #28]
  406006:	f8ad 100c 	strh.w	r1, [sp, #12]
  40600a:	4617      	mov	r7, r2
  40600c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406010:	6a62      	ldr	r2, [r4, #36]	; 0x24
  406012:	f8ad 500e 	strh.w	r5, [sp, #14]
  406016:	4698      	mov	r8, r3
  406018:	ad1a      	add	r5, sp, #104	; 0x68
  40601a:	2300      	movs	r3, #0
  40601c:	9007      	str	r0, [sp, #28]
  40601e:	a816      	add	r0, sp, #88	; 0x58
  406020:	9209      	str	r2, [sp, #36]	; 0x24
  406022:	9306      	str	r3, [sp, #24]
  406024:	9500      	str	r5, [sp, #0]
  406026:	9504      	str	r5, [sp, #16]
  406028:	9102      	str	r1, [sp, #8]
  40602a:	9105      	str	r1, [sp, #20]
  40602c:	f000 fd48 	bl	406ac0 <__retarget_lock_init_recursive>
  406030:	4643      	mov	r3, r8
  406032:	463a      	mov	r2, r7
  406034:	4669      	mov	r1, sp
  406036:	4630      	mov	r0, r6
  406038:	f7ff f990 	bl	40535c <_vfiprintf_r>
  40603c:	1e05      	subs	r5, r0, #0
  40603e:	db07      	blt.n	406050 <__sbprintf+0x64>
  406040:	4630      	mov	r0, r6
  406042:	4669      	mov	r1, sp
  406044:	f000 f928 	bl	406298 <_fflush_r>
  406048:	2800      	cmp	r0, #0
  40604a:	bf18      	it	ne
  40604c:	f04f 35ff 	movne.w	r5, #4294967295
  406050:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406054:	065b      	lsls	r3, r3, #25
  406056:	d503      	bpl.n	406060 <__sbprintf+0x74>
  406058:	89a3      	ldrh	r3, [r4, #12]
  40605a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40605e:	81a3      	strh	r3, [r4, #12]
  406060:	9816      	ldr	r0, [sp, #88]	; 0x58
  406062:	f000 fd2f 	bl	406ac4 <__retarget_lock_close_recursive>
  406066:	4628      	mov	r0, r5
  406068:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40606c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00406070 <__swsetup_r>:
  406070:	b538      	push	{r3, r4, r5, lr}
  406072:	4b30      	ldr	r3, [pc, #192]	; (406134 <__swsetup_r+0xc4>)
  406074:	681b      	ldr	r3, [r3, #0]
  406076:	4605      	mov	r5, r0
  406078:	460c      	mov	r4, r1
  40607a:	b113      	cbz	r3, 406082 <__swsetup_r+0x12>
  40607c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40607e:	2a00      	cmp	r2, #0
  406080:	d038      	beq.n	4060f4 <__swsetup_r+0x84>
  406082:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406086:	b293      	uxth	r3, r2
  406088:	0718      	lsls	r0, r3, #28
  40608a:	d50c      	bpl.n	4060a6 <__swsetup_r+0x36>
  40608c:	6920      	ldr	r0, [r4, #16]
  40608e:	b1a8      	cbz	r0, 4060bc <__swsetup_r+0x4c>
  406090:	f013 0201 	ands.w	r2, r3, #1
  406094:	d01e      	beq.n	4060d4 <__swsetup_r+0x64>
  406096:	6963      	ldr	r3, [r4, #20]
  406098:	2200      	movs	r2, #0
  40609a:	425b      	negs	r3, r3
  40609c:	61a3      	str	r3, [r4, #24]
  40609e:	60a2      	str	r2, [r4, #8]
  4060a0:	b1f0      	cbz	r0, 4060e0 <__swsetup_r+0x70>
  4060a2:	2000      	movs	r0, #0
  4060a4:	bd38      	pop	{r3, r4, r5, pc}
  4060a6:	06d9      	lsls	r1, r3, #27
  4060a8:	d53c      	bpl.n	406124 <__swsetup_r+0xb4>
  4060aa:	0758      	lsls	r0, r3, #29
  4060ac:	d426      	bmi.n	4060fc <__swsetup_r+0x8c>
  4060ae:	6920      	ldr	r0, [r4, #16]
  4060b0:	f042 0308 	orr.w	r3, r2, #8
  4060b4:	81a3      	strh	r3, [r4, #12]
  4060b6:	b29b      	uxth	r3, r3
  4060b8:	2800      	cmp	r0, #0
  4060ba:	d1e9      	bne.n	406090 <__swsetup_r+0x20>
  4060bc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4060c0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4060c4:	d0e4      	beq.n	406090 <__swsetup_r+0x20>
  4060c6:	4628      	mov	r0, r5
  4060c8:	4621      	mov	r1, r4
  4060ca:	f000 fd2f 	bl	406b2c <__smakebuf_r>
  4060ce:	89a3      	ldrh	r3, [r4, #12]
  4060d0:	6920      	ldr	r0, [r4, #16]
  4060d2:	e7dd      	b.n	406090 <__swsetup_r+0x20>
  4060d4:	0799      	lsls	r1, r3, #30
  4060d6:	bf58      	it	pl
  4060d8:	6962      	ldrpl	r2, [r4, #20]
  4060da:	60a2      	str	r2, [r4, #8]
  4060dc:	2800      	cmp	r0, #0
  4060de:	d1e0      	bne.n	4060a2 <__swsetup_r+0x32>
  4060e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4060e4:	061a      	lsls	r2, r3, #24
  4060e6:	d5dd      	bpl.n	4060a4 <__swsetup_r+0x34>
  4060e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4060ec:	81a3      	strh	r3, [r4, #12]
  4060ee:	f04f 30ff 	mov.w	r0, #4294967295
  4060f2:	bd38      	pop	{r3, r4, r5, pc}
  4060f4:	4618      	mov	r0, r3
  4060f6:	f000 f927 	bl	406348 <__sinit>
  4060fa:	e7c2      	b.n	406082 <__swsetup_r+0x12>
  4060fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4060fe:	b151      	cbz	r1, 406116 <__swsetup_r+0xa6>
  406100:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406104:	4299      	cmp	r1, r3
  406106:	d004      	beq.n	406112 <__swsetup_r+0xa2>
  406108:	4628      	mov	r0, r5
  40610a:	f000 fa43 	bl	406594 <_free_r>
  40610e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406112:	2300      	movs	r3, #0
  406114:	6323      	str	r3, [r4, #48]	; 0x30
  406116:	2300      	movs	r3, #0
  406118:	6920      	ldr	r0, [r4, #16]
  40611a:	6063      	str	r3, [r4, #4]
  40611c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  406120:	6020      	str	r0, [r4, #0]
  406122:	e7c5      	b.n	4060b0 <__swsetup_r+0x40>
  406124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  406128:	2309      	movs	r3, #9
  40612a:	602b      	str	r3, [r5, #0]
  40612c:	f04f 30ff 	mov.w	r0, #4294967295
  406130:	81a2      	strh	r2, [r4, #12]
  406132:	bd38      	pop	{r3, r4, r5, pc}
  406134:	20400014 	.word	0x20400014

00406138 <register_fini>:
  406138:	4b02      	ldr	r3, [pc, #8]	; (406144 <register_fini+0xc>)
  40613a:	b113      	cbz	r3, 406142 <register_fini+0xa>
  40613c:	4802      	ldr	r0, [pc, #8]	; (406148 <register_fini+0x10>)
  40613e:	f000 b805 	b.w	40614c <atexit>
  406142:	4770      	bx	lr
  406144:	00000000 	.word	0x00000000
  406148:	004063b9 	.word	0x004063b9

0040614c <atexit>:
  40614c:	2300      	movs	r3, #0
  40614e:	4601      	mov	r1, r0
  406150:	461a      	mov	r2, r3
  406152:	4618      	mov	r0, r3
  406154:	f001 b890 	b.w	407278 <__register_exitproc>

00406158 <__sflush_r>:
  406158:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40615c:	b29a      	uxth	r2, r3
  40615e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406162:	460d      	mov	r5, r1
  406164:	0711      	lsls	r1, r2, #28
  406166:	4680      	mov	r8, r0
  406168:	d43a      	bmi.n	4061e0 <__sflush_r+0x88>
  40616a:	686a      	ldr	r2, [r5, #4]
  40616c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406170:	2a00      	cmp	r2, #0
  406172:	81ab      	strh	r3, [r5, #12]
  406174:	dd6f      	ble.n	406256 <__sflush_r+0xfe>
  406176:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406178:	2c00      	cmp	r4, #0
  40617a:	d049      	beq.n	406210 <__sflush_r+0xb8>
  40617c:	2200      	movs	r2, #0
  40617e:	b29b      	uxth	r3, r3
  406180:	f8d8 6000 	ldr.w	r6, [r8]
  406184:	f8c8 2000 	str.w	r2, [r8]
  406188:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40618c:	d067      	beq.n	40625e <__sflush_r+0x106>
  40618e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406190:	075f      	lsls	r7, r3, #29
  406192:	d505      	bpl.n	4061a0 <__sflush_r+0x48>
  406194:	6869      	ldr	r1, [r5, #4]
  406196:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  406198:	1a52      	subs	r2, r2, r1
  40619a:	b10b      	cbz	r3, 4061a0 <__sflush_r+0x48>
  40619c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40619e:	1ad2      	subs	r2, r2, r3
  4061a0:	2300      	movs	r3, #0
  4061a2:	69e9      	ldr	r1, [r5, #28]
  4061a4:	4640      	mov	r0, r8
  4061a6:	47a0      	blx	r4
  4061a8:	1c44      	adds	r4, r0, #1
  4061aa:	d03c      	beq.n	406226 <__sflush_r+0xce>
  4061ac:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4061b0:	692a      	ldr	r2, [r5, #16]
  4061b2:	602a      	str	r2, [r5, #0]
  4061b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4061b8:	2200      	movs	r2, #0
  4061ba:	81ab      	strh	r3, [r5, #12]
  4061bc:	04db      	lsls	r3, r3, #19
  4061be:	606a      	str	r2, [r5, #4]
  4061c0:	d447      	bmi.n	406252 <__sflush_r+0xfa>
  4061c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4061c4:	f8c8 6000 	str.w	r6, [r8]
  4061c8:	b311      	cbz	r1, 406210 <__sflush_r+0xb8>
  4061ca:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4061ce:	4299      	cmp	r1, r3
  4061d0:	d002      	beq.n	4061d8 <__sflush_r+0x80>
  4061d2:	4640      	mov	r0, r8
  4061d4:	f000 f9de 	bl	406594 <_free_r>
  4061d8:	2000      	movs	r0, #0
  4061da:	6328      	str	r0, [r5, #48]	; 0x30
  4061dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4061e0:	692e      	ldr	r6, [r5, #16]
  4061e2:	b1ae      	cbz	r6, 406210 <__sflush_r+0xb8>
  4061e4:	682c      	ldr	r4, [r5, #0]
  4061e6:	602e      	str	r6, [r5, #0]
  4061e8:	0791      	lsls	r1, r2, #30
  4061ea:	bf0c      	ite	eq
  4061ec:	696b      	ldreq	r3, [r5, #20]
  4061ee:	2300      	movne	r3, #0
  4061f0:	1ba4      	subs	r4, r4, r6
  4061f2:	60ab      	str	r3, [r5, #8]
  4061f4:	e00a      	b.n	40620c <__sflush_r+0xb4>
  4061f6:	4623      	mov	r3, r4
  4061f8:	4632      	mov	r2, r6
  4061fa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4061fc:	69e9      	ldr	r1, [r5, #28]
  4061fe:	4640      	mov	r0, r8
  406200:	47b8      	blx	r7
  406202:	2800      	cmp	r0, #0
  406204:	eba4 0400 	sub.w	r4, r4, r0
  406208:	4406      	add	r6, r0
  40620a:	dd04      	ble.n	406216 <__sflush_r+0xbe>
  40620c:	2c00      	cmp	r4, #0
  40620e:	dcf2      	bgt.n	4061f6 <__sflush_r+0x9e>
  406210:	2000      	movs	r0, #0
  406212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406216:	89ab      	ldrh	r3, [r5, #12]
  406218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40621c:	81ab      	strh	r3, [r5, #12]
  40621e:	f04f 30ff 	mov.w	r0, #4294967295
  406222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406226:	f8d8 4000 	ldr.w	r4, [r8]
  40622a:	2c1d      	cmp	r4, #29
  40622c:	d8f3      	bhi.n	406216 <__sflush_r+0xbe>
  40622e:	4b19      	ldr	r3, [pc, #100]	; (406294 <__sflush_r+0x13c>)
  406230:	40e3      	lsrs	r3, r4
  406232:	43db      	mvns	r3, r3
  406234:	f013 0301 	ands.w	r3, r3, #1
  406238:	d1ed      	bne.n	406216 <__sflush_r+0xbe>
  40623a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40623e:	606b      	str	r3, [r5, #4]
  406240:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  406244:	6929      	ldr	r1, [r5, #16]
  406246:	81ab      	strh	r3, [r5, #12]
  406248:	04da      	lsls	r2, r3, #19
  40624a:	6029      	str	r1, [r5, #0]
  40624c:	d5b9      	bpl.n	4061c2 <__sflush_r+0x6a>
  40624e:	2c00      	cmp	r4, #0
  406250:	d1b7      	bne.n	4061c2 <__sflush_r+0x6a>
  406252:	6528      	str	r0, [r5, #80]	; 0x50
  406254:	e7b5      	b.n	4061c2 <__sflush_r+0x6a>
  406256:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406258:	2a00      	cmp	r2, #0
  40625a:	dc8c      	bgt.n	406176 <__sflush_r+0x1e>
  40625c:	e7d8      	b.n	406210 <__sflush_r+0xb8>
  40625e:	2301      	movs	r3, #1
  406260:	69e9      	ldr	r1, [r5, #28]
  406262:	4640      	mov	r0, r8
  406264:	47a0      	blx	r4
  406266:	1c43      	adds	r3, r0, #1
  406268:	4602      	mov	r2, r0
  40626a:	d002      	beq.n	406272 <__sflush_r+0x11a>
  40626c:	89ab      	ldrh	r3, [r5, #12]
  40626e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406270:	e78e      	b.n	406190 <__sflush_r+0x38>
  406272:	f8d8 3000 	ldr.w	r3, [r8]
  406276:	2b00      	cmp	r3, #0
  406278:	d0f8      	beq.n	40626c <__sflush_r+0x114>
  40627a:	2b1d      	cmp	r3, #29
  40627c:	d001      	beq.n	406282 <__sflush_r+0x12a>
  40627e:	2b16      	cmp	r3, #22
  406280:	d102      	bne.n	406288 <__sflush_r+0x130>
  406282:	f8c8 6000 	str.w	r6, [r8]
  406286:	e7c3      	b.n	406210 <__sflush_r+0xb8>
  406288:	89ab      	ldrh	r3, [r5, #12]
  40628a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40628e:	81ab      	strh	r3, [r5, #12]
  406290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406294:	20400001 	.word	0x20400001

00406298 <_fflush_r>:
  406298:	b538      	push	{r3, r4, r5, lr}
  40629a:	460d      	mov	r5, r1
  40629c:	4604      	mov	r4, r0
  40629e:	b108      	cbz	r0, 4062a4 <_fflush_r+0xc>
  4062a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4062a2:	b1bb      	cbz	r3, 4062d4 <_fflush_r+0x3c>
  4062a4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4062a8:	b188      	cbz	r0, 4062ce <_fflush_r+0x36>
  4062aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4062ac:	07db      	lsls	r3, r3, #31
  4062ae:	d401      	bmi.n	4062b4 <_fflush_r+0x1c>
  4062b0:	0581      	lsls	r1, r0, #22
  4062b2:	d517      	bpl.n	4062e4 <_fflush_r+0x4c>
  4062b4:	4620      	mov	r0, r4
  4062b6:	4629      	mov	r1, r5
  4062b8:	f7ff ff4e 	bl	406158 <__sflush_r>
  4062bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4062be:	07da      	lsls	r2, r3, #31
  4062c0:	4604      	mov	r4, r0
  4062c2:	d402      	bmi.n	4062ca <_fflush_r+0x32>
  4062c4:	89ab      	ldrh	r3, [r5, #12]
  4062c6:	059b      	lsls	r3, r3, #22
  4062c8:	d507      	bpl.n	4062da <_fflush_r+0x42>
  4062ca:	4620      	mov	r0, r4
  4062cc:	bd38      	pop	{r3, r4, r5, pc}
  4062ce:	4604      	mov	r4, r0
  4062d0:	4620      	mov	r0, r4
  4062d2:	bd38      	pop	{r3, r4, r5, pc}
  4062d4:	f000 f838 	bl	406348 <__sinit>
  4062d8:	e7e4      	b.n	4062a4 <_fflush_r+0xc>
  4062da:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4062dc:	f000 fbf6 	bl	406acc <__retarget_lock_release_recursive>
  4062e0:	4620      	mov	r0, r4
  4062e2:	bd38      	pop	{r3, r4, r5, pc}
  4062e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4062e6:	f000 fbef 	bl	406ac8 <__retarget_lock_acquire_recursive>
  4062ea:	e7e3      	b.n	4062b4 <_fflush_r+0x1c>

004062ec <_cleanup_r>:
  4062ec:	4901      	ldr	r1, [pc, #4]	; (4062f4 <_cleanup_r+0x8>)
  4062ee:	f000 bbaf 	b.w	406a50 <_fwalk_reent>
  4062f2:	bf00      	nop
  4062f4:	00407361 	.word	0x00407361

004062f8 <std.isra.0>:
  4062f8:	b510      	push	{r4, lr}
  4062fa:	2300      	movs	r3, #0
  4062fc:	4604      	mov	r4, r0
  4062fe:	8181      	strh	r1, [r0, #12]
  406300:	81c2      	strh	r2, [r0, #14]
  406302:	6003      	str	r3, [r0, #0]
  406304:	6043      	str	r3, [r0, #4]
  406306:	6083      	str	r3, [r0, #8]
  406308:	6643      	str	r3, [r0, #100]	; 0x64
  40630a:	6103      	str	r3, [r0, #16]
  40630c:	6143      	str	r3, [r0, #20]
  40630e:	6183      	str	r3, [r0, #24]
  406310:	4619      	mov	r1, r3
  406312:	2208      	movs	r2, #8
  406314:	305c      	adds	r0, #92	; 0x5c
  406316:	f7fe fe23 	bl	404f60 <memset>
  40631a:	4807      	ldr	r0, [pc, #28]	; (406338 <std.isra.0+0x40>)
  40631c:	4907      	ldr	r1, [pc, #28]	; (40633c <std.isra.0+0x44>)
  40631e:	4a08      	ldr	r2, [pc, #32]	; (406340 <std.isra.0+0x48>)
  406320:	4b08      	ldr	r3, [pc, #32]	; (406344 <std.isra.0+0x4c>)
  406322:	6220      	str	r0, [r4, #32]
  406324:	61e4      	str	r4, [r4, #28]
  406326:	6261      	str	r1, [r4, #36]	; 0x24
  406328:	62a2      	str	r2, [r4, #40]	; 0x28
  40632a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40632c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  406330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406334:	f000 bbc4 	b.w	406ac0 <__retarget_lock_init_recursive>
  406338:	004070a5 	.word	0x004070a5
  40633c:	004070c9 	.word	0x004070c9
  406340:	00407105 	.word	0x00407105
  406344:	00407125 	.word	0x00407125

00406348 <__sinit>:
  406348:	b510      	push	{r4, lr}
  40634a:	4604      	mov	r4, r0
  40634c:	4812      	ldr	r0, [pc, #72]	; (406398 <__sinit+0x50>)
  40634e:	f000 fbbb 	bl	406ac8 <__retarget_lock_acquire_recursive>
  406352:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406354:	b9d2      	cbnz	r2, 40638c <__sinit+0x44>
  406356:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40635a:	4810      	ldr	r0, [pc, #64]	; (40639c <__sinit+0x54>)
  40635c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406360:	2103      	movs	r1, #3
  406362:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  406366:	63e0      	str	r0, [r4, #60]	; 0x3c
  406368:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40636c:	6860      	ldr	r0, [r4, #4]
  40636e:	2104      	movs	r1, #4
  406370:	f7ff ffc2 	bl	4062f8 <std.isra.0>
  406374:	2201      	movs	r2, #1
  406376:	2109      	movs	r1, #9
  406378:	68a0      	ldr	r0, [r4, #8]
  40637a:	f7ff ffbd 	bl	4062f8 <std.isra.0>
  40637e:	2202      	movs	r2, #2
  406380:	2112      	movs	r1, #18
  406382:	68e0      	ldr	r0, [r4, #12]
  406384:	f7ff ffb8 	bl	4062f8 <std.isra.0>
  406388:	2301      	movs	r3, #1
  40638a:	63a3      	str	r3, [r4, #56]	; 0x38
  40638c:	4802      	ldr	r0, [pc, #8]	; (406398 <__sinit+0x50>)
  40638e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406392:	f000 bb9b 	b.w	406acc <__retarget_lock_release_recursive>
  406396:	bf00      	nop
  406398:	20400ed0 	.word	0x20400ed0
  40639c:	004062ed 	.word	0x004062ed

004063a0 <__sfp_lock_acquire>:
  4063a0:	4801      	ldr	r0, [pc, #4]	; (4063a8 <__sfp_lock_acquire+0x8>)
  4063a2:	f000 bb91 	b.w	406ac8 <__retarget_lock_acquire_recursive>
  4063a6:	bf00      	nop
  4063a8:	20400ee4 	.word	0x20400ee4

004063ac <__sfp_lock_release>:
  4063ac:	4801      	ldr	r0, [pc, #4]	; (4063b4 <__sfp_lock_release+0x8>)
  4063ae:	f000 bb8d 	b.w	406acc <__retarget_lock_release_recursive>
  4063b2:	bf00      	nop
  4063b4:	20400ee4 	.word	0x20400ee4

004063b8 <__libc_fini_array>:
  4063b8:	b538      	push	{r3, r4, r5, lr}
  4063ba:	4c0a      	ldr	r4, [pc, #40]	; (4063e4 <__libc_fini_array+0x2c>)
  4063bc:	4d0a      	ldr	r5, [pc, #40]	; (4063e8 <__libc_fini_array+0x30>)
  4063be:	1b64      	subs	r4, r4, r5
  4063c0:	10a4      	asrs	r4, r4, #2
  4063c2:	d00a      	beq.n	4063da <__libc_fini_array+0x22>
  4063c4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4063c8:	3b01      	subs	r3, #1
  4063ca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4063ce:	3c01      	subs	r4, #1
  4063d0:	f855 3904 	ldr.w	r3, [r5], #-4
  4063d4:	4798      	blx	r3
  4063d6:	2c00      	cmp	r4, #0
  4063d8:	d1f9      	bne.n	4063ce <__libc_fini_array+0x16>
  4063da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4063de:	f001 bbc3 	b.w	407b68 <_fini>
  4063e2:	bf00      	nop
  4063e4:	00407b78 	.word	0x00407b78
  4063e8:	00407b74 	.word	0x00407b74

004063ec <__fputwc>:
  4063ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4063f0:	b082      	sub	sp, #8
  4063f2:	4680      	mov	r8, r0
  4063f4:	4689      	mov	r9, r1
  4063f6:	4614      	mov	r4, r2
  4063f8:	f000 fb54 	bl	406aa4 <__locale_mb_cur_max>
  4063fc:	2801      	cmp	r0, #1
  4063fe:	d036      	beq.n	40646e <__fputwc+0x82>
  406400:	464a      	mov	r2, r9
  406402:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  406406:	a901      	add	r1, sp, #4
  406408:	4640      	mov	r0, r8
  40640a:	f000 fee7 	bl	4071dc <_wcrtomb_r>
  40640e:	1c42      	adds	r2, r0, #1
  406410:	4606      	mov	r6, r0
  406412:	d025      	beq.n	406460 <__fputwc+0x74>
  406414:	b3a8      	cbz	r0, 406482 <__fputwc+0x96>
  406416:	f89d e004 	ldrb.w	lr, [sp, #4]
  40641a:	2500      	movs	r5, #0
  40641c:	f10d 0a04 	add.w	sl, sp, #4
  406420:	e009      	b.n	406436 <__fputwc+0x4a>
  406422:	6823      	ldr	r3, [r4, #0]
  406424:	1c5a      	adds	r2, r3, #1
  406426:	6022      	str	r2, [r4, #0]
  406428:	f883 e000 	strb.w	lr, [r3]
  40642c:	3501      	adds	r5, #1
  40642e:	42b5      	cmp	r5, r6
  406430:	d227      	bcs.n	406482 <__fputwc+0x96>
  406432:	f815 e00a 	ldrb.w	lr, [r5, sl]
  406436:	68a3      	ldr	r3, [r4, #8]
  406438:	3b01      	subs	r3, #1
  40643a:	2b00      	cmp	r3, #0
  40643c:	60a3      	str	r3, [r4, #8]
  40643e:	daf0      	bge.n	406422 <__fputwc+0x36>
  406440:	69a7      	ldr	r7, [r4, #24]
  406442:	42bb      	cmp	r3, r7
  406444:	4671      	mov	r1, lr
  406446:	4622      	mov	r2, r4
  406448:	4640      	mov	r0, r8
  40644a:	db02      	blt.n	406452 <__fputwc+0x66>
  40644c:	f1be 0f0a 	cmp.w	lr, #10
  406450:	d1e7      	bne.n	406422 <__fputwc+0x36>
  406452:	f000 fe6b 	bl	40712c <__swbuf_r>
  406456:	1c43      	adds	r3, r0, #1
  406458:	d1e8      	bne.n	40642c <__fputwc+0x40>
  40645a:	b002      	add	sp, #8
  40645c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406460:	89a3      	ldrh	r3, [r4, #12]
  406462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406466:	81a3      	strh	r3, [r4, #12]
  406468:	b002      	add	sp, #8
  40646a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40646e:	f109 33ff 	add.w	r3, r9, #4294967295
  406472:	2bfe      	cmp	r3, #254	; 0xfe
  406474:	d8c4      	bhi.n	406400 <__fputwc+0x14>
  406476:	fa5f fe89 	uxtb.w	lr, r9
  40647a:	4606      	mov	r6, r0
  40647c:	f88d e004 	strb.w	lr, [sp, #4]
  406480:	e7cb      	b.n	40641a <__fputwc+0x2e>
  406482:	4648      	mov	r0, r9
  406484:	b002      	add	sp, #8
  406486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40648a:	bf00      	nop

0040648c <_fputwc_r>:
  40648c:	b530      	push	{r4, r5, lr}
  40648e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  406490:	f013 0f01 	tst.w	r3, #1
  406494:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  406498:	4614      	mov	r4, r2
  40649a:	b083      	sub	sp, #12
  40649c:	4605      	mov	r5, r0
  40649e:	b29a      	uxth	r2, r3
  4064a0:	d101      	bne.n	4064a6 <_fputwc_r+0x1a>
  4064a2:	0590      	lsls	r0, r2, #22
  4064a4:	d51c      	bpl.n	4064e0 <_fputwc_r+0x54>
  4064a6:	0490      	lsls	r0, r2, #18
  4064a8:	d406      	bmi.n	4064b8 <_fputwc_r+0x2c>
  4064aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4064ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4064b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4064b4:	81a3      	strh	r3, [r4, #12]
  4064b6:	6662      	str	r2, [r4, #100]	; 0x64
  4064b8:	4628      	mov	r0, r5
  4064ba:	4622      	mov	r2, r4
  4064bc:	f7ff ff96 	bl	4063ec <__fputwc>
  4064c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4064c2:	07da      	lsls	r2, r3, #31
  4064c4:	4605      	mov	r5, r0
  4064c6:	d402      	bmi.n	4064ce <_fputwc_r+0x42>
  4064c8:	89a3      	ldrh	r3, [r4, #12]
  4064ca:	059b      	lsls	r3, r3, #22
  4064cc:	d502      	bpl.n	4064d4 <_fputwc_r+0x48>
  4064ce:	4628      	mov	r0, r5
  4064d0:	b003      	add	sp, #12
  4064d2:	bd30      	pop	{r4, r5, pc}
  4064d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4064d6:	f000 faf9 	bl	406acc <__retarget_lock_release_recursive>
  4064da:	4628      	mov	r0, r5
  4064dc:	b003      	add	sp, #12
  4064de:	bd30      	pop	{r4, r5, pc}
  4064e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4064e2:	9101      	str	r1, [sp, #4]
  4064e4:	f000 faf0 	bl	406ac8 <__retarget_lock_acquire_recursive>
  4064e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4064ec:	9901      	ldr	r1, [sp, #4]
  4064ee:	b29a      	uxth	r2, r3
  4064f0:	e7d9      	b.n	4064a6 <_fputwc_r+0x1a>
  4064f2:	bf00      	nop

004064f4 <_malloc_trim_r>:
  4064f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4064f6:	4f24      	ldr	r7, [pc, #144]	; (406588 <_malloc_trim_r+0x94>)
  4064f8:	460c      	mov	r4, r1
  4064fa:	4606      	mov	r6, r0
  4064fc:	f7fe fd7e 	bl	404ffc <__malloc_lock>
  406500:	68bb      	ldr	r3, [r7, #8]
  406502:	685d      	ldr	r5, [r3, #4]
  406504:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406508:	310f      	adds	r1, #15
  40650a:	f025 0503 	bic.w	r5, r5, #3
  40650e:	4429      	add	r1, r5
  406510:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406514:	f021 010f 	bic.w	r1, r1, #15
  406518:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40651c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406520:	db07      	blt.n	406532 <_malloc_trim_r+0x3e>
  406522:	2100      	movs	r1, #0
  406524:	4630      	mov	r0, r6
  406526:	f7fe fd75 	bl	405014 <_sbrk_r>
  40652a:	68bb      	ldr	r3, [r7, #8]
  40652c:	442b      	add	r3, r5
  40652e:	4298      	cmp	r0, r3
  406530:	d004      	beq.n	40653c <_malloc_trim_r+0x48>
  406532:	4630      	mov	r0, r6
  406534:	f7fe fd68 	bl	405008 <__malloc_unlock>
  406538:	2000      	movs	r0, #0
  40653a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40653c:	4261      	negs	r1, r4
  40653e:	4630      	mov	r0, r6
  406540:	f7fe fd68 	bl	405014 <_sbrk_r>
  406544:	3001      	adds	r0, #1
  406546:	d00d      	beq.n	406564 <_malloc_trim_r+0x70>
  406548:	4b10      	ldr	r3, [pc, #64]	; (40658c <_malloc_trim_r+0x98>)
  40654a:	68ba      	ldr	r2, [r7, #8]
  40654c:	6819      	ldr	r1, [r3, #0]
  40654e:	1b2d      	subs	r5, r5, r4
  406550:	f045 0501 	orr.w	r5, r5, #1
  406554:	4630      	mov	r0, r6
  406556:	1b09      	subs	r1, r1, r4
  406558:	6055      	str	r5, [r2, #4]
  40655a:	6019      	str	r1, [r3, #0]
  40655c:	f7fe fd54 	bl	405008 <__malloc_unlock>
  406560:	2001      	movs	r0, #1
  406562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406564:	2100      	movs	r1, #0
  406566:	4630      	mov	r0, r6
  406568:	f7fe fd54 	bl	405014 <_sbrk_r>
  40656c:	68ba      	ldr	r2, [r7, #8]
  40656e:	1a83      	subs	r3, r0, r2
  406570:	2b0f      	cmp	r3, #15
  406572:	ddde      	ble.n	406532 <_malloc_trim_r+0x3e>
  406574:	4c06      	ldr	r4, [pc, #24]	; (406590 <_malloc_trim_r+0x9c>)
  406576:	4905      	ldr	r1, [pc, #20]	; (40658c <_malloc_trim_r+0x98>)
  406578:	6824      	ldr	r4, [r4, #0]
  40657a:	f043 0301 	orr.w	r3, r3, #1
  40657e:	1b00      	subs	r0, r0, r4
  406580:	6053      	str	r3, [r2, #4]
  406582:	6008      	str	r0, [r1, #0]
  406584:	e7d5      	b.n	406532 <_malloc_trim_r+0x3e>
  406586:	bf00      	nop
  406588:	20400440 	.word	0x20400440
  40658c:	20400da4 	.word	0x20400da4
  406590:	20400848 	.word	0x20400848

00406594 <_free_r>:
  406594:	2900      	cmp	r1, #0
  406596:	d044      	beq.n	406622 <_free_r+0x8e>
  406598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40659c:	460d      	mov	r5, r1
  40659e:	4680      	mov	r8, r0
  4065a0:	f7fe fd2c 	bl	404ffc <__malloc_lock>
  4065a4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4065a8:	4969      	ldr	r1, [pc, #420]	; (406750 <_free_r+0x1bc>)
  4065aa:	f027 0301 	bic.w	r3, r7, #1
  4065ae:	f1a5 0408 	sub.w	r4, r5, #8
  4065b2:	18e2      	adds	r2, r4, r3
  4065b4:	688e      	ldr	r6, [r1, #8]
  4065b6:	6850      	ldr	r0, [r2, #4]
  4065b8:	42b2      	cmp	r2, r6
  4065ba:	f020 0003 	bic.w	r0, r0, #3
  4065be:	d05e      	beq.n	40667e <_free_r+0xea>
  4065c0:	07fe      	lsls	r6, r7, #31
  4065c2:	6050      	str	r0, [r2, #4]
  4065c4:	d40b      	bmi.n	4065de <_free_r+0x4a>
  4065c6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4065ca:	1be4      	subs	r4, r4, r7
  4065cc:	f101 0e08 	add.w	lr, r1, #8
  4065d0:	68a5      	ldr	r5, [r4, #8]
  4065d2:	4575      	cmp	r5, lr
  4065d4:	443b      	add	r3, r7
  4065d6:	d06d      	beq.n	4066b4 <_free_r+0x120>
  4065d8:	68e7      	ldr	r7, [r4, #12]
  4065da:	60ef      	str	r7, [r5, #12]
  4065dc:	60bd      	str	r5, [r7, #8]
  4065de:	1815      	adds	r5, r2, r0
  4065e0:	686d      	ldr	r5, [r5, #4]
  4065e2:	07ed      	lsls	r5, r5, #31
  4065e4:	d53e      	bpl.n	406664 <_free_r+0xd0>
  4065e6:	f043 0201 	orr.w	r2, r3, #1
  4065ea:	6062      	str	r2, [r4, #4]
  4065ec:	50e3      	str	r3, [r4, r3]
  4065ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4065f2:	d217      	bcs.n	406624 <_free_r+0x90>
  4065f4:	08db      	lsrs	r3, r3, #3
  4065f6:	1c58      	adds	r0, r3, #1
  4065f8:	109a      	asrs	r2, r3, #2
  4065fa:	684d      	ldr	r5, [r1, #4]
  4065fc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406600:	60a7      	str	r7, [r4, #8]
  406602:	2301      	movs	r3, #1
  406604:	4093      	lsls	r3, r2
  406606:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40660a:	432b      	orrs	r3, r5
  40660c:	3a08      	subs	r2, #8
  40660e:	60e2      	str	r2, [r4, #12]
  406610:	604b      	str	r3, [r1, #4]
  406612:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406616:	60fc      	str	r4, [r7, #12]
  406618:	4640      	mov	r0, r8
  40661a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40661e:	f7fe bcf3 	b.w	405008 <__malloc_unlock>
  406622:	4770      	bx	lr
  406624:	0a5a      	lsrs	r2, r3, #9
  406626:	2a04      	cmp	r2, #4
  406628:	d852      	bhi.n	4066d0 <_free_r+0x13c>
  40662a:	099a      	lsrs	r2, r3, #6
  40662c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406630:	00ff      	lsls	r7, r7, #3
  406632:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406636:	19c8      	adds	r0, r1, r7
  406638:	59ca      	ldr	r2, [r1, r7]
  40663a:	3808      	subs	r0, #8
  40663c:	4290      	cmp	r0, r2
  40663e:	d04f      	beq.n	4066e0 <_free_r+0x14c>
  406640:	6851      	ldr	r1, [r2, #4]
  406642:	f021 0103 	bic.w	r1, r1, #3
  406646:	428b      	cmp	r3, r1
  406648:	d232      	bcs.n	4066b0 <_free_r+0x11c>
  40664a:	6892      	ldr	r2, [r2, #8]
  40664c:	4290      	cmp	r0, r2
  40664e:	d1f7      	bne.n	406640 <_free_r+0xac>
  406650:	68c3      	ldr	r3, [r0, #12]
  406652:	60a0      	str	r0, [r4, #8]
  406654:	60e3      	str	r3, [r4, #12]
  406656:	609c      	str	r4, [r3, #8]
  406658:	60c4      	str	r4, [r0, #12]
  40665a:	4640      	mov	r0, r8
  40665c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406660:	f7fe bcd2 	b.w	405008 <__malloc_unlock>
  406664:	6895      	ldr	r5, [r2, #8]
  406666:	4f3b      	ldr	r7, [pc, #236]	; (406754 <_free_r+0x1c0>)
  406668:	42bd      	cmp	r5, r7
  40666a:	4403      	add	r3, r0
  40666c:	d040      	beq.n	4066f0 <_free_r+0x15c>
  40666e:	68d0      	ldr	r0, [r2, #12]
  406670:	60e8      	str	r0, [r5, #12]
  406672:	f043 0201 	orr.w	r2, r3, #1
  406676:	6085      	str	r5, [r0, #8]
  406678:	6062      	str	r2, [r4, #4]
  40667a:	50e3      	str	r3, [r4, r3]
  40667c:	e7b7      	b.n	4065ee <_free_r+0x5a>
  40667e:	07ff      	lsls	r7, r7, #31
  406680:	4403      	add	r3, r0
  406682:	d407      	bmi.n	406694 <_free_r+0x100>
  406684:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406688:	1aa4      	subs	r4, r4, r2
  40668a:	4413      	add	r3, r2
  40668c:	68a0      	ldr	r0, [r4, #8]
  40668e:	68e2      	ldr	r2, [r4, #12]
  406690:	60c2      	str	r2, [r0, #12]
  406692:	6090      	str	r0, [r2, #8]
  406694:	4a30      	ldr	r2, [pc, #192]	; (406758 <_free_r+0x1c4>)
  406696:	6812      	ldr	r2, [r2, #0]
  406698:	f043 0001 	orr.w	r0, r3, #1
  40669c:	4293      	cmp	r3, r2
  40669e:	6060      	str	r0, [r4, #4]
  4066a0:	608c      	str	r4, [r1, #8]
  4066a2:	d3b9      	bcc.n	406618 <_free_r+0x84>
  4066a4:	4b2d      	ldr	r3, [pc, #180]	; (40675c <_free_r+0x1c8>)
  4066a6:	4640      	mov	r0, r8
  4066a8:	6819      	ldr	r1, [r3, #0]
  4066aa:	f7ff ff23 	bl	4064f4 <_malloc_trim_r>
  4066ae:	e7b3      	b.n	406618 <_free_r+0x84>
  4066b0:	4610      	mov	r0, r2
  4066b2:	e7cd      	b.n	406650 <_free_r+0xbc>
  4066b4:	1811      	adds	r1, r2, r0
  4066b6:	6849      	ldr	r1, [r1, #4]
  4066b8:	07c9      	lsls	r1, r1, #31
  4066ba:	d444      	bmi.n	406746 <_free_r+0x1b2>
  4066bc:	6891      	ldr	r1, [r2, #8]
  4066be:	68d2      	ldr	r2, [r2, #12]
  4066c0:	60ca      	str	r2, [r1, #12]
  4066c2:	4403      	add	r3, r0
  4066c4:	f043 0001 	orr.w	r0, r3, #1
  4066c8:	6091      	str	r1, [r2, #8]
  4066ca:	6060      	str	r0, [r4, #4]
  4066cc:	50e3      	str	r3, [r4, r3]
  4066ce:	e7a3      	b.n	406618 <_free_r+0x84>
  4066d0:	2a14      	cmp	r2, #20
  4066d2:	d816      	bhi.n	406702 <_free_r+0x16e>
  4066d4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4066d8:	00ff      	lsls	r7, r7, #3
  4066da:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4066de:	e7aa      	b.n	406636 <_free_r+0xa2>
  4066e0:	10aa      	asrs	r2, r5, #2
  4066e2:	2301      	movs	r3, #1
  4066e4:	684d      	ldr	r5, [r1, #4]
  4066e6:	4093      	lsls	r3, r2
  4066e8:	432b      	orrs	r3, r5
  4066ea:	604b      	str	r3, [r1, #4]
  4066ec:	4603      	mov	r3, r0
  4066ee:	e7b0      	b.n	406652 <_free_r+0xbe>
  4066f0:	f043 0201 	orr.w	r2, r3, #1
  4066f4:	614c      	str	r4, [r1, #20]
  4066f6:	610c      	str	r4, [r1, #16]
  4066f8:	60e5      	str	r5, [r4, #12]
  4066fa:	60a5      	str	r5, [r4, #8]
  4066fc:	6062      	str	r2, [r4, #4]
  4066fe:	50e3      	str	r3, [r4, r3]
  406700:	e78a      	b.n	406618 <_free_r+0x84>
  406702:	2a54      	cmp	r2, #84	; 0x54
  406704:	d806      	bhi.n	406714 <_free_r+0x180>
  406706:	0b1a      	lsrs	r2, r3, #12
  406708:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40670c:	00ff      	lsls	r7, r7, #3
  40670e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406712:	e790      	b.n	406636 <_free_r+0xa2>
  406714:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406718:	d806      	bhi.n	406728 <_free_r+0x194>
  40671a:	0bda      	lsrs	r2, r3, #15
  40671c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406720:	00ff      	lsls	r7, r7, #3
  406722:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406726:	e786      	b.n	406636 <_free_r+0xa2>
  406728:	f240 5054 	movw	r0, #1364	; 0x554
  40672c:	4282      	cmp	r2, r0
  40672e:	d806      	bhi.n	40673e <_free_r+0x1aa>
  406730:	0c9a      	lsrs	r2, r3, #18
  406732:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406736:	00ff      	lsls	r7, r7, #3
  406738:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40673c:	e77b      	b.n	406636 <_free_r+0xa2>
  40673e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406742:	257e      	movs	r5, #126	; 0x7e
  406744:	e777      	b.n	406636 <_free_r+0xa2>
  406746:	f043 0101 	orr.w	r1, r3, #1
  40674a:	6061      	str	r1, [r4, #4]
  40674c:	6013      	str	r3, [r2, #0]
  40674e:	e763      	b.n	406618 <_free_r+0x84>
  406750:	20400440 	.word	0x20400440
  406754:	20400448 	.word	0x20400448
  406758:	2040084c 	.word	0x2040084c
  40675c:	20400dd4 	.word	0x20400dd4

00406760 <__sfvwrite_r>:
  406760:	6893      	ldr	r3, [r2, #8]
  406762:	2b00      	cmp	r3, #0
  406764:	d073      	beq.n	40684e <__sfvwrite_r+0xee>
  406766:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40676a:	898b      	ldrh	r3, [r1, #12]
  40676c:	b083      	sub	sp, #12
  40676e:	460c      	mov	r4, r1
  406770:	0719      	lsls	r1, r3, #28
  406772:	9000      	str	r0, [sp, #0]
  406774:	4616      	mov	r6, r2
  406776:	d526      	bpl.n	4067c6 <__sfvwrite_r+0x66>
  406778:	6922      	ldr	r2, [r4, #16]
  40677a:	b322      	cbz	r2, 4067c6 <__sfvwrite_r+0x66>
  40677c:	f013 0002 	ands.w	r0, r3, #2
  406780:	6835      	ldr	r5, [r6, #0]
  406782:	d02c      	beq.n	4067de <__sfvwrite_r+0x7e>
  406784:	f04f 0900 	mov.w	r9, #0
  406788:	4fb0      	ldr	r7, [pc, #704]	; (406a4c <__sfvwrite_r+0x2ec>)
  40678a:	46c8      	mov	r8, r9
  40678c:	46b2      	mov	sl, r6
  40678e:	45b8      	cmp	r8, r7
  406790:	4643      	mov	r3, r8
  406792:	464a      	mov	r2, r9
  406794:	bf28      	it	cs
  406796:	463b      	movcs	r3, r7
  406798:	9800      	ldr	r0, [sp, #0]
  40679a:	f1b8 0f00 	cmp.w	r8, #0
  40679e:	d050      	beq.n	406842 <__sfvwrite_r+0xe2>
  4067a0:	69e1      	ldr	r1, [r4, #28]
  4067a2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4067a4:	47b0      	blx	r6
  4067a6:	2800      	cmp	r0, #0
  4067a8:	dd58      	ble.n	40685c <__sfvwrite_r+0xfc>
  4067aa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4067ae:	1a1b      	subs	r3, r3, r0
  4067b0:	4481      	add	r9, r0
  4067b2:	eba8 0800 	sub.w	r8, r8, r0
  4067b6:	f8ca 3008 	str.w	r3, [sl, #8]
  4067ba:	2b00      	cmp	r3, #0
  4067bc:	d1e7      	bne.n	40678e <__sfvwrite_r+0x2e>
  4067be:	2000      	movs	r0, #0
  4067c0:	b003      	add	sp, #12
  4067c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4067c6:	4621      	mov	r1, r4
  4067c8:	9800      	ldr	r0, [sp, #0]
  4067ca:	f7ff fc51 	bl	406070 <__swsetup_r>
  4067ce:	2800      	cmp	r0, #0
  4067d0:	f040 8133 	bne.w	406a3a <__sfvwrite_r+0x2da>
  4067d4:	89a3      	ldrh	r3, [r4, #12]
  4067d6:	6835      	ldr	r5, [r6, #0]
  4067d8:	f013 0002 	ands.w	r0, r3, #2
  4067dc:	d1d2      	bne.n	406784 <__sfvwrite_r+0x24>
  4067de:	f013 0901 	ands.w	r9, r3, #1
  4067e2:	d145      	bne.n	406870 <__sfvwrite_r+0x110>
  4067e4:	464f      	mov	r7, r9
  4067e6:	9601      	str	r6, [sp, #4]
  4067e8:	b337      	cbz	r7, 406838 <__sfvwrite_r+0xd8>
  4067ea:	059a      	lsls	r2, r3, #22
  4067ec:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4067f0:	f140 8083 	bpl.w	4068fa <__sfvwrite_r+0x19a>
  4067f4:	4547      	cmp	r7, r8
  4067f6:	46c3      	mov	fp, r8
  4067f8:	f0c0 80ab 	bcc.w	406952 <__sfvwrite_r+0x1f2>
  4067fc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406800:	f040 80ac 	bne.w	40695c <__sfvwrite_r+0x1fc>
  406804:	6820      	ldr	r0, [r4, #0]
  406806:	46ba      	mov	sl, r7
  406808:	465a      	mov	r2, fp
  40680a:	4649      	mov	r1, r9
  40680c:	f000 fa40 	bl	406c90 <memmove>
  406810:	68a2      	ldr	r2, [r4, #8]
  406812:	6823      	ldr	r3, [r4, #0]
  406814:	eba2 0208 	sub.w	r2, r2, r8
  406818:	445b      	add	r3, fp
  40681a:	60a2      	str	r2, [r4, #8]
  40681c:	6023      	str	r3, [r4, #0]
  40681e:	9a01      	ldr	r2, [sp, #4]
  406820:	6893      	ldr	r3, [r2, #8]
  406822:	eba3 030a 	sub.w	r3, r3, sl
  406826:	44d1      	add	r9, sl
  406828:	eba7 070a 	sub.w	r7, r7, sl
  40682c:	6093      	str	r3, [r2, #8]
  40682e:	2b00      	cmp	r3, #0
  406830:	d0c5      	beq.n	4067be <__sfvwrite_r+0x5e>
  406832:	89a3      	ldrh	r3, [r4, #12]
  406834:	2f00      	cmp	r7, #0
  406836:	d1d8      	bne.n	4067ea <__sfvwrite_r+0x8a>
  406838:	f8d5 9000 	ldr.w	r9, [r5]
  40683c:	686f      	ldr	r7, [r5, #4]
  40683e:	3508      	adds	r5, #8
  406840:	e7d2      	b.n	4067e8 <__sfvwrite_r+0x88>
  406842:	f8d5 9000 	ldr.w	r9, [r5]
  406846:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40684a:	3508      	adds	r5, #8
  40684c:	e79f      	b.n	40678e <__sfvwrite_r+0x2e>
  40684e:	2000      	movs	r0, #0
  406850:	4770      	bx	lr
  406852:	4621      	mov	r1, r4
  406854:	9800      	ldr	r0, [sp, #0]
  406856:	f7ff fd1f 	bl	406298 <_fflush_r>
  40685a:	b370      	cbz	r0, 4068ba <__sfvwrite_r+0x15a>
  40685c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406864:	f04f 30ff 	mov.w	r0, #4294967295
  406868:	81a3      	strh	r3, [r4, #12]
  40686a:	b003      	add	sp, #12
  40686c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406870:	4681      	mov	r9, r0
  406872:	4633      	mov	r3, r6
  406874:	464e      	mov	r6, r9
  406876:	46a8      	mov	r8, r5
  406878:	469a      	mov	sl, r3
  40687a:	464d      	mov	r5, r9
  40687c:	b34e      	cbz	r6, 4068d2 <__sfvwrite_r+0x172>
  40687e:	b380      	cbz	r0, 4068e2 <__sfvwrite_r+0x182>
  406880:	6820      	ldr	r0, [r4, #0]
  406882:	6923      	ldr	r3, [r4, #16]
  406884:	6962      	ldr	r2, [r4, #20]
  406886:	45b1      	cmp	r9, r6
  406888:	46cb      	mov	fp, r9
  40688a:	bf28      	it	cs
  40688c:	46b3      	movcs	fp, r6
  40688e:	4298      	cmp	r0, r3
  406890:	465f      	mov	r7, fp
  406892:	d904      	bls.n	40689e <__sfvwrite_r+0x13e>
  406894:	68a3      	ldr	r3, [r4, #8]
  406896:	4413      	add	r3, r2
  406898:	459b      	cmp	fp, r3
  40689a:	f300 80a6 	bgt.w	4069ea <__sfvwrite_r+0x28a>
  40689e:	4593      	cmp	fp, r2
  4068a0:	db4b      	blt.n	40693a <__sfvwrite_r+0x1da>
  4068a2:	4613      	mov	r3, r2
  4068a4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4068a6:	69e1      	ldr	r1, [r4, #28]
  4068a8:	9800      	ldr	r0, [sp, #0]
  4068aa:	462a      	mov	r2, r5
  4068ac:	47b8      	blx	r7
  4068ae:	1e07      	subs	r7, r0, #0
  4068b0:	ddd4      	ble.n	40685c <__sfvwrite_r+0xfc>
  4068b2:	ebb9 0907 	subs.w	r9, r9, r7
  4068b6:	d0cc      	beq.n	406852 <__sfvwrite_r+0xf2>
  4068b8:	2001      	movs	r0, #1
  4068ba:	f8da 3008 	ldr.w	r3, [sl, #8]
  4068be:	1bdb      	subs	r3, r3, r7
  4068c0:	443d      	add	r5, r7
  4068c2:	1bf6      	subs	r6, r6, r7
  4068c4:	f8ca 3008 	str.w	r3, [sl, #8]
  4068c8:	2b00      	cmp	r3, #0
  4068ca:	f43f af78 	beq.w	4067be <__sfvwrite_r+0x5e>
  4068ce:	2e00      	cmp	r6, #0
  4068d0:	d1d5      	bne.n	40687e <__sfvwrite_r+0x11e>
  4068d2:	f108 0308 	add.w	r3, r8, #8
  4068d6:	e913 0060 	ldmdb	r3, {r5, r6}
  4068da:	4698      	mov	r8, r3
  4068dc:	3308      	adds	r3, #8
  4068de:	2e00      	cmp	r6, #0
  4068e0:	d0f9      	beq.n	4068d6 <__sfvwrite_r+0x176>
  4068e2:	4632      	mov	r2, r6
  4068e4:	210a      	movs	r1, #10
  4068e6:	4628      	mov	r0, r5
  4068e8:	f000 f982 	bl	406bf0 <memchr>
  4068ec:	2800      	cmp	r0, #0
  4068ee:	f000 80a1 	beq.w	406a34 <__sfvwrite_r+0x2d4>
  4068f2:	3001      	adds	r0, #1
  4068f4:	eba0 0905 	sub.w	r9, r0, r5
  4068f8:	e7c2      	b.n	406880 <__sfvwrite_r+0x120>
  4068fa:	6820      	ldr	r0, [r4, #0]
  4068fc:	6923      	ldr	r3, [r4, #16]
  4068fe:	4298      	cmp	r0, r3
  406900:	d802      	bhi.n	406908 <__sfvwrite_r+0x1a8>
  406902:	6963      	ldr	r3, [r4, #20]
  406904:	429f      	cmp	r7, r3
  406906:	d25d      	bcs.n	4069c4 <__sfvwrite_r+0x264>
  406908:	45b8      	cmp	r8, r7
  40690a:	bf28      	it	cs
  40690c:	46b8      	movcs	r8, r7
  40690e:	4642      	mov	r2, r8
  406910:	4649      	mov	r1, r9
  406912:	f000 f9bd 	bl	406c90 <memmove>
  406916:	68a3      	ldr	r3, [r4, #8]
  406918:	6822      	ldr	r2, [r4, #0]
  40691a:	eba3 0308 	sub.w	r3, r3, r8
  40691e:	4442      	add	r2, r8
  406920:	60a3      	str	r3, [r4, #8]
  406922:	6022      	str	r2, [r4, #0]
  406924:	b10b      	cbz	r3, 40692a <__sfvwrite_r+0x1ca>
  406926:	46c2      	mov	sl, r8
  406928:	e779      	b.n	40681e <__sfvwrite_r+0xbe>
  40692a:	4621      	mov	r1, r4
  40692c:	9800      	ldr	r0, [sp, #0]
  40692e:	f7ff fcb3 	bl	406298 <_fflush_r>
  406932:	2800      	cmp	r0, #0
  406934:	d192      	bne.n	40685c <__sfvwrite_r+0xfc>
  406936:	46c2      	mov	sl, r8
  406938:	e771      	b.n	40681e <__sfvwrite_r+0xbe>
  40693a:	465a      	mov	r2, fp
  40693c:	4629      	mov	r1, r5
  40693e:	f000 f9a7 	bl	406c90 <memmove>
  406942:	68a2      	ldr	r2, [r4, #8]
  406944:	6823      	ldr	r3, [r4, #0]
  406946:	eba2 020b 	sub.w	r2, r2, fp
  40694a:	445b      	add	r3, fp
  40694c:	60a2      	str	r2, [r4, #8]
  40694e:	6023      	str	r3, [r4, #0]
  406950:	e7af      	b.n	4068b2 <__sfvwrite_r+0x152>
  406952:	6820      	ldr	r0, [r4, #0]
  406954:	46b8      	mov	r8, r7
  406956:	46ba      	mov	sl, r7
  406958:	46bb      	mov	fp, r7
  40695a:	e755      	b.n	406808 <__sfvwrite_r+0xa8>
  40695c:	6962      	ldr	r2, [r4, #20]
  40695e:	6820      	ldr	r0, [r4, #0]
  406960:	6921      	ldr	r1, [r4, #16]
  406962:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  406966:	eba0 0a01 	sub.w	sl, r0, r1
  40696a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40696e:	f10a 0001 	add.w	r0, sl, #1
  406972:	ea4f 0868 	mov.w	r8, r8, asr #1
  406976:	4438      	add	r0, r7
  406978:	4540      	cmp	r0, r8
  40697a:	4642      	mov	r2, r8
  40697c:	bf84      	itt	hi
  40697e:	4680      	movhi	r8, r0
  406980:	4642      	movhi	r2, r8
  406982:	055b      	lsls	r3, r3, #21
  406984:	d544      	bpl.n	406a10 <__sfvwrite_r+0x2b0>
  406986:	4611      	mov	r1, r2
  406988:	9800      	ldr	r0, [sp, #0]
  40698a:	f7fd ff9f 	bl	4048cc <_malloc_r>
  40698e:	4683      	mov	fp, r0
  406990:	2800      	cmp	r0, #0
  406992:	d055      	beq.n	406a40 <__sfvwrite_r+0x2e0>
  406994:	4652      	mov	r2, sl
  406996:	6921      	ldr	r1, [r4, #16]
  406998:	f7fe fa48 	bl	404e2c <memcpy>
  40699c:	89a3      	ldrh	r3, [r4, #12]
  40699e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4069a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4069a6:	81a3      	strh	r3, [r4, #12]
  4069a8:	eb0b 000a 	add.w	r0, fp, sl
  4069ac:	eba8 030a 	sub.w	r3, r8, sl
  4069b0:	f8c4 b010 	str.w	fp, [r4, #16]
  4069b4:	f8c4 8014 	str.w	r8, [r4, #20]
  4069b8:	6020      	str	r0, [r4, #0]
  4069ba:	60a3      	str	r3, [r4, #8]
  4069bc:	46b8      	mov	r8, r7
  4069be:	46ba      	mov	sl, r7
  4069c0:	46bb      	mov	fp, r7
  4069c2:	e721      	b.n	406808 <__sfvwrite_r+0xa8>
  4069c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4069c8:	42b9      	cmp	r1, r7
  4069ca:	bf28      	it	cs
  4069cc:	4639      	movcs	r1, r7
  4069ce:	464a      	mov	r2, r9
  4069d0:	fb91 f1f3 	sdiv	r1, r1, r3
  4069d4:	9800      	ldr	r0, [sp, #0]
  4069d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4069d8:	fb03 f301 	mul.w	r3, r3, r1
  4069dc:	69e1      	ldr	r1, [r4, #28]
  4069de:	47b0      	blx	r6
  4069e0:	f1b0 0a00 	subs.w	sl, r0, #0
  4069e4:	f73f af1b 	bgt.w	40681e <__sfvwrite_r+0xbe>
  4069e8:	e738      	b.n	40685c <__sfvwrite_r+0xfc>
  4069ea:	461a      	mov	r2, r3
  4069ec:	4629      	mov	r1, r5
  4069ee:	9301      	str	r3, [sp, #4]
  4069f0:	f000 f94e 	bl	406c90 <memmove>
  4069f4:	6822      	ldr	r2, [r4, #0]
  4069f6:	9b01      	ldr	r3, [sp, #4]
  4069f8:	9800      	ldr	r0, [sp, #0]
  4069fa:	441a      	add	r2, r3
  4069fc:	6022      	str	r2, [r4, #0]
  4069fe:	4621      	mov	r1, r4
  406a00:	f7ff fc4a 	bl	406298 <_fflush_r>
  406a04:	9b01      	ldr	r3, [sp, #4]
  406a06:	2800      	cmp	r0, #0
  406a08:	f47f af28 	bne.w	40685c <__sfvwrite_r+0xfc>
  406a0c:	461f      	mov	r7, r3
  406a0e:	e750      	b.n	4068b2 <__sfvwrite_r+0x152>
  406a10:	9800      	ldr	r0, [sp, #0]
  406a12:	f000 f9a1 	bl	406d58 <_realloc_r>
  406a16:	4683      	mov	fp, r0
  406a18:	2800      	cmp	r0, #0
  406a1a:	d1c5      	bne.n	4069a8 <__sfvwrite_r+0x248>
  406a1c:	9d00      	ldr	r5, [sp, #0]
  406a1e:	6921      	ldr	r1, [r4, #16]
  406a20:	4628      	mov	r0, r5
  406a22:	f7ff fdb7 	bl	406594 <_free_r>
  406a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406a2a:	220c      	movs	r2, #12
  406a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406a30:	602a      	str	r2, [r5, #0]
  406a32:	e715      	b.n	406860 <__sfvwrite_r+0x100>
  406a34:	f106 0901 	add.w	r9, r6, #1
  406a38:	e722      	b.n	406880 <__sfvwrite_r+0x120>
  406a3a:	f04f 30ff 	mov.w	r0, #4294967295
  406a3e:	e6bf      	b.n	4067c0 <__sfvwrite_r+0x60>
  406a40:	9a00      	ldr	r2, [sp, #0]
  406a42:	230c      	movs	r3, #12
  406a44:	6013      	str	r3, [r2, #0]
  406a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406a4a:	e709      	b.n	406860 <__sfvwrite_r+0x100>
  406a4c:	7ffffc00 	.word	0x7ffffc00

00406a50 <_fwalk_reent>:
  406a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406a54:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406a58:	d01f      	beq.n	406a9a <_fwalk_reent+0x4a>
  406a5a:	4688      	mov	r8, r1
  406a5c:	4606      	mov	r6, r0
  406a5e:	f04f 0900 	mov.w	r9, #0
  406a62:	687d      	ldr	r5, [r7, #4]
  406a64:	68bc      	ldr	r4, [r7, #8]
  406a66:	3d01      	subs	r5, #1
  406a68:	d411      	bmi.n	406a8e <_fwalk_reent+0x3e>
  406a6a:	89a3      	ldrh	r3, [r4, #12]
  406a6c:	2b01      	cmp	r3, #1
  406a6e:	f105 35ff 	add.w	r5, r5, #4294967295
  406a72:	d908      	bls.n	406a86 <_fwalk_reent+0x36>
  406a74:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406a78:	3301      	adds	r3, #1
  406a7a:	4621      	mov	r1, r4
  406a7c:	4630      	mov	r0, r6
  406a7e:	d002      	beq.n	406a86 <_fwalk_reent+0x36>
  406a80:	47c0      	blx	r8
  406a82:	ea49 0900 	orr.w	r9, r9, r0
  406a86:	1c6b      	adds	r3, r5, #1
  406a88:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406a8c:	d1ed      	bne.n	406a6a <_fwalk_reent+0x1a>
  406a8e:	683f      	ldr	r7, [r7, #0]
  406a90:	2f00      	cmp	r7, #0
  406a92:	d1e6      	bne.n	406a62 <_fwalk_reent+0x12>
  406a94:	4648      	mov	r0, r9
  406a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406a9a:	46b9      	mov	r9, r7
  406a9c:	4648      	mov	r0, r9
  406a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406aa2:	bf00      	nop

00406aa4 <__locale_mb_cur_max>:
  406aa4:	4b04      	ldr	r3, [pc, #16]	; (406ab8 <__locale_mb_cur_max+0x14>)
  406aa6:	4a05      	ldr	r2, [pc, #20]	; (406abc <__locale_mb_cur_max+0x18>)
  406aa8:	681b      	ldr	r3, [r3, #0]
  406aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  406aac:	2b00      	cmp	r3, #0
  406aae:	bf08      	it	eq
  406ab0:	4613      	moveq	r3, r2
  406ab2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  406ab6:	4770      	bx	lr
  406ab8:	20400014 	.word	0x20400014
  406abc:	20400854 	.word	0x20400854

00406ac0 <__retarget_lock_init_recursive>:
  406ac0:	4770      	bx	lr
  406ac2:	bf00      	nop

00406ac4 <__retarget_lock_close_recursive>:
  406ac4:	4770      	bx	lr
  406ac6:	bf00      	nop

00406ac8 <__retarget_lock_acquire_recursive>:
  406ac8:	4770      	bx	lr
  406aca:	bf00      	nop

00406acc <__retarget_lock_release_recursive>:
  406acc:	4770      	bx	lr
  406ace:	bf00      	nop

00406ad0 <__swhatbuf_r>:
  406ad0:	b570      	push	{r4, r5, r6, lr}
  406ad2:	460c      	mov	r4, r1
  406ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406ad8:	2900      	cmp	r1, #0
  406ada:	b090      	sub	sp, #64	; 0x40
  406adc:	4615      	mov	r5, r2
  406ade:	461e      	mov	r6, r3
  406ae0:	db14      	blt.n	406b0c <__swhatbuf_r+0x3c>
  406ae2:	aa01      	add	r2, sp, #4
  406ae4:	f000 fc9e 	bl	407424 <_fstat_r>
  406ae8:	2800      	cmp	r0, #0
  406aea:	db0f      	blt.n	406b0c <__swhatbuf_r+0x3c>
  406aec:	9a02      	ldr	r2, [sp, #8]
  406aee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  406af2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  406af6:	fab2 f282 	clz	r2, r2
  406afa:	0952      	lsrs	r2, r2, #5
  406afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406b00:	f44f 6000 	mov.w	r0, #2048	; 0x800
  406b04:	6032      	str	r2, [r6, #0]
  406b06:	602b      	str	r3, [r5, #0]
  406b08:	b010      	add	sp, #64	; 0x40
  406b0a:	bd70      	pop	{r4, r5, r6, pc}
  406b0c:	89a2      	ldrh	r2, [r4, #12]
  406b0e:	2300      	movs	r3, #0
  406b10:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  406b14:	6033      	str	r3, [r6, #0]
  406b16:	d004      	beq.n	406b22 <__swhatbuf_r+0x52>
  406b18:	2240      	movs	r2, #64	; 0x40
  406b1a:	4618      	mov	r0, r3
  406b1c:	602a      	str	r2, [r5, #0]
  406b1e:	b010      	add	sp, #64	; 0x40
  406b20:	bd70      	pop	{r4, r5, r6, pc}
  406b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406b26:	602b      	str	r3, [r5, #0]
  406b28:	b010      	add	sp, #64	; 0x40
  406b2a:	bd70      	pop	{r4, r5, r6, pc}

00406b2c <__smakebuf_r>:
  406b2c:	898a      	ldrh	r2, [r1, #12]
  406b2e:	0792      	lsls	r2, r2, #30
  406b30:	460b      	mov	r3, r1
  406b32:	d506      	bpl.n	406b42 <__smakebuf_r+0x16>
  406b34:	f101 0243 	add.w	r2, r1, #67	; 0x43
  406b38:	2101      	movs	r1, #1
  406b3a:	601a      	str	r2, [r3, #0]
  406b3c:	611a      	str	r2, [r3, #16]
  406b3e:	6159      	str	r1, [r3, #20]
  406b40:	4770      	bx	lr
  406b42:	b5f0      	push	{r4, r5, r6, r7, lr}
  406b44:	b083      	sub	sp, #12
  406b46:	ab01      	add	r3, sp, #4
  406b48:	466a      	mov	r2, sp
  406b4a:	460c      	mov	r4, r1
  406b4c:	4606      	mov	r6, r0
  406b4e:	f7ff ffbf 	bl	406ad0 <__swhatbuf_r>
  406b52:	9900      	ldr	r1, [sp, #0]
  406b54:	4605      	mov	r5, r0
  406b56:	4630      	mov	r0, r6
  406b58:	f7fd feb8 	bl	4048cc <_malloc_r>
  406b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406b60:	b1d8      	cbz	r0, 406b9a <__smakebuf_r+0x6e>
  406b62:	9a01      	ldr	r2, [sp, #4]
  406b64:	4f15      	ldr	r7, [pc, #84]	; (406bbc <__smakebuf_r+0x90>)
  406b66:	9900      	ldr	r1, [sp, #0]
  406b68:	63f7      	str	r7, [r6, #60]	; 0x3c
  406b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406b6e:	81a3      	strh	r3, [r4, #12]
  406b70:	6020      	str	r0, [r4, #0]
  406b72:	6120      	str	r0, [r4, #16]
  406b74:	6161      	str	r1, [r4, #20]
  406b76:	b91a      	cbnz	r2, 406b80 <__smakebuf_r+0x54>
  406b78:	432b      	orrs	r3, r5
  406b7a:	81a3      	strh	r3, [r4, #12]
  406b7c:	b003      	add	sp, #12
  406b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406b80:	4630      	mov	r0, r6
  406b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406b86:	f000 fc61 	bl	40744c <_isatty_r>
  406b8a:	b1a0      	cbz	r0, 406bb6 <__smakebuf_r+0x8a>
  406b8c:	89a3      	ldrh	r3, [r4, #12]
  406b8e:	f023 0303 	bic.w	r3, r3, #3
  406b92:	f043 0301 	orr.w	r3, r3, #1
  406b96:	b21b      	sxth	r3, r3
  406b98:	e7ee      	b.n	406b78 <__smakebuf_r+0x4c>
  406b9a:	059a      	lsls	r2, r3, #22
  406b9c:	d4ee      	bmi.n	406b7c <__smakebuf_r+0x50>
  406b9e:	f023 0303 	bic.w	r3, r3, #3
  406ba2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406ba6:	f043 0302 	orr.w	r3, r3, #2
  406baa:	2101      	movs	r1, #1
  406bac:	81a3      	strh	r3, [r4, #12]
  406bae:	6022      	str	r2, [r4, #0]
  406bb0:	6122      	str	r2, [r4, #16]
  406bb2:	6161      	str	r1, [r4, #20]
  406bb4:	e7e2      	b.n	406b7c <__smakebuf_r+0x50>
  406bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406bba:	e7dd      	b.n	406b78 <__smakebuf_r+0x4c>
  406bbc:	004062ed 	.word	0x004062ed

00406bc0 <__ascii_mbtowc>:
  406bc0:	b082      	sub	sp, #8
  406bc2:	b149      	cbz	r1, 406bd8 <__ascii_mbtowc+0x18>
  406bc4:	b15a      	cbz	r2, 406bde <__ascii_mbtowc+0x1e>
  406bc6:	b16b      	cbz	r3, 406be4 <__ascii_mbtowc+0x24>
  406bc8:	7813      	ldrb	r3, [r2, #0]
  406bca:	600b      	str	r3, [r1, #0]
  406bcc:	7812      	ldrb	r2, [r2, #0]
  406bce:	1c10      	adds	r0, r2, #0
  406bd0:	bf18      	it	ne
  406bd2:	2001      	movne	r0, #1
  406bd4:	b002      	add	sp, #8
  406bd6:	4770      	bx	lr
  406bd8:	a901      	add	r1, sp, #4
  406bda:	2a00      	cmp	r2, #0
  406bdc:	d1f3      	bne.n	406bc6 <__ascii_mbtowc+0x6>
  406bde:	4610      	mov	r0, r2
  406be0:	b002      	add	sp, #8
  406be2:	4770      	bx	lr
  406be4:	f06f 0001 	mvn.w	r0, #1
  406be8:	e7f4      	b.n	406bd4 <__ascii_mbtowc+0x14>
  406bea:	bf00      	nop
  406bec:	0000      	movs	r0, r0
	...

00406bf0 <memchr>:
  406bf0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406bf4:	2a10      	cmp	r2, #16
  406bf6:	db2b      	blt.n	406c50 <memchr+0x60>
  406bf8:	f010 0f07 	tst.w	r0, #7
  406bfc:	d008      	beq.n	406c10 <memchr+0x20>
  406bfe:	f810 3b01 	ldrb.w	r3, [r0], #1
  406c02:	3a01      	subs	r2, #1
  406c04:	428b      	cmp	r3, r1
  406c06:	d02d      	beq.n	406c64 <memchr+0x74>
  406c08:	f010 0f07 	tst.w	r0, #7
  406c0c:	b342      	cbz	r2, 406c60 <memchr+0x70>
  406c0e:	d1f6      	bne.n	406bfe <memchr+0xe>
  406c10:	b4f0      	push	{r4, r5, r6, r7}
  406c12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406c16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406c1a:	f022 0407 	bic.w	r4, r2, #7
  406c1e:	f07f 0700 	mvns.w	r7, #0
  406c22:	2300      	movs	r3, #0
  406c24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406c28:	3c08      	subs	r4, #8
  406c2a:	ea85 0501 	eor.w	r5, r5, r1
  406c2e:	ea86 0601 	eor.w	r6, r6, r1
  406c32:	fa85 f547 	uadd8	r5, r5, r7
  406c36:	faa3 f587 	sel	r5, r3, r7
  406c3a:	fa86 f647 	uadd8	r6, r6, r7
  406c3e:	faa5 f687 	sel	r6, r5, r7
  406c42:	b98e      	cbnz	r6, 406c68 <memchr+0x78>
  406c44:	d1ee      	bne.n	406c24 <memchr+0x34>
  406c46:	bcf0      	pop	{r4, r5, r6, r7}
  406c48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406c4c:	f002 0207 	and.w	r2, r2, #7
  406c50:	b132      	cbz	r2, 406c60 <memchr+0x70>
  406c52:	f810 3b01 	ldrb.w	r3, [r0], #1
  406c56:	3a01      	subs	r2, #1
  406c58:	ea83 0301 	eor.w	r3, r3, r1
  406c5c:	b113      	cbz	r3, 406c64 <memchr+0x74>
  406c5e:	d1f8      	bne.n	406c52 <memchr+0x62>
  406c60:	2000      	movs	r0, #0
  406c62:	4770      	bx	lr
  406c64:	3801      	subs	r0, #1
  406c66:	4770      	bx	lr
  406c68:	2d00      	cmp	r5, #0
  406c6a:	bf06      	itte	eq
  406c6c:	4635      	moveq	r5, r6
  406c6e:	3803      	subeq	r0, #3
  406c70:	3807      	subne	r0, #7
  406c72:	f015 0f01 	tst.w	r5, #1
  406c76:	d107      	bne.n	406c88 <memchr+0x98>
  406c78:	3001      	adds	r0, #1
  406c7a:	f415 7f80 	tst.w	r5, #256	; 0x100
  406c7e:	bf02      	ittt	eq
  406c80:	3001      	addeq	r0, #1
  406c82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406c86:	3001      	addeq	r0, #1
  406c88:	bcf0      	pop	{r4, r5, r6, r7}
  406c8a:	3801      	subs	r0, #1
  406c8c:	4770      	bx	lr
  406c8e:	bf00      	nop

00406c90 <memmove>:
  406c90:	4288      	cmp	r0, r1
  406c92:	b5f0      	push	{r4, r5, r6, r7, lr}
  406c94:	d90d      	bls.n	406cb2 <memmove+0x22>
  406c96:	188b      	adds	r3, r1, r2
  406c98:	4298      	cmp	r0, r3
  406c9a:	d20a      	bcs.n	406cb2 <memmove+0x22>
  406c9c:	1884      	adds	r4, r0, r2
  406c9e:	2a00      	cmp	r2, #0
  406ca0:	d051      	beq.n	406d46 <memmove+0xb6>
  406ca2:	4622      	mov	r2, r4
  406ca4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406ca8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406cac:	4299      	cmp	r1, r3
  406cae:	d1f9      	bne.n	406ca4 <memmove+0x14>
  406cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406cb2:	2a0f      	cmp	r2, #15
  406cb4:	d948      	bls.n	406d48 <memmove+0xb8>
  406cb6:	ea41 0300 	orr.w	r3, r1, r0
  406cba:	079b      	lsls	r3, r3, #30
  406cbc:	d146      	bne.n	406d4c <memmove+0xbc>
  406cbe:	f100 0410 	add.w	r4, r0, #16
  406cc2:	f101 0310 	add.w	r3, r1, #16
  406cc6:	4615      	mov	r5, r2
  406cc8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406ccc:	f844 6c10 	str.w	r6, [r4, #-16]
  406cd0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406cd4:	f844 6c0c 	str.w	r6, [r4, #-12]
  406cd8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406cdc:	f844 6c08 	str.w	r6, [r4, #-8]
  406ce0:	3d10      	subs	r5, #16
  406ce2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406ce6:	f844 6c04 	str.w	r6, [r4, #-4]
  406cea:	2d0f      	cmp	r5, #15
  406cec:	f103 0310 	add.w	r3, r3, #16
  406cf0:	f104 0410 	add.w	r4, r4, #16
  406cf4:	d8e8      	bhi.n	406cc8 <memmove+0x38>
  406cf6:	f1a2 0310 	sub.w	r3, r2, #16
  406cfa:	f023 030f 	bic.w	r3, r3, #15
  406cfe:	f002 0e0f 	and.w	lr, r2, #15
  406d02:	3310      	adds	r3, #16
  406d04:	f1be 0f03 	cmp.w	lr, #3
  406d08:	4419      	add	r1, r3
  406d0a:	4403      	add	r3, r0
  406d0c:	d921      	bls.n	406d52 <memmove+0xc2>
  406d0e:	1f1e      	subs	r6, r3, #4
  406d10:	460d      	mov	r5, r1
  406d12:	4674      	mov	r4, lr
  406d14:	3c04      	subs	r4, #4
  406d16:	f855 7b04 	ldr.w	r7, [r5], #4
  406d1a:	f846 7f04 	str.w	r7, [r6, #4]!
  406d1e:	2c03      	cmp	r4, #3
  406d20:	d8f8      	bhi.n	406d14 <memmove+0x84>
  406d22:	f1ae 0404 	sub.w	r4, lr, #4
  406d26:	f024 0403 	bic.w	r4, r4, #3
  406d2a:	3404      	adds	r4, #4
  406d2c:	4421      	add	r1, r4
  406d2e:	4423      	add	r3, r4
  406d30:	f002 0203 	and.w	r2, r2, #3
  406d34:	b162      	cbz	r2, 406d50 <memmove+0xc0>
  406d36:	3b01      	subs	r3, #1
  406d38:	440a      	add	r2, r1
  406d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
  406d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
  406d42:	428a      	cmp	r2, r1
  406d44:	d1f9      	bne.n	406d3a <memmove+0xaa>
  406d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406d48:	4603      	mov	r3, r0
  406d4a:	e7f3      	b.n	406d34 <memmove+0xa4>
  406d4c:	4603      	mov	r3, r0
  406d4e:	e7f2      	b.n	406d36 <memmove+0xa6>
  406d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406d52:	4672      	mov	r2, lr
  406d54:	e7ee      	b.n	406d34 <memmove+0xa4>
  406d56:	bf00      	nop

00406d58 <_realloc_r>:
  406d58:	2900      	cmp	r1, #0
  406d5a:	f000 8095 	beq.w	406e88 <_realloc_r+0x130>
  406d5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406d62:	460d      	mov	r5, r1
  406d64:	4616      	mov	r6, r2
  406d66:	b083      	sub	sp, #12
  406d68:	4680      	mov	r8, r0
  406d6a:	f106 070b 	add.w	r7, r6, #11
  406d6e:	f7fe f945 	bl	404ffc <__malloc_lock>
  406d72:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406d76:	2f16      	cmp	r7, #22
  406d78:	f02e 0403 	bic.w	r4, lr, #3
  406d7c:	f1a5 0908 	sub.w	r9, r5, #8
  406d80:	d83c      	bhi.n	406dfc <_realloc_r+0xa4>
  406d82:	2210      	movs	r2, #16
  406d84:	4617      	mov	r7, r2
  406d86:	42be      	cmp	r6, r7
  406d88:	d83d      	bhi.n	406e06 <_realloc_r+0xae>
  406d8a:	4294      	cmp	r4, r2
  406d8c:	da43      	bge.n	406e16 <_realloc_r+0xbe>
  406d8e:	4bc4      	ldr	r3, [pc, #784]	; (4070a0 <_realloc_r+0x348>)
  406d90:	6899      	ldr	r1, [r3, #8]
  406d92:	eb09 0004 	add.w	r0, r9, r4
  406d96:	4288      	cmp	r0, r1
  406d98:	f000 80b4 	beq.w	406f04 <_realloc_r+0x1ac>
  406d9c:	6843      	ldr	r3, [r0, #4]
  406d9e:	f023 0101 	bic.w	r1, r3, #1
  406da2:	4401      	add	r1, r0
  406da4:	6849      	ldr	r1, [r1, #4]
  406da6:	07c9      	lsls	r1, r1, #31
  406da8:	d54c      	bpl.n	406e44 <_realloc_r+0xec>
  406daa:	f01e 0f01 	tst.w	lr, #1
  406dae:	f000 809b 	beq.w	406ee8 <_realloc_r+0x190>
  406db2:	4631      	mov	r1, r6
  406db4:	4640      	mov	r0, r8
  406db6:	f7fd fd89 	bl	4048cc <_malloc_r>
  406dba:	4606      	mov	r6, r0
  406dbc:	2800      	cmp	r0, #0
  406dbe:	d03a      	beq.n	406e36 <_realloc_r+0xde>
  406dc0:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406dc4:	f023 0301 	bic.w	r3, r3, #1
  406dc8:	444b      	add	r3, r9
  406dca:	f1a0 0208 	sub.w	r2, r0, #8
  406dce:	429a      	cmp	r2, r3
  406dd0:	f000 8121 	beq.w	407016 <_realloc_r+0x2be>
  406dd4:	1f22      	subs	r2, r4, #4
  406dd6:	2a24      	cmp	r2, #36	; 0x24
  406dd8:	f200 8107 	bhi.w	406fea <_realloc_r+0x292>
  406ddc:	2a13      	cmp	r2, #19
  406dde:	f200 80db 	bhi.w	406f98 <_realloc_r+0x240>
  406de2:	4603      	mov	r3, r0
  406de4:	462a      	mov	r2, r5
  406de6:	6811      	ldr	r1, [r2, #0]
  406de8:	6019      	str	r1, [r3, #0]
  406dea:	6851      	ldr	r1, [r2, #4]
  406dec:	6059      	str	r1, [r3, #4]
  406dee:	6892      	ldr	r2, [r2, #8]
  406df0:	609a      	str	r2, [r3, #8]
  406df2:	4629      	mov	r1, r5
  406df4:	4640      	mov	r0, r8
  406df6:	f7ff fbcd 	bl	406594 <_free_r>
  406dfa:	e01c      	b.n	406e36 <_realloc_r+0xde>
  406dfc:	f027 0707 	bic.w	r7, r7, #7
  406e00:	2f00      	cmp	r7, #0
  406e02:	463a      	mov	r2, r7
  406e04:	dabf      	bge.n	406d86 <_realloc_r+0x2e>
  406e06:	2600      	movs	r6, #0
  406e08:	230c      	movs	r3, #12
  406e0a:	4630      	mov	r0, r6
  406e0c:	f8c8 3000 	str.w	r3, [r8]
  406e10:	b003      	add	sp, #12
  406e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e16:	462e      	mov	r6, r5
  406e18:	1be3      	subs	r3, r4, r7
  406e1a:	2b0f      	cmp	r3, #15
  406e1c:	d81e      	bhi.n	406e5c <_realloc_r+0x104>
  406e1e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406e22:	f003 0301 	and.w	r3, r3, #1
  406e26:	4323      	orrs	r3, r4
  406e28:	444c      	add	r4, r9
  406e2a:	f8c9 3004 	str.w	r3, [r9, #4]
  406e2e:	6863      	ldr	r3, [r4, #4]
  406e30:	f043 0301 	orr.w	r3, r3, #1
  406e34:	6063      	str	r3, [r4, #4]
  406e36:	4640      	mov	r0, r8
  406e38:	f7fe f8e6 	bl	405008 <__malloc_unlock>
  406e3c:	4630      	mov	r0, r6
  406e3e:	b003      	add	sp, #12
  406e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e44:	f023 0303 	bic.w	r3, r3, #3
  406e48:	18e1      	adds	r1, r4, r3
  406e4a:	4291      	cmp	r1, r2
  406e4c:	db1f      	blt.n	406e8e <_realloc_r+0x136>
  406e4e:	68c3      	ldr	r3, [r0, #12]
  406e50:	6882      	ldr	r2, [r0, #8]
  406e52:	462e      	mov	r6, r5
  406e54:	60d3      	str	r3, [r2, #12]
  406e56:	460c      	mov	r4, r1
  406e58:	609a      	str	r2, [r3, #8]
  406e5a:	e7dd      	b.n	406e18 <_realloc_r+0xc0>
  406e5c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406e60:	eb09 0107 	add.w	r1, r9, r7
  406e64:	f002 0201 	and.w	r2, r2, #1
  406e68:	444c      	add	r4, r9
  406e6a:	f043 0301 	orr.w	r3, r3, #1
  406e6e:	4317      	orrs	r7, r2
  406e70:	f8c9 7004 	str.w	r7, [r9, #4]
  406e74:	604b      	str	r3, [r1, #4]
  406e76:	6863      	ldr	r3, [r4, #4]
  406e78:	f043 0301 	orr.w	r3, r3, #1
  406e7c:	3108      	adds	r1, #8
  406e7e:	6063      	str	r3, [r4, #4]
  406e80:	4640      	mov	r0, r8
  406e82:	f7ff fb87 	bl	406594 <_free_r>
  406e86:	e7d6      	b.n	406e36 <_realloc_r+0xde>
  406e88:	4611      	mov	r1, r2
  406e8a:	f7fd bd1f 	b.w	4048cc <_malloc_r>
  406e8e:	f01e 0f01 	tst.w	lr, #1
  406e92:	d18e      	bne.n	406db2 <_realloc_r+0x5a>
  406e94:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406e98:	eba9 0a01 	sub.w	sl, r9, r1
  406e9c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406ea0:	f021 0103 	bic.w	r1, r1, #3
  406ea4:	440b      	add	r3, r1
  406ea6:	4423      	add	r3, r4
  406ea8:	4293      	cmp	r3, r2
  406eaa:	db25      	blt.n	406ef8 <_realloc_r+0x1a0>
  406eac:	68c2      	ldr	r2, [r0, #12]
  406eae:	6881      	ldr	r1, [r0, #8]
  406eb0:	4656      	mov	r6, sl
  406eb2:	60ca      	str	r2, [r1, #12]
  406eb4:	6091      	str	r1, [r2, #8]
  406eb6:	f8da 100c 	ldr.w	r1, [sl, #12]
  406eba:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406ebe:	1f22      	subs	r2, r4, #4
  406ec0:	2a24      	cmp	r2, #36	; 0x24
  406ec2:	60c1      	str	r1, [r0, #12]
  406ec4:	6088      	str	r0, [r1, #8]
  406ec6:	f200 8094 	bhi.w	406ff2 <_realloc_r+0x29a>
  406eca:	2a13      	cmp	r2, #19
  406ecc:	d96f      	bls.n	406fae <_realloc_r+0x256>
  406ece:	6829      	ldr	r1, [r5, #0]
  406ed0:	f8ca 1008 	str.w	r1, [sl, #8]
  406ed4:	6869      	ldr	r1, [r5, #4]
  406ed6:	f8ca 100c 	str.w	r1, [sl, #12]
  406eda:	2a1b      	cmp	r2, #27
  406edc:	f200 80a2 	bhi.w	407024 <_realloc_r+0x2cc>
  406ee0:	3508      	adds	r5, #8
  406ee2:	f10a 0210 	add.w	r2, sl, #16
  406ee6:	e063      	b.n	406fb0 <_realloc_r+0x258>
  406ee8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406eec:	eba9 0a03 	sub.w	sl, r9, r3
  406ef0:	f8da 1004 	ldr.w	r1, [sl, #4]
  406ef4:	f021 0103 	bic.w	r1, r1, #3
  406ef8:	1863      	adds	r3, r4, r1
  406efa:	4293      	cmp	r3, r2
  406efc:	f6ff af59 	blt.w	406db2 <_realloc_r+0x5a>
  406f00:	4656      	mov	r6, sl
  406f02:	e7d8      	b.n	406eb6 <_realloc_r+0x15e>
  406f04:	6841      	ldr	r1, [r0, #4]
  406f06:	f021 0b03 	bic.w	fp, r1, #3
  406f0a:	44a3      	add	fp, r4
  406f0c:	f107 0010 	add.w	r0, r7, #16
  406f10:	4583      	cmp	fp, r0
  406f12:	da56      	bge.n	406fc2 <_realloc_r+0x26a>
  406f14:	f01e 0f01 	tst.w	lr, #1
  406f18:	f47f af4b 	bne.w	406db2 <_realloc_r+0x5a>
  406f1c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406f20:	eba9 0a01 	sub.w	sl, r9, r1
  406f24:	f8da 1004 	ldr.w	r1, [sl, #4]
  406f28:	f021 0103 	bic.w	r1, r1, #3
  406f2c:	448b      	add	fp, r1
  406f2e:	4558      	cmp	r0, fp
  406f30:	dce2      	bgt.n	406ef8 <_realloc_r+0x1a0>
  406f32:	4656      	mov	r6, sl
  406f34:	f8da 100c 	ldr.w	r1, [sl, #12]
  406f38:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406f3c:	1f22      	subs	r2, r4, #4
  406f3e:	2a24      	cmp	r2, #36	; 0x24
  406f40:	60c1      	str	r1, [r0, #12]
  406f42:	6088      	str	r0, [r1, #8]
  406f44:	f200 808f 	bhi.w	407066 <_realloc_r+0x30e>
  406f48:	2a13      	cmp	r2, #19
  406f4a:	f240 808a 	bls.w	407062 <_realloc_r+0x30a>
  406f4e:	6829      	ldr	r1, [r5, #0]
  406f50:	f8ca 1008 	str.w	r1, [sl, #8]
  406f54:	6869      	ldr	r1, [r5, #4]
  406f56:	f8ca 100c 	str.w	r1, [sl, #12]
  406f5a:	2a1b      	cmp	r2, #27
  406f5c:	f200 808a 	bhi.w	407074 <_realloc_r+0x31c>
  406f60:	3508      	adds	r5, #8
  406f62:	f10a 0210 	add.w	r2, sl, #16
  406f66:	6829      	ldr	r1, [r5, #0]
  406f68:	6011      	str	r1, [r2, #0]
  406f6a:	6869      	ldr	r1, [r5, #4]
  406f6c:	6051      	str	r1, [r2, #4]
  406f6e:	68a9      	ldr	r1, [r5, #8]
  406f70:	6091      	str	r1, [r2, #8]
  406f72:	eb0a 0107 	add.w	r1, sl, r7
  406f76:	ebab 0207 	sub.w	r2, fp, r7
  406f7a:	f042 0201 	orr.w	r2, r2, #1
  406f7e:	6099      	str	r1, [r3, #8]
  406f80:	604a      	str	r2, [r1, #4]
  406f82:	f8da 3004 	ldr.w	r3, [sl, #4]
  406f86:	f003 0301 	and.w	r3, r3, #1
  406f8a:	431f      	orrs	r7, r3
  406f8c:	4640      	mov	r0, r8
  406f8e:	f8ca 7004 	str.w	r7, [sl, #4]
  406f92:	f7fe f839 	bl	405008 <__malloc_unlock>
  406f96:	e751      	b.n	406e3c <_realloc_r+0xe4>
  406f98:	682b      	ldr	r3, [r5, #0]
  406f9a:	6003      	str	r3, [r0, #0]
  406f9c:	686b      	ldr	r3, [r5, #4]
  406f9e:	6043      	str	r3, [r0, #4]
  406fa0:	2a1b      	cmp	r2, #27
  406fa2:	d82d      	bhi.n	407000 <_realloc_r+0x2a8>
  406fa4:	f100 0308 	add.w	r3, r0, #8
  406fa8:	f105 0208 	add.w	r2, r5, #8
  406fac:	e71b      	b.n	406de6 <_realloc_r+0x8e>
  406fae:	4632      	mov	r2, r6
  406fb0:	6829      	ldr	r1, [r5, #0]
  406fb2:	6011      	str	r1, [r2, #0]
  406fb4:	6869      	ldr	r1, [r5, #4]
  406fb6:	6051      	str	r1, [r2, #4]
  406fb8:	68a9      	ldr	r1, [r5, #8]
  406fba:	6091      	str	r1, [r2, #8]
  406fbc:	461c      	mov	r4, r3
  406fbe:	46d1      	mov	r9, sl
  406fc0:	e72a      	b.n	406e18 <_realloc_r+0xc0>
  406fc2:	eb09 0107 	add.w	r1, r9, r7
  406fc6:	ebab 0b07 	sub.w	fp, fp, r7
  406fca:	f04b 0201 	orr.w	r2, fp, #1
  406fce:	6099      	str	r1, [r3, #8]
  406fd0:	604a      	str	r2, [r1, #4]
  406fd2:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406fd6:	f003 0301 	and.w	r3, r3, #1
  406fda:	431f      	orrs	r7, r3
  406fdc:	4640      	mov	r0, r8
  406fde:	f845 7c04 	str.w	r7, [r5, #-4]
  406fe2:	f7fe f811 	bl	405008 <__malloc_unlock>
  406fe6:	462e      	mov	r6, r5
  406fe8:	e728      	b.n	406e3c <_realloc_r+0xe4>
  406fea:	4629      	mov	r1, r5
  406fec:	f7ff fe50 	bl	406c90 <memmove>
  406ff0:	e6ff      	b.n	406df2 <_realloc_r+0x9a>
  406ff2:	4629      	mov	r1, r5
  406ff4:	4630      	mov	r0, r6
  406ff6:	461c      	mov	r4, r3
  406ff8:	46d1      	mov	r9, sl
  406ffa:	f7ff fe49 	bl	406c90 <memmove>
  406ffe:	e70b      	b.n	406e18 <_realloc_r+0xc0>
  407000:	68ab      	ldr	r3, [r5, #8]
  407002:	6083      	str	r3, [r0, #8]
  407004:	68eb      	ldr	r3, [r5, #12]
  407006:	60c3      	str	r3, [r0, #12]
  407008:	2a24      	cmp	r2, #36	; 0x24
  40700a:	d017      	beq.n	40703c <_realloc_r+0x2e4>
  40700c:	f100 0310 	add.w	r3, r0, #16
  407010:	f105 0210 	add.w	r2, r5, #16
  407014:	e6e7      	b.n	406de6 <_realloc_r+0x8e>
  407016:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40701a:	f023 0303 	bic.w	r3, r3, #3
  40701e:	441c      	add	r4, r3
  407020:	462e      	mov	r6, r5
  407022:	e6f9      	b.n	406e18 <_realloc_r+0xc0>
  407024:	68a9      	ldr	r1, [r5, #8]
  407026:	f8ca 1010 	str.w	r1, [sl, #16]
  40702a:	68e9      	ldr	r1, [r5, #12]
  40702c:	f8ca 1014 	str.w	r1, [sl, #20]
  407030:	2a24      	cmp	r2, #36	; 0x24
  407032:	d00c      	beq.n	40704e <_realloc_r+0x2f6>
  407034:	3510      	adds	r5, #16
  407036:	f10a 0218 	add.w	r2, sl, #24
  40703a:	e7b9      	b.n	406fb0 <_realloc_r+0x258>
  40703c:	692b      	ldr	r3, [r5, #16]
  40703e:	6103      	str	r3, [r0, #16]
  407040:	696b      	ldr	r3, [r5, #20]
  407042:	6143      	str	r3, [r0, #20]
  407044:	f105 0218 	add.w	r2, r5, #24
  407048:	f100 0318 	add.w	r3, r0, #24
  40704c:	e6cb      	b.n	406de6 <_realloc_r+0x8e>
  40704e:	692a      	ldr	r2, [r5, #16]
  407050:	f8ca 2018 	str.w	r2, [sl, #24]
  407054:	696a      	ldr	r2, [r5, #20]
  407056:	f8ca 201c 	str.w	r2, [sl, #28]
  40705a:	3518      	adds	r5, #24
  40705c:	f10a 0220 	add.w	r2, sl, #32
  407060:	e7a6      	b.n	406fb0 <_realloc_r+0x258>
  407062:	4632      	mov	r2, r6
  407064:	e77f      	b.n	406f66 <_realloc_r+0x20e>
  407066:	4629      	mov	r1, r5
  407068:	4630      	mov	r0, r6
  40706a:	9301      	str	r3, [sp, #4]
  40706c:	f7ff fe10 	bl	406c90 <memmove>
  407070:	9b01      	ldr	r3, [sp, #4]
  407072:	e77e      	b.n	406f72 <_realloc_r+0x21a>
  407074:	68a9      	ldr	r1, [r5, #8]
  407076:	f8ca 1010 	str.w	r1, [sl, #16]
  40707a:	68e9      	ldr	r1, [r5, #12]
  40707c:	f8ca 1014 	str.w	r1, [sl, #20]
  407080:	2a24      	cmp	r2, #36	; 0x24
  407082:	d003      	beq.n	40708c <_realloc_r+0x334>
  407084:	3510      	adds	r5, #16
  407086:	f10a 0218 	add.w	r2, sl, #24
  40708a:	e76c      	b.n	406f66 <_realloc_r+0x20e>
  40708c:	692a      	ldr	r2, [r5, #16]
  40708e:	f8ca 2018 	str.w	r2, [sl, #24]
  407092:	696a      	ldr	r2, [r5, #20]
  407094:	f8ca 201c 	str.w	r2, [sl, #28]
  407098:	3518      	adds	r5, #24
  40709a:	f10a 0220 	add.w	r2, sl, #32
  40709e:	e762      	b.n	406f66 <_realloc_r+0x20e>
  4070a0:	20400440 	.word	0x20400440

004070a4 <__sread>:
  4070a4:	b510      	push	{r4, lr}
  4070a6:	460c      	mov	r4, r1
  4070a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4070ac:	f000 f9f6 	bl	40749c <_read_r>
  4070b0:	2800      	cmp	r0, #0
  4070b2:	db03      	blt.n	4070bc <__sread+0x18>
  4070b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4070b6:	4403      	add	r3, r0
  4070b8:	6523      	str	r3, [r4, #80]	; 0x50
  4070ba:	bd10      	pop	{r4, pc}
  4070bc:	89a3      	ldrh	r3, [r4, #12]
  4070be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4070c2:	81a3      	strh	r3, [r4, #12]
  4070c4:	bd10      	pop	{r4, pc}
  4070c6:	bf00      	nop

004070c8 <__swrite>:
  4070c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4070cc:	4616      	mov	r6, r2
  4070ce:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4070d2:	461f      	mov	r7, r3
  4070d4:	05d3      	lsls	r3, r2, #23
  4070d6:	460c      	mov	r4, r1
  4070d8:	4605      	mov	r5, r0
  4070da:	d507      	bpl.n	4070ec <__swrite+0x24>
  4070dc:	2200      	movs	r2, #0
  4070de:	2302      	movs	r3, #2
  4070e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4070e4:	f000 f9c4 	bl	407470 <_lseek_r>
  4070e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4070ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4070f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4070f4:	81a2      	strh	r2, [r4, #12]
  4070f6:	463b      	mov	r3, r7
  4070f8:	4632      	mov	r2, r6
  4070fa:	4628      	mov	r0, r5
  4070fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407100:	f000 b8a4 	b.w	40724c <_write_r>

00407104 <__sseek>:
  407104:	b510      	push	{r4, lr}
  407106:	460c      	mov	r4, r1
  407108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40710c:	f000 f9b0 	bl	407470 <_lseek_r>
  407110:	89a3      	ldrh	r3, [r4, #12]
  407112:	1c42      	adds	r2, r0, #1
  407114:	bf0e      	itee	eq
  407116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40711a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40711e:	6520      	strne	r0, [r4, #80]	; 0x50
  407120:	81a3      	strh	r3, [r4, #12]
  407122:	bd10      	pop	{r4, pc}

00407124 <__sclose>:
  407124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407128:	f000 b908 	b.w	40733c <_close_r>

0040712c <__swbuf_r>:
  40712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40712e:	460d      	mov	r5, r1
  407130:	4614      	mov	r4, r2
  407132:	4606      	mov	r6, r0
  407134:	b110      	cbz	r0, 40713c <__swbuf_r+0x10>
  407136:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407138:	2b00      	cmp	r3, #0
  40713a:	d04b      	beq.n	4071d4 <__swbuf_r+0xa8>
  40713c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407140:	69a3      	ldr	r3, [r4, #24]
  407142:	60a3      	str	r3, [r4, #8]
  407144:	b291      	uxth	r1, r2
  407146:	0708      	lsls	r0, r1, #28
  407148:	d539      	bpl.n	4071be <__swbuf_r+0x92>
  40714a:	6923      	ldr	r3, [r4, #16]
  40714c:	2b00      	cmp	r3, #0
  40714e:	d036      	beq.n	4071be <__swbuf_r+0x92>
  407150:	b2ed      	uxtb	r5, r5
  407152:	0489      	lsls	r1, r1, #18
  407154:	462f      	mov	r7, r5
  407156:	d515      	bpl.n	407184 <__swbuf_r+0x58>
  407158:	6822      	ldr	r2, [r4, #0]
  40715a:	6961      	ldr	r1, [r4, #20]
  40715c:	1ad3      	subs	r3, r2, r3
  40715e:	428b      	cmp	r3, r1
  407160:	da1c      	bge.n	40719c <__swbuf_r+0x70>
  407162:	3301      	adds	r3, #1
  407164:	68a1      	ldr	r1, [r4, #8]
  407166:	1c50      	adds	r0, r2, #1
  407168:	3901      	subs	r1, #1
  40716a:	60a1      	str	r1, [r4, #8]
  40716c:	6020      	str	r0, [r4, #0]
  40716e:	7015      	strb	r5, [r2, #0]
  407170:	6962      	ldr	r2, [r4, #20]
  407172:	429a      	cmp	r2, r3
  407174:	d01a      	beq.n	4071ac <__swbuf_r+0x80>
  407176:	89a3      	ldrh	r3, [r4, #12]
  407178:	07db      	lsls	r3, r3, #31
  40717a:	d501      	bpl.n	407180 <__swbuf_r+0x54>
  40717c:	2d0a      	cmp	r5, #10
  40717e:	d015      	beq.n	4071ac <__swbuf_r+0x80>
  407180:	4638      	mov	r0, r7
  407182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407184:	6e61      	ldr	r1, [r4, #100]	; 0x64
  407186:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40718a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40718e:	81a2      	strh	r2, [r4, #12]
  407190:	6822      	ldr	r2, [r4, #0]
  407192:	6661      	str	r1, [r4, #100]	; 0x64
  407194:	6961      	ldr	r1, [r4, #20]
  407196:	1ad3      	subs	r3, r2, r3
  407198:	428b      	cmp	r3, r1
  40719a:	dbe2      	blt.n	407162 <__swbuf_r+0x36>
  40719c:	4621      	mov	r1, r4
  40719e:	4630      	mov	r0, r6
  4071a0:	f7ff f87a 	bl	406298 <_fflush_r>
  4071a4:	b940      	cbnz	r0, 4071b8 <__swbuf_r+0x8c>
  4071a6:	6822      	ldr	r2, [r4, #0]
  4071a8:	2301      	movs	r3, #1
  4071aa:	e7db      	b.n	407164 <__swbuf_r+0x38>
  4071ac:	4621      	mov	r1, r4
  4071ae:	4630      	mov	r0, r6
  4071b0:	f7ff f872 	bl	406298 <_fflush_r>
  4071b4:	2800      	cmp	r0, #0
  4071b6:	d0e3      	beq.n	407180 <__swbuf_r+0x54>
  4071b8:	f04f 37ff 	mov.w	r7, #4294967295
  4071bc:	e7e0      	b.n	407180 <__swbuf_r+0x54>
  4071be:	4621      	mov	r1, r4
  4071c0:	4630      	mov	r0, r6
  4071c2:	f7fe ff55 	bl	406070 <__swsetup_r>
  4071c6:	2800      	cmp	r0, #0
  4071c8:	d1f6      	bne.n	4071b8 <__swbuf_r+0x8c>
  4071ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4071ce:	6923      	ldr	r3, [r4, #16]
  4071d0:	b291      	uxth	r1, r2
  4071d2:	e7bd      	b.n	407150 <__swbuf_r+0x24>
  4071d4:	f7ff f8b8 	bl	406348 <__sinit>
  4071d8:	e7b0      	b.n	40713c <__swbuf_r+0x10>
  4071da:	bf00      	nop

004071dc <_wcrtomb_r>:
  4071dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4071de:	4606      	mov	r6, r0
  4071e0:	b085      	sub	sp, #20
  4071e2:	461f      	mov	r7, r3
  4071e4:	b189      	cbz	r1, 40720a <_wcrtomb_r+0x2e>
  4071e6:	4c10      	ldr	r4, [pc, #64]	; (407228 <_wcrtomb_r+0x4c>)
  4071e8:	4d10      	ldr	r5, [pc, #64]	; (40722c <_wcrtomb_r+0x50>)
  4071ea:	6824      	ldr	r4, [r4, #0]
  4071ec:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4071ee:	2c00      	cmp	r4, #0
  4071f0:	bf08      	it	eq
  4071f2:	462c      	moveq	r4, r5
  4071f4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4071f8:	47a0      	blx	r4
  4071fa:	1c43      	adds	r3, r0, #1
  4071fc:	d103      	bne.n	407206 <_wcrtomb_r+0x2a>
  4071fe:	2200      	movs	r2, #0
  407200:	238a      	movs	r3, #138	; 0x8a
  407202:	603a      	str	r2, [r7, #0]
  407204:	6033      	str	r3, [r6, #0]
  407206:	b005      	add	sp, #20
  407208:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40720a:	460c      	mov	r4, r1
  40720c:	4906      	ldr	r1, [pc, #24]	; (407228 <_wcrtomb_r+0x4c>)
  40720e:	4a07      	ldr	r2, [pc, #28]	; (40722c <_wcrtomb_r+0x50>)
  407210:	6809      	ldr	r1, [r1, #0]
  407212:	6b49      	ldr	r1, [r1, #52]	; 0x34
  407214:	2900      	cmp	r1, #0
  407216:	bf08      	it	eq
  407218:	4611      	moveq	r1, r2
  40721a:	4622      	mov	r2, r4
  40721c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  407220:	a901      	add	r1, sp, #4
  407222:	47a0      	blx	r4
  407224:	e7e9      	b.n	4071fa <_wcrtomb_r+0x1e>
  407226:	bf00      	nop
  407228:	20400014 	.word	0x20400014
  40722c:	20400854 	.word	0x20400854

00407230 <__ascii_wctomb>:
  407230:	b121      	cbz	r1, 40723c <__ascii_wctomb+0xc>
  407232:	2aff      	cmp	r2, #255	; 0xff
  407234:	d804      	bhi.n	407240 <__ascii_wctomb+0x10>
  407236:	700a      	strb	r2, [r1, #0]
  407238:	2001      	movs	r0, #1
  40723a:	4770      	bx	lr
  40723c:	4608      	mov	r0, r1
  40723e:	4770      	bx	lr
  407240:	238a      	movs	r3, #138	; 0x8a
  407242:	6003      	str	r3, [r0, #0]
  407244:	f04f 30ff 	mov.w	r0, #4294967295
  407248:	4770      	bx	lr
  40724a:	bf00      	nop

0040724c <_write_r>:
  40724c:	b570      	push	{r4, r5, r6, lr}
  40724e:	460d      	mov	r5, r1
  407250:	4c08      	ldr	r4, [pc, #32]	; (407274 <_write_r+0x28>)
  407252:	4611      	mov	r1, r2
  407254:	4606      	mov	r6, r0
  407256:	461a      	mov	r2, r3
  407258:	4628      	mov	r0, r5
  40725a:	2300      	movs	r3, #0
  40725c:	6023      	str	r3, [r4, #0]
  40725e:	f7f9 febb 	bl	400fd8 <_write>
  407262:	1c43      	adds	r3, r0, #1
  407264:	d000      	beq.n	407268 <_write_r+0x1c>
  407266:	bd70      	pop	{r4, r5, r6, pc}
  407268:	6823      	ldr	r3, [r4, #0]
  40726a:	2b00      	cmp	r3, #0
  40726c:	d0fb      	beq.n	407266 <_write_r+0x1a>
  40726e:	6033      	str	r3, [r6, #0]
  407270:	bd70      	pop	{r4, r5, r6, pc}
  407272:	bf00      	nop
  407274:	20400ee8 	.word	0x20400ee8

00407278 <__register_exitproc>:
  407278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40727c:	4d2c      	ldr	r5, [pc, #176]	; (407330 <__register_exitproc+0xb8>)
  40727e:	4606      	mov	r6, r0
  407280:	6828      	ldr	r0, [r5, #0]
  407282:	4698      	mov	r8, r3
  407284:	460f      	mov	r7, r1
  407286:	4691      	mov	r9, r2
  407288:	f7ff fc1e 	bl	406ac8 <__retarget_lock_acquire_recursive>
  40728c:	4b29      	ldr	r3, [pc, #164]	; (407334 <__register_exitproc+0xbc>)
  40728e:	681c      	ldr	r4, [r3, #0]
  407290:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407294:	2b00      	cmp	r3, #0
  407296:	d03e      	beq.n	407316 <__register_exitproc+0x9e>
  407298:	685a      	ldr	r2, [r3, #4]
  40729a:	2a1f      	cmp	r2, #31
  40729c:	dc1c      	bgt.n	4072d8 <__register_exitproc+0x60>
  40729e:	f102 0e01 	add.w	lr, r2, #1
  4072a2:	b176      	cbz	r6, 4072c2 <__register_exitproc+0x4a>
  4072a4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4072a8:	2401      	movs	r4, #1
  4072aa:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4072ae:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4072b2:	4094      	lsls	r4, r2
  4072b4:	4320      	orrs	r0, r4
  4072b6:	2e02      	cmp	r6, #2
  4072b8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4072bc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4072c0:	d023      	beq.n	40730a <__register_exitproc+0x92>
  4072c2:	3202      	adds	r2, #2
  4072c4:	f8c3 e004 	str.w	lr, [r3, #4]
  4072c8:	6828      	ldr	r0, [r5, #0]
  4072ca:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4072ce:	f7ff fbfd 	bl	406acc <__retarget_lock_release_recursive>
  4072d2:	2000      	movs	r0, #0
  4072d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4072d8:	4b17      	ldr	r3, [pc, #92]	; (407338 <__register_exitproc+0xc0>)
  4072da:	b30b      	cbz	r3, 407320 <__register_exitproc+0xa8>
  4072dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4072e0:	f7fd fae4 	bl	4048ac <malloc>
  4072e4:	4603      	mov	r3, r0
  4072e6:	b1d8      	cbz	r0, 407320 <__register_exitproc+0xa8>
  4072e8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4072ec:	6002      	str	r2, [r0, #0]
  4072ee:	2100      	movs	r1, #0
  4072f0:	6041      	str	r1, [r0, #4]
  4072f2:	460a      	mov	r2, r1
  4072f4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4072f8:	f04f 0e01 	mov.w	lr, #1
  4072fc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407300:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407304:	2e00      	cmp	r6, #0
  407306:	d0dc      	beq.n	4072c2 <__register_exitproc+0x4a>
  407308:	e7cc      	b.n	4072a4 <__register_exitproc+0x2c>
  40730a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40730e:	430c      	orrs	r4, r1
  407310:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407314:	e7d5      	b.n	4072c2 <__register_exitproc+0x4a>
  407316:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40731a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40731e:	e7bb      	b.n	407298 <__register_exitproc+0x20>
  407320:	6828      	ldr	r0, [r5, #0]
  407322:	f7ff fbd3 	bl	406acc <__retarget_lock_release_recursive>
  407326:	f04f 30ff 	mov.w	r0, #4294967295
  40732a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40732e:	bf00      	nop
  407330:	20400850 	.word	0x20400850
  407334:	004079ec 	.word	0x004079ec
  407338:	004048ad 	.word	0x004048ad

0040733c <_close_r>:
  40733c:	b538      	push	{r3, r4, r5, lr}
  40733e:	4c07      	ldr	r4, [pc, #28]	; (40735c <_close_r+0x20>)
  407340:	2300      	movs	r3, #0
  407342:	4605      	mov	r5, r0
  407344:	4608      	mov	r0, r1
  407346:	6023      	str	r3, [r4, #0]
  407348:	f7fa fb66 	bl	401a18 <_close>
  40734c:	1c43      	adds	r3, r0, #1
  40734e:	d000      	beq.n	407352 <_close_r+0x16>
  407350:	bd38      	pop	{r3, r4, r5, pc}
  407352:	6823      	ldr	r3, [r4, #0]
  407354:	2b00      	cmp	r3, #0
  407356:	d0fb      	beq.n	407350 <_close_r+0x14>
  407358:	602b      	str	r3, [r5, #0]
  40735a:	bd38      	pop	{r3, r4, r5, pc}
  40735c:	20400ee8 	.word	0x20400ee8

00407360 <_fclose_r>:
  407360:	b570      	push	{r4, r5, r6, lr}
  407362:	b159      	cbz	r1, 40737c <_fclose_r+0x1c>
  407364:	4605      	mov	r5, r0
  407366:	460c      	mov	r4, r1
  407368:	b110      	cbz	r0, 407370 <_fclose_r+0x10>
  40736a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40736c:	2b00      	cmp	r3, #0
  40736e:	d03c      	beq.n	4073ea <_fclose_r+0x8a>
  407370:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407372:	07d8      	lsls	r0, r3, #31
  407374:	d505      	bpl.n	407382 <_fclose_r+0x22>
  407376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40737a:	b92b      	cbnz	r3, 407388 <_fclose_r+0x28>
  40737c:	2600      	movs	r6, #0
  40737e:	4630      	mov	r0, r6
  407380:	bd70      	pop	{r4, r5, r6, pc}
  407382:	89a3      	ldrh	r3, [r4, #12]
  407384:	0599      	lsls	r1, r3, #22
  407386:	d53c      	bpl.n	407402 <_fclose_r+0xa2>
  407388:	4621      	mov	r1, r4
  40738a:	4628      	mov	r0, r5
  40738c:	f7fe fee4 	bl	406158 <__sflush_r>
  407390:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407392:	4606      	mov	r6, r0
  407394:	b133      	cbz	r3, 4073a4 <_fclose_r+0x44>
  407396:	69e1      	ldr	r1, [r4, #28]
  407398:	4628      	mov	r0, r5
  40739a:	4798      	blx	r3
  40739c:	2800      	cmp	r0, #0
  40739e:	bfb8      	it	lt
  4073a0:	f04f 36ff 	movlt.w	r6, #4294967295
  4073a4:	89a3      	ldrh	r3, [r4, #12]
  4073a6:	061a      	lsls	r2, r3, #24
  4073a8:	d422      	bmi.n	4073f0 <_fclose_r+0x90>
  4073aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4073ac:	b141      	cbz	r1, 4073c0 <_fclose_r+0x60>
  4073ae:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4073b2:	4299      	cmp	r1, r3
  4073b4:	d002      	beq.n	4073bc <_fclose_r+0x5c>
  4073b6:	4628      	mov	r0, r5
  4073b8:	f7ff f8ec 	bl	406594 <_free_r>
  4073bc:	2300      	movs	r3, #0
  4073be:	6323      	str	r3, [r4, #48]	; 0x30
  4073c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4073c2:	b121      	cbz	r1, 4073ce <_fclose_r+0x6e>
  4073c4:	4628      	mov	r0, r5
  4073c6:	f7ff f8e5 	bl	406594 <_free_r>
  4073ca:	2300      	movs	r3, #0
  4073cc:	6463      	str	r3, [r4, #68]	; 0x44
  4073ce:	f7fe ffe7 	bl	4063a0 <__sfp_lock_acquire>
  4073d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4073d4:	2200      	movs	r2, #0
  4073d6:	07db      	lsls	r3, r3, #31
  4073d8:	81a2      	strh	r2, [r4, #12]
  4073da:	d50e      	bpl.n	4073fa <_fclose_r+0x9a>
  4073dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4073de:	f7ff fb71 	bl	406ac4 <__retarget_lock_close_recursive>
  4073e2:	f7fe ffe3 	bl	4063ac <__sfp_lock_release>
  4073e6:	4630      	mov	r0, r6
  4073e8:	bd70      	pop	{r4, r5, r6, pc}
  4073ea:	f7fe ffad 	bl	406348 <__sinit>
  4073ee:	e7bf      	b.n	407370 <_fclose_r+0x10>
  4073f0:	6921      	ldr	r1, [r4, #16]
  4073f2:	4628      	mov	r0, r5
  4073f4:	f7ff f8ce 	bl	406594 <_free_r>
  4073f8:	e7d7      	b.n	4073aa <_fclose_r+0x4a>
  4073fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4073fc:	f7ff fb66 	bl	406acc <__retarget_lock_release_recursive>
  407400:	e7ec      	b.n	4073dc <_fclose_r+0x7c>
  407402:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407404:	f7ff fb60 	bl	406ac8 <__retarget_lock_acquire_recursive>
  407408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40740c:	2b00      	cmp	r3, #0
  40740e:	d1bb      	bne.n	407388 <_fclose_r+0x28>
  407410:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407412:	f016 0601 	ands.w	r6, r6, #1
  407416:	d1b1      	bne.n	40737c <_fclose_r+0x1c>
  407418:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40741a:	f7ff fb57 	bl	406acc <__retarget_lock_release_recursive>
  40741e:	4630      	mov	r0, r6
  407420:	bd70      	pop	{r4, r5, r6, pc}
  407422:	bf00      	nop

00407424 <_fstat_r>:
  407424:	b538      	push	{r3, r4, r5, lr}
  407426:	460b      	mov	r3, r1
  407428:	4c07      	ldr	r4, [pc, #28]	; (407448 <_fstat_r+0x24>)
  40742a:	4605      	mov	r5, r0
  40742c:	4611      	mov	r1, r2
  40742e:	4618      	mov	r0, r3
  407430:	2300      	movs	r3, #0
  407432:	6023      	str	r3, [r4, #0]
  407434:	f7fa faf3 	bl	401a1e <_fstat>
  407438:	1c43      	adds	r3, r0, #1
  40743a:	d000      	beq.n	40743e <_fstat_r+0x1a>
  40743c:	bd38      	pop	{r3, r4, r5, pc}
  40743e:	6823      	ldr	r3, [r4, #0]
  407440:	2b00      	cmp	r3, #0
  407442:	d0fb      	beq.n	40743c <_fstat_r+0x18>
  407444:	602b      	str	r3, [r5, #0]
  407446:	bd38      	pop	{r3, r4, r5, pc}
  407448:	20400ee8 	.word	0x20400ee8

0040744c <_isatty_r>:
  40744c:	b538      	push	{r3, r4, r5, lr}
  40744e:	4c07      	ldr	r4, [pc, #28]	; (40746c <_isatty_r+0x20>)
  407450:	2300      	movs	r3, #0
  407452:	4605      	mov	r5, r0
  407454:	4608      	mov	r0, r1
  407456:	6023      	str	r3, [r4, #0]
  407458:	f7fa fae6 	bl	401a28 <_isatty>
  40745c:	1c43      	adds	r3, r0, #1
  40745e:	d000      	beq.n	407462 <_isatty_r+0x16>
  407460:	bd38      	pop	{r3, r4, r5, pc}
  407462:	6823      	ldr	r3, [r4, #0]
  407464:	2b00      	cmp	r3, #0
  407466:	d0fb      	beq.n	407460 <_isatty_r+0x14>
  407468:	602b      	str	r3, [r5, #0]
  40746a:	bd38      	pop	{r3, r4, r5, pc}
  40746c:	20400ee8 	.word	0x20400ee8

00407470 <_lseek_r>:
  407470:	b570      	push	{r4, r5, r6, lr}
  407472:	460d      	mov	r5, r1
  407474:	4c08      	ldr	r4, [pc, #32]	; (407498 <_lseek_r+0x28>)
  407476:	4611      	mov	r1, r2
  407478:	4606      	mov	r6, r0
  40747a:	461a      	mov	r2, r3
  40747c:	4628      	mov	r0, r5
  40747e:	2300      	movs	r3, #0
  407480:	6023      	str	r3, [r4, #0]
  407482:	f7fa fad3 	bl	401a2c <_lseek>
  407486:	1c43      	adds	r3, r0, #1
  407488:	d000      	beq.n	40748c <_lseek_r+0x1c>
  40748a:	bd70      	pop	{r4, r5, r6, pc}
  40748c:	6823      	ldr	r3, [r4, #0]
  40748e:	2b00      	cmp	r3, #0
  407490:	d0fb      	beq.n	40748a <_lseek_r+0x1a>
  407492:	6033      	str	r3, [r6, #0]
  407494:	bd70      	pop	{r4, r5, r6, pc}
  407496:	bf00      	nop
  407498:	20400ee8 	.word	0x20400ee8

0040749c <_read_r>:
  40749c:	b570      	push	{r4, r5, r6, lr}
  40749e:	460d      	mov	r5, r1
  4074a0:	4c08      	ldr	r4, [pc, #32]	; (4074c4 <_read_r+0x28>)
  4074a2:	4611      	mov	r1, r2
  4074a4:	4606      	mov	r6, r0
  4074a6:	461a      	mov	r2, r3
  4074a8:	4628      	mov	r0, r5
  4074aa:	2300      	movs	r3, #0
  4074ac:	6023      	str	r3, [r4, #0]
  4074ae:	f7f9 fd75 	bl	400f9c <_read>
  4074b2:	1c43      	adds	r3, r0, #1
  4074b4:	d000      	beq.n	4074b8 <_read_r+0x1c>
  4074b6:	bd70      	pop	{r4, r5, r6, pc}
  4074b8:	6823      	ldr	r3, [r4, #0]
  4074ba:	2b00      	cmp	r3, #0
  4074bc:	d0fb      	beq.n	4074b6 <_read_r+0x1a>
  4074be:	6033      	str	r3, [r6, #0]
  4074c0:	bd70      	pop	{r4, r5, r6, pc}
  4074c2:	bf00      	nop
  4074c4:	20400ee8 	.word	0x20400ee8

004074c8 <__aeabi_uldivmod>:
  4074c8:	b953      	cbnz	r3, 4074e0 <__aeabi_uldivmod+0x18>
  4074ca:	b94a      	cbnz	r2, 4074e0 <__aeabi_uldivmod+0x18>
  4074cc:	2900      	cmp	r1, #0
  4074ce:	bf08      	it	eq
  4074d0:	2800      	cmpeq	r0, #0
  4074d2:	bf1c      	itt	ne
  4074d4:	f04f 31ff 	movne.w	r1, #4294967295
  4074d8:	f04f 30ff 	movne.w	r0, #4294967295
  4074dc:	f000 b97a 	b.w	4077d4 <__aeabi_idiv0>
  4074e0:	f1ad 0c08 	sub.w	ip, sp, #8
  4074e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4074e8:	f000 f806 	bl	4074f8 <__udivmoddi4>
  4074ec:	f8dd e004 	ldr.w	lr, [sp, #4]
  4074f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4074f4:	b004      	add	sp, #16
  4074f6:	4770      	bx	lr

004074f8 <__udivmoddi4>:
  4074f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4074fc:	468c      	mov	ip, r1
  4074fe:	460d      	mov	r5, r1
  407500:	4604      	mov	r4, r0
  407502:	9e08      	ldr	r6, [sp, #32]
  407504:	2b00      	cmp	r3, #0
  407506:	d151      	bne.n	4075ac <__udivmoddi4+0xb4>
  407508:	428a      	cmp	r2, r1
  40750a:	4617      	mov	r7, r2
  40750c:	d96d      	bls.n	4075ea <__udivmoddi4+0xf2>
  40750e:	fab2 fe82 	clz	lr, r2
  407512:	f1be 0f00 	cmp.w	lr, #0
  407516:	d00b      	beq.n	407530 <__udivmoddi4+0x38>
  407518:	f1ce 0c20 	rsb	ip, lr, #32
  40751c:	fa01 f50e 	lsl.w	r5, r1, lr
  407520:	fa20 fc0c 	lsr.w	ip, r0, ip
  407524:	fa02 f70e 	lsl.w	r7, r2, lr
  407528:	ea4c 0c05 	orr.w	ip, ip, r5
  40752c:	fa00 f40e 	lsl.w	r4, r0, lr
  407530:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  407534:	0c25      	lsrs	r5, r4, #16
  407536:	fbbc f8fa 	udiv	r8, ip, sl
  40753a:	fa1f f987 	uxth.w	r9, r7
  40753e:	fb0a cc18 	mls	ip, sl, r8, ip
  407542:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  407546:	fb08 f309 	mul.w	r3, r8, r9
  40754a:	42ab      	cmp	r3, r5
  40754c:	d90a      	bls.n	407564 <__udivmoddi4+0x6c>
  40754e:	19ed      	adds	r5, r5, r7
  407550:	f108 32ff 	add.w	r2, r8, #4294967295
  407554:	f080 8123 	bcs.w	40779e <__udivmoddi4+0x2a6>
  407558:	42ab      	cmp	r3, r5
  40755a:	f240 8120 	bls.w	40779e <__udivmoddi4+0x2a6>
  40755e:	f1a8 0802 	sub.w	r8, r8, #2
  407562:	443d      	add	r5, r7
  407564:	1aed      	subs	r5, r5, r3
  407566:	b2a4      	uxth	r4, r4
  407568:	fbb5 f0fa 	udiv	r0, r5, sl
  40756c:	fb0a 5510 	mls	r5, sl, r0, r5
  407570:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  407574:	fb00 f909 	mul.w	r9, r0, r9
  407578:	45a1      	cmp	r9, r4
  40757a:	d909      	bls.n	407590 <__udivmoddi4+0x98>
  40757c:	19e4      	adds	r4, r4, r7
  40757e:	f100 33ff 	add.w	r3, r0, #4294967295
  407582:	f080 810a 	bcs.w	40779a <__udivmoddi4+0x2a2>
  407586:	45a1      	cmp	r9, r4
  407588:	f240 8107 	bls.w	40779a <__udivmoddi4+0x2a2>
  40758c:	3802      	subs	r0, #2
  40758e:	443c      	add	r4, r7
  407590:	eba4 0409 	sub.w	r4, r4, r9
  407594:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407598:	2100      	movs	r1, #0
  40759a:	2e00      	cmp	r6, #0
  40759c:	d061      	beq.n	407662 <__udivmoddi4+0x16a>
  40759e:	fa24 f40e 	lsr.w	r4, r4, lr
  4075a2:	2300      	movs	r3, #0
  4075a4:	6034      	str	r4, [r6, #0]
  4075a6:	6073      	str	r3, [r6, #4]
  4075a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4075ac:	428b      	cmp	r3, r1
  4075ae:	d907      	bls.n	4075c0 <__udivmoddi4+0xc8>
  4075b0:	2e00      	cmp	r6, #0
  4075b2:	d054      	beq.n	40765e <__udivmoddi4+0x166>
  4075b4:	2100      	movs	r1, #0
  4075b6:	e886 0021 	stmia.w	r6, {r0, r5}
  4075ba:	4608      	mov	r0, r1
  4075bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4075c0:	fab3 f183 	clz	r1, r3
  4075c4:	2900      	cmp	r1, #0
  4075c6:	f040 808e 	bne.w	4076e6 <__udivmoddi4+0x1ee>
  4075ca:	42ab      	cmp	r3, r5
  4075cc:	d302      	bcc.n	4075d4 <__udivmoddi4+0xdc>
  4075ce:	4282      	cmp	r2, r0
  4075d0:	f200 80fa 	bhi.w	4077c8 <__udivmoddi4+0x2d0>
  4075d4:	1a84      	subs	r4, r0, r2
  4075d6:	eb65 0503 	sbc.w	r5, r5, r3
  4075da:	2001      	movs	r0, #1
  4075dc:	46ac      	mov	ip, r5
  4075de:	2e00      	cmp	r6, #0
  4075e0:	d03f      	beq.n	407662 <__udivmoddi4+0x16a>
  4075e2:	e886 1010 	stmia.w	r6, {r4, ip}
  4075e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4075ea:	b912      	cbnz	r2, 4075f2 <__udivmoddi4+0xfa>
  4075ec:	2701      	movs	r7, #1
  4075ee:	fbb7 f7f2 	udiv	r7, r7, r2
  4075f2:	fab7 fe87 	clz	lr, r7
  4075f6:	f1be 0f00 	cmp.w	lr, #0
  4075fa:	d134      	bne.n	407666 <__udivmoddi4+0x16e>
  4075fc:	1beb      	subs	r3, r5, r7
  4075fe:	0c3a      	lsrs	r2, r7, #16
  407600:	fa1f fc87 	uxth.w	ip, r7
  407604:	2101      	movs	r1, #1
  407606:	fbb3 f8f2 	udiv	r8, r3, r2
  40760a:	0c25      	lsrs	r5, r4, #16
  40760c:	fb02 3318 	mls	r3, r2, r8, r3
  407610:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407614:	fb0c f308 	mul.w	r3, ip, r8
  407618:	42ab      	cmp	r3, r5
  40761a:	d907      	bls.n	40762c <__udivmoddi4+0x134>
  40761c:	19ed      	adds	r5, r5, r7
  40761e:	f108 30ff 	add.w	r0, r8, #4294967295
  407622:	d202      	bcs.n	40762a <__udivmoddi4+0x132>
  407624:	42ab      	cmp	r3, r5
  407626:	f200 80d1 	bhi.w	4077cc <__udivmoddi4+0x2d4>
  40762a:	4680      	mov	r8, r0
  40762c:	1aed      	subs	r5, r5, r3
  40762e:	b2a3      	uxth	r3, r4
  407630:	fbb5 f0f2 	udiv	r0, r5, r2
  407634:	fb02 5510 	mls	r5, r2, r0, r5
  407638:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40763c:	fb0c fc00 	mul.w	ip, ip, r0
  407640:	45a4      	cmp	ip, r4
  407642:	d907      	bls.n	407654 <__udivmoddi4+0x15c>
  407644:	19e4      	adds	r4, r4, r7
  407646:	f100 33ff 	add.w	r3, r0, #4294967295
  40764a:	d202      	bcs.n	407652 <__udivmoddi4+0x15a>
  40764c:	45a4      	cmp	ip, r4
  40764e:	f200 80b8 	bhi.w	4077c2 <__udivmoddi4+0x2ca>
  407652:	4618      	mov	r0, r3
  407654:	eba4 040c 	sub.w	r4, r4, ip
  407658:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40765c:	e79d      	b.n	40759a <__udivmoddi4+0xa2>
  40765e:	4631      	mov	r1, r6
  407660:	4630      	mov	r0, r6
  407662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407666:	f1ce 0420 	rsb	r4, lr, #32
  40766a:	fa05 f30e 	lsl.w	r3, r5, lr
  40766e:	fa07 f70e 	lsl.w	r7, r7, lr
  407672:	fa20 f804 	lsr.w	r8, r0, r4
  407676:	0c3a      	lsrs	r2, r7, #16
  407678:	fa25 f404 	lsr.w	r4, r5, r4
  40767c:	ea48 0803 	orr.w	r8, r8, r3
  407680:	fbb4 f1f2 	udiv	r1, r4, r2
  407684:	ea4f 4518 	mov.w	r5, r8, lsr #16
  407688:	fb02 4411 	mls	r4, r2, r1, r4
  40768c:	fa1f fc87 	uxth.w	ip, r7
  407690:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  407694:	fb01 f30c 	mul.w	r3, r1, ip
  407698:	42ab      	cmp	r3, r5
  40769a:	fa00 f40e 	lsl.w	r4, r0, lr
  40769e:	d909      	bls.n	4076b4 <__udivmoddi4+0x1bc>
  4076a0:	19ed      	adds	r5, r5, r7
  4076a2:	f101 30ff 	add.w	r0, r1, #4294967295
  4076a6:	f080 808a 	bcs.w	4077be <__udivmoddi4+0x2c6>
  4076aa:	42ab      	cmp	r3, r5
  4076ac:	f240 8087 	bls.w	4077be <__udivmoddi4+0x2c6>
  4076b0:	3902      	subs	r1, #2
  4076b2:	443d      	add	r5, r7
  4076b4:	1aeb      	subs	r3, r5, r3
  4076b6:	fa1f f588 	uxth.w	r5, r8
  4076ba:	fbb3 f0f2 	udiv	r0, r3, r2
  4076be:	fb02 3310 	mls	r3, r2, r0, r3
  4076c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4076c6:	fb00 f30c 	mul.w	r3, r0, ip
  4076ca:	42ab      	cmp	r3, r5
  4076cc:	d907      	bls.n	4076de <__udivmoddi4+0x1e6>
  4076ce:	19ed      	adds	r5, r5, r7
  4076d0:	f100 38ff 	add.w	r8, r0, #4294967295
  4076d4:	d26f      	bcs.n	4077b6 <__udivmoddi4+0x2be>
  4076d6:	42ab      	cmp	r3, r5
  4076d8:	d96d      	bls.n	4077b6 <__udivmoddi4+0x2be>
  4076da:	3802      	subs	r0, #2
  4076dc:	443d      	add	r5, r7
  4076de:	1aeb      	subs	r3, r5, r3
  4076e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4076e4:	e78f      	b.n	407606 <__udivmoddi4+0x10e>
  4076e6:	f1c1 0720 	rsb	r7, r1, #32
  4076ea:	fa22 f807 	lsr.w	r8, r2, r7
  4076ee:	408b      	lsls	r3, r1
  4076f0:	fa05 f401 	lsl.w	r4, r5, r1
  4076f4:	ea48 0303 	orr.w	r3, r8, r3
  4076f8:	fa20 fe07 	lsr.w	lr, r0, r7
  4076fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  407700:	40fd      	lsrs	r5, r7
  407702:	ea4e 0e04 	orr.w	lr, lr, r4
  407706:	fbb5 f9fc 	udiv	r9, r5, ip
  40770a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40770e:	fb0c 5519 	mls	r5, ip, r9, r5
  407712:	fa1f f883 	uxth.w	r8, r3
  407716:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40771a:	fb09 f408 	mul.w	r4, r9, r8
  40771e:	42ac      	cmp	r4, r5
  407720:	fa02 f201 	lsl.w	r2, r2, r1
  407724:	fa00 fa01 	lsl.w	sl, r0, r1
  407728:	d908      	bls.n	40773c <__udivmoddi4+0x244>
  40772a:	18ed      	adds	r5, r5, r3
  40772c:	f109 30ff 	add.w	r0, r9, #4294967295
  407730:	d243      	bcs.n	4077ba <__udivmoddi4+0x2c2>
  407732:	42ac      	cmp	r4, r5
  407734:	d941      	bls.n	4077ba <__udivmoddi4+0x2c2>
  407736:	f1a9 0902 	sub.w	r9, r9, #2
  40773a:	441d      	add	r5, r3
  40773c:	1b2d      	subs	r5, r5, r4
  40773e:	fa1f fe8e 	uxth.w	lr, lr
  407742:	fbb5 f0fc 	udiv	r0, r5, ip
  407746:	fb0c 5510 	mls	r5, ip, r0, r5
  40774a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40774e:	fb00 f808 	mul.w	r8, r0, r8
  407752:	45a0      	cmp	r8, r4
  407754:	d907      	bls.n	407766 <__udivmoddi4+0x26e>
  407756:	18e4      	adds	r4, r4, r3
  407758:	f100 35ff 	add.w	r5, r0, #4294967295
  40775c:	d229      	bcs.n	4077b2 <__udivmoddi4+0x2ba>
  40775e:	45a0      	cmp	r8, r4
  407760:	d927      	bls.n	4077b2 <__udivmoddi4+0x2ba>
  407762:	3802      	subs	r0, #2
  407764:	441c      	add	r4, r3
  407766:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40776a:	eba4 0408 	sub.w	r4, r4, r8
  40776e:	fba0 8902 	umull	r8, r9, r0, r2
  407772:	454c      	cmp	r4, r9
  407774:	46c6      	mov	lr, r8
  407776:	464d      	mov	r5, r9
  407778:	d315      	bcc.n	4077a6 <__udivmoddi4+0x2ae>
  40777a:	d012      	beq.n	4077a2 <__udivmoddi4+0x2aa>
  40777c:	b156      	cbz	r6, 407794 <__udivmoddi4+0x29c>
  40777e:	ebba 030e 	subs.w	r3, sl, lr
  407782:	eb64 0405 	sbc.w	r4, r4, r5
  407786:	fa04 f707 	lsl.w	r7, r4, r7
  40778a:	40cb      	lsrs	r3, r1
  40778c:	431f      	orrs	r7, r3
  40778e:	40cc      	lsrs	r4, r1
  407790:	6037      	str	r7, [r6, #0]
  407792:	6074      	str	r4, [r6, #4]
  407794:	2100      	movs	r1, #0
  407796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40779a:	4618      	mov	r0, r3
  40779c:	e6f8      	b.n	407590 <__udivmoddi4+0x98>
  40779e:	4690      	mov	r8, r2
  4077a0:	e6e0      	b.n	407564 <__udivmoddi4+0x6c>
  4077a2:	45c2      	cmp	sl, r8
  4077a4:	d2ea      	bcs.n	40777c <__udivmoddi4+0x284>
  4077a6:	ebb8 0e02 	subs.w	lr, r8, r2
  4077aa:	eb69 0503 	sbc.w	r5, r9, r3
  4077ae:	3801      	subs	r0, #1
  4077b0:	e7e4      	b.n	40777c <__udivmoddi4+0x284>
  4077b2:	4628      	mov	r0, r5
  4077b4:	e7d7      	b.n	407766 <__udivmoddi4+0x26e>
  4077b6:	4640      	mov	r0, r8
  4077b8:	e791      	b.n	4076de <__udivmoddi4+0x1e6>
  4077ba:	4681      	mov	r9, r0
  4077bc:	e7be      	b.n	40773c <__udivmoddi4+0x244>
  4077be:	4601      	mov	r1, r0
  4077c0:	e778      	b.n	4076b4 <__udivmoddi4+0x1bc>
  4077c2:	3802      	subs	r0, #2
  4077c4:	443c      	add	r4, r7
  4077c6:	e745      	b.n	407654 <__udivmoddi4+0x15c>
  4077c8:	4608      	mov	r0, r1
  4077ca:	e708      	b.n	4075de <__udivmoddi4+0xe6>
  4077cc:	f1a8 0802 	sub.w	r8, r8, #2
  4077d0:	443d      	add	r5, r7
  4077d2:	e72b      	b.n	40762c <__udivmoddi4+0x134>

004077d4 <__aeabi_idiv0>:
  4077d4:	4770      	bx	lr
  4077d6:	bf00      	nop
  4077d8:	454c4449 	.word	0x454c4449
  4077dc:	00000000 	.word	0x00000000
  4077e0:	51726d54 	.word	0x51726d54
  4077e4:	00000000 	.word	0x00000000
  4077e8:	20726d54 	.word	0x20726d54
  4077ec:	00637653 	.word	0x00637653
  4077f0:	000007e2 	.word	0x000007e2
  4077f4:	00000003 	.word	0x00000003
  4077f8:	00000013 	.word	0x00000013
  4077fc:	0000000c 	.word	0x0000000c
  407800:	0000000f 	.word	0x0000000f
  407804:	0000002d 	.word	0x0000002d
  407808:	00000001 	.word	0x00000001
  40780c:	686c6166 	.word	0x686c6166
  407810:	6d652061 	.word	0x6d652061
  407814:	69726320 	.word	0x69726320
  407818:	6f207261 	.word	0x6f207261
  40781c:	6d657320 	.word	0x6d657320
  407820:	726f6661 	.word	0x726f6661
  407824:	000a206f 	.word	0x000a206f
  407828:	64656c6f 	.word	0x64656c6f
  40782c:	00000000 	.word	0x00000000
  407830:	6c696146 	.word	0x6c696146
  407834:	74206465 	.word	0x74206465
  407838:	7263206f 	.word	0x7263206f
  40783c:	65746165 	.word	0x65746165
  407840:	656c6f20 	.word	0x656c6f20
  407844:	61742064 	.word	0x61742064
  407848:	0a0d6b73 	.word	0x0a0d6b73
  40784c:	00000000 	.word	0x00000000
  407850:	63656661 	.word	0x63656661
  407854:	00000000 	.word	0x00000000
  407858:	6c696146 	.word	0x6c696146
  40785c:	74206465 	.word	0x74206465
  407860:	7263206f 	.word	0x7263206f
  407864:	65746165 	.word	0x65746165
  407868:	65666120 	.word	0x65666120
  40786c:	61742063 	.word	0x61742063
  407870:	0a0d6b73 	.word	0x0a0d6b73
  407874:	00000000 	.word	0x00000000
  407878:	63656661 	.word	0x63656661
  40787c:	00000032 	.word	0x00000032
  407880:	6c696146 	.word	0x6c696146
  407884:	74206465 	.word	0x74206465
  407888:	7263206f 	.word	0x7263206f
  40788c:	65746165 	.word	0x65746165
  407890:	65666120 	.word	0x65666120
  407894:	74203263 	.word	0x74203263
  407898:	0d6b7361 	.word	0x0d6b7361
  40789c:	0000000a 	.word	0x0000000a
  4078a0:	6c696146 	.word	0x6c696146
  4078a4:	74206465 	.word	0x74206465
  4078a8:	7263206f 	.word	0x7263206f
  4078ac:	65746165 	.word	0x65746165
  4078b0:	45564520 	.word	0x45564520
  4078b4:	7420544e 	.word	0x7420544e
  4078b8:	0d6b7361 	.word	0x0d6b7361
  4078bc:	0000000a 	.word	0x0000000a
  4078c0:	52414c41 	.word	0x52414c41
  4078c4:	0000004d 	.word	0x0000004d
  4078c8:	6c696146 	.word	0x6c696146
  4078cc:	74206465 	.word	0x74206465
  4078d0:	7263206f 	.word	0x7263206f
  4078d4:	65746165 	.word	0x65746165
  4078d8:	414c4120 	.word	0x414c4120
  4078dc:	74204d52 	.word	0x74204d52
  4078e0:	0d6b7361 	.word	0x0d6b7361
  4078e4:	0000000a 	.word	0x0000000a
  4078e8:	4546415b 	.word	0x4546415b
  4078ec:	205d3143 	.word	0x205d3143
  4078f0:	64323025 	.word	0x64323025
  4078f4:	3230253a 	.word	0x3230253a
  4078f8:	30253a64 	.word	0x30253a64
  4078fc:	25206434 	.word	0x25206434
  407900:	3a643230 	.word	0x3a643230
  407904:	64323025 	.word	0x64323025
  407908:	3230253a 	.word	0x3230253a
  40790c:	25242064 	.word	0x25242064
  407910:	00000a64 	.word	0x00000a64
  407914:	206f614e 	.word	0x206f614e
  407918:	67656863 	.word	0x67656863
  40791c:	7520756f 	.word	0x7520756f
  407920:	6f6e206d 	.word	0x6f6e206d
  407924:	64206f76 	.word	0x64206f76
  407928:	206f6461 	.word	0x206f6461
  40792c:	31206d65 	.word	0x31206d65
  407930:	67657320 	.word	0x67657320
  407934:	6f646e75 	.word	0x6f646e75
  407938:	00000000 	.word	0x00000000
  40793c:	4546415b 	.word	0x4546415b
  407940:	205d3243 	.word	0x205d3243
  407944:	64323025 	.word	0x64323025
  407948:	3230253a 	.word	0x3230253a
  40794c:	30253a64 	.word	0x30253a64
  407950:	25206434 	.word	0x25206434
  407954:	3a643230 	.word	0x3a643230
  407958:	64323025 	.word	0x64323025
  40795c:	3230253a 	.word	0x3230253a
  407960:	25242064 	.word	0x25242064
  407964:	00000a64 	.word	0x00000a64
  407968:	414c415b 	.word	0x414c415b
  40796c:	205d4d52 	.word	0x205d4d52
  407970:	64323025 	.word	0x64323025
  407974:	3230253a 	.word	0x3230253a
  407978:	30253a64 	.word	0x30253a64
  40797c:	25206434 	.word	0x25206434
  407980:	3a643230 	.word	0x3a643230
  407984:	64323025 	.word	0x64323025
  407988:	3230253a 	.word	0x3230253a
  40798c:	25242064 	.word	0x25242064
  407990:	00000a73 	.word	0x00000a73
  407994:	4e455645 	.word	0x4e455645
  407998:	00000054 	.word	0x00000054
  40799c:	43454641 	.word	0x43454641
  4079a0:	00000000 	.word	0x00000000
  4079a4:	4556455b 	.word	0x4556455b
  4079a8:	205d544e 	.word	0x205d544e
  4079ac:	64323025 	.word	0x64323025
  4079b0:	3230253a 	.word	0x3230253a
  4079b4:	30253a64 	.word	0x30253a64
  4079b8:	25206434 	.word	0x25206434
  4079bc:	3a643230 	.word	0x3a643230
  4079c0:	64323025 	.word	0x64323025
  4079c4:	3230253a 	.word	0x3230253a
  4079c8:	25242064 	.word	0x25242064
  4079cc:	64253a63 	.word	0x64253a63
  4079d0:	0000000a 	.word	0x0000000a
  4079d4:	63617473 	.word	0x63617473
  4079d8:	766f206b 	.word	0x766f206b
  4079dc:	6c667265 	.word	0x6c667265
  4079e0:	2520776f 	.word	0x2520776f
  4079e4:	73252078 	.word	0x73252078
  4079e8:	00000a0d 	.word	0x00000a0d

004079ec <_global_impure_ptr>:
  4079ec:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  4079fc:	46454443 00000000 33323130 37363534     CDEF....01234567
  407a0c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  407a1c:	0000296c                                l)..

00407a20 <blanks.7217>:
  407a20:	20202020 20202020 20202020 20202020                     

00407a30 <zeroes.7218>:
  407a30:	30303030 30303030 30303030 30303030     0000000000000000
  407a40:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00407a50 <_ctype_>:
  407a50:	20202000 20202020 28282020 20282828     .         ((((( 
  407a60:	20202020 20202020 20202020 20202020                     
  407a70:	10108820 10101010 10101010 10101010      ...............
  407a80:	04040410 04040404 10040404 10101010     ................
  407a90:	41411010 41414141 01010101 01010101     ..AAAAAA........
  407aa0:	01010101 01010101 01010101 10101010     ................
  407ab0:	42421010 42424242 02020202 02020202     ..BBBBBB........
  407ac0:	02020202 02020202 02020202 10101010     ................
  407ad0:	00000020 00000000 00000000 00000000      ...............
	...

00407b54 <_init>:
  407b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407b56:	bf00      	nop
  407b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407b5a:	bc08      	pop	{r3}
  407b5c:	469e      	mov	lr, r3
  407b5e:	4770      	bx	lr

00407b60 <__init_array_start>:
  407b60:	00406139 	.word	0x00406139

00407b64 <__frame_dummy_init_array_entry>:
  407b64:	00400165                                e.@.

00407b68 <_fini>:
  407b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407b6a:	bf00      	nop
  407b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407b6e:	bc08      	pop	{r3}
  407b70:	469e      	mov	lr, r3
  407b72:	4770      	bx	lr

00407b74 <__fini_array_start>:
  407b74:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <_impure_ptr>:
20400014:	0018 2040                                   ..@ 

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__malloc_av_>:
	...
20400448:	0440 2040 0440 2040 0448 2040 0448 2040     @.@ @.@ H.@ H.@ 
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 

20400848 <__malloc_sbrk_base>:
20400848:	ffff ffff                                   ....

2040084c <__malloc_trim_threshold>:
2040084c:	0000 0002                                   ....

20400850 <__atexit_recursive_mutex>:
20400850:	0ec4 2040                                   ..@ 

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	7231 0040 6bc1 0040 0000 0000 7a50 0040     1r@..k@.....Pz@.
20400944:	7a4c 0040 7874 0040 7874 0040 7874 0040     Lz@.tx@.tx@.tx@.
20400954:	7874 0040 7874 0040 7874 0040 7874 0040     tx@.tx@.tx@.tx@.
20400964:	7874 0040 7874 0040 ffff ffff ffff ffff     tx@.tx@.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
